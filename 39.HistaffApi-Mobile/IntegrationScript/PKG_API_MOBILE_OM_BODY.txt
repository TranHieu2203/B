CREATE OR REPLACE PACKAGE BODY PKG_API_MOBILE
AS

  FUNCTION API_FN_HASH(
          p_string varchar2,
          p_method varchar2 default 'SHA1'
  ) return varchar2 is
      v_method number;
      v_invalid_identifier exception;
      pragma exception_init(v_invalid_identifier, -904);
  begin
      --Intentionally case-sensitive, just like the 12c version.
      if p_method = 'SHA1' then
          v_method := dbms_crypto.hash_sh1;
      --These algorithms are only available in 12c and above.
      $IF NOT DBMS_DB_VERSION.VER_LE_11 $THEN
          elsif p_method = 'SHA256' then
              v_method := dbms_crypto.hash_sh256;
          elsif p_method = 'SHA384' then
              v_method := dbms_crypto.hash_sh384;
          elsif p_method = 'SHA512' then
              v_method := dbms_crypto.hash_sh512;
      $END
      elsif p_method = 'MD5' then
          v_method := dbms_crypto.hash_md5;
      ELSE
          raise v_invalid_identifier;
      end if;

      return rawToHex(dbms_crypto.hash(utl_raw.cast_to_raw(p_string), v_method));
  end;


  /*Convert number to date*/
  FUNCTION API_FN_CONVERTNUMBERTODATE
  (
    P_D IN NUMBER
  )
  RETURN DATE
  AS
    V_DIN NUMBER := P_D;
    V_D   VARCHAR2(30);
  BEGIN
    IF (V_DIN IS NULL) THEN
      V_DIN := 0;
      RETURN NULL;
    END IF;
    SELECT TO_CHAR(V_DIN) INTO V_D FROM DUAL;

    IF (LENGTH(V_D) = 6) THEN
      V_D := V_D || '01000000';
    END IF;

    IF (LENGTH(V_D) = 8) THEN
      V_D := V_D || '000000';
    END IF;

    RETURN TO_TIMESTAMP(V_D, 'YYYYMMDDHH24MISS');
  END;



  /*API_Shift_Calculate */
  PROCEDURE API_Shift_Calculate
  (
      v_WorkingDay IN DATE,
      v_StartDate IN NUMBER,
      v_EndDate IN NUMBER,
      v_ResultStart OUT NUMBER,
      v_ResultEnd OUT NUMBER
  )
  AS
  BEGIN
      v_ResultStart := NULL;
      v_ResultEnd := NULL;

      IF v_StartDate IS NOT NULL AND v_EndDate IS NOT NULL THEN
          DECLARE
              v_StartHour NVARCHAR2(10) := TO_CHAR(SUBSTR(v_StartDate, 9, 9));
              v_EndHour NVARCHAR2(10) := TO_CHAR(SUBSTR(v_EndDate, 9, 9));
              v_WorkingDate DATE := (v_WorkingDay);
          BEGIN
              v_ResultStart := TO_CHAR(SUBSTR(v_WorkingDay, 0, 8)) || v_StartHour;
              v_ResultEnd := TO_CHAR(SUBSTR(v_WorkingDay, 0, 8)) || v_EndHour;

              IF SUBSTR(v_StartDate, 0, 8) < SUBSTR(v_EndDate, 0, 8) THEN
                  v_WorkingDate := v_WorkingDate + 1;
                   SELECT TO_CHAR(SUBSTR(TO_NUMBER(TO_CHAR(v_WorkingDate, 'YYYYMMDDHH24MISS')),0,8)) || v_EndHour  INTO v_ResultEnd FROM dual;
                  --v_ResultEnd := TO_CHAR(SUBSTR(BOS.FN_ConvertDateToNumber(v_WorkingDate), 0, 8)) || v_EndHour;
              END IF;
          END;
      END IF;
  END;

  /*t?o access token*/
 /* PROCEDURE API_User_GenAccessToken
  (
    p_CompanyCode IN NVARCHAR2,
    p_UserID IN NUMBER,
    p_DeviceID IN NVARCHAR2,
    p_Token OUT NVARCHAR2,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  )
  AS
     v_UserID NUMBER(19,0) := p_UserID;
     v_CompanyCode NVARCHAR2(30) := p_CompanyCode;
     v_DeviceID NVARCHAR2(50) := p_DeviceID;
     v_Today DATE;
     v_SECRETKEY NVARCHAR2(256);
     v_TMP1 NUMBER(19,0);
     v_TMP2 NVARCHAR2(100);
     v_TMP NVARCHAR2(100);
     v_temp NUMBER(1, 0) := 0;
     v_StoreName NVARCHAR2(200) := 'API_User_GenAccessToken';

  BEGIN
     --\*TODO:SQLDEV*\ SET NOCOUNT, XACT_ABORT ON \*END:SQLDEV*\
     v_UserID := NVL(v_UserID, 0) ;
     v_CompanyCode := NVL(v_CompanyCode, ' ') ;
     v_Today := SYSDATE ;
     BEGIN
        BEGIN
           v_TMP1 := TO_NUMBER(TO_CHAR(v_Today, 'YYYYMMDDHH24MISS'));
           v_TMP := v_CompanyCode || '.' || TO_NCHAR(v_UserID) || '.' || v_DeviceID || '.' || TO_NCHAR(v_TMP1) ;
           --v_TMP2 := FN_Md5Encode(v_TMP) ;
           SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP2 FROM DUAL;
           p_Token := TO_NCHAR(v_TMP1) || '.' || v_TMP2 ;
           p_ResponseStatus := 1 ;
           p_Message := u'TokenIsCreated' ;

        END;
     EXCEPTION
        WHEN OTHERS THEN
       BEGIN
          p_Token := ' ' ;
          p_ResponseStatus := -99 ;
          p_Message := u'DatabaseError' ;
       END;
    END;
  --EXCEPTION WHEN OTHERS THEN utils.handleerror(SQLCODE,SQLERRM);
  END;*/

  /*Ki?m tra th?ng tin access token (C?n b? sung check t? DB v? h?t h?n)*/
	PROCEDURE API_User_CheckAccessToken
	(
	    p_CompanyCode IN NVARCHAR2,
	    p_UserID IN NUMBER,
	    p_DeviceID IN NVARCHAR2,
	    p_Language IN NVARCHAR2,
	    p_Token IN NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := p_UserID;
	    v_Token NVARCHAR2(50) := p_Token;
	    v_Language nvarchar2(20) := NVL(p_language,'vi-VN');
	    v__ERR_INVALID_ACCESSTOKEN NUMBER(10,0) := -102;
	    v__ERR_ACCOUNTTOKEN_TIMEOUT NUMBER(10,0) := -103;
	    v_Today TIMESTAMP;
	    v_TimeoutMinutes NUMBER(10,0);
	    v_TMP1 NUMBER(19,0);
	    v_TMP2 NVARCHAR2(100);
	    v_TMP_HASH nvarchar2(100);
	    v_TMP NVARCHAR2(100);
	    v_Status NUMBER(5,0);
	    v_TokenCountParam NUMERIC(5,0) := 0;
	    v_activeFlag nvarchar2(1) := '';
	BEGIN
	    v_UserID := NVL(v_UserID, 0) ;
	    v_Token := NVL(v_Token, ' ') ;
	    v_Today := SYSDATE ;
	    v_TimeoutMinutes := 525600;/* 525600 = 365 * 24 * 60   TO_NUMBER(FN_GetParamValue('TimeoutMinutes'));*/

	    -- Check Users
	    BEGIN
	        SELECT CASE when ACTFLG = 'A' THEN 1 ELSE 0 end  INTO v_Status 
	        FROM SE_USER WHERE  ID = v_UserID;   
	        EXCEPTION WHEN NO_DATA_FOUND THEN
	        BEGIN
	            p_Message := u'X\00e1c th\1ef1c kh\00f4ng h\1ee3p l\1ec7: d\1eef li\1ec7u ng\01b0\1eddi d\00f9ng kh\00f4ng h\1ee3p l\1ec7' ;
	            p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
	            RETURN;
	        END;
	    END;
	    v_Status := NVL(v_Status, -1);
	    IF ( v_Status < 1 ) THEN    
	        p_Message := u'X\00e1c th\1ef1c kh\00f4ng h\1ee3p l\1ec7: T\00e0i kho\1ea3n \0111\00e3 b\1ecb kh\00f3a' ;
	        p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
	        RETURN;    
	    END IF;
	    -- Check Token Param
	    BEGIN
	        WITH TokenTbl AS (
		        SELECT level AS Iab, regexp_substr(v_Token,'[^.]+', 1, level) AS iValue FROM DUAL
		        CONNECT BY regexp_substr(v_Token, '[^.]+', 1, level) IS NOT NULL)
		        SELECT TMP1, TMP2 INTO v_TMP1, v_TMP2
		        FROM (SELECT TO_NUMBER(iValue) TMP1 FROM TokenTbl WHERE Iab = 1) B, 
		             (SELECT iValue TMP2 FROM TokenTbl WHERE Iab = 2) C;
	        EXCEPTION WHEN NO_DATA_FOUND THEN
	        BEGIN
		        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
		            p_Message := u'X?c th?c kh?ng h?p l?: Token kh?ng d?ng c?u tr?c' ;
		       	ELSE 
		       		p_Message := u'Token is not accepted' ;
		       	end if;
	            
	            p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
	            RETURN;
	        END;
	    END;

	    -- Check Param OK
	    v_TMP :=nvl( p_CompanyCode,' ') || '.' || TO_CHAR(v_UserID) || '.' || p_DeviceID || '.' || TO_CHAR(v_TMP1) || '.' || v_Language ;
	    SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP_HASH FROM DUAL;
	    IF ( v_TMP_HASH  <> v_TMP2 ) THEN    
	    	-- Check th?m case api cu chua c? Language 
	    	v_TMP :=nvl( p_CompanyCode,' ') || '.' || TO_CHAR(v_UserID) || '.' || p_DeviceID || '.' || TO_CHAR(v_TMP1) ;
	    	SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP_HASH FROM DUAL;       
        DBMS_OUTPUT.PUT_LINE(    v_TMP_HASH);
        DBMS_OUTPUT.PUT_LINE(    v_TMP2);
	    	IF  ( v_TMP_HASH  <> v_TMP2 ) THEN    
		        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
		            p_Message := u'X?c th?c kh?ng h?p l?: gi?i m? kh?ng th?nh c?ng' ;
		       	ELSE 
		       		p_Message := u'Token is not accepted: decrypt is error' ;
		       	end if;
		        p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
		        RETURN;
	        END IF;
	    END IF;
	    -- Check Token Timeout

	   	IF ( TO_NUMBER(TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')) - v_TMP1  > (v_TimeoutMinutes * 60) ) THEN 
	   		IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	            p_Message := u'Phi?n l?m vi?c d? h?t h?n' ;
	       	ELSE 
	       		p_Message := u'Your session is timeout' ;
	       	end if;
	         
	        p_ResponseStatus := v__ERR_ACCOUNTTOKEN_TIMEOUT ;
	        RETURN;    
	    END IF;

	    -- Check token hop le
	    -- case n?y n?u d? li?u ko c? token th? ko logout du?c -> th?ng nh?t
	    
	    BEGIN
	        v_TokenCountParam := 0;
	        -- Ki?m tra phi?n l?m vi?c c? th?ng tin c?a token v? user id kh?ng 
	        SELECT count(ID) INTO v_TokenCountParam 
		    FROM SE_UserLogin 
		    WHERE  UPPER(Token) = UPPER(v_Token) 
		    AND USERID  = v_UserID 
		    --AND ACTFLG = 'A'
		    ;
		    SELECT 	ACTFLG INTO v_activeFlag 
		    FROM 	SE_UserLogin 
		    WHERE  	UPPER(Token) = UPPER(v_Token) 
		    AND 	USERID  = v_UserID 
		    --AND ACTFLG = 'A'
		    ;
	        EXCEPTION WHEN NO_DATA_FOUND THEN
	        BEGIN 
	            --p_Message := u'Kh\00f4ng t\1ed3n t\1ea1i phi\00ean l\00e0m vi\1ec7c' ;
	            --p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
	            p_ResponseStatus := 1 ;
	    		p_Message := u'X?c th?c th?nh c?ng';
	            RETURN;
	        END;
	    END;
		IF  v_activeFlag = 'I' OR v_TokenCountParam = 0 THEN
			IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	            p_Message := u'Phi?n l?m vi?c d? k?t th?c' ;
	       	ELSE 
	       		p_Message := u'Your session is timeout' ;
	       	end if;
            p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
            RETURN;
		END IF;
		
	    p_ResponseStatus := 1 ;
	    p_Message := u'X?c th?c th?nh c?ng';
	END;
  /*X? l? dang nh?p v? gentoken*/
  PROCEDURE API_User_Login
	(
	    p_UserName IN NVARCHAR2,
	    p_Pwd IN NVARCHAR2,
	    p_DeviceID IN NVARCHAR2, 
	    p_Firebase_Client_Id IN NVARCHAR2,
	    p_Language IN NVARCHAR2,
	    p_CompanyCode OUT NVARCHAR2,
	    p_UserID OUT NUMBER,
	    p_FullName OUT NVARCHAR2,
	    p_Email OUT NVARCHAR2,
	    p_Mobile OUT NVARCHAR2,
	    p_Avatar OUT NVARCHAR2,
	    p_Token OUT NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserName NVARCHAR2(30) := p_UserName;
	    v_Pwd NVARCHAR2(200) := p_Pwd;
	    v_DeviceID NVARCHAR2(50) := p_DeviceID;
	    v_Firebase_Client_Id nvarchar2(200) := NVL(p_Firebase_Client_Id,' ');
	    v_Language nvarchar2(20) := NVL(p_Language,'vi-VN');
	    v_Today DATE;
	    v_TimeOut DATE;
	    v_TimeOutBigint NUMBER(19,0);
	    v_PwdMD5 NVARCHAR2(200);
	    v_PwdCurrMD5 NVARCHAR2(200);
	    v_UserType NUMBER(5,0);
	    v_Status NUMBER(5,0);
	    v_ImageID NUMBER(19,0);
	    v_LastPwdChanged DATE;
	    v_PwdExpireDay Date;
	    v_CompanyID NUMBER(19,0);
	    v_StoreName NVARCHAR2(200) := 'API_User_Login';
	    v_LoginID NUMERIC(19,0);
	    v_LogLoginID NUMERIC(19,0);
	BEGIN
	    v_Today := SYSDATE ; 
	    v_UserName := NVL(v_UserName, ' ') ;
	    v_Pwd := NVL(v_Pwd, '') ;
	    v_DeviceID := NVL(v_DeviceID, ' ') ;
	    p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	    v_PwdMD5 := v_Pwd;--FN_Md5Encode(v_Pwd) ;
	    --SELECT API_FN_HASH(v_Pwd, 'MD5') INTO v_PwdMD5 FROM DUAL;

	    IF ( v_DeviceID = ' ' ) THEN
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	       		p_Message := u'ID thiet bi khong hop le' ;
	       	ELSE 
	       		p_Message := u'Device ID is not allowed'; 
	       	end if;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;
	  
	    -- check input firebase client 
	    /*
	    IF  ( v_Firebase_Client_Id = ' ' OR  v_Firebase_Client_Id IS NULL )  THEN
		   
	    	p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        p_Message := u'Th?ng tin dang nh?p kh?ng h?p l?! firebase ' ;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;
	   */
	    BEGIN 
		    SELECT  ID, 	
		            0 AS ImG, 	
		            0 AS TYPE,
		            t.Password AS Pwd,
		            CASE when t.ACTFLG ='A' THEN 1 ELSE 0 END  ,
		            0 AS COMPANYID, t.CHANGE_PASS_DATE AS LASTPWDCHANGED ,
		            t.EXPIRE_DATE,
		            t.FULLNAME,
		            nvl(t.EMAIL, ' ') ,
		            nvl(t.TELEPHONE, ' ') 
		        INTO p_UserID, v_ImageID, v_UserType, v_PwdCurrMD5, v_Status, v_CompanyID, v_LastPwdChanged, v_PwdExpireDay, p_FullName, p_Email, p_Mobile
		    FROM 	SE_USER t 
		    WHERE 	UPPER(t.username)=UPPER(v_UserName) ;
	       -- AND 	UPPER(t.password) = UPPER(v_PwdMD5);

	        EXCEPTION WHEN NO_DATA_FOUND THEN 
            SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE.API_User_Login',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              v_UserName,
                              v_PwdMD5,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL);
	        BEGIN
	            p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	            v_LastPwdChanged := SYSDATE;
	            v_PwdExpireDay := SYSDATE + 236;
	           	 IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
		       		p_Message := u'Username is not found' ;
		       	ELSE 
		       		p_Message := u'Username is not found' ;
		       	end if;
	            
	            p_ResponseStatus := -600 ;
	            RETURN;
	        END;
	    END;
	   
	   BEGIN 
		    SELECT  ID, 	
		            0 AS ImG, 	
		            0 AS TYPE,
		            t.Password AS Pwd,
		            CASE when t.ACTFLG ='A' THEN 1 ELSE 0 END  ,
		            0 AS COMPANYID, t.CHANGE_PASS_DATE AS LASTPWDCHANGED ,
		            t.EXPIRE_DATE,
		            t.FULLNAME,
		            nvl(t.EMAIL, ' ') ,
		            nvl(t.TELEPHONE, ' ') 
		        INTO p_UserID, v_ImageID, v_UserType, v_PwdCurrMD5, v_Status, 
            v_CompanyID, v_LastPwdChanged, v_PwdExpireDay, p_FullName,      p_Email, p_Mobile
		    FROM 	SE_USER t 
		    WHERE 	UPPER(t.username)=UPPER(v_UserName) 
	        AND 	UPPER(t.password) = UPPER(v_PwdMD5);

	        EXCEPTION WHEN NO_DATA_FOUND THEN  
          
            SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE.API_User_Login',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              v_UserName,
                              v_PwdMD5,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL);
	        BEGIN
	            p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	            v_LastPwdChanged := SYSDATE;
	            v_PwdExpireDay := SYSDATE + 236;
	            IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	            	p_Message := u'Password is incorrect' ;
		       	ELSE 
		       		p_Message := u'Password is incorrect' ;
		       	end if;
	            p_ResponseStatus := -600 ;
	            RETURN;
	        END;
	    END;
	    --v_LastPwdChanged := FN_ConvertDateToNumber(FN_ConvertNumberToDate(v_LastPwdChanged) + v_PwdExpireDay);

	    IF ( v_Status <> 1 ) THEN          
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	            	p_Message := u'User is not allowed' ;
		       	ELSE 
		       		p_Message := u'User is not allowed' ;
		       	end if;
	        p_ResponseStatus := -600 ;
	        RETURN;    
	    END IF;
	    IF ( v_PwdCurrMD5 <> v_PwdMD5 ) THEN    
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        p_Message := u'Password is incorrect' ;
	        p_ResponseStatus := -600 ;
	        RETURN;    
	    END IF;
	    /*
	   	IF ( v_LastPwdChanged < FN_ConvertDateToNumber(v_Today) ) THEN    
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        p_Message := u'RequireChangePassword' ;
	        p_ResponseStatus := -601 ;
	        RETURN;    
	    END IF;    
	   */
	    -- Gen token
	    API_User_GenAccessToken(
	                        p_CompanyCode => p_CompanyCode,
	                        p_UserID => p_UserID,
	                        p_DeviceID => v_DeviceID,
	                        p_Language => p_Language,
	                        p_Token => p_Token,
	                        p_Message => p_Message,
	                        p_ResponseStatus => p_ResponseStatus) ;
	    IF ( p_ResponseStatus < 1 ) THEN    
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	           p_Message := u'Your session is not created' ;
	       	ELSE 
	       		p_Message := u'Your session is not created' ;
	       	end if;
	    	p_ResponseStatus := -600 ;  
	        RETURN;    
	    END IF;

	   --13/01/21: C?p nh?t phi?n l?m vi?c cu -> Inactive -> ch? s? d?ng phi?n m?i
	   --UPDATE SE_USERLOGIN SET ACTFLG  = 'I' WHERE USERID  =  p_UserID;
	   --COMMIT;
	    -- insert session 
        Insert into SE_USERLOGIN(ID,		 USERID, 	TOKEN, 		DEVICE_ID, 	ACTFLG, Firebase_Client_Id )
        SELECT SEQ_SE_USERLOGIN.NEXTVAL, p_UserID, 	p_Token , 	v_DeviceID ,'A', 	p_Firebase_Client_Id 
        FROM DUAL;
	    COMMIT; 
         
	     -- l?y avater
          Select nvl(IMAGE, 'NoImage.jpg') INTO p_Avatar FROM SE_USER u 
         join HU_EMPLOYEE he on u.EMPLOYEE_CODE = he.EMPLOYEE_CODE 
         LEFT JOIN HU_EMPLOYEE_CV  E ON e.EMPLOYEE_ID  = he.id 
         WHERE u.Id = p_UserID
        AND rownum = 1 ;
       
	    p_Message := u'Login Is Success ' || NVL(p_Firebase_Client_Id,'');
	    p_ResponseStatus := 1 ;    
	   
	    EXCEPTION WHEN OTHERS THEN    
	    BEGIN
	        ROLLBACK;
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        p_ResponseStatus := -99 ;
	       IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	           p_Message := u'Internal server is error' ;
	       	ELSE 
	       		p_Message := u'Internal server is error' ;
	       	end if;
	        
	    END;
	END;     
  
  /*t?o access token*/
	/*Error code = */
	PROCEDURE API_User_GenAccessToken
	(
	  p_CompanyCode IN NVARCHAR2,
	  p_UserID IN NUMBER,
	  p_DeviceID IN NVARCHAR2,
	  p_Language IN nvarchar2,
	  p_Token OUT NVARCHAR2,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
	AS
	   v_UserID NUMBER(19,0) := p_UserID;
	   v_CompanyCode NVARCHAR2(30) := p_CompanyCode;
	   v_DeviceID NVARCHAR2(50) := p_DeviceID;
	   v_Language nvarchar2(20):= NVL(p_Language,'vi-VN');
	   v_Today DATE;
	   v_TMP1 NUMBER(19,0);
	   v_TMP2 NVARCHAR2(100);
	   v_TMP NVARCHAR2(100);
	   v_temp NUMBER(1, 0) := 0;
	   v_StoreName NVARCHAR2(200) := 'API_User_GenAccessToken'; 

	BEGIN
	   --/*TODO:SQLDEV*/ SET NOCOUNT, XACT_ABORT ON /*END:SQLDEV*/
	   v_UserID := NVL(v_UserID, 0) ;
	   v_CompanyCode := NVL(v_CompanyCode, ' ') ;
	   v_Today := SYSDATE ;
	   BEGIN
	      BEGIN
	         v_TMP1 := TO_NUMBER(TO_CHAR(v_Today, 'YYYYMMDDHH24MISS'));
	         -- COMPANYCODE.USERID.DEVICEID.TIME.LANGUAGE
	         v_TMP := v_CompanyCode || '.' || TO_NCHAR(v_UserID) || '.' || v_DeviceID || '.' || TO_NCHAR(v_TMP1) || '.' || v_Language ;
	         --v_TMP2 := FN_Md5Encode(v_TMP) ;
	         SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP2 FROM DUAL;
	         p_Token := TO_NCHAR(v_TMP1) || '.' || v_TMP2 ;
	         p_ResponseStatus := 1 ;
	         p_Message := u'Token \0111\00e3 \0111\01b0\1ee3c t\1ea1o' ;

	      END;
	   EXCEPTION
	      WHEN OTHERS THEN
		   BEGIN
		      p_Token := ' ' ;
		      p_ResponseStatus := -99 ;
		      p_Message := u'Ph\00e1t sinh l\1ed7i API nghi\1ec7p v\1ee5' ;
		   END;
	  END;
	--EXCEPTION WHEN OTHERS THEN utils.handleerror(SQLCODE,SQLERRM);
	END;
  
  
  /*API_User_LoginWToken*/
	PROCEDURE API_User_LoginWToken
	(
	    p_CompanyCode IN NVARCHAR2,
	    p_UserID IN NUMBER,
	    p_DeviceID IN NVARCHAR2,
		p_Language IN nvarchar2,
	    p_Token IN NVARCHAR2,
	    p_UserName OUT NVARCHAR2,
	    p_FullName OUT NVARCHAR2,
	    p_Email OUT NVARCHAR2,
	    p_Mobile OUT NVARCHAR2,
	    p_Avatar OUT NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	) 
	AS
		v_Status NUMBER(5,0);
	BEGIN
	   	API_User_CheckAccessToken(p_CompanyCode => p_CompanyCode,
	                                        p_UserID => p_UserID,
	                                        p_Language => p_Language,
	                                        p_DeviceID => p_DeviceID,
	                                        p_Token => p_Token,
	                                        p_Message => p_Message,
	                                        p_ResponseStatus => p_ResponseStatus) ;

		-- return user info 
		IF ( p_ResponseStatus = 1) THEN 	                                       
		    SELECT  ' ' AS ImG,
            CASE when t.ACTFLG ='A' THEN 1 ELSE 0 END  ,
            t.FULLNAME,t.EMAIL ,t.TELEPHONE , t.USERNAME 
	        INTO 	p_Avatar, v_Status, p_FullName, p_Email, p_Mobile, p_UserName 
		    FROM 	SE_USER t 
		    WHERE 	t.ID = p_UserID ;
            
		   Select nvl(IMAGE, 'NoImage.jpg') INTO p_Avatar 
		   FROM SE_USER u 
            join HU_EMPLOYEE he on u.EMPLOYEE_CODE = he.EMPLOYEE_CODE 
            LEFT JOIN HU_EMPLOYEE_CV  E ON e.EMPLOYEE_ID  = he.id 
            WHERE 	u.ID = p_UserID;

		    IF ( v_Status <> 1 ) THEN          
		        p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ;  p_UserName := '';
		        p_Message := u'Ngu?i d?ng kh?ng duoc ph?p ho?t d?ng' ;
		        p_ResponseStatus := -600 ;
		        RETURN;    
	    	END IF;
	    END IF;
	END;

	/*?ang xu?t (c?n x? l? d?nh d?u token h?t h?n*/
	PROCEDURE API_User_Logout
	(
	    p_Token IN NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_Token NVARCHAR2(50) := p_Token;
	    v_Today DATE;
	    v_I NUMBER(19,0);
	    v_UserID NUMBER(10,0);
	    v_UserName NVARCHAR2(30);
	    v_StoreName NVARCHAR2(200) := 'API_User_Logout';
	BEGIN
	    v_Today := SYSDATE ;
	    v_Token := NVL(v_Token, ' ') ;
	    BEGIN
		    v_Today := SYSDATE ;

		      --Check token exists
	        SELECT ID, UserID INTO v_I, v_UserID FROM SE_UserLogin WHERE  UPPER(Token) = UPPER(v_Token) AND rownum = 1 ;
	        EXCEPTION WHEN NO_DATA_FOUND THEN 
	        BEGIN
	            v_UserID := -1;
	            v_I := -1;
	        END;
	       --kh?ng t?n t?i th? m?c d?nh out lu?n
	        IF ( v_UserID < 0 ) THEN
	           p_Message := u'?ang xu?t th?nh c?ng' ;
	    		p_ResponseStatus := 1 ;
	            RETURN;
	        END IF;

	    END;
		   	--C?p nh?t tr?ng th?i c?a token, device_id tuong ?ng user 
		   	--13/01/21 hi?n s? cho co ch? logout s? x?a h?t phi?n l?m vi?c cu 
	        UPDATE  SE_UserLogin SET ACTFLG = 'I' WHERE USERID  = v_UserID ;--ID = v_I;
		    p_Message := u'?ang xu?t th?nh c?ng' ;
		    p_ResponseStatus := 1 ;
	    EXCEPTION WHEN OTHERS THEN
	    BEGIN
	    ROLLBACK;
	        p_ResponseStatus := -99 ;
	        p_Message := u'L?i h? th?ng API nghi?p v?' ; 
	    END; 
	END;
  -- Ki?m tra permission -> m?i ch? ki?m tra user portal hay kh?ng, c?n thay d?i c?u tr?c d? ph?n ho?c check quy?n theo ch?c nang
  PROCEDURE API_User_CheckPermission
  (
      p_UserID IN NUMBER,
      p_Url IN NVARCHAR2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
  BEGIN
      SELECT u'Grant!', ID INTO p_Message, p_ResponseStatus
      FROM   SE_USER
      WHERE UPPER(ID)  = UPPER( p_UserID)
       AND IS_PORTAL  = -1;
      EXCEPTION WHEN NO_DATA_FOUND THEN
      BEGIN
          p_Message := u'{YouAreNotIsGrantToFunction}!' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END;
  END;
/*===============================================================================================*/
  /*GET PROCEDURE*/
  PROCEDURE API_Get_Contract
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, -1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
      v_EmpID NUMBER(19,0);
      v_EmpCode Nvarchar2(50);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(19, 0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
      SELECT ID,EMPLOYEE_CODE INTO v_temp,v_EmpCode  FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
    IF NVL(v_EmpCode,'') = '' THEN
      p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
    END IF;

--      IF v_EmpCode != '' THEN
--          BEGIN
--              SELECT ID INTO v_EmpID FROM HU_Employee WHERE EMPLOYEE_CODE = v_EmpCode;
--          EXCEPTION
--              WHEN OTHERS THEN
--                  p_Message := 'EmployeeNotFound';
--                  p_ResponseStatus := -600;
--                  RETURN;
--          END;
--
--          SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
--          IF v_temp < 1 THEN
--              p_Message := 'YouNotManagerEmployee';
--              p_ResponseStatus := -600;
--              RETURN;
--          END IF;
--      END IF;
        SELECT he.ID INTO v_EmpID  FROM HU_Employee he JOIN SE_USER u on he.EMPLOYEE_CODE = u.EMPLOYEE_CODE WHERE  u.ID = v_UserID;
      SELECT COUNT(*) INTO p_Rowcount
      FROM HU_Contract W
                  LEFT JOIN HU_Contract_Type HT ON W.CONTRACT_TYPE = HT.ID
              WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

      OPEN p_Cur FOR
      SELECT *
      FROM
      (
          SELECT   ROWNUM STT, ID, NAME, NUMBERDECIDE,
              TO_CHAR(SIGNDATE,'DD/MM/YYYY') SIGNDATE,
              TO_CHAR(EFFECTDATE,'DD/MM/YYYY') EFFECTDATE,
              TO_CHAR(EXPIREDATE,'DD/MM/YYYY') EXPIREDATE,
              SIGNNAME, TITLE_NAME  ,ORG_NAME
          FROM
          (
              SELECT
                  W.ID ID,
                  '' || HT.NAME || '' Name,
                  W.CONTRACT_NO NumberDecide ,
                  W.Sign_Date  SignDate,
                  W.EFFECT_DATE  EffectDate,
                  W.END_DATE  ExpireDate,
                  NVL(E.FULLNAME_VN , ' ') SignName  ,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then T.Name_Vn Else T.NAME_EN End As  Title_Name,
                 Case When Nvl(p_Language,'vi-VN')='vi-VN' Then O.Name_Vn Else O.NAME_EN End As Org_Name
                  --NVL(W.SIGN_TITLE , 0) SignTitleName
              FROM HU_Contract W
                  LEFT JOIN HU_Contract_Type HT ON W.CONTRACT_TYPE = HT.ID      
                  LEFT JOIN HU_EMPLOYEE E ON E.ID=W.SIGN_LIQUI       
                  Left Join Hu_Organization O On O.Id=W.ORG_ID
                  LEFT JOIN HU_TITLE T ON T.ID=W.TITLE_ID
              WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
              ORDER BY W.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;
   

   PROCEDURE API_Get_Dashboard
	(
		p_Language IN nvarchar2,
	  p_UserID IN NUMBER,
	  p_Pending OUT NUMBER,
	  p_OtHours OUT NUMBER,
	  p_RegisterHour OUT NUMBER,
      p_TotalPaidLeaveDays OUT NUMBER,
      P_TotalCompensatedLeaveDays OUT NUMBER,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
  AS
     v_UserID NUMBER(19,0) := NVL(p_UserID, 0);
     v_EmployeeID NUMBER(19,0);
     v_UserName Nvarchar2(50);
     v_temp NUMBER(1, 0) := 0;
  BEGIN
      p_Pending := 0 ;
      p_OtHours := 0 ;
      p_RegisterHour := 0;

      BEGIN
          SELECT   he.ID,su.username INTO v_EmployeeID  ,v_UserName
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_EmployeeID := NULL;
      END;
      v_EmployeeID := NVL(v_EmployeeID, -1);

      SELECT COUNT(ID) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      ELSE
          BEGIN
              IF v_EmployeeID < 1 THEN
                  p_Message := 'UserNotConfig';
                  p_ResponseStatus := -600;
                  RETURN;
              ELSE   
                BEGIN 
                  /*C? v? thi?u di?u ki?n l?c c?a nam, th?ng??*/
                  SELECT R.NVALUE*8 /*COALESCE(SUM(HOURCOUNT) , 0)*/ INTO p_RegisterHour
                  FROM AT_PORTAL_REG  R
                  INNER JOIN AT_SIGN S ON S.ID=        R.SIGN_ID
                  INNER JOIN AT_GSIGN G ON G.ID=S.AT_GSIGNID
                  WHERE R.EMPLOYEE_ID  =  v_EmployeeID
                  AND G.CODE = 'LEAVE' ;     
                  EXCEPTION
                  WHEN OTHERS THEN      p_RegisterHour:=0;
                END;
                BEGIN
                  SELECT R.NVALUE*8/*COALESCE(SUM(HOURCOUNT) , 0)*/ INTO p_OtHours
                  FROM AT_PORTAL_REG R    
                  INNER JOIN AT_SIGN S ON S.ID=        R.SIGN_ID
                  INNER JOIN AT_GSIGN G ON G.ID=S.AT_GSIGNID
                  WHERE R.EMPLOYEE_ID  =  v_EmployeeID
                  AND G.CODE = 'OVERTIME' ;   
                  EXCEPTION
                  WHEN OTHERS THEN      p_OtHours:=0;       
                 END;
                 BEGIN
          --d?m c?c dk? c?n ph? duy?t n?u user n?y l? qu?n l?
                  SELECT (
                      SELECT COUNT(*)
                      FROM PO_PLAN_REG_PROCESS_AT a
                      WHERE a.status_id  = 2 -- ch? ph? duy?t
                      AND a.approvebyuser  = v_UserName
                  ) INTO p_Pending FROM DUAL;
                  EXCEPTION
                  WHEN OTHERS THEN      p_Pending:=0;       
                 END;
                  p_Message := 'IsSuccess';
                  p_ResponseStatus := 1;
                  RETURN;
              END IF;
          END;
      END IF;
  EXCEPTION    
      WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);        
        p_Message := 'DATABASEERROR';
     P_responsestatus := -99;  
     Sys_write_exception_log(Sqlcode,
                              'API_Get_Dashboard',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  END;


  PROCEDURE API_Get_Employee
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_RowCount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1) ;
      v_Page NUMBER(5, 0) := NVL(p_Page, 1) ;
      v_PageSize NUMBER(5, 0) := NVL(p_PageSize, 10) ;
      v_EmployeeID NUMBER(19,0);
      v_temp NUMBER(19,0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_RowCount := 0;

      IF ( v_UserID = -1 ) THEN
        p_Message := 'UserIDIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257 )  )
         AND rownum = 1  ;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      SELECT COUNT(*) INTO p_RowCount
      FROM HU_Employee E
          LEFT JOIN HU_Employee_CV CV ON E.ID = CV.EMPLOYEE_ID
      WHERE E.DM_ID = v_EmployeeID;

      OPEN p_Cur FOR
          SELECT
              E.ID ID,
              E.FULLNAME_VN NAME,
              CV.Image AVATAR
          FROM HU_Employee E
              LEFT JOIN HU_Employee_CV CV ON E.ID = CV.EMPLOYEE_ID
          WHERE E.DM_ID = v_EmployeeID
          AND ROWNUM > (v_Page - 1) * v_PageSize AND ROWNUM > (v_Page * v_PageSize + 1);


      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);
  END;


  PROCEDURE API_Get_Family
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, -1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
      v_EmpID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(19, 0) := 0;
  BEGIN
      p_Rowcount := 0;
      If     v_EmployeeID<0 Then     
        Begin
        Select Employee_Id     
        Into v_EmployeeID
        From Se_User U 
        Where U.Id=v_UserID;  
        EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotEmployeeId';
              p_ResponseStatus := -600;
              RETURN;
        End;
      End If;
      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT ID INTO v_temp FROM SE_USER  WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT he.dm_id INTO v_EmpID FROM HU_EMPLOYEE he 
          JOIN SE_USER su ON su.employee_id = he.id WHERE su.ID = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      IF p_EmployeeID != -1 THEN
          BEGIN
              SELECT ID INTO v_EpmViewID FROM HU_Employee WHERE ID = p_EmployeeID;
          EXCEPTION
              WHEN OTHERS THEN
                  p_Message := 'EmployeeNotFound';
                  p_ResponseStatus := -600;
                  RETURN;
          END;

          SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DM_ID = v_EmpID AND ID = v_EmployeeID;
          IF v_temp < 1 THEN
              p_Message := 'YouNotManagerEmployee';
              p_ResponseStatus := -600;
              RETURN;
          END IF;
      END IF;

      SELECT COUNT(*) INTO p_Rowcount
      FROM HU_Family W
          LEFT JOIN OT_OTHER_LIST O ON W.RELATION = O.Code
      WHERE W.EMPLOYEE_ID = CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmployeeID END;

      OPEN p_Cur FOR
      SELECT *
      FROM
      (
          SELECT   ROWNUM STT, ID, NAME, CARDID, ISDEDUCT,
              DOFB,
              DEDUCTFROM,
              DEDUCTTO,
              DEDUCTREG,
              REMARK, RELATION, ADDRESS,REDUCE_FROM,REDUCE_TO
          FROM
          (
              SELECT
                  W.ID ID,
                  W.NAME_FAMILY NAME,
                  W.ID_NO CARDID,
                  NVL(W.IS_DELETED, 0) ISDEDUCT,
                  TO_CHAR(W.BIRTH_DAY,'DD/MM/YYYY')  DOFB,
                  TO_CHAR(W.FROM_DATE,'DD/MM/YYYY')  DEDUCTFROM,
                  TO_CHAR(W.TO_DATE,'DD/MM/YYYY')  DEDUCTTO,
                  --TO_CHAR(W.REDUCE,'DD/MM/YYYY')  DEDUCTREG,
                  w.reduce DEDUCTREG,
                  NVL(W.REMARK , ' ') REMARK,
                  NVL('' || O.NAME_VN || '', ' ') RELATION,
                  NVL(W.PER_ADDRESS , ' ') ADDRESS,
                  
                  
                  TO_CHAR(W.REDUCE_FROM,'DD/MM/YYYY')  REDUCE_FROM,
                  TO_CHAR(W.REDUCE_TO,'DD/MM/YYYY')  REDUCE_TO
                  
              FROM HU_Family W
                       LEFT JOIN OT_OTHER_LIST O ON W.RELATION = O.Code
              WHERE W.EMPLOYEE_ID = CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmployeeID END
              ORDER BY W.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_Get_ListRegisterLeave
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_ManagerStatus IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
      v_Page NUMBER(19, 0) := NVL(p_Page, 1);
      v_PageSize NUMBER(19,0) := NVL(p_PageSize, 10);
      v_ManagerStatus NUMBER(19, 0) := NVL(p_ManagerStatus, 0);
      v_EmployeeID NUMBER(19, 0);
      v_temp NUMBER(1, 0) := 0;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Status = '-1' THEN
          p_Message := 'Type Register Is Empty';
          p_ResponseStatus := -600;
          RETURN;
      END IF;


      SELECT COUNT(ID) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      v_EmployeeID := NVL(v_EmployeeID, -1);
      IF v_EmployeeID < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT COUNT(*) INTO p_Rowcount
          FROM AT_PORTAL_REG R --LEFT JOIN AT_Symbol S ON R.ID_SIGN = S.ID       
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
          WHERE R.Employee_Id = v_EmployeeID
          AND a.code IN ('LEAVE')
          AND R.Status IN (
                  SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                  FROM (
                      SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                      FROM DUAL
                        CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL));
      END;

      BEGIN
          OPEN p_Cur FOR
              SELECT *
              FROM
              (
                  SELECT ROWNUM AS STT, ID, NAME, TotalHour, Remark, Status, ManagerID,
                  TIMECREATE,
                  LEAVEFROM,
                  LEAVETO
                  FROM
                  (
                      SELECT
                          R.ID AS ID,
                          '' || R.Nvalue || '' AS NAME,
                          NVL(r.TO_HOUR-R.FROM_HOUR , 0)*24 AS TotalHour,
                          NVL(R.NOTE , '') AS Remark,
                            --'ngh? vi?c v? vi?c ri?ng' as Remark,
                          R.Status AS Status,
                          NVL(he.dm_id , 0) AS ManagerID,
                          TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')  AS TIMECREATE,
                          TO_CHAR(R.WORKING_DAY,'DD/MM/YYYY')   AS LEAVEFROM,
                          TO_CHAR(R.WORKING_DAY,'DD/MM/YYYY')   AS LEAVETO
                      FROM AT_PORTAL_REG R  --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I 
                      inner join at_sign s on s.id=r.sign_id
                      inner join at_gsign           a on a.id =s.at_gsignid
                      JOIN HU_EMPLOYEE he ON he.ID  = R.Employee_Id
                      WHERE R.Employee_Id = v_EmployeeID
                      AND a.code IN ('LEAVE')
                      AND R.Status IN (
                          SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                          FROM (
                              SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                              FROM DUAL
                                CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
                      ORDER BY r.CREATED_DATE DESC
                  )
              ) WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);

          p_Message := 'IsSuccess';
          p_ResponseStatus := 1;
      END;

      ----DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
      p_Message := 'ServerError';
          p_ResponseStatus := -99;
  END;

  /*API_Get_ListRegisterLeaveManager*/
  PROCEDURE API_Get_ListRegisterLeaveMng
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_Type IN NUMBER,
      p_FromDate IN NVARCHAR2,
      p_ToDate IN NVARCHAR2,
      p_KeyEmployee IN NVARCHAR2,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID,-1);
      v_Status NVARCHAR2(20) := NVL(p_Status, '-1');
      v_Page NUMBER(10,0) := NVL(p_Page, 1) ;
      v_PageSize NUMBER(2,0) := NVL(p_PageSize, 10);
      v_Type NUMBER(10,0) := NVL(p_Type, -1);
      v_KeyEmployee NVARCHAR2(100);
      v_EmployeeID NUMBER(19,0);
      v_FD NUMBER(19,0);
      v_TD NUMBER(19,0);
      v_StautsID NUMBER(19,0);
      v_DefaultDate DATE := TO_DATE('01-01-1900', 'MM/DD/YYYY');
      v_FromDate DATE;
      v_ToDate DATE;
      v_temp NUMBER(10, 0) := 0;
  BEGIN
      p_Rowcount := 0;
      v_FromDate := TO_DATE( p_FromDate, 'MM/DD/YYYY');
      v_ToDate := TO_DATE( p_ToDate, 'MM/DD/YYYY');--NVL(p_ToDate, v_DefaultDate);
      v_KeyEmployee := '%' || NVL(p_KeyEmployee, ' ') || '%' ;
      --v_FD := BOS.FN_ConvertDateToNumber(v_FromDate);
      --v_TD := BOS.FN_ConvertDateToNumber(v_ToDate);
    SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDDHH24MISS')), TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDDHH24MISS')) INTO v_FD,v_TD FROM dual;

      IF v_Status = '-1' THEN
          p_Message := 'StatusIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
           SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
         ;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      BEGIN
          SELECT COUNT(*) INTO p_Rowcount
          FROM AT_PORTAL_REG R
             JOIN HU_Employee E   ON R.Employee_Id = E.ID
            -- JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP  
             inner join at_sign s on s.id=r.sign_id
             inner join at_gsign           a on a.id =s.at_gsignid
            WHERE r.employee_id = v_EmployeeID
            AND a.code IN ('LEAVE')
            /*AND ap.APPROVE_STATUS IN (
                SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                FROM (
                    SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                    FROM DUAL
                      CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))*/
            --AND R.SymbolId = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.SymbolId END
            AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR R.Employee_Id LIKE v_KeyEmployee )
           -- AND TO_NUMBER(TO_CHAR(R.Working_Day, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
            AND TO_NUMBER(TO_CHAR(R.Working_Day, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD;


          OPEN p_Cur FOR
          SELECT *
          FROM
          (
              SELECT ROWNUM STT, ID, LeaveFrom, LeaveTo, FromHour, ToHour, SymbolName, TotalHour, Remark, Status, EmployeeName, CreateTime
              FROM
              (
                  SELECT
                      R.ID ID,
                      TO_CHAR(R.From_Hour, 'DD/MM/YYYY')  LeaveFrom,
                      TO_CHAR(R.To_Hour, 'DD/MM/YYYY')  LeaveTo,
                      R.FROM_HOUR  FromHour,
                      R.TO_HOUR   ToHour,
                      '' || a.code || '' SymbolName,
                      NVL(R.TO_HOUR-r.from_hour , 0)*24 TotalHour,
                      NVL(R.NOTE, ' ') Remark,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')   CreateTime,
                        ApiType.Name TypeName,
                        R.Note Note
                  FROM AT_PORTAL_REG R
                  inner join at_sign s on s.id=r.sign_id
                  inner join at_gsign           a on a.id =s.at_gsignid
                         --JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP
                         JOIN HU_Employee E   ON R.Employee_Id = E.ID
                           LEFT JOIN (SELECT
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Sign_Id = ApiType.Id
                  WHERE r.employee_id = v_EmployeeID
                  AND a.code IN ('LEAVE')
                          AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR R.Employee_Id LIKE v_KeyEmployee )
                          AND TO_NUMBER(TO_CHAR(R.Working_Day, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
                      ORDER BY R.ID DESC
              )
          )
          WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
      END;

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'ServerError';
          p_ResponseStatus := -99;
  END;


  /*API_Get_ListRegisterWLEOMng*/
  PROCEDURE API_Get_ListRegisterWLEOMng
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_Type IN NUMBER,
      p_FromDate IN NVARCHAR2,
      p_ToDate IN NVARCHAR2,
      p_KeyEmployee IN NVARCHAR2,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID,-1);
      v_Status NVARCHAR2(20) := NVL(p_Status, '-1');
      v_Page NUMBER(10,0) := NVL(p_Page, 1) ;
      v_PageSize NUMBER(2,0) := NVL(p_PageSize, 10);
      v_Type NUMBER(10,0) := NVL(p_Type, -1);
      v_KeyEmployee NVARCHAR2(100);
      v_EmployeeID NUMBER(19,0);
      v_FD NUMBER(19,0);
      v_TD NUMBER(19,0);
      v_StautsID NUMBER(19,0);
      v_DefaultDate DATE := TO_DATE('01-01-1900', 'MM/DD/YYYY');
      v_FromDate DATE;
      v_ToDate DATE;
      v_temp NUMBER(10, 0) := 0;
  BEGIN
      p_Rowcount := 0;
      v_FromDate := TO_DATE( p_FromDate, 'MM/DD/YYYY');
      v_ToDate := TO_DATE( p_ToDate, 'MM/DD/YYYY');--NVL(p_ToDate, v_DefaultDate);
      v_KeyEmployee := '%' || NVL(p_KeyEmployee, ' ') || '%' ;
      --v_FD := BOS.FN_ConvertDateToNumber(v_FromDate);
      --v_TD := BOS.FN_ConvertDateToNumber(v_ToDate);
    SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDDHH24MISS')), TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDDHH24MISS')) INTO v_FD,v_TD FROM dual;

      IF v_Status = '-1' THEN
          p_Message := 'StatusIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
         ;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      BEGIN
          SELECT COUNT(*) INTO p_Rowcount
          FROM AT_PORTAL_REG R
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
            JOIN HU_Employee E   ON  r.employee_id = E.ID
        --    JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP
            WHERE r.employee_id = v_EmployeeID
            AND a.code IN ('WLEO')
        
            AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR r.employee_id LIKE v_KeyEmployee )
            AND TO_NUMBER(TO_CHAR(R.From_Hour, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
            AND TO_NUMBER(TO_CHAR(R.To_Hour, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD;


          OPEN p_Cur FOR
          SELECT *
          FROM
          (
              SELECT ROWNUM STT, ID, LeaveFrom, LeaveTo, FromHour, ToHour, SymbolName, TotalHour, Remark, Status, EmployeeName, CreateTime, Note, TypeName
              FROM
              (
                  SELECT
                      R.ID ID,
                      TO_CHAR(R.From_Hour, 'DD/MM/YYYY')  LeaveFrom,
                      TO_CHAR(R.To_Hour, 'DD/MM/YYYY')  LeaveTo,
                      R.FROM_HOUR  FromHour,
                      R.TO_HOUR   ToHour,
                      '' || a.code || '' SymbolName,
                      NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour,
                      NVL(R.Note, ' ') Remark,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')   CreateTime,
                        NVL(R.Note, ' ') Note,
                        NVL(apiType.NAME, ' ') TypeName
                  FROM AT_PORTAL_REG R 
                  inner join at_sign s on s.id=r.sign_id
                  inner join at_gsign           a on a.id =s.at_gsignid
                         --JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP
                         JOIN HU_Employee E   ON r.employee_id = E.ID
                           LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME
                                    FROM   AT_TIME_MANUAL atm
                                    WHERE   ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.sign_id = apiType.Id
                  WHERE r.employee_id = v_EmployeeID
                  AND a.code IN ('WLEO')
                        
                          AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR r.employee_id LIKE v_KeyEmployee )
                          AND TO_NUMBER(TO_CHAR(R.From_Hour, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
                AND TO_NUMBER(TO_CHAR(R.To_Hour, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD
                      ORDER BY R.ID DESC
              )
          )
          WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
      END;

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'ServerError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_Get_ListRegisterWLEO
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_ManagerStatus IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
      v_Page NUMBER(19, 0) := NVL(p_Page, 1);
      v_PageSize NUMBER(19,0) := NVL(p_PageSize, 10);
      v_ManagerStatus NUMBER(19, 0) := NVL(p_ManagerStatus, 0);
      v_EmployeeID NUMBER(19, 0);
      v_temp NUMBER(1, 0) := 0;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Status = '-1' THEN
          p_Message := 'Type Register Is Empty';
          p_ResponseStatus := -600;
          RETURN;
      END IF;


      SELECT COUNT(ID) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1 ;

        v_EmployeeID := NVL(v_EmployeeID, -1);
      IF v_EmployeeID < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT COUNT(*) INTO p_Rowcount
          FROM AT_PORTAL_REG R --LEFT JOIN AT_Symbol S ON R.ID_SIGN = S.ID 
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
          WHERE r.employee_id = v_EmployeeID
          AND a.code IN ('WLEO')
          AND R.Status IN (
                  SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                  FROM (
                      SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                      FROM DUAL
                        CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL));
      END;

      BEGIN
          OPEN p_Cur FOR
              SELECT *
              FROM
              (
                  SELECT ROWNUM AS STT, ID, NAME, TotalHour, Remark, Status, ManagerID,
                  TIMECREATE,
                  LEAVEFROM,
                  LEAVETO
                  FROM
                  (
                      SELECT
                          R.ID AS ID,
                          '' ||a.code || '' AS NAME,
                          NVL(R.To_Hour-r.from_hour , 0)*24 AS TotalHour,
                          NVL(R.NOTE , '') AS Remark,
                          R.Status AS Status,
                          NVL(he.dm_id , 0) AS ManagerID,
                          TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')  AS TIMECREATE,
                          TO_CHAR(R.From_Hour,'DD/MM/YYYY')   AS LEAVEFROM,
                          TO_CHAR(R.To_Hour,'DD/MM/YYYY')   AS LEAVETO
                      FROM AT_PORTAL_REG R  --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I    
                      inner join at_sign s on s.id=r.sign_id
                      inner join at_gsign           a on a.id =s.at_gsignid
                      JOIN HU_EMPLOYEE he ON he.ID  = r.employee_id
                      WHERE r.employee_id = v_EmployeeID
                      AND a.code in ('WLEO')
                      AND R.Status IN (
                          SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                          FROM (
                              SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                              FROM DUAL
                                CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
                      ORDER BY TIMECREATE DESC
                  )
              ) WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);

          p_Message := 'IsSuccess';
          p_ResponseStatus := 1;
      END;

      ----DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
      p_Message := 'ServerError';
          p_ResponseStatus := -99;
  END;


  /*API_Get_ListRegisterOT*/
  PROCEDURE API_Get_ListRegisterOT
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_ManagerStatus IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
      v_ManagerStatus NUMBER(4,0) := NVL(p_ManagerStatus, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, 1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, 10);
      v_EmployeeID NUMBER(19,0);
      v_StautsID NUMBER(19,0);
      v_temp NUMBER(1, 0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_Rowcount := 0;

      IF v_Status = '-1' THEN
          p_Message := u'StatusIsNotNull' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      IF v_UserID = -1 THEN
          p_Message := u'IsUserIDNull' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      v_temp := 0;
      SELECT COUNT(*) INTO v_temp FROM HU_EMPLOYEE he JOIN SE_USER su ON su.EMPLOYEE_CODE  = he.EMPLOYEE_CODE WHERE su.ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserNotConfig' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
        ;

      SELECT COUNT(*) INTO p_Rowcount
      FROM
      (
          SELECT  R.ID ID
          FROM AT_PORTAL_REG R 
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
            JOIN HU_EMPLOYEE he ON he.id = r.employee_id
          WHERE r.employee_id = (CASE WHEN v_ManagerStatus = 0 THEN v_EmployeeID ELSE r.employee_id END)
          AND a.code  IN ('OVERTIME')
                        AND R.Status IN (
                          SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                          FROM (
                              SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                              FROM DUAL
                                CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
      );

      OPEN p_Cur FOR
      SELECT *
      FROM
      (
          SELECT ROWNUM AS STT, WORKINGDAY, FROMHOUR, TOHOUR, TOTALHOUR, REMARK, IsCompensatory, Status, ManagerID, TIMECREATE
          FROM
          (
              SELECT
                  R.ID ID,
                  TO_CHAR(R.REGDATE,'DD/MM/YYYY')  WORKINGDAY,
                  TO_CHAR(R.FROM_HOUR,'DD/MM/YYYY HH24:MI:SS')   FromHour,
                  TO_CHAR(R.TO_HOUR,'DD/MM/YYYY HH24:MI:SS')   ToHour,
                  NVL(R.To_Hour-r.from_hour, 0)*24 TOTALHOUR,
                  R.NOTE REMARK,
                  0 IsCompensatory,
                  R.Status Status,
                  NVL(he.dm_id,0) ManagerID,
                  TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')  TIMECREATE
              FROM AT_PORTAL_REG R     
              inner join at_sign s on s.id=r.sign_id
              inner join at_gsign           a on a.id =s.at_gsignid
              JOIN HU_EMPLOYEE he ON he.id = r.employee_id
              WHERE r.employee_id = (CASE WHEN v_ManagerStatus = 0 THEN v_EmployeeID ELSE r.employee_id END)
               AND a.code  IN ('OVERTIME')
                        AND R.Status IN (
                          SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                          FROM (
                              SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                              FROM DUAL
                                CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
              ORDER BY R.ID DESC
          )
      ) WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);
      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      ----DBMS_SQL.RETURN_RESULT(v_cursor);

  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'Databaserror' ;
          p_ResponseStatus := -99 ;
  END;


  /*Manager truy v?n l?y danh s?ch dang k? l?m th?m */
  PROCEDURE API_Get_ListRegisterOTMng
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_Type IN NUMBER,
      p_FromDate IN NVARCHAR2,
      p_ToDate IN NVARCHAR2,
      p_KeyEmployee IN NVARCHAR2,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
    p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
      v_Type NUMBER(19,0) := NVL(p_Type, -1);
      v_FromDate DATE;
      v_ToDate DATE;
      v_KeyEmployee NVARCHAR2(500) := '%' || NVL(p_KeyEmployee, '') || '%';
      v_Page NUMBER(10,0) := NVL(p_Page, 1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, 10);
      v_EmployeeID NUMBER(19,0);
      v_StautsID NUMBER(19,0);
      v_FD NUMBER(19,0);
      v_TD NUMBER(19,0);
      v_DefaultDate DATE := TO_DATE('01/01/1900', 'DD/MM/YYYY');
      v_temp NUMBER(1, 0) := 0;
  BEGIN
      p_Rowcount := 0;
      v_FromDate := TO_DATE(p_FromDate,  'MM/DD/YYYY');
      v_ToDate := TO_DATE(p_ToDate,  'MM/DD/YYYY');--NVL(p_ToDate, v_DefaultDate);
      --v_FD := BOS.FN_ConvertDateToNumber(v_FromDate);
      --v_TD := BOS.FN_ConvertDateToNumber(v_ToDate);
    SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDDHH24MISS')), TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDDHH24MISS')) INTO v_FD,v_TD FROM dual;


      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Status = '-1' THEN
          p_Message := 'StatusIsNotNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE su.ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
        ;
      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

       -- ??m s? d?ng
      SELECT COUNT(*) INTO p_Rowcount
      FROM 
       AT_PORTAL_REG r 
       inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
              WHERE
              a.code  IN ('OVERTIME')
              AND r.STATUS IN (
                      SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                      FROM (
                          SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                          FROM DUAL
                            CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
                  AND r.employee_id = v_EmployeeID
                  AND ( UPPER(e.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR r.employee_id LIKE v_KeyEmployee )
                  AND ( r.regdate BETWEEN v_FromDate AND v_ToDate )
                  ;

      --DBMS_OUTPUT.PUT_LINE(p_FromDate || ' - ' || v_FD || ' ,' || v_TD);
      OPEN p_Cur FOR
      SELECT *
      FROM
      (
          SELECT ROWNUM AS STT, ID, WorkingDay, FromHour, ToHour, TotalHour, Remark, Status, ManagerID, EmployeeName, CREATEDATE, Note, TypeName
          FROM
          (
              SELECT
                  r.ID ID, -- t?m th?i l?y theo ID dang k? th?ng nh?t l?y 1 ID dang k?
                  TO_CHAR( r.regdate,'DD/MM/YYYY') WorkingDay,
                  r.FROM_HOUR FromHour,
                  r.to_hour ToHour,
                  (r.to_hour-r.from_hour)*24 TotalHour,
                  r.note Remark,
                  r.STATUS  Status,
                  r.employee_id ManagerID,
                  E.FULLNAME_VN EmployeeName,
                  TO_CHAR( r.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS') CREATEDATE,
                   r.Note Note,
                    a.name_vn TypeName
              FROM AT_PORTAL_REG r
          LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
                WHERE a.code  IN ('OVERTIME')
              AND R.Status  IN (
                      SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                      FROM (
                          SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                          FROM DUAL
                            CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
                  AND r.employee_id = v_EmployeeID
                  AND ( UPPER(e.fullname_vn) LIKE UPPER(v_KeyEmployee) OR r.employee_id LIKE v_KeyEmployee )
                  AND (r.REGDATE BETWEEN v_FromDate AND v_ToDate )
          )
          ORDER BY ID DESC
      ) WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;




  /*API_Get_Period*/
  PROCEDURE API_Get_Period
    (p_Language       IN nvarchar2,
        p_Year IN NUMBER,
        p_Page IN NUMBER,
        p_PageSize IN NUMBER,
        p_cur out CURSOR_TYPE,
        p_Rowcount OUT NUMBER,
        p_CurrentPeriodId OUT NUMBER,
        p_Message OUT NVARCHAR2,
        p_ResponseStatus OUT NUMBER
    )
    AS
        v_Year NUMBER(4,0) := NVL(p_Year, 0);
        --v_Page NUMBER(4,0) := NVL(p_Page, 1);
        --v_PageSize NUMBER(4,0) := NVL(p_PageSize, 10);
        --v_cursor SYS_REFCURSOR;
    BEGIN
        p_Rowcount := 0;

        SELECT COUNT(*) INTO p_Rowcount
        FROM AT_Period W
        WHERE  W.Actflg = 'A'
                AND W.Year = (CASE WHEN v_Year = 0 THEN W.Year ELSE v_Year END);

        OPEN p_cur FOR
            SELECT *
            FROM
            (
                    SELECT
                        ROWNUM AS STT, ID, Name, Year,
                        TO_CHAR(StartDate,'DD/MM/YYYY') StartDate,
                        TO_CHAR(EndDate,'DD/MM/YYYY') EndDate,
                        TO_CHAR(PayDate,'DD/MM/YYYY HH24:MI:SS') PayDate
                    FROM
                    (
                        SELECT
                            W.Id AS ID,
                            W.Period_Name AS Name,
                            NVL(W.Year, 1900) AS Year,
                            w.start_date AS StartDate,
                            w.end_date AS EndDate,
                            w.end_date AS PayDate
                        FROM AT_Period W
                        WHERE  W.Actflg = 'A'
                                AND W.Year = (CASE WHEN v_Year = 0 THEN W.Year ELSE v_Year END)
                        ORDER BY W.Id DESC
                    )
            ) WHERE STT > (p_Page - 1)* p_PageSize AND STT < (p_Page * p_PageSize + 1)
            order by stt asc;

            SELECT ID into p_CurrentPeriodId
            FROM AT_Period W
            WHERE W.Actflg = 'A'
            AND W.Year = (SELECT EXTRACT(year FROM sysdate) FROM DUAL)
            AND w.month = (SELECT EXTRACT(month FROM sysdate) FROM DUAL);

          p_Message := 'IsSuccess';
          p_ResponseStatus := 1 ;
          --DBMS_SQL.RETURN_RESULT(v_cursor);
    EXCEPTION
        WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99 ;
    END;

     /*Manager reject record registerleave */
     PROCEDURE API_CancelRegisterLeave
    (p_Language       IN nvarchar2,
        p_UserID IN NUMBER,
        p_RegisterID IN NUMBER,
        p_Comment IN NVARCHAR2,
        p_cur out CURSOR_TYPE,
        p_Message OUT NVARCHAR2,
        p_ResponseStatus OUT NUMBER
    )
    AS
        v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
        v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
        v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
        v_EmployeeID NUMBER(19,0);
        v_UserRegisterID NUMBER(19,0);
        v_StatusNow NUMBER(19,0);
        v_ManagerID NUMBER(19,0);
        v_I NUMBER(19,0);
        --v_cursor SYS_REFCURSOR;
        v_temp NUMBER(19, 0) := 0;
    BEGIN
        p_ResponseStatus := 1;

        IF v_UserID = -1 THEN
            p_Message := 'UserIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        IF v_RegisterID = -1 THEN
            p_Message := 'RegisterIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;


        IF p_Message = '-1' THEN
            p_Message := 'CommentIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
        IF v_temp < 1 THEN
            p_Message := 'UserIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        BEGIN
            SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
        EXCEPTION
            WHEN OTHERS THEN
                p_Message := 'UserNotConfig';
                p_ResponseStatus := -600;
                RETURN;
        END;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg WHERE Id = v_RegisterID;
        IF v_temp < 1 THEN
            p_Message := 'RegisterIDIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg r --JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP = r.ID_REGGROUP
        WHERE r.employee_id = v_EmployeeID ;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependent:' || v_EmployeeID;
            p_ResponseStatus := -600;
            RETURN;
        END IF;--infomation approve employee??;

        SELECT r.sign_id, r.status INTO v_UserRegisterID, v_StatusNow
        FROM at_portal_reg r
        WHERE Id = v_RegisterID;

       /* -- c?n check l?i
        SELECT COUNT(*) INTO v_temp FROM HU_Employee  e
        WHERE e.direct_manager = v_EmployeeID
            AND Id = v_UserRegisterID;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependentEmployee';
            p_ResponseStatus := -600;
            RETURN;
        END IF;
    */

        IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
            BEGIN
                UPDATE at_portal_reg r SET r.status = 3, r.note = v_Comment
                WHERE Id = v_RegisterID;

                 UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 3--, ManagerComment = v_Comment
              WHERE ID_EMPLOYEE  = v_EmployeeID AND ID_REGGROUP in
              (select ID_REGGROUP from AT_PORTAL_REG where Id = v_RegisterID);

                SELECT r.employee_id , r.Id INTO v_ManagerID, v_I
                FROM at_portal_reg r --JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP  = r.ID_REGGROUP
                WHERE r.Id = v_RegisterID
                AND r.employee_id  = v_EmployeeID
                AND rownum = 1
                ;

               /*??y luu notify*/
                API_SaveNotification(v_EmployeeID,v_ManagerID,  3, v_I, 'Cancel Request Register Leave', p_Message, p_ResponseStatus);
                COMMIT;
                p_Message := 'IsSuccess';

                OPEN p_cur FOR
                    SELECT
                        1 STT,
                        R.Id ID,
                        TO_CHAR(r.from_hour , 'DD/MM/YYYY') LeaveFrom,
                        TO_CHAR(r.to_hour, 'DD/MM/YYYY') LeaveTo,
                        r.from_hour FromHour,
                        r.to_hour ToHour,
                        '' SymbolName,
                        NVL(R.To_Hour-r.from_hour, 0)*24 TotalHour,
                        NVL(R.Note, ' ') Remark,
                        R.Status Status,
                        E.Fullname_Vn EmployeeName,
                         TO_CHAR(r.created_date, 'DD/MM/YYYY HH24:MI:SS') CreateTime,
                         ApiType.Name TypeName,
                         R.Note Note
                    FROM at_portal_reg R
                         --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
                         LEFT JOIN HU_Employee E   ON r.employee_id = E.Id
                         LEFT JOIN (SELECT
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Sign_Id = ApiType.Id
                    WHERE R.Id = v_RegisterID;

               -- DBMS_SQL.RETURN_RESULT(v_CURSOR);
            EXCEPTION
                WHEN OTHERS THEN
                    p_Message := 'DatabaseError';
                    p_ResponseStatus := -99;
                    RETURN;
            END;
        ELSE
            p_Message := 'RegisterIsCancel';
            p_ResponseStatus := -600;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE || ', SQLERRM: ' || SQLERRM);
            p_Message := 'IsError-DatabaseError';
            p_ResponseStatus := -99;
    END;

    PROCEDURE API_CancelRegisterWLEO
    (p_Language       IN nvarchar2,
        p_UserID IN NUMBER,
        p_RegisterID IN NUMBER,
        p_Comment IN NVARCHAR2,
        p_cur out CURSOR_TYPE,
        p_Message OUT NVARCHAR2,
        p_ResponseStatus OUT NUMBER
    )
    AS
        v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
        v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
        v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
        v_EmployeeID NUMBER(19,0);
        v_UserRegisterID NUMBER(19,0);
        v_StatusNow NUMBER(19,0);
        v_ManagerID NUMBER(19,0);
        v_I NUMBER(19,0);
        --v_cursor SYS_REFCURSOR;
        v_temp NUMBER(19, 0) := 0;
    BEGIN
        p_ResponseStatus := 1;

        IF v_UserID = -1 THEN
            p_Message := 'UserIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        IF v_RegisterID = -1 THEN
            p_Message := 'RegisterIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;


        IF p_Message = '-1' THEN
            p_Message := 'CommentIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
        IF v_temp < 1 THEN
            p_Message := 'UserIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        BEGIN
            SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
        EXCEPTION
            WHEN OTHERS THEN
                p_Message := 'UserNotConfig';
                p_ResponseStatus := -600;
                RETURN;
        END;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg WHERE Id = v_RegisterID;
        IF v_temp < 1 THEN
            p_Message := 'RegisterIDIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg r --JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP = r.ID_REGGROUP
        WHERE r.employee_id = v_EmployeeID ;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependent:' || v_EmployeeID;
            p_ResponseStatus := -600;
            RETURN;
        END IF;--infomation approve employee??;

        SELECT r.employee_id , r.status INTO v_UserRegisterID, v_StatusNow
        FROM at_portal_reg r
        WHERE Id = v_RegisterID;

       /* -- c?n check l?i
        SELECT COUNT(*) INTO v_temp FROM HU_Employee  e
        WHERE e.direct_manager = v_EmployeeID
            AND Id = v_UserRegisterID;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependentEmployee';
            p_ResponseStatus := -600;
            RETURN;
        END IF;
    */

        IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
            BEGIN
                UPDATE at_portal_reg r SET r.status = 3, r.Note = v_Comment
                WHERE Id = v_RegisterID;

                 UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 3--, ManagerComment = v_Comment
              WHERE ID_EMPLOYEE  = v_EmployeeID AND ID_REGGROUP in
              (select ID_REGGROUP from AT_PORTAL_REG where Id = v_RegisterID);

                SELECT   r.employee_id , r.Id INTO v_ManagerID, v_I
                FROM   at_portal_reg r
                --JOIN   AT_PORTAL_APP apa ON apa.ID_REGGROUP  = r.ID_REGGROUP
                WHERE   r.Id = v_RegisterID
                AND   r.employee_id  = v_EmployeeID
                AND   rownum = 1
                ;

               /*??y luu notify*/
                API_SaveNotification(v_UserRegisterID,v_ManagerID,  3, v_I, 'Cancel Request Register WLEO', p_Message, p_ResponseStatus);
                COMMIT;
                p_Message := 'IsSuccess';

                OPEN p_cur FOR
                    SELECT
                        1 STT,
                        R.Id ID,
                        TO_CHAR(r.from_hour , 'DD/MM/YYYY') LeaveFrom,
                        TO_CHAR(r.to_hour, 'DD/MM/YYYY') LeaveTo,
                        r.from_hour FromHour,
                        r.to_hour ToHour,
                        '' SymbolName,
                        NVL(R.To_Hour-r.from_hour, 0)*24 TotalHour,
                        NVL(R.Note, ' ') Remark,
                        R.Status Status,
                        E.Fullname_Vn EmployeeName,
                         TO_CHAR(r.created_date, 'DD/MM/YYYY HH24:MI:SS') CreateTime,
                        NVL(R.Note, ' ') Note,
                        NVL(apiType.NAME, ' ') TypeName
                    FROM at_portal_reg R
                         --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
                         LEFT JOIN HU_Employee E   ON r.employee_id = E.Id LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME
                                    FROM   AT_TIME_MANUAL atm
                                    WHERE   ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.sign_id = apiType.Id
                    WHERE R.Id = v_RegisterID;

               -- DBMS_SQL.RETURN_RESULT(v_CURSOR);
            EXCEPTION
                WHEN OTHERS THEN
                    p_Message := 'DatabaseError';
                    p_ResponseStatus := -99;
                    RETURN;
            END;
        ELSE
            p_Message := 'RegisterIsCancel';
            p_ResponseStatus := -600;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE || ', SQLERRM: ' || SQLERRM);
            p_Message := 'IsError-DatabaseError';
            p_ResponseStatus := -99;
    END;

     PROCEDURE API_Type_WLEO(p_Language       IN nvarchar2,
                           P_CUR            OUT CURSOR_TYPE,
                           p_Message        OUT NVARCHAR2,
                           p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR
        SELECT  ID, atm.CODE , atm.NAME
        FROM   AT_TIME_MANUAL atm
        WHERE   ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' );

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'IsError';
            p_ResponseStatus := 0;
    END;
  EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;


     PROCEDURE API_Type_Leave(p_Language       IN nvarchar2,
                               P_CUR            OUT CURSOR_TYPE,
                               p_Message        OUT NVARCHAR2,
                               p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR
        SELECT S.CODE ID, S.CODE , S.NAME,G.CODE GCODE
        FROM AT_SIGN S
        INNER JOIN AT_GSIGN G ON G.ID=S.AT_GSIGNID
       WHERE G.CODE='LEAVE' 
       AND NVL(S.IS_DELETED,0)=0 AND NVL(S.STATUS,0) <>0
       ORDER BY S.ORDNO;
        /*SELECT
            p.ID ID,
            p.CODE CODE,
            p.MORNING_ID MORNING_ID,
            p.AFTERNOON_ID AFTERNOON_ID,
            '[' || p.CODE || '] ' || p.NAME MANUALLEAVE
        FROM AT_TIME_MANUAL p
        LEFT JOIN AT_FML F
            ON F.ID = p.MORNING_ID
        LEFT JOIN AT_FML F2
            ON F2.ID = p.AFTERNOON_ID
        WHERE p.ACTFLG = 'A'
        --AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
        AND (p.MORNING_ID = p.AFTERNOON_ID)
        ORDER BY p.NAME DESC;*/

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'IsError';
            p_ResponseStatus := 0;
    END;
  EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;


    PROCEDURE API_Time_Leave(p_Language       IN nvarchar2,
                               P_CUR            OUT CURSOR_TYPE,
                               p_Message        OUT NVARCHAR2,
                               p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR
        
       select o.code id,o.name_vn from ot_other_list o where o.type_code = 'TYPE_LEAVE' AND O.CODE <> 'TYPE_LEAVE3';

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'IsError';
            p_ResponseStatus := 0;
    END;
  EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;

     PROCEDURE API_Type_OT(p_Language       IN nvarchar2,
                               P_CUR            OUT CURSOR_TYPE,
                               p_Message        OUT NVARCHAR2,
                               p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR

    SELECT  ID,  NAME_VN  AS NAME
    FROM   OT_OTHER_LIST ool
    WHERE   TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
    AND   ool.status  = '1' ;

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'IsError';
            p_ResponseStatus := 0;
    END;
  EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;


     PROCEDURE API_GET_TIMESHEET(p_Language       IN nvarchar2,p_UserID IN NUMBER,
                                                    p_Period IN NUMBER,
                                                    P_CUR            OUT CURSOR_TYPE,
                                                    p_DayWork OUT NUMBER,
                                                    p_DayNotWork OUT NUMBER,
                                                    p_RowCount OUT NUMBER,
                                                    p_Message OUT NVARCHAR2,
                                                    p_ResponseStatus OUT  NUMBER)as
  v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
    v_Period NUMBER(19, 0) := NVL(p_Period, -1);
    v_EmployeeID NUMBER(19,0);
    v_DayWork NUMBER(19,0) := 0;
    v_DayNotWork NUMBER(10,0) := 0;
    v_STARTDATE date;
    v_temp NUMBER(19, 0) := 0;
  begin
    p_ResponseStatus := 1;
    p_RowCount := 0;

    IF v_UserID  = -1 THEN
        p_Message := 'UserIDIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    IF v_Period = -1 THEN
        p_Message := 'PeriodIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
    IF v_temp < 1 THEN
        p_Message := 'UserIsNotFound';
        p_ResponseStatus := -600;
        RETURN;
    END IF;

   BEGIN
     SELECT Emp.id
       INTO v_EmployeeID
       FROM se_user e
       left join hu_employee emp
         on emp.employee_code = e.employee_code
      WHERE e.id = v_UserID;
   EXCEPTION
     WHEN OTHERS THEN
       p_Message        := 'UserNotConfig';
       p_ResponseStatus := -600;
       RETURN;
   END;

    BEGIN
        SELECT p.start_date INTO v_STARTDATE FROM AT_PERIOD p WHERE Id = p_Period;
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'PeriodIDNotConfig';
            p_ResponseStatus := -600;
            RETURN;
    END;
    SELECT COUNT(*) INTO p_DayWork
    FROM at_time_timesheet_daily AT
    WHERE SUBSTR(AT.WORKINGDAY, 0, 6) = SUBSTR(v_STARTDATE, 0, 6)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE NOT IN ('OFF');
    SELECT COUNT(*) INTO p_DayNotWork
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE IN ('OFF');

    SELECT COUNT(*) INTO p_RowCount
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID;
    OPEN P_CUR FOR
        SELECT
            AT.Id ID,
            at.workingday DATES,
            CASE to_char(at.workingday,'d')
                WHEN '1' THEN u'Ch\1ee7 nh\1eadt'
                WHEN '2' THEN u'Th\1ee9 2'
                WHEN '3' THEN u'Th\1ee9 3'
                WHEN '4' THEN u'Th\1ee9 4'
                WHEN '5' THEN u'Th\1ee9 5'
                WHEN '6' THEN u'Th\1ee9 6'
                ELSE u'Th\1ee9 7' END DAY,
            AT.Shift_Code WORKINGCODE
        FROM at_time_timesheet_daily AT
        WHERE --trunc(at.workingday) = trunc(v_STARTDATE)
          TO_CHAR(AT.WORKINGDAY, 'YYYYMM' )  =   TO_CHAR(v_STARTDATE, 'YYYYMM' )
        AND AT.Employee_Id = v_EmployeeID;

    p_Message := 'IsSuccess';
    p_ResponseStatus := 1;
   -- DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
        p_Message := 'Database Error';
        p_ResponseStatus := -99;
  end;


   PROCEDURE API_GET_TIMESHEET_TOTAL(p_Language       IN nvarchar2,p_UserID IN NUMBER,
                                                    p_Period IN NUMBER,
                                                    P_CUR            OUT CURSOR_TYPE,
                                                    p_DayWork OUT NUMBER,
                                                    p_DayNotWork OUT NUMBER,
                                                    p_RowCount OUT NUMBER,
                                                    p_Message OUT NVARCHAR2,
                                                    p_ResponseStatus OUT  NUMBER
                                                    )
      as
  v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
    v_Period NUMBER(19, 0) := NVL(p_Period, -1);
    v_EmployeeID NUMBER(19,0);
    v_DayWork NUMBER(19,0) := 0;
    v_DayNotWork NUMBER(10,0) := 0;
    v_STARTDATE date;
    v_temp NUMBER(19, 0) := 0;
  begin
    p_ResponseStatus := 1;
    p_RowCount := 0;

    IF v_UserID  = -1 THEN
        p_Message := 'UserIDIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    IF v_Period = -1 THEN
        p_Message := 'PeriodIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
    IF v_temp < 1 THEN
        p_Message := 'UserIsNotFound';
        p_ResponseStatus := -600;
        RETURN;
    END IF;

   BEGIN
     SELECT Emp.id
       INTO v_EmployeeID
       FROM se_user e
       left join hu_employee emp
         on emp.employee_code = e.employee_code
      WHERE e.id = v_UserID;
   EXCEPTION
     WHEN OTHERS THEN
       p_Message        := 'UserNotConfig';
       p_ResponseStatus := -600;
       RETURN;
   END;

    BEGIN
        SELECT p.start_date INTO v_STARTDATE FROM AT_PERIOD p WHERE Id = p_Period;
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'PeriodIDNotConfig';
            p_ResponseStatus := -600;
            RETURN;
    END;
    SELECT COUNT(*) INTO p_DayWork
    FROM at_time_timesheet_daily AT
    WHERE SUBSTR(AT.WORKINGDAY, 0, 6) = SUBSTR(v_STARTDATE, 0, 6)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE NOT IN ('OFF');
    SELECT COUNT(*) INTO p_DayNotWork
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE IN ('OFF');

    SELECT COUNT(*) INTO p_RowCount
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID;
    OPEN P_CUR FOR
        SELECT
               AT.ID,
               he.EMPLOYEE_CODE ,
               he.FULLNAME_VN ,
               AT.EMPLOYEE_ID ,
               ht.NAME_VN  TITLE_NAME,
               ho.NAME_VN  ORG_NAME,
               ho.ID  ORG_ID,
               ap.ID  PERIOD_ID ,
               NVL(ap.PERIOD_STANDARD,0) PERIOD_STANDARD ,
               hsr.NAME  STAFF_RANK_NAME,
               NVL(at.WORKING_X,0) WORKING_X ,
                NVL(at.WORKING_F,0) WORKING_F,
                NVL(at.WORKING_E,0) WORKING_E,
                NVL(at.WORKING_A,0) WORKING_A ,
                NVL(at.WORKING_H,0) WORKING_H,
                NVL(at.WORKING_D,0) WORKING_D,
                NVL(at.WORKING_C,0) WORKING_C,
                NVL(at.WORKING_T,0) WORKING_T,
                NVL(at.WORKING_Q,0) WORKING_Q,
                NVL(at.WORKING_N,0) WORKING_N,
                NVL(at.WORKING_P,0) WORKING_P,
                NVL(at.WORKING_L,0) WORKING_L,
                NVL(at.WORKING_R,0) WORKING_R,
                NVL(at.WORKING_S,0) WORKING_S,
                NVL(at.WORKING_B,0) WORKING_B,
                NVL(at.WORKING_K,0) WORKING_K,
                NVL(at.WORKING_J,0) WORKING_J,
                NVL(at.TOTAL_WORKING_XJ,0) TOTAL_WORKING_XJ,
                NVL(at.WORKING_TS,0) WORKING_TS,
                NVL(at.WORKING_O,0) WORKING_O,
                NVL(at.WORKING_V,0) WORKING_V,
                NVL(at.TOTAL_TS_V,0) TOTAL_TS_V,
                NVL(at.TOTAL_WORKING,0) TOTAL_WORKING,
                at.CREATED_BY ,
                at.CREATED_DATE ,
                at.CREATED_LOG,
                at.MODIFIED_BY ,
                at.MODIFIED_DATE ,
                at.MODIFIED_LOG
        FROM AT_TIME_TIMESHEET_MONTHLY AT
        JOIN HU_EMPLOYEE he ON he.ID  = AT.EMPLOYEE_ID
        LEFT JOIN HU_TITLE ht  ON ht.id = AT.TITLE_ID
        LEFT JOIN HU_STAFF_RANK hsr  ON hsr.ID  = AT.STAFF_RANK_ID
        LEFT JOIN HU_ORGANIZATION ho ON ho.ID  = AT.ORG_ID
        JOIN AT_PERIOD ap  ON ap.ID  = AT.PERIOD_ID
        WHERE  AT.PERIOD_ID  =  v_Period
        AND AT.Employee_Id = v_EmployeeID;

    p_Message := 'IsSuccess';
    p_ResponseStatus := 1;
   -- DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
        p_Message := 'Database Error';
        p_ResponseStatus := -99;
  end;

  PROCEDURE API_AT_SwipeMachine_List(p_Language       IN nvarchar2,p_Rowcount       OUT NUMERIC,
                                        P_CUR            OUT CURSOR_TYPE,
                                        p_Message        OUT nvarchar2,
                                        p_ResponseStatus OUT NUMERIC) as
   begin
     OPEN P_CUR FOR
       SELECT id ID,
              t.terminal_code TERMINAL_CODE,
              t.terminal_name TERMINAL_NAME,
              t.address_place ADDRESS_PLACE,
              t.terminal_ip TERMINAL_IP,
              t.port PORT,
              t.pass PASS,
              t.note NOTE,
              t.actflg TERMINAL_STATUS,
              t.modified_date LAST_TIME_UPDATE
         FROM at_terminals t;
     --DBMS_SQL.RETURN_RESULT(v_cursor);
     p_Message        := u'Susscess';
     p_ResponseStatus := 1;
   EXCEPTION
     WHEN OTHERS THEN
       p_Rowcount       := 0;
       p_Message        := u'Error';
       p_ResponseStatus := -1;
   end;


  PROCEDURE API_Get_Profile
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_FullName OUT NVARCHAR2,
      p_UserName OUT NVARCHAR2,
      p_Mobile OUT NVARCHAR2,
      p_Address OUT NVARCHAR2,
      p_Email OUT NVARCHAR2,
      p_Avatar OUT NVARCHAR2,
      p_DofB OUT NVARCHAR2,
      p_Nationality OUT NVARCHAR2,
      p_Nation OUT NVARCHAR2,
      p_Title OUT NVARCHAR2,
      p_IDCard OUT NVARCHAR2,
      p_Gender OUT NVARCHAR2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_EmpID NUMBER(19,0);
      v_ImageID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(1, 0) := 0;
  BEGIN
      p_FullName := ' ' ;
      p_UserName := ' ' ;
      p_Mobile := ' ' ;
      p_Address := ' ' ;
      p_Email := ' ' ;
      p_Avatar := ' ' ;
      p_DofB := 0 ;
      p_Nationality := ' ' ;
      p_Nation := ' ' ;
      p_Title := ' ' ;
      p_IDCard := ' ' ;
      p_Gender := ' ' ;

      IF ( v_UserID = -1 ) THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      SELECT COUNT(ID) INTO v_temp FROM SE_USER su WHERE  ID = v_UserID AND su.ACTFLG = 'A';
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      SELECT he.ID INTO v_EmpID FROM HU_EMPLOYEE he  JOIN SE_USER su ON su.EMPLOYEE_CODE = he.EMPLOYEE_CODE
     WHERE su.ID = v_UserID AND rownum = 1 ORDER BY he.employee_code desc;

      IF v_EmployeeID != -1 THEN
          SELECT COUNT(ID) INTO v_EpmViewID FROM HU_Employee WHERE ID = v_EmployeeID;
          IF v_EpmViewID < 1 THEN
              p_Message := 'EmployeeNotFound';
              p_ResponseStatus := -600;
              RETURN;
          END IF;

          v_temp := 0;
          --SELECT COUNT(ID) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
          --IF v_temp < 1 THEN
          --    p_Message := 'YouNotManagerEmployee';
          --    p_ResponseStatus := -600;
          --    RETURN;
         -- END IF;
      END IF;

      BEGIN
          v_EmpID := NVL(v_EmpID, -1);
          v_temp := 0;

          SELECT COUNT(1) INTO v_temp FROM DUAL
          WHERE ( NOT EXISTS ( SELECT ID
                              FROM HU_Employee
                               WHERE  ID = v_EmpID )
                  OR NOT EXISTS ( SELECT  EMPLOYEE_ID
                       FROM HU_Employee_CV
                        WHERE  EMPLOYEE_ID = v_EmpID ) );
          IF v_temp = 1 THEN
              p_Message := 'NotFindEmployeeCV';
              p_ResponseStatus := -600;
              RETURN;
          END IF;

         begin
              SELECT
--                  TO_CHAR(NVL(E.BIRTH_DATE ,' ' ) , 'DD/MM/YYYY'),
                        nvl(to_char(E.BIRTH_DATE, 'DD/MM/YYYY'), ' '),
                        nvl(E.IMAGE,'NoImage.jpg') ,
                  E.PER_MAIL ,
                  NVL(e.contact_mobile, ' ') ,
                  E.PER_ADDRESS ,
                  E.ID_NO ,
                  E.PER_ADDRESS ,
                   C.NAME_VN  ,
                  O.CODE ,
                   OL.NAME_VN
              INTO
                  p_DofB,
                  --v_ImageID,
                        P_Avatar,
                  p_Email,
                  p_Mobile,
                  p_Address,
                  p_IDCard,
                  p_Address,
                  p_Nationality,
                  p_Gender,
                  p_Nation -- native
              FROM HU_EMPLOYEE he
                LEFT JOIN HU_EMPLOYEE_CV  E ON e.EMPLOYEE_ID  = he.id
                  LEFT JOIN HU_NATION C   ON E.Nav_Nation = C.ID
                  LEFT JOIN OT_OTHER_LIST O   ON E.GENDER = O.ID
                  LEFT JOIN OT_OTHER_LIST OL   ON E.Nav_Nation  = OL.ID
              WHERE
                  he.ID = CASE WHEN ( v_EmployeeID != -1 ) THEN v_EmployeeID ELSE v_EmpID END
                 AND rownum = 1;
               EXCEPTION
            WHEN OTHERS THEN
              --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
                  p_Message := 'ServerError GetInfo HU_EMPLOYEE_CV';
                  p_ResponseStatus := -600;

            END ;

          SELECT
              E.FULLNAME_VN ,   T.NAME_VN
          INTO
              p_FullName,  p_Title
          FROM HU_Employee E
          LEFT JOIN HU_Title T   ON E.TITLE_ID = T.ID
          WHERE  E.ID = CASE WHEN ( v_EmployeeID != -1 ) THEN v_EmployeeID ELSE v_EmpID END
          AND rownum = 1
          ;

          SELECT su.USERNAME INTO p_UserName
          FROM SE_USER su WHERE su.ID = v_UserID AND rownum = 1;

          IF ( v_ImageID = 0 ) THEN
              v_ImageID := 828432 ;
          END IF;

          --p_Avatar := BOS.FN_GetParamValue('URLIPORTAL') || '/Media/RenderFile?ImageId=' || TO_NCHAR(v_ImageID) || 'dd=';
            --P_Avatar := case when v_ImageID =0 then '/services/EmployeeImage/NoImage.jpg' else ('/services/EmployeeImage/' || cast(v_ImageID as varchar2(255))) end as PATH,
          --P_Avatar := 'https://previews.123rf.com/images/solargaria/solargaria1709/solargaria170900007/85362512-user-icon-male-avatar-in-business-suit-businessman-flat-icon-man-in-business-suit-avatar-of-business.jpg';
            --P_Avatar := '/services/EmployeeImage/' || cast(v_ImageID as varchar2(255));
          --p_DofB := BOS.FN_ConvertNumberToDate(NVL(p_DofB, 19000101000000));
          p_Message := 'IsSuccess';
          p_ResponseStatus := 1;

         EXCEPTION
        WHEN OTHERS THEN
          --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError GetInfo';
              p_ResponseStatus := -600;
      END;

     p_FullName := NVL(p_FullName, ' ') ;
     p_UserName := NVL(p_UserName, ' ') ;
     p_Mobile := NVL(p_Mobile, '0987606112 ') ;
     p_Address := NVL(p_Address, ' ') ;
     p_Email := NVL(p_Email, ' ') ;
     p_Avatar := NVL(p_Avatar, ' ') ;
     p_DofB := NVL(p_DofB, ' ') ;
     p_Nationality := NVL(p_Nationality, ' ') ;
     p_Nation := NVL(p_Nation, ' ') ;
     p_Title := NVL(p_Title, ' ') ;
     p_IDCard := NVL(p_IDCard, ' ') ;
     p_Gender := NVL(p_Gender, ' ') ;
    EXCEPTION
      WHEN OTHERS THEN
          --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError';
              p_ResponseStatus := -600;
  END;



  PROCEDURE API_GetNotification
  (p_Language       IN nvarchar2,
    p_UserID IN NUMBER,
    p_Page IN NUMBER,
    p_PageSize IN NUMBER,
    p_Cur OUT CURSOR_TYPE,
    p_Rowcount OUT NUMBER,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  )
  AS
     v_UserID NUMBER(19,0) := p_UserID;
     v_Page NUMBER(10,0) := p_Page;
     v_PageSize NUMBER(10,0) := p_PageSize;
     v_temp NUMBER(19, 0) := 0;
     v_EmployeeID NUMBER(19,0);

  BEGIN
     v_UserID := NVL(v_UserID, -1) ;
     v_Page := NVL(v_Page, 1) ;
     v_PageSize := NVL(v_PageSize, 10) ;
     p_Rowcount := 0 ;
     BEGIN
        SELECT ID INTO v_temp FROM SE_USER su WHERE  su.ID = v_UserID AND ACTFLG = 'A';
        EXCEPTION WHEN NO_DATA_FOUND THEN v_temp := 0;
     END;
     IF v_temp < 1 THEN
        p_Message := 'UserIsNotFound';
        p_ResponseStatus := -600 ;
        RETURN;
     END IF;
     BEGIN
         SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
         EXCEPTION WHEN NO_DATA_FOUND THEN v_EmployeeID := 0;
     END;
     IF ( v_EmployeeID < 1 ) THEN
        p_Message := 'UserNotConfig';
        p_ResponseStatus := -600 ;
        RETURN;
     END IF;

     BEGIN
        SELECT COUNT(*) INTO p_Rowcount
            FROM ( SELECT C.ID
                   FROM   SE_NOTIFICATION C
                   WHERE  C.TO_EMPLOYEE_ID = v_EmployeeID);


          OPEN  p_Cur FOR
          SELECT *
          FROM
          (
              SELECT ROWNUM AS STT, ID, Notification, DATES, TypeNotification, UserID, Status, NameUser, EntityTypeID, EntityID
              FROM
              (
                  SELECT
                     ID ,
                     '' || Notification || '' Notification,
                     Date_ "DATES",
                     TypeNotification ,
                     UserID ,
                     Status ,
                     NameUser ,
                     EntityTypeID ,
                     EntityID
                  FROM ( SELECT C.ID ID  ,
                              C.Message Notification  ,
                              nvl(to_char(C.CREATED_DATE, 'DD/MM/YYYY HH24:MI:SS'), ' ') Date_ ,
                              'Receive' TypeNotification  ,
                              H.ID UserID  ,
                              C.SEND_Status Status ,
                              H.FULLNAME_VN NameUser  ,
                              0 EntityTypeID ,
                              0 EntityID
                       FROM SE_NOTIFICATION C
                              LEFT JOIN HU_Employee H   ON H.ID =C.FROM_EMPLOYEE_ID
                        WHERE  C.TO_EMPLOYEE_ID = v_EmployeeID
                       ) BB
                  ORDER BY DATES DESC
              )
          )
              WHERE
                  STT > (V_PAGE - 1)* V_PAGESIZE AND STT < (V_PAGE * V_PAGESIZE + 1);

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1 ;

     END;
        --DBMS_SQL.RETURN_RESULT(v_cursor);
  END;

  /*L?y th?ng tin dang k? ngh?*/
  PROCEDURE API_Get_RegisterLeaveInfo
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Register OUT NUMBER,
      p_Used OUT NUMBER,
        p_Reject OUT NUMBER,
      p_AllRegister OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0);
  BEGIN
      p_Register := 0;
      p_Used := 0;
        p_Reject :=0;
      p_AllRegister := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IncorectUserID';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_EmployeeID := -1;
      END;

      IF v_EmployeeID = -1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) AS Register INTO p_Register
      FROM   AT_PORTAL_REG apr  
      inner join at_sign s on s.id=apr.sign_id
      inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   apr.employee_id = v_EmployeeID
      AND   apr.STATUS IN ( 0, 1) -- ?ang k?
    AND    a.code = 'LEAVE';

      SELECT COUNT(*) AS Used INTO p_Used
      FROM   AT_PORTAL_REG apr  --portal_register_leave   
      inner join at_sign s on s.id=apr.sign_id
      inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   apr.employee_id = v_EmployeeID
      AND   a.code = 'LEAVE'
      AND   apr.Status = 2; -- ?? d?ng (d? ph? duy?t)

        SELECT COUNT(*) AS Reject INTO p_Reject
      FROM   AT_PORTAL_REG apr
      inner join at_sign s on s.id=apr.sign_id
      inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   apr.employee_id = v_EmployeeID
      AND   a.code = 'LEAVE'
      AND   apr.Status = 3; -- T? ch?i

      SELECT COUNT(*) AS All_Register INTO p_AllRegister
      FROM   AT_PORTAL_REG apr 
      inner join at_sign s on s.id=apr.sign_id
      inner join at_gsign           a on a.id =s.at_gsignid
      WHERE apr.employee_id = v_EmployeeID -- T?t c?
    AND    a.code = 'LEAVE';

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

  EXCEPTION
      WHEN OTHERS THEN
          --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError';
              p_ResponseStatus := -600;
  END;



  /*API_Get_Working*/
  PROCEDURE API_Get_Working
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_CUR OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, -1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
      v_EmpID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(19, 0) := 0;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;


      SELECT ID INTO v_temp FROM SE_User WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT he.ID INTO v_EmpID FROM SE_USER su JOIN HU_EMPLOYEE he  ON he.EMPLOYEE_CODE  = su.EMPLOYEE_CODE WHERE su.ID = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      IF v_EmployeeID != -1 THEN
          BEGIN
              SELECT ID INTO v_EpmViewID FROM HU_Employee WHERE ID = p_EmployeeID;
          EXCEPTION
              WHEN OTHERS THEN
                  p_Message := 'EmployeeNotFound';
                  p_ResponseStatus := -600;
                  RETURN;
          END;

         -- SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
         -- IF v_temp < 1 THEN
         --     p_Message := 'YouNotManagerEmployee';
         --     p_ResponseStatus := -600;
         --     RETURN;
        --  END IF;
      END IF;

      SELECT COUNT(*) INTO p_Rowcount
      FROM HU_WORKING W
      WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

      OPEN p_CUR FOR
      SELECT *
      FROM
      (
          SELECT ROWNUM STT, ID, DECISIONTYPENAME, TITLE,
           --TO_CHAR(SIGNDATE, 'DD/MM/YYYY')  SIGNDATE,
           TO_CHAR(EFFECTDATE,'DD/MM/YYYY') EFFECTDATE,
            TO_CHAR( START_DATE_CHALLENGE,'DD/MM/YYYY') START_DATE_CHALLENGE,   
            TO_CHAR( END_DATE_CHALLENGE,'DD/MM/YYYY') END_DATE_CHALLENGE,
            --SIGNNAME, SIGNTITLENAME,
            TITLENAMEROOT,
            ORGNAMEROOT,   ORGNAME, TYPE_NAME
          FROM
          (
              SELECT
                  W.ID ID,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then Dt.Type_Name Else Dt.Type_Name End As   DecisionTypeName  , 
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then TitleRoot.Name_Vn Else TitleRoot.Name_En End As   TitleNameRoot  , 
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then OrgRoot.Name_Vn Else OrgRoot.Name_En End As   OrgNameRoot  ,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then T.Name_Vn Else T.Name_En End As Title,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then O.Name_Vn Else O.Name_En End As OrgName,
                  W.Start_Date_Challenge ,
                  W.End_Date_Challenge,
                  W.SIGN_DATE SignDate,
                  W.EFFECT_DATE  EffectDate,
                  W.End_Date  ExpireDate,
                  NVL(sgn.fullname_vn , ' ') SignName,
                  NVL(sgnTitle.Name_Vn, ' ') SignTitleName,
                  NVL(O.NAME_VN , ' ') CompanyName,
                  de.type_name
                  
              FROM HU_Working W 
              left join hu_decision_type de on w.decision_type_id = de.id
                   Left Join Hu_Title TitleRoot On TitleRoot.Id=W.Title_Id 
                   Left Join Hu_Organization OrgRoot On OrgRoot.Id=W.Org_Goc_Id
                  Left Join HU_Title T ON W.TITLE_ID = T.ID  
                  left join hu_title sgnTitle on sgnTitle.id=w.sign_title_id 
                  left join hu_employee sgn on sgn.id=w.sign_id
                  Left Join Hu_Decision_Type Dt   ON W.Decision_Type_Id  = Dt.Id
                  LEFT JOIN HU_Organization O   ON W.ORG_ID = O.ID
              WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
              ORDER BY W.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);

  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_Get_WorkingOld
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
    p_CUR OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, 1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, 10);
      v_EmpID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(1, 0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(1) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT he.ID INTO v_EmpID FROM SE_USER su JOIN HU_EMPLOYEE he ON he.EMPLOYEE_CODE  = su.EMPLOYEE_CODE WHERE su.ID = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      IF p_EmployeeID != -1 THEN
          BEGIN
              SELECT ID INTO v_EpmViewID FROM HU_Employee WHERE ID = p_EmployeeID;
          EXCEPTION
              WHEN OTHERS THEN
                  p_Message := 'EmployeeNotFound';
                  p_ResponseStatus := -600;
                  RETURN;
          END;

--          SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
--          IF v_temp < 1 THEN
--              p_Message := 'YouNotManagerEmployee';
--              p_ResponseStatus := -600;
--              RETURN;
--          END IF;
      END IF;

      SELECT COUNT(*) INTO p_Rowcount
      FROM HU_WORKING_BEFORE W JOIN HU_EMPLOYEE he ON he.ID  = w.EMPLOYEE_ID
      WHERE  he.ID =  CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

      OPEN p_CUR FOR
      SELECT *
      FROM
      (
          SELECT ROWNUM STT, ID, COMPANY_NAME, Telephone, Address,
            TO_CHAR(JoinDate,'DD/MM/YYYY') JoinDate,
            TO_CHAR(EndDate,'DD/MM/YYYY') EndDate,
            Salary, TitleName, TerReason
          FROM
          (
              SELECT
                  W.ID ID,
                  W.COMPANY_NAME ,
                    W.TELEPHONE Telephone,
                  W.COMPANY_ADDRESS Address,
                  W.JOIN_DATE JoinDate,
                  W.END_DATE  EndDate,
                  0 Salary,
                  NVL(W.TITLE_NAME , ' ') TitleName,
                  NVL(W.TER_REASON , ' ') TerReason
              FROM HU_WORKING_BEFORE  W JOIN HU_EMPLOYEE he ON he.ID  = W.EMPLOYEE_ID
              WHERE  he.ID =  CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
              ORDER BY W.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;




  /*END GET PROCEDURE*/
  /*=================================================================================================================*/

  PROCEDURE API_LOGGER_ERROR(p_ErrorCode      IN NVARCHAR2,
                                                 P_ErrorTitle     IN NVARCHAR2,
                                                 P_ErrorDetail    IN NVARCHAR2,
                                                 p_UserInfo       IN NVARCHAR2,
                                                 p_UserID         IN NUMBER,
                                                 p_Message        OUT NVARCHAR2,
                                                 p_ResponseStatus OUT NUMBER) AS
    v_ErrorCode   NVARCHAR2(10) := NVL(p_ErrorCode, -1);
    v_ErrorTitle  NVARCHAR2(50) := NVL(P_ErrorTitle, '-1');
    v_ErrorDetail NVARCHAR2(1500) := NVL(P_ErrorDetail, '-1');
    v_UserInfo    NVARCHAR2(500) := NVL(p_UserInfo, '-1');
    v_UserID      NUMBER(19, 0) := NVL(p_UserID, -1);
  BEGIN
    IF v_ErrorCode = -1 THEN
      p_Message        := 'ErrorCodeIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_ErrorTitle = '-1' THEN
      p_Message        := 'ErrorTitleIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_ErrorDetail = '-1' THEN
      p_Message        := 'ErrorDetailIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_UserInfo = '-1' THEN
      p_Message        := 'UserInfoIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_UserID = -1 THEN
      p_Message        := 'UserIDIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    BEGIN
      INSERT INTO LOGGER_ERROR_MOBILE
        (I, C, N, DETAIL, USER_ID, USER_INFO)
      SELECT
         NVL((SELECT max(I) FROM LOGGER_ERROR_MOBILE),0) + 1 ,
         v_ErrorCode,
         v_ErrorTitle,
         v_ErrorDetail,
         v_UserID,
         v_UserInfo
      FROM dual ;
      COMMIT;

      p_Message        := 'IsSuccess';
      p_ResponseStatus := 1;
      RETURN;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'DatabaseError';
        p_ResponseStatus := -99;
        ROLLBACK;
        RETURN;
    END;

  EXCEPTION
    WHEN OTHERS THEN
      p_Message        := 'DatabaseError';
      p_ResponseStatus := -99;
  END;

  /* Save notification - c?n test v? view l?i m?c d?ch */
  PROCEDURE API_SaveNotification
  (
    p_ViewerUserID IN NUMBER,
    p_ActorUserID IN NUMBER,
    p_EntityTypeID IN NUMBER,
    p_EntityID IN NUMBER,
    p_MessageNotification IN NVARCHAR2,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  )
  AS
     v_DateNow DATE := SYSDATE;
     v_ID NUMBER(19,0);
  BEGIN
      BEGIN
          --v_ID := SEQ_Portal_NotificationObject.NEXTVAL;

            INSERT INTO SE_NOTIFICATION(ID,
                                      SVALUE,
                                      NVALUE,
                                      MESSAGE,
                                      SENT_DATE,
                                      CREATED_DATE,
                                      FROM_EMPLOYEE_ID,
                                      TO_EMPLOYEE_ID,
                                      SEND_STATUS)
          SELECT
              NVL((SELECT max(id) FROM SE_NOTIFICATION),0)+1  ID,
                  p_EntityTypeID P_SVALUE,
                  p_EntityID P_NVALUE,
                  p_MessageNotification,
                  SYSDATE,
                  SYSDATE,
                  p_ActorUserID P_FROM_EMPLOYEE_ID,
                  p_ViewerUserID P_TO_EMPLOYEE_ID,
                  0 P_SEND_STATUS
          FROM dual;

          p_Message := 'IsSuccess';
          p_ResponseStatus := 1;
      EXCEPTION
          WHEN OTHERS THEN
              ROLLBACK;
              p_Message := 'DatabaseErrorNotify';
              p_ResponseStatus := -99;
              RETURN;
      END;

  END;


  PROCEDURE API_SUB_RegisterLeaveDetail
  (
      p_UserID IN NUMBER,
      p_LeaveFrom IN DATE,
      p_LeaveTo IN DATE,
      p_Remark IN NVARCHAR2,
      p_SymbolId IN NUMBER,
      p_RegDate IN NUMBER,
      p_FromHour IN NUMBER,
      p_ToHour IN NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_EmployeeID NUMBER(19, 0) := 0;
      v_DateDiff NUMBER(3, 0) := 0;
      v_CounterDate NUMBER(19, 0) := 0;
      V_TotalHourBreak NUMBER(19,3) := 0;
      v_WDCountWS NUMBER(19,0) := 0;
      v_LF NUMBER(19,0);
      v_LT NUMBER(19,0);
      v_FH NUMBER(19,0);
      v_TH NUMBER(19,0);
      v_ManagerID NUMBER(19,0);
      v_WorkingDay NUMBER(19, 0);
      v_WorkingDayD DATE;
      v_WF NUMBER(19,0);
      v_WT NUMBER(19,0);
      v_BF NUMBER(19,0);
      v_BT NUMBER(19, 0);
      v_WDExistedCount NUMBER(1,0);
      v_WDExistedCountTime NUMBER(1, 0);
      v_WDExistedCountDay NUMBER(1,0);
      v_TotalHourLeave NUMBER(19, 5);
      v_JoinDate DATE;
      v_EmployeeCode VARCHAR2(30);
      v_TerLastDate Date;
      v_Temp NUMBER(1,0) := 0;
  BEGIN
      p_Message := '';
      p_ResponseStatus := 1;

      SELECT COUNT(ID) INTO v_Temp FROM SE_USER su WHERE ID = p_UserID;
      IF v_Temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

     SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = p_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      IF v_EmployeeID < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      v_DateDiff := p_LeaveTo - p_LeaveFrom;
      SELECT   JOIN_DATE , EMPLOYEE_CODE , he.TER_LAST_DATE  INTO v_JoinDate, v_EmployeeCode, v_TerLastDate
      FROM   HU_EMPLOYEE he
      WHERE    ID = v_EmployeeID;

      --v_LF := BOS.FN_ConvertDateToNumber(p_LeaveFrom) ;
      --v_LT := BOS.FN_ConvertDateToNumber(p_LeaveTo) ;
       SELECT   TO_NUMBER(TO_CHAR(p_LeaveFrom, 'YYYYMMDDHH24MISS')),
           TO_NUMBER(TO_CHAR(p_LeaveTo, 'YYYYMMDDHH24MISS'))
           INTO v_LF, v_LT
       FROM   dual;

      v_FH := p_FromHour;
      v_TH := p_ToHour;

      SELECT he.dm_id  INTO v_ManagerID FROM HU_EMPLOYEE he WHERE ID = v_EmployeeID;

      WHILE v_CounterDate <= v_DateDiff
      LOOP
          DECLARE
               v_ShiftCount NUMBER(10,0);
               v_ShiftHourStart NUMBER(19,0);
               v_ShiftHourEnd NUMBER(19,0);
               v_ShiftBreakStart NUMBER(19,0);
               v_ShiftBreakEnd NUMBER(19,0);
               v_CountSymbol NUMBER(19,0);
               v_Holiday NUMBER(10,0);
               v_HourLeaveInDay NUMBER(10,2);
               v_TotalShiftTime FLOAT(53);
               v_TypeStatus NUMBER(19,0);
          BEGIN
              --v_WorkingDay := BOS.FN_ConvertDateToNumber(p_LeaveFrom + v_CounterDate);
        SELECT   TO_NUMBER(TO_CHAR(p_LeaveFrom + v_CounterDate, 'YYYYMMDDHH24MISS'))
            ,API_FN_ConvertNumberToDate(TO_NUMBER(TO_CHAR(p_LeaveFrom + v_CounterDate, 'YYYYMMDDHH24MISS')))
        INTO   v_WorkingDay, v_WorkingDayD
           FROM   dual;
              BEGIN
                  SELECT
                      --BOS.FN_ConvertNumberToDate(P.WorkingFrom) ,
                      --BOS.FN_ConvertNumberToDate(P.WorkingTo) ,
                      TO_NUMBER(TO_CHAR(SH.Work_Start , 'YYYYMMDDHH24MISS')),
                      TO_NUMBER(TO_CHAR(SH.Work_End , 'YYYYMMDDHH24MISS')),
                      TO_NUMBER(TO_CHAR(SH.Break_Start , 'YYYYMMDDHH24MISS')) ,
                      TO_NUMBER(TO_CHAR(SH.Break_End , 'YYYYMMDDHH24MISS'))
                  INTO
                      v_WF,
                      v_WT,
                      v_BF,
                      v_BT
                  FROM AT_WORKSIGN P
                      JOIN AT_SHIFT SH   ON P.SHIFT_ID = SH.ID
                      --JOIN AT_TIME_MANUAL S   ON SH.MANUAL_ID = S.ID
                  WHERE  P.EMPLOYEE_ID = v_EmployeeID
                         AND SUBSTR(P.WORKINGDAY , 0, 8) = SUBSTR(v_WorkingDay, 0, 8);
              EXCEPTION
                  WHEN OTHERS THEN
                      v_WF := NULL;
                      v_WT := NULL;
                      v_BF := NULL;
                      v_BT := NULL;
                      v_CounterDate := v_CounterDate + 1;
                      CONTINUE;
              END;

              -- Check ca neu la ca nghi thi bo qua
              SELECT   COUNT(*) INTO v_ShiftCount
              FROM   AT_WORKSIGN P
                    JOIN AT_SHIFT SH   ON P.SHIFT_ID = SH.ID
                    --JOIN AT_TIME_MANUAL atm ON atm.id = p.
                   --left JOIN AT_FML S   ON atm.AFTERNOON_ID = S.ID OR atm.MORNING_ID  = S.ID
              WHERE  P.EMPLOYEE_ID = v_EmployeeID
                     AND SUBSTR(P.WorkingDay, 0, 8) = SUBSTR(v_WorkingDay, 0, 8)   ;
                    -- AND S.IS_LEAVE = -1;

              IF v_ShiftCount > 0 THEN
                  v_CounterDate := v_CounterDate + 1;
                  CONTINUE;
              END IF;

              SELECT COUNT(*) INTO v_WDCountWS
              FROM AT_WORKSIGN
              WHERE EMPLOYEE_ID = v_EmployeeID
              AND TO_NUMBER(TO_CHAR(WorkingDay , 'YYYYMMDDHH24MISS'))  = v_WorkingDay;

              IF v_WDCountWS < 1 THEN
                  p_Message := 'WorkingSignNull';
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Check neu la ngay nghi thi bo qua
              SELECT COUNT(*) INTO v_Holiday
              FROM AT_Holiday
              WHERE SUBSTR(WorkingDay, 0, 8) = SUBSTR(v_WorkingDay, 0, 8);

              IF v_Holiday > 0 THEN
                  v_CounterDate := v_CounterDate + 1;
                  CONTINUE;
              END IF;

              -- Check ngay vao cong ty sau ngay dang ky nghi
              IF v_JoinDate = NULL OR SUBSTR(v_JoinDate, 0, 8) > SUBSTR(v_WorkingDay, 0, 8)  THEN
                  p_Message := p_Message || ' {EmployeeCodeError} ' || v_EmployeeCode || ' {JoinDateError} ?br/?' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Check ngay lam viec cuoi cung truoc ngay dang ky nghi
              IF v_TerLastDate = NULL OR SUBSTR(v_TerLastDate, 0, 8) > SUBSTR(v_WorkingDay, 0, 8)  THEN
                  p_Message := p_Message || ' {EmployeeCodeError} ' || v_EmployeeCode || ' {TerlastDateError} ?br/?' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Chuyen ngay trong gio nghi tu Today sang WorkingDay
              API_Shift_Calculate(v_WorkingDayD, v_FH, v_TH, v_FH, v_TH);

              -- Check dang ky trung gio da dang ky
              SELECT COUNT(*) INTO v_WDExistedCount
              FROM AT_PORTAL_REG P  
              inner join at_sign s on s.id=p.sign_id
              inner join at_gsign           a on a.id =s.at_gsignid
              WHERE
              a.code IN ('LEAVE')
              AND P.Employee_Id = v_EmployeeID
                  AND P.Working_Day = p_LeaveFrom
                  AND P.Working_Day = p_LeaveTo
                  AND TO_NUMBER(TO_CHAR(P.From_Hour, 'YYYYMMDDHH24MISS')) = v_FH
                  AND TO_NUMBER(TO_CHAR(P.To_Hour, 'YYYYMMDDHH24MISS')) = v_TH;
              IF v_WDExistedCount > 0 THEN
                  p_Message := 'DatetimeIsRegisted' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Check dang ky trong khoang thoi gian da dang ky
              SELECT COUNT(*) INTO v_WDExistedCountTime
              FROM AT_PORTAL_REG P
              inner join at_sign s on s.id=p.sign_id
             inner join at_gsign           a on a.id =s.at_gsignid
              WHERE   A.Code IN ('LEAVE')
              AND P.Employee_Id = v_EmployeeID
                     AND ( SUBSTR(P.From_Hour , 0, 8) = SUBSTR(v_LF, 0, 8) AND SUBSTR(P.To_Hour , 0, 8) = SUBSTR(v_LT, 0, 8))
                     AND ( TO_NUMBER(TO_CHAR(P.FROM_HOUR, 'YYYYMMDDHH24MISS')) < v_FH AND v_FH < TO_NUMBER(TO_CHAR(P.TO_HOUR, 'YYYYMMDDHH24MISS')) ) OR (TO_NUMBER(TO_CHAR(P.FROM_HOUR, 'YYYYMMDDHH24MISS')) < v_TH AND v_TH < TO_NUMBER(TO_CHAR(P.TO_HOUR, 'YYYYMMDDHH24MISS')));
              IF v_WDExistedCountTime > 0 THEN
                  p_Message := 'TimeIsBetweenTimeRegister' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Check dang ky trung ngay da dang ky
              SELECT COUNT(*) INTO v_WDExistedCountDay
              FROM AT_PORTAL_REG P
               inner join at_sign s on s.id=p.sign_id
             inner join at_gsign           a on a.id =s.at_gsignid
              WHERE   a.code IN ('LEAVE')
              AND P.Employee_Id = v_EmployeeID
                     AND (( SUBSTR(P.From_Hour , 0, 8) < SUBSTR(v_LF, 0, 8)) AND (SUBSTR(v_LF, 0, 8) < SUBSTR(P.To_Hour , 0, 8)))
                     OR (( SUBSTR(P.From_Hour , 0, 8) < SUBSTR(v_LT, 0, 8)) AND (SUBSTR(v_LT, 0, 8) < SUBSTR(P.To_Hour , 0, 8)));

              IF v_WDExistedCountDay > 0 THEN
                  p_Message := 'DayIsBetweenDayRegister' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              IF v_BF IS NOT NULL AND v_BT IS NOT NULL THEN
                  IF v_FH = v_BT AND v_TH = v_BF THEN
                      p_Message := p_Message || ' {EmployeeCodeError} ' || v_EmployeeCode || ' {TotalHourLeaveIsZero} ?br/?' ;
                      p_ResponseStatus := -600;
                  END IF;

                  IF ( ( v_FH > v_BT ) OR ( v_TH < v_BF ) ) THEN
                    v_TotalHourLeave := (API_FN_ConvertNumberToDate(v_TH) - API_FN_ConvertNumberToDate(v_FH)) * 24 ;
                  END IF;

                  IF ( ( v_FH < v_bf AND v_TH > v_bf AND v_TH < v_bt ) ) THEN
                      v_TotalHourLeave := (API_FN_ConvertNumberToDate(v_bf) - API_FN_ConvertNumberToDate(v_FH)) * 24 ;
                 END IF;

                 IF ( ( v_FH > v_bf AND v_FH < v_bf AND v_TH > v_bt ) ) THEN
                      v_TotalHourLeave := (API_FN_ConvertNumberToDate(v_TH) - API_FN_ConvertNumberToDate(v_bt)) * 24 ;
                  END IF;

                  IF ( v_FH < v_bf AND v_TH > v_bt ) THEN
                      v_TotalHourBreak := (API_FN_ConvertNumberToDate(v_bt) - API_FN_ConvertNumberToDate(v_bf)) * 24 ;
                      v_TotalHourLeave := (API_FN_ConvertNumberToDate(v_TH) - API_FN_ConvertNumberToDate(v_FH)) * 24 - v_TotalHourBreak ;
                  END IF;
              END IF;

              IF p_ResponseStatus > 0 AND v_CounterDate = v_DateDiff THEN
                  -- [SP_SUB__GetID]
                  INSERT INTO AT_PORTAL_REG (
                          ID,EMPLOYEE_ID , SIGN_ID , Working_Day ,
                          TO_HOUR ,From_HOUR  ,
                            NOTE , Status,TYPE_LEAVE ,
                          CREATED_BY , CREATED_DATE)
                  SELECT
                          NVL((SELECT max(ID) FROM AT_PORTAL_REG ),0)+1, v_EmployeeID, p_SymbolId,
                          p_LeaveFrom, p_LeaveTo, API_FN_ConvertNumberToDate(v_FH),
                           p_Remark, 1,'LEAVE',
                          p_UserID, SYSDATE
                  FROM   dual;
                  p_Message := 'IsSuccess' ;
                  p_ResponseStatus := 1;
                  v_CounterDate := v_CounterDate + 1;
  --                DBMS_OUTPUT.PUT_LINE('SUCCESS');
  --                EXIT;
              ELSE
                  v_CounterDate := v_CounterDate + 1;
              END IF;
          END;
      END LOOP;

  EXCEPTION
      WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
  END;


  PROCEDURE   API_RegisterLeave
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_LeaveFrom IN NVARCHAR2,
      p_LeaveTo IN NVARCHAR2,
      p_FromHour IN NVARCHAR2,
      p_ToHour IN NVARCHAR2,
      p_Remark IN NVARCHAR2,
      p_SymbolId IN NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0);
      v_LeaveFrom  DATE;
      v_LeaveTo  DATE;
      v_FromHour  NVARCHAR2(20);
      v_ToHour  NVARCHAR2(20);
      v_Remark  NVARCHAR2(200);
      v_SymbolId  NUMBER(19,0);
      -----------
      v_Today DATE := SYSDATE;
      v_WDExistedCount NUMBER(19,0);
      v_EmployeeID NUMBER(19,0);
      v_RegDate Date;
      v_RegDateN NUMBER(19,0);
      v_DefaultDate DATE;
      v_WorkingDay Date;
      v_Holiday NUMBER(10,0);
      v_HourStart NUMBER(19, 0);
      v_HourEnd NUMBER(19, 0);
      v_Temp NUMBER(1, 0) := 0;
  BEGIN
      p_Message := '';
      p_ResponseStatus := 1;
      v_UserID := NVL(p_UserID, -1);
      v_DefaultDate := SYSDATE;
      v_LeaveFrom := TO_DATE(p_LeaveFrom, 'MM/DD/YYYY');
      v_LeaveTo := TO_DATE(p_LeaveTo, 'MM/DD/YYYY');
      v_FromHour := TRIM(NVL(p_FromHour, '-1'));
      v_ToHour := TRIM(NVL(p_ToHour, '-1'));
      v_Remark := TRIM(NVL(p_Remark, '-1'));
      v_SymbolId := NVL(p_SymbolId, -1);
    v_RegDate := SYSDATE;
    SELECT TO_NUMBER(TO_CHAR(v_RegDate, 'YYYYMMDDHH24MISS')) INTO v_RegDateN FROM dual;


      IF v_LeaveFrom = v_LeaveTo THEN
          v_WorkingDay := (v_LeaveFrom);
          SELECT COUNT(*) INTO v_Holiday FROM AT_HOLIDAY WHERE SUBSTR(WORKINGDAY , 0, 8) = SUBSTR(v_WorkingDay, 0, 8);
          IF v_Holiday > 0 THEN
              p_Message := 'IsHoliday';
              p_ResponseStatus := -600;
              RETURN;
          END IF;
      END IF;

      IF v_LeaveFrom < v_Today OR v_LeaveTo < v_Today THEN
          p_Message := 'TimeRegisterLargeTimeNow';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_SymbolId = -1 THEN
          p_Message := 'SysbolIdIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

       -- AT_SYMBOL x?t th?y tuong ?ng AT_TIME_MANUAL
      SELECT COUNT(*) INTO v_Temp FROM AT_TIME_MANUAL WHERE ID = v_SymbolId;
      IF v_Temp < 1 THEN
          p_Message := 'SymbolIdIsNotExists';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_LeaveFrom = v_DefaultDate THEN
          p_Message := 'DayFromIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_LeaveTo = v_DefaultDate THEN
          p_Message := 'DayToIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_FromHour = '-1' THEN
          p_Message := 'FromHourIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_ToHour = '-1' THEN
          p_Message := 'ToHourIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_FromHour != '-1' AND v_ToHour != '-1' THEN
          --v_HourStart := BOS.FN_ConvertDateToNumber(v_LeaveFrom) / 1000000 * 100 + TO_NUMBER(v_FromHour, 99);
          --v_HourEnd := BOS.FN_ConvertDateToNumber(v_LeaveFrom) / 1000000 * 100 + TO_NUMBER(v_ToHour, 99);
      SELECT   TO_NUMBER(TO_CHAR(v_LeaveFrom, 'YYYYMMDDHH24MISS')) / 1000000 * 100 + TO_NUMBER(v_FromHour, 99),
          TO_NUMBER(TO_CHAR(v_LeaveFrom, 'YYYYMMDDHH24MISS')) / 1000000 * 100 + TO_NUMBER(v_ToHour, 99)
          INTO v_HourStart,v_HourEnd
      FROM dual;


          IF v_LeaveFrom = v_LeaveTo AND v_HourStart > v_HourEnd THEN
              p_Message := 'FromHourGreaterToHour';
              p_ResponseStatus := -600;
              RETURN;
          END IF;

          IF v_LeaveFrom = v_LeaveTo AND v_HourStart = v_HourEnd THEN
              p_Message := 'FromHourEqualToHour';
              p_ResponseStatus := -600;
              RETURN;
          END IF;
      END IF;

      BEGIN
          API_SUB_RegisterLeaveDetail(v_UserID, v_LeaveFrom, v_LeaveTo, v_Remark, v_SymbolId, v_RegDateN, v_HourStart, v_HourEnd, p_Message, p_ResponseStatus);

          COMMIT;
          DBMS_OUTPUT.PUT_LINE('API_SUB_RegisterLeaveDetail' || p_Message);
      EXCEPTION
          WHEN OTHERS THEN
              ROLLBACK;
              p_Message := 'DatabaseError';
              p_ResponseStatus := -99;
              RETURN;
      END;

      IF p_Message IS NULL AND p_ResponseStatus = 1 THEN
          p_Message := 'WorkingDay Of Employee Dose Not Exist';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

  EXCEPTION
      WHEN OTHERS
          THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || SQLERRM);
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_APPROVEREGISTEROT
  (p_Language       IN nvarchar2,
    p_UserID IN NUMBER,
    p_RegisterID IN NUMBER,
    p_Comment IN NVARCHAR2,
    P_CUR       OUT CURSOR_TYPE,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  )
  AS
     v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
     v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
     v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
     v_EmployeeID NUMBER(19,0);
     v_UserRegisterID NUMBER(19,0);
     v_StatusNow NUMBER(19,0);
     v_ManagerID NUMBER(19,0);
     v_I NUMBER(19,0);
      v_cursor SYS_REFCURSOR;
     v_temp NUMBER(19, 0) := 0;
  BEGIN
      p_ResponseStatus := 1;

      IF v_UserID = -1 THEN
          p_Message := 'UserIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_RegisterID = -1 THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Comment = '-1' THEN
          p_Message := 'CommentIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER U
      left join HU_EMPLOYEE HU on u.EMPLOYEE_CODE= hu.employee_code
      WHERE U.id = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_REG WHERE ID = v_RegisterID;
      IF v_temp < 1 THEN
          p_Message := 'RegisterIDIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
      ;

      SELECT re.employee_id, Status INTO v_UserRegisterID, v_StatusNow
      FROM AT_PORTAL_REG re
      --left join AT_PORTAL_APP ap on ap.id_reggroup= re.ID_REGGROUP
      WHERE re.ID = v_RegisterID and re.employee_id = v_EmployeeID;
      SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_REG R
      --left join AT_PORTAL_APP AP on AP.ID_REGGROUP= R.ID_REGGROUP
      WHERE r.employee_id = v_EmployeeID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependent';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE dm_id = v_EmployeeID
      AND ID = v_UserRegisterID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependentEmployee';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_StatusNow >= 0 THEN
          BEGIN
            /* -- chuy?n g?i service
              UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 2--, ManagerComment = v_Comment
              WHERE  ID_EMPLOYEE  =  v_EmployeeID AND  ID_REGGROUP in
              (select ID_REGGROUP from AT_PORTAL_REG where Id = v_RegisterID);

              update AT_PORTAL_REG set NOTE= v_Comment, Status = 2
              WHERE Id = v_RegisterID;
              */
              SELECT Employee_Id, ID INTO v_ManagerID, v_I FROM AT_PORTAL_REG
              --left join AT_PORTAL_APP ap on ap.ID_reggroup= AT_PORTAL_REG.id_reggroup
              WHERE AT_PORTAL_REG.ID = v_RegisterID
              AND AT_PORTAL_REG.Employee_Id = v_employeeID
              AND rownum = 1
               ;
              p_Message := 'IsSuccess';

              API_SaveNotification(v_UserRegisterID,v_ManagerID, 4, v_I, 'Approve Request Register Overtime', p_Message, p_ResponseStatus);
              COMMIT;

               IF p_ResponseStatus = -99 THEN

                 p_Message := 'IsSuccess|NotifyException';
               END IF;

              OPEN  P_CUR FOR
                  SELECT
                      R.ID ID,
                      R.ID_REGGROUP  ,
                      v_Comment AS Remark,
                        apiType.Name TypeName
                  FROM AT_PORTAL_REG R
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                          Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM   OT_OTHER_LIST ool
                                    WHERE   TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND   ool.status  = 1) apiType on R.Sign_Id = apiType.ID
                  WHERE R.ID = v_RegisterID;

            -- DBMS_SQL.RETURN_RESULT(v_CURSOR);
          EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
          END;
      ELSE
          OPEN  P_CUR FOR
                  SELECT
                      R.ID ID,
                      R.ID_REGGROUP    ,
                      v_Comment AS Remark,
                        apiType.Name TypeName
                  FROM AT_PORTAL_REG R
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                          Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM   OT_OTHER_LIST ool
                                    WHERE   TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND   ool.status  = 1) apiType on R.Sign_Id = apiType.ID
                  WHERE R.ID = v_RegisterID;
       p_Message := 'RegisterIdIsApproved';
           p_ResponseStatus := -99;
      END IF;
  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
          p_Message := 'Database Error';
          p_ResponseStatus := -99;
  END;

  PROCEDURE API_CancelRegisterOT
  (p_Language       IN nvarchar2,
    p_UserID IN NUMBER,
    p_RegisterID IN NUMBER,
    p_Comment IN NVARCHAR2,
    P_CUR       OUT CURSOR_TYPE,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  )
  AS
     v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
     v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
     v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
     v_EmployeeID NUMBER(19,0);
     v_UserRegisterID NUMBER(19,0);
     v_StatusNow NUMBER(19,0);
     v_ManagerID NUMBER(19,0);
     v_I NUMBER(19,0);
     v_temp NUMBER(19, 0) := 0;
  BEGIN
      p_ResponseStatus := 1;

      IF v_UserID = -1 THEN
          p_Message := 'UserIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_RegisterID = -1 THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Comment = '-1' THEN
          p_Message := 'CommentIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER U
      left join HU_EMPLOYEE HU on u.EMPLOYEE_CODE= hu.employee_code
      WHERE U.id = v_UserID
         AND     (( hu.WORK_STATUS  = 257  AND SYSDATE  < hu.TER_EFFECT_DATE )  OR (hu.WORK_STATUS <> 257)  )
      AND rownum = 1
      ;

      IF v_temp < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

     SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_REG WHERE ID = v_RegisterID;
      IF v_temp < 1 THEN
          p_Message := 'RegisterIDIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

     SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
      ;

      SELECT AT_PORTAL_REG.Employee_Id, Status INTO v_UserRegisterID, v_StatusNow
      FROM AT_PORTAL_REG
      --left join AT_PORTAL_APP ap on ap.id_reggroup= AT_PORTAL_REG.ID_REGGROUP
      WHERE AT_PORTAL_REG.ID = v_RegisterID
      AND AT_PORTAL_REG.Employee_Id  = v_EmployeeID
      ;

      SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_REG R
      --left join AT_PORTAL_APP AP on AP.ID_REGGROUP= R.ID_REGGROUP
      WHERE r.Employee_Id = v_EmployeeID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependent';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

    /* C?n check l?i -> qu?n l? d? du?c g?n theo quy tr?nh ph? duy?t
     SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmployeeID
      AND ID = v_UserRegisterID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependentEmployee';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
      */

      IF v_StatusNow >= 0 THEN
          BEGIN
              UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 3--, ManagerComment = v_Comment
              WHERE ID_EMPLOYEE  = v_EmployeeID AND ID_REGGROUP in
              (select ID_REGGROUP from AT_PORTAL_REG where Id = v_RegisterID);

              update AT_PORTAL_REG set NOTE= v_Comment, status = 3
              WHERE Id = v_RegisterID;

             SELECT employee_id, ID INTO v_ManagerID, v_I FROM AT_PORTAL_REG
              --left join AT_PORTAL_APP ap on ap.ID_reggroup= AT_PORTAL_REG.id_reggroup
              WHERE AT_PORTAL_REG.ID = v_RegisterID
             AND  AT_PORTAL_REG.Employee_Id  = v_EmployeeID
             AND rownum = 1
              ;
              API_SaveNotification(v_UserRegisterID, v_ManagerID , 4, v_I, 'Cancel Request Register Overtime', p_Message, p_ResponseStatus);
              COMMIT;

               OPEN p_cur FOR
                    SELECT
                        1 STT,
                        R.Id ID,
                        TO_CHAR(r.from_hour , 'DD/MM/YYYY') LeaveFrom,
                        TO_CHAR(r.to_hour
                        , 'DD/MM/YYYY') LeaveTo,
                        r.from_hour FromHour,
                        r.to_hour ToHour,
                        '' SymbolName,
                        NVL(R.To_Hour-r.from_hour, 0)*24 TotalHour,
                        NVL(R.Note, ' ') Remark,
                        R.Status Status,
                        E.Fullname_Vn EmployeeName,
                         TO_CHAR(r.created_date, 'DD/MM/YYYY HH24:MI:SS') CreateTime,
                         R.Note Note,
                         apiType.Name TypeName
                    FROM at_portal_reg R
                         --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
                         LEFT JOIN HU_Employee E   ON r.employee_id = E.Id
                          Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM   OT_OTHER_LIST ool
                                    WHERE   TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND   ool.status  = 1) apiType on R.Sign_Id = apiType.ID
                    WHERE R.Id = v_RegisterID;
          EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
          END;
      ELSE
           p_Message := 'RegisterIsCancel';
          p_ResponseStatus := -600;
      END IF;

  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
          p_Message := 'Database Error';
          p_ResponseStatus := -99;
  END;
  PROCEDURE API_Get_RegisterOtInfo
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Register OUT NUMBER,
      p_Used OUT NUMBER,
        p_Reject OUT NUMBER,
      p_AllRegister OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0);
  BEGIN
      p_Register := 0;
      p_Used := 0;
      p_Reject := 0;
      p_AllRegister := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IncorectUserID';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
          ;
      EXCEPTION WHEN NO_DATA_FOUND THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END;

      SELECT COUNT(*) AS Register INTO p_Register
      FROM AT_PORTAL_REG      r
       inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'OVERTIME'
      AND   r.status IN (0, 1); -- ?ang k?

      SELECT COUNT(*) AS Used INTO p_Used
      FROM AT_PORTAL_REG  r
       inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE r.employee_id = v_EmployeeID
      AND   a.code  = 'OVERTIME' AND r.Status = 2; -- ?? d?ng (d? ph? duy?t)

        SELECT COUNT(*) AS Reject INTO p_Reject
      FROM AT_PORTAL_REG r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE r.employee_id = v_EmployeeID
      AND   a.code  = 'OVERTIME' AND r.Status = 3; -- ?? d?ng (d? ph? duy?t)

      SELECT COUNT(*) AS All_Register INTO p_AllRegister
      FROM AT_PORTAL_REG  r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE r.employee_id = v_EmployeeID
      AND   a.code  = 'OVERTIME'; -- T?t c?

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError';
              p_ResponseStatus := -600;
  END;


  PROCEDURE API_Get_RegisterWLEOInfo
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Register OUT NUMBER,
      p_Used OUT NUMBER,
        p_Reject OUT NUMBER,
      p_AllRegister OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0);
  BEGIN
      p_Register := 0;
      p_Used := 0;
        p_Reject :=0;
      p_AllRegister := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IncorectUserID';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
          ;
      EXCEPTION WHEN NO_DATA_FOUND THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END;

      SELECT   COUNT(*) AS Register INTO p_Register
      FROM   AT_PORTAL_REG r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'WLEO'
      AND  r. Status IN (0, 1); -- ?ang k?

      SELECT   COUNT(*) AS Used INTO p_Used
      FROM   AT_PORTAL_REG   r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'WLEO' AND r.Status = 2; -- ?? d?ng (d? ph? duy?t)

        SELECT   COUNT(*) AS Reject INTO p_Reject
      FROM   AT_PORTAL_REG  r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'WLEO' AND r.Status = 3; -- ?? d?ng (d? ph? duy?t)

      SELECT   COUNT(*) AS All_Register INTO p_AllRegister
      FROM   AT_PORTAL_REG   r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'WLEO'; -- T?t c?

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError';
              p_ResponseStatus := -600;
  END;

  PROCEDURE API_Get_TrainOut
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      P_CUR       OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, -1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
      v_EmpID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(19, 0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_EmployeeID = -1 THEN
         Begin
        Select Employee_Id     
        Into v_EmployeeID
        From Se_User U 
        Where U.Id=v_UserID;  
        EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotEmployeeId';
              p_ResponseStatus := -600;
              RETURN;
        End;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      /*BEGIN
          SELECT E.id INTO v_EmpID FROM SE_USER U
          left join HU_EMPLOYEE e on e.employee_code= u.employee_code
          WHERE U.id = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;*/

      IF v_EmployeeID != -1 THEN
          BEGIN
              SELECT dm_id INTO v_EmpID FROM HU_Employee WHERE ID = v_EmployeeID;
          EXCEPTION
              WHEN OTHERS THEN
                  p_Message := 'YouNotManagerEmployee';
                  p_ResponseStatus := -600;
                  RETURN;
          END;

          /*SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE ID = v_EmpID
          AND ID = v_EmployeeID;
          IF v_temp < 1 THEN
              p_Message := 'YouNotManagerEmployee';
              p_ResponseStatus := -600;
              RETURN;
          END IF;      */
      END IF;

      SELECT COUNT(*) INTO p_Rowcount
      FROM Hu_Employee_Train W
      WHERE  W.EMPLOYEE_ID =  CASE WHEN v_EmployeeID != -1 THEN v_EmployeeID ELSE p_EmployeeID END;

      OPEN P_CUR FOR
      SELECT *
      FROM
      (
          SELECT   ROWNUM STT, ID, Employee_Code, Fullname_Vn,   School_Name  ,Specialize_Name ,Degree_Name ,Training_Content ,
              TO_CHAR(From_Date, 'DD/MM/YYYY') EffectiveDateFrom,
              TO_CHAR(To_Date, 'DD/MM/YYYY') EffectiveDateTo
          FROM
          (
                  Select 
                  S.ID,
                   E.Employee_Code,  
                   E.Fullname_Vn ,
                   S.School_Name,
                   S.Specialize,
                   Case When Nvl(p_Language,'vi-VN')='vi-VN' Then T.Name_Vn Else T.NAME_EN End As Specialize_Name ,
                   S.Degree,
                   Case When Nvl(p_Language,'vi-VN')='vi-VN' Then Deg.Name_Vn Else Deg.NAME_EN End As Degree_Name ,
                   S.Training_Content,
                   S.From_Date,
                   S.To_Date
                From Hu_Employee_Train S 
                Inner Join Hu_Employee E On E.Id=S.Employee_Id
                Left Join Ot_Other_List T On T.CODE=S.specialize
                Left Join Ot_Other_List Deg On Deg.Code=S.Degree
                Where S.Employee_Id=CASE WHEN v_EmployeeID != -1 THEN v_EmployeeID ELSE p_EmployeeID END
              ORDER BY S.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_RegisterOT
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_WorkingDay IN NVARCHAR2,
      p_FromHour IN NVARCHAR2,
      p_ToHour IN NVARCHAR2,
      p_TotalHour IN NUMBER,
      p_Remark IN NVARCHAR2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
      v_FromHour NVARCHAR2(10) := NVL(p_FromHour, '-1');
      v_ToHour NVARCHAR2(10) := NVL(p_ToHour, '-1');
      v_TotalHour NUMBER(5) := NVL(p_TotalHour, -1);
      v_Remark NVARCHAR2(300) := NVL(p_Remark, '-1');
      v_EmployeeID NUMBER(19,0);
      v_WorkingDay DATE;
      v_Today DATE;
      v_RegDate NUMBER(19,0);
      v_DefaultDate DATE;
      v_C NVARCHAR2(30);
      v_W NUMBER(19,0);
      v_FH NUMBER(19,0);
      v_TH NUMBER(19,0);
      v_APD NUMBER(19,0);
      v_maxCounter NUMBER(10,0);
      v_DateFrom NUMBER(19,0);
      v_DateTo NUMBER(19,0);
      v_EmployeeExists NUMBER(10,0);
      v_WD NUMBER(19,0);
      v_ManagerID NUMBER(19,0);
      v_DefaultDateNumber NUMBER(19,0);
      v_temp NUMBER(10,0) := 0;
  BEGIN
      v_DefaultDate := TO_DATE('01/01/1900', 'DD/MM/YYYY');
      v_Today := SYSDATE;
      p_Message := '';
      p_ResponseStatus := 1;
      --v_RegDate := BOS.FN_ConvertDateToNumber(v_Today);
      v_WorkingDay := TO_DATE(p_WorkingDay, 'MM/DD/YYYY');
      --v_DefaultDateNumber := BOS.FN_ConvertDateToNumber(v_DefaultDate);
    SELECT   TO_NUMBER(TO_CHAR(v_Today, 'YYYYMMDDHH24MISS')),
        TO_NUMBER(TO_CHAR(v_DefaultDate, 'YYYYMMDDHH24MISS'))
        INTO v_RegDate,v_DefaultDateNumber
       FROM   dual;

      IF v_UserID < 0 THEN
          p_Message := 'UserIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_WorkingDay = v_DefaultDate THEN
          p_Message := 'WorkingDayIsNotNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_FromHour = '-1' THEN
          p_Message := 'FromHourIsNotNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_ToHour = '-1' THEN
          p_Message := 'ToHourIsNotNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_TotalHour < 0 THEN
          p_Message := 'TotalHourIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Remark = '-1' THEN
          p_Message := 'RemarkIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1 ;
      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      -- Nh? v_DateFrom, v_DateTo ki?u d? li?u DATE t? n?a ph?i ??i
      --v_DateFrom := SUBSTR(BOS.FN_ConvertDateToNumber(v_WorkingDay), 0, 8) || v_FromHour || '00';
      --v_DateTo := SUBSTR(BOS.FN_ConvertDateToNumber(v_WorkingDay), 0, 8) || v_ToHour || '00';
    SELECT   SUBSTR(TO_NUMBER(TO_CHAR(v_WorkingDay, 'YYYYMMDDHH24MISS')), 0, 8) || v_FromHour || '00',
        SUBSTR(TO_NUMBER(TO_CHAR(v_WorkingDay, 'YYYYMMDDHH24MISS')), 0, 8) || v_ToHour || '00'
        INTO v_DateFrom,v_DateTo
       FROM   dual;


      IF v_DateFrom = v_DateTo THEN
          p_Message := 'FromHourEqualToHour';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      --v_WD := BOS.FN_ConvertDateToNumber(v_WorkingDay);
    SELECT   TO_NUMBER(TO_CHAR(v_WorkingDay, 'YYYYMMDDHH24MISS'))
        INTO v_WD
       FROM   dual;

      DECLARE
          v_EmployeeCode NVARCHAR2(30);
          v_Holiday NUMBER(19,0);
          v_ShiftID NUMBER(19,0);
          v_ShiftStart NUMBER(19,0);
          v_ShiftEnd NUMBER(19,0);
          v_ShiftBearkStart NUMBER(19,0);
          v_ShiftBearkEnd NUMBER(19,0);
          v_WorkingdayCheck NUMBER(19,0);
          v_ToHourCheck NUMBER(19,0);
          v_CountRegisted NUMBER(19,0);
          v_FromHourCheck NUMBER(19,0);
      BEGIN
          SELECT EMPLOYEE_CODE INTO v_EmployeeCode FROM HU_Employee WHERE ID = v_EmployeeID;

         -- Check d? dang k?
          SELECT count(*)
          INTO  v_CountRegisted
          FROM AT_PORTAL_REG apr 
          inner join at_sign s on s.id=apr.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
          WHERE    a.code  = 'OVERTIME'
       --AND   SUBSTR(WorkingDay, 0, 8) = SUBSTR(v_WD, 0, 8)
       AND   TO_CHAR(apr.working_day , 'YYYYMMDD') <= SUBSTR(v_WD, 0, 8)
       AND   TO_CHAR(apr.to_hour , 'YYYYMMDD') <= SUBSTR(v_WD, 0, 8)
       AND   (( TO_CHAR(apr.from_hour,'HH24MISS') < v_FromHour  AND  TO_CHAR(apr.TO_HOUR ,'HH24MISS') < v_FromHour)
           OR ( TO_CHAR(apr.FROM_HOUR,'HH24MISS') < v_ToHour  AND  TO_CHAR(apr.TO_HOUR ,'HH24MISS') < v_ToHour)
       )
          AND   apr.employee_id = v_EmployeeID;

          IF v_CountRegisted > 0
          THEN
              p_Message := 'HourRegisted';
              p_ResponseStatus := -600;
          END IF;

           SELECT COUNT(*) INTO v_Holiday
            FROM AT_Holiday
            WHERE SUBSTR(WorkingDay, 0, 8) = SUBSTR(v_WorkingDay, 0, 8);

          IF v_Holiday > 0 THEN
              p_Message := 'DayIsHoliday';
              p_ResponseStatus := -600;
          END IF;
      EXCEPTION
          WHEN OTHERS THEN NULL;

      END;

      IF p_ResponseStatus > 0 THEN
          DECLARE
              v_ID NUMBER(19,0);
          BEGIN
              SELECT he.dm_id INTO v_ManagerID FROM HU_EMPLOYEE he WHERE ID = v_EmployeeID;

              --v_ID := SEQ_Portal_Register_OT.NEXTVAL;

             /* INSERT INTO AT_PORTAL_REG (
                  ID, ID_EMPLOYEE , FROM_DATE ,TO_DATE ,FROM_HOUR , TO_HOUR ,
                  HOURCOUNT ,   NOTE , SVALUE ,
                  Status, CREATED_BY , CREATED_DATE
              ) SELECT
                  NVL((SELECT max(ID) FROM AT_PORTAL_REG apr ),0)+1 , v_EmployeeID,
                  API_FN_CONVERTNUMBERTODATE(v_DateFrom), API_FN_CONVERTNUMBERTODATE(v_DateTo),
                  v_FromHour, v_ToHour,
                  v_TotalHour,  v_Remark, 'OVERTIME',
                  1, v_UserID,  API_FN_CONVERTNUMBERTODATE(v_RegDate )
              FROM dual;*/

              API_SaveNotification(v_ManagerID, v_EmployeeID, 2, v_ID, 'SendRequestRegisterOT', p_Message, p_ResponseStatus);

              COMMIT;
          EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
                  DBMS_OUTPUT.PUT_LINE('ROLLBACK' || SQLCODE || ', ' || SQLERRM);
                  p_Message := 'DatabaseError';
                  p_ResponseStatus := -99;
                  RETURN;
          END;
      END IF;

      IF p_ResponseStatus > 0 THEN
          p_Message := 'IsSuccess';
      END IF;

  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ', ' || SQLERRM);
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;



  PROCEDURE API_ApproveRegisterLeave
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_RegisterID IN NUMBER,
      p_Comment IN NVARCHAR2,
      p_Cur OUT CURSOR_TYPE,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
      v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
      v_EmployeeID NUMBER(19,0);
      v_UserRegisterID NUMBER(19,0);
      v_StatusNow NUMBER(19,0);
      v_ManagerID NUMBER(19,0);
      v_I NUMBER(19,0);
      v_temp NUMBER(19,0) := 0;
  BEGIN
      p_ResponseStatus := 1;

      IF v_UserID = -1 THEN
          p_Message := 'UserIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_RegisterID = -1 THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Comment = '-1' THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'serIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
         SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      BEGIN
          SELECT apr.employee_id , Status INTO v_UserRegisterID, v_StatusNow FROM AT_PORTAL_REG apr WHERE ID = v_RegisterID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'RegisterIDIsNotFound';
              p_ResponseStatus := -600;
              RETURN;
      END;

      SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_APP apa WHERE ID_EMPLOYEE = v_EmployeeID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependent';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE dm_id = v_EmployeeID AND ID = v_UserRegisterID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependentEmployee';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
          BEGIN
            /*
            UPDATE AT_PORTAL_APP SET APPROVE_DATE  = SYSDATE , APPROVE_STATUS = 2
            WHERE ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_PORTAL_REG apr2 WHERE id = v_RegisterID)
            AND ID_EMPLOYEE  = v_EmployeeID; -- user c? quy?n duy?t

              UPDATE AT_PORTAL_REG SET Status = 2, NOTE_AT = v_Comment
              WHERE ID = v_RegisterID;

  */
              SELECT   ID_EMPLOYEE, ID INTO v_ManagerID, v_I FROM AT_PORTAL_APP apa
               WHERE   ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_PORTAL_REG apr2 WHERE id = v_RegisterID)
              AND   ID_EMPLOYEE  = v_EmployeeID
              AND   rownum = 1
              ; -- user c? quy?n duy?t


              API_SaveNotification(v_UserRegisterID,v_ManagerID, 3, v_I, 'Apporve Request Register Leave', p_Message, p_ResponseStatus);
              COMMIT;

              OPEN p_Cur FOR


                SELECT
                      1 STT,
                      R.ID ID,
                      TO_CHAR(R.From_Hour, 'DD/MM/YYYY' )  LeaveFrom,
                      TO_CHAR(R.Working_Day , 'DD/MM/YYYY' ) LeaveTo,
                      R.FROM_HOUR FromHour,
                      R.TO_HOUR ToHour,
                      '{' || S.NAME || '}' SymbolName,
                      NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour ,
                      v_Comment AS Remark ,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE , 'DD/MM/YYYY HH24:MI:SS' ) CreateTime,
                      R.ID_REGGROUP ID_REGGROUP,
                        ApiType.Name TypeName,
                        R.Note Note
                  FROM AT_PORTAL_REG R
                       LEFT JOIN AT_TIME_MANUAL S   ON R.Sign_Id = S.ID
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                         LEFT JOIN (SELECT
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Sign_Id = ApiType.Id
                  WHERE R.ID = v_RegisterID
        ;
              --DBMS_SQL.RETURN_RESULT(v_CURSOR);
          EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
                  p_Message := 'DatabaseError';
                  p_ResponseStatus := -99;
                  RETURN;
          END;
      ELSE
         OPEN p_Cur FOR
                  SELECT
                      1 STT,
                      R.ID ID,
                      TO_CHAR(R.Working_Day, 'DD/MM/YYYY' )  LeaveFrom,
                      TO_CHAR(R.Working_Day , 'DD/MM/YYYY' ) LeaveTo,
                      R.FROM_HOUR FromHour,
                      R.TO_HOUR ToHour,
                      '{' || S.NAME || '}' SymbolName,
                      NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour  ,
                      v_Comment AS Remark ,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE , 'DD/MM/YYYY HH24:MI:SS' ) CreateTime,
                      R.ID_REGGROUP ID_REGGROUP,
                        ApiType.Name TypeName,
                        R.Note Note
                  FROM AT_PORTAL_REG R
                       LEFT JOIN AT_TIME_MANUAL S   ON R.Sign_Id = S.ID
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                         LEFT JOIN (SELECT
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Sign_Id = ApiType.Id
                  WHERE R.ID = v_RegisterID;

         p_Message := 'RegisterIdIsApproved';
	         p_ResponseStatus := -99;
	    END IF;

	EXCEPTION
	    WHEN OTHERS THEN
	        p_Message := 'DatabaseError';
	        p_ResponseStatus := -99;
	END;


	PROCEDURE API_ApproveRegisterWLEO
	(p_Language       IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_RegisterID IN NUMBER,
	    p_Comment IN NVARCHAR2,
	    p_Cur OUT CURSOR_TYPE,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
	    v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
	    v_EmployeeID NUMBER(19,0);
	    v_UserRegisterID NUMBER(19,0);
	    v_StatusNow NUMBER(19,0);
	    v_ManagerID NUMBER(19,0);
	    v_I NUMBER(19,0);
	    v_temp NUMBER(19,0) := 0;
	BEGIN
	    p_ResponseStatus := 1;

	    IF v_UserID = -1 THEN
	        p_Message := 'UserIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_RegisterID = -1 THEN
	        p_Message := 'RegisterIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_Comment = '-1' THEN
	        p_Message := 'RegisterIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT 	he.ID INTO v_EmployeeID
	       	FROM 	HU_EMPLOYEE he
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
	       WHERE 	su.ID = v_UserID
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
	    EXCEPTION
	        WHEN NO_DATA_FOUND THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    BEGIN
	        SELECT apr.employee_id , Status INTO v_UserRegisterID, v_StatusNow FROM AT_PORTAL_REG apr WHERE ID = v_RegisterID;
	    EXCEPTION
	        WHEN OTHERS THEN
	            p_Message := 'RegisterIDIsNotFound';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_APP apa WHERE ID_EMPLOYEE = v_EmployeeID;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependent';
	        p_ResponseStatus := v_EmployeeID;---600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE dm_id = v_EmployeeID AND ID = v_UserRegisterID;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependentEmployee';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
	        BEGIN
		       /* -- chuy?n g?i service
		        UPDATE AT_PORTAL_APP SET APPROVE_DATE  = SYSDATE , APPROVE_STATUS = 2
		        WHERE ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_PORTAL_REG apr2 WHERE apr2.id = v_RegisterID)
		        AND ID_EMPLOYEE  = v_EmployeeID; -- user c? quy?n duy?t

	            UPDATE 	AT_PORTAL_REG SET Status = 2, NOTE_AT = v_Comment
	            WHERE 	ID = v_RegisterID;
			*/
	            SELECT 	ID_EMPLOYEE, ID INTO v_ManagerID, v_I
	            FROM 	AT_PORTAL_APP apa
	           	WHERE 	ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_PORTAL_REG apr2 WHERE apr2.id = v_RegisterID)
	            AND 	ID_EMPLOYEE  = v_EmployeeID -- user c? quy?n duy?t
				AND 	rownum = 1
				ORDER BY apa.ID  DESC
	            ;
	             COMMIT;

	            API_SaveNotification(v_UserRegisterID,v_ManagerID , 3, v_I, 'Apporve Request Register WLEO', p_Message, p_ResponseStatus);

	           	IF p_ResponseStatus = -99 THEN

	           		p_Message := 'IsSuccess|NotifyException';
	           	END IF;

	            OPEN p_Cur FOR
	                SELECT
	                    1 STT,
	                    R.ID ID,
	                    TO_CHAR(R.Working_Day, 'DD/MM/YYYY' )  LeaveFrom,
	                    TO_CHAR(R.Working_Day , 'DD/MM/YYYY' ) LeaveTo,
	                    R.FROM_HOUR FromHour,
	                    R.TO_HOUR ToHour,
	                    '{' || S.NAME || '}' SymbolName,
	                    NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour ,
	                    v_Comment AS Remark ,
	                    R.Status Status,
	                    E.FULLNAME_VN EmployeeName,
	                    TO_CHAR(R.CREATED_DATE , 'DD/MM/YYYY HH24:MI:SS' ) CreateTime,
                        R.ID_REGGROUP,
                        R.Note Note,
                        apiType.NAME TypeName
	                FROM AT_PORTAL_REG R
	                     LEFT JOIN AT_TIME_MANUAL S   ON R.Sign_Id = S.ID
	                     LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                         LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME
                                    FROM 	AT_TIME_MANUAL atm
                                    WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.sign_id = apiType.Id
	                WHERE R.ID = v_RegisterID;

	            --DBMS_SQL.RETURN_RESULT(v_CURSOR);
	        EXCEPTION
	            WHEN OTHERS THEN
	                ROLLBACK;
	                p_Message := 'DatabaseErrorExc';
	                p_ResponseStatus := -99;
	                RETURN;
	        END;
	    ELSE
	    	 OPEN p_Cur FOR
	                SELECT
	                    1 STT,
	                    R.ID ID,
	                    TO_CHAR(R.Working_Day, 'DD/MM/YYYY' )  LeaveFrom,
	                    TO_CHAR(R.Working_Day , 'DD/MM/YYYY' ) LeaveTo,
	                    R.FROM_HOUR FromHour,
	                    R.TO_HOUR ToHour,
	                    '{' || S.NAME || '}' SymbolName,
	                    NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour ,
	                    v_Comment AS Remark ,
	                    R.Status Status,
	                    E.FULLNAME_VN EmployeeName,
	                    TO_CHAR(R.CREATED_DATE , 'DD/MM/YYYY HH24:MI:SS' ) CreateTime,
	                    R.ID_REGGROUP ID_REGGROUP,
                        NVL(R.Note, ' ') Note,
                        NVL(apiType.NAME, ' ') TypeName
	                FROM AT_PORTAL_REG R
	                     LEFT JOIN AT_TIME_MANUAL S   ON R.Sign_Id = S.ID
	                     LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                         LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME
                                    FROM 	AT_TIME_MANUAL atm
                                    WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.sign_id = apiType.Id
	                WHERE R.ID = v_RegisterID;


	    	 p_Message := 'RegisterIdIsApproved';
	         p_ResponseStatus := -99;
	    END IF;

	EXCEPTION
	    WHEN OTHERS THEN
	        p_Message := 'DatabaseError';
	        p_ResponseStatus := -99;
	END;

	PROCEDURE API_GET_LIST_ORG(p_Language       IN nvarchar2,
			P_KEYWORD IN NVARCHAR2,
			P_ORG_ID_ROOT OUT NUMBER,
			P_CUR OUT CURSOR_TYPE, P_MESSAGE OUT NVARCHAR2, P_RESPONSESTATUS OUT NUMBER
			) AS
			v_KEYWORD NVARCHAR2(100) := (NVL(P_KEYWORD, ' '));
    BEGIN

       P_RESPONSESTATUS:= 1;
       P_MESSAGE := 'IsSuccess';
       --SELECT REPLACE (P_KEYWORD ,'--', '') INTO P_KEYWORD FROM dual;

      	-- L?y ORG ID root
      	SELECT 	ID  INTO P_ORG_ID_ROOT
      	FROM 	HU_ORGANIZATION o
        WHERE 	o.status = 1
        AND		NVL(PARENT_ID, 0 ) = 0
        ;

        OPEN P_CUR FOR
        	SELECT *
        	FROM (
            SELECT
                t.ID,
                t.CODE,
                t.NAME_VN,
                NVL(t.PARENT_ID,0) AS PARENT_ID

            FROM HU_ORGANIZATION t
             JOIN (
            	SELECT 	0 AS id , u'' NAME_VN
            	FROM 	dual
            	UNION all
            	SELECT 	id , REPLACE(Name_vn ,'"','') Name_vn
            	FROM 	HU_ORGANIZATION  o
            	WHERE 	o.status = 1
            ) org2 ON org2.id = NVL(t.PARENT_ID,0)
           )  t

            START WITH NVL(t.PARENT_ID,0) = 0
            CONNECT BY PRIOR t.ID = PARENT_ID AND t.NAME_VN LIKE '%' || v_KEYWORD  || '%';

	    EXCEPTION WHEN OTHERS THEN
	    BEGIN
	       P_RESPONSESTATUS:= -600;
	       P_MESSAGE := 'Error';
	    END;
    END;

   PROCEDURE API_GET_LIST_POSITION(p_Language       IN nvarchar2,
   										P_KEYWORD IN NVARCHAR2,
                                        P_LANG IN NVARCHAR2,
                                        P_ORG_ID IN NUMBER,
                                        P_PAGE IN NUMBER,
                                        P_PAGE_SIZE IN NUMBER,
                                        P_ROWCOUNT OUT NUMBER,
                                        P_CUR  OUT CURSOR_TYPE,
                                        P_MESSAGE OUT NVARCHAR2,
                                        P_RESPONSESTATUS OUT NUMBER
   )
   AS
   		--v_UserName
   		P_TODAY DATE := TRUNC(SYSDATE);
        v_Text NVARCHAR2(100) := ' ';
        v_KEYWORD NVARCHAR2(100) := UPPER(NVL(P_KEYWORD, v_Text));
        V_PAGE NUMBER(10) := NVL(P_PAGE, 1);
        V_PAGE_SIZE NUMBER(10) := NVL(P_PAGE_SIZE, 20);
        v_OrgTempId NUMBER(19,0) := NVL(P_ORG_ID, -1);
        v_RootParentId NUMBER(19,0):= NVL(P_ORG_ID, 0);
   begin
   /*
    SELECT STT, ID, CODE, Concurrent, Employee_Code, Employee_ID,
                    Employee_Right, Fullname_Vn, Hiring_Status, INTERIM_CODE,
                    Is_owner, JOB_CODE, JOB_POSITION_NAME, mobile_phone, ORG_CODE, ORG_ID, description_path,ORG_NAME
*/
        SELECT 	ID  INTO v_RootParentId
      	FROM 	HU_ORGANIZATION   o
        WHERE 	o.status = 1
        AND		NVL(PARENT_ID, 0 ) = 0
        ;
	   if v_OrgTempId=-1 or v_OrgTempId = v_RootParentId then
   OPEN P_CUR
	   FOR

	   SELECT 	*
	   FROM (
	   SELECT  	ROWNUM AS STT,
				ht.ID ,
				ht.CODE ,
				NULL AS Concurrent,
				he.EMPLOYEE_CODE,
				he.ID AS EMPLOYEE_ID,
				-1 AS Employee_Right,
				he.FULLNAME_VN,
				NULL AS Hiring_Status,
				NULL AS INTERIM_CODE,
				NULL AS Is_owner,
				NULL AS JOB_CODE,
				ht.NAME_VN AS JOB_POSITION_NAME,
				hec.contact_phone HOME_PHONE ,
				hec.contact_mobile MOBILE_PHONE ,
				ho.CODE  AS ORG_CODE,
				ho.ID  AS ORG_ID ,
				ho.DESCRIPTION_PATH ,
				CASE WHEN P_LANG = 'vi-VN' then ho.NAME_VN ELSE ho.NAME_EN end AS ORG_NAME

	FROM 		HU_EMPLOYEE he
	LEFT JOIN 	HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID
	LEFT JOIN 	HU_ORGANIZATION ho ON ho.id = he.ORG_ID
	LEFT JOIN 	HU_TITLE ht ON ht.id = he.TITLE_ID
	LEFT JOIN 	OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
	LEFT JOIN 	OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
	--LEFT JOIN 	SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName
	LEFT JOIN 	HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id
	WHERE
				UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.contact_mobile) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.per_mail) LIKE '%' || v_KEYWORD || '%'
    )
	WHERE STT > ((V_PAGE - 1)* V_PAGE_SIZE) AND STT < (V_PAGE * V_PAGE_SIZE + 1)
	;

	SELECT COUNT(*) INTO P_ROWCOUNT
	FROM 		HU_EMPLOYEE he
	LEFT JOIN 	HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID
	LEFT JOIN 	HU_ORGANIZATION ho ON ho.id = he.ORG_ID
	LEFT JOIN 	HU_TITLE ht ON ht.id = he.TITLE_ID
	LEFT JOIN 	OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
	LEFT JOIN 	OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
	--LEFT JOIN 	SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName
	LEFT JOIN 	HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id
	WHERE
				UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.contact_mobile) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.per_mail) LIKE '%' || v_KEYWORD || '%'

 	;
else
  OPEN P_CUR
	   FOR

 SELECT 	*
	   FROM (
	   SELECT  	ROWNUM AS STT,
				ht.ID ,
				ht.CODE ,
				NULL AS Concurrent,
				he.EMPLOYEE_CODE,
				he.ID AS EMPLOYEE_ID,
				-1 AS Employee_Right,
				he.FULLNAME_VN,
				NULL AS Hiring_Status,
				NULL AS INTERIM_CODE,
				NULL AS Is_owner,
				NULL AS JOB_CODE,
				ht.NAME_VN AS JOB_POSITION_NAME,
				hec.contact_phone HOME_PHONE ,
				hec.contact_mobile MOBILE_PHONE ,
				ho.CODE  AS ORG_CODE,
				ho.ID  AS ORG_ID ,
				ho.DESCRIPTION_PATH ,
				CASE WHEN P_LANG = 'vi-VN' then ho.NAME_VN ELSE ho.NAME_EN end AS ORG_NAME

	FROM 		HU_EMPLOYEE he
	LEFT JOIN 	HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID
	LEFT JOIN 	HU_ORGANIZATION ho ON ho.id = he.ORG_ID
	LEFT JOIN 	HU_TITLE ht ON ht.id = he.TITLE_ID
	LEFT JOIN 	OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
	LEFT JOIN 	OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
	--LEFT JOIN 	SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName
	LEFT JOIN 	HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id
	WHERE
				UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.contact_phone) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.per_mail) LIKE '%' || v_KEYWORD || '%'
            START WITH ho.PARENT_ID = P_ORG_ID --NVL(PARENT_ID,0) = 0
            CONNECT BY PRIOR ho.ID = ho.PARENT_ID
            ORDER BY NLSSORT(he.Fullname_Vn, 'nls_sort = Vietnamese')
    )
	WHERE STT > ((V_PAGE - 1)* V_PAGE_SIZE) AND STT < (V_PAGE * V_PAGE_SIZE + 1)
	;

	SELECT COUNT(*) INTO P_ROWCOUNT
	FROM 		HU_EMPLOYEE he
	LEFT JOIN 	HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID
	LEFT JOIN 	HU_ORGANIZATION ho ON ho.id = he.ORG_ID
	LEFT JOIN 	HU_TITLE ht ON ht.id = he.TITLE_ID
	LEFT JOIN 	OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
	LEFT JOIN 	OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
	--LEFT JOIN 	SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName
	LEFT JOIN 	HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id
	WHERE
				UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.contact_mobile) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.per_mail) LIKE '%' || v_KEYWORD || '%'
    START WITH ho.PARENT_ID = P_ORG_ID --NVL(PARENT_ID,0) = 0
            CONNECT BY PRIOR ho.ID = ho.PARENT_ID

 	;
    end if;
	P_MESSAGE := 'IsSucess';
    P_RESPONSESTATUS := 1;



   END;


  PROCEDURE API_GET_EMPLOYEE_INFO(p_Language       IN nvarchar2,P_EMPLOYEE_ID IN NUMBER,
                                        P_CUR OUT CURSOR_TYPE,
                                        P_MESSAGE OUT NVARCHAR2,
                                        P_RESPONSESTATUS OUT NUMBER)
    AS
        V_EMPLOYEE_ID NUMBER(10) := NVL(P_EMPLOYEE_ID, 0);
    BEGIN
        --SP_API_GET_MESSAGE('SUCCESSS', P_RESPONSESTATUS, P_MESSAGE);
        P_MESSAGE := 'IsSucess';
    	P_RESPONSESTATUS := 1;

        IF V_EMPLOYEE_ID = 0 THEN
            P_RESPONSESTATUS := 400;
            P_MESSAGE := 'EmployeeID is required.';
            RETURN;
        END IF;

        OPEN P_CUR FOR
        SELECT
            e.ID,
            e.FULLNAME_VN FULLNAME_VN,
            case when cv.Image is null then '/services/EmployeeImage/NoImage.jpg' else ('/services/EmployeeImage/' || cast(cv.IMAGE as varchar2(255))) end as PATH,
            se.USERNAME USERNAME,
            j.NAME_VN JOB_POSITION_NAME,
            CASE WHEN cv.GENDER = 565 THEN 'F' ELSE 'M' END GENDER,
            cv.contact_mobile MOBILE_PHONE,
            cv.contact_phone MOBILE_PHONE2,
            cv.BIRTH_DATE BIRTH_DATE,
            na.NAME_VN NATIONALITY_NAME,
            cv.PER_ADDRESS PER_ADDRESS,
            cv.ID_NO ID_NO,
            cv.per_mail PER_EMAIL
        FROM HU_EMPLOYEE e INNER JOIN SE_USER se
            ON e.EMPLOYEE_CODE = se.EMPLOYEE_CODE
            INNER JOIN HU_TITLE j
            ON e.TITLE_ID = j.ID
            INNER JOIN HU_EMPLOYEE_CV cv
            ON e.ID = cv.EMPLOYEE_ID
            LEFT JOIN HU_NATION na
            ON cv.nav_nation = na.ID
        WHERE e.ID = V_EMPLOYEE_ID
        AND rownum = 1
        ORDER BY e.employee_code  DESC ;

    EXCEPTION WHEN OTHERS THEN
        BEGIN
            --SP_API_GET_MESSAGE('ERROR', P_RESPONSESTATUS, P_MESSAGE);
             P_MESSAGE := 'DBError';
			P_RESPONSESTATUS := -600;

        END;
    END;

    -- demo

PROCEDURE API_GET_USER_INFO( 
		p_Language IN nvarchar2,P_USER_ID IN NUMBER,
                                        P_CUR OUT CURSOR_TYPE,
                                        P_MESSAGE OUT NVARCHAR2,
                                        P_RESPONSESTATUS OUT NUMBER)
    AS
        V_USER_ID NUMBER(10) := NVL(P_USER_ID, 0);
    BEGIN 
        P_MESSAGE := 'IsSucess'; 
    	P_RESPONSESTATUS := 1;

        IF V_USER_ID = 0 THEN
            P_RESPONSESTATUS := 400;
            P_MESSAGE := 'EmployeeID is required.';
            RETURN;
        END IF;

        OPEN P_CUR FOR
        SELECT 
	            e.ID,
	            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then e.FULLNAME_VN ELSE e.fullname_vn END FULLNAME_VN,
	            case when cv.Image is null then '/services/EmployeeImage/NoImage.jpg' else ('/services/EmployeeImage/' || cast(cv.IMAGE as varchar2(255))) end as PATH, 
	            se.USERNAME USERNAME, 
	            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then j.NAME_VN ELSE j.NAME_EN END JOB_POSITION_NAME,
	            CASE WHEN cv.GENDER = 566 THEN 'F' ELSE 'M' END GENDER,
	            cv.contact_mobile MOBILE_PHONE,
	            cv.contact_phone MOBILE_PHONE2,
	            TO_CHAR(cv.BIRTH_DATE,'YYYY-MM-DD') BIRTH_DATE,
	            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then na.NAME_VN ELSE na.NAME_EN END NATIONALITY_NAME,
	            NVL(cv.PER_ADDRESS,' ') PER_ADDRESS,
	            cv.ID_NO ID_NO,
	            --NVL(cv.per_mail,cv.local_mail ) PER_EMAIL,
	            NVL(cv.contact_address,' ') CON_ADDRESS ,
	            NVL(cv.NAV_ADDRESS,' ') NAV_ADDRESS,
              
              E.EMPLOYEE_CODE,
              O.NAME_VN ORG_GOC,
              t1.name_vn TITLE_GOC,
              O1.NAME_VN RANK_GOC,
              O2.NAME_VN ORG_NOW,
              J.NAME_VN TITLE_NOW,
              OT.NAME_VN RANK_NOW,
              TO_CHAR(E.JOIN_DATE,'YYYY-MM-DD') JOIN_DATE,
              TO_CHAR(E.JOIN_BANK_DATE,'YYYY-MM-DD') JOIN_BANK_DATE,
              PR.NAME_VN BIRTH_PLACE,
              NA1.NAME_VN QUOC_TICH,
              OT1.NAME_VN NATIVE,
              OT2.NAME_VN RELIGION,
              OT3.NAME_VN MARITAL,
              TO_CHAR(CV.ID_DATE,'YYYY-MM-DD') ID_DATE,
              OT4.NAME_VN ID_PLACE,
              INF.SOCIAL_NUMBER,
              
              CV.TEMP_ADDRESS,
              CV.CONTACT_ADDRESS,
              CV.PER_MAIL,
              CV.LOCAL_MAIL,
              CV.FAMILY_NAME,
              CV.ANSWERABLE_RELATION,
              CV.FAMILY_PHONE,
              CV.ANSWERABLE_NAME,
              CV.PITCODE,
              CV.BANK_TRANSFER_NO,
              OT5.NAME_VN TT_VANHOA,
              OT6.NAME_VN TT_HOCVAN
              
              
        FROM HU_EMPLOYEE e 
        INNER JOIN SE_USER se ON e.EMPLOYEE_CODE = se.EMPLOYEE_CODE

        left join hu_organization o on e.org_goc = o.id
        left join hu_title t1 on e.title_goc = t1.id
        left join ot_other_list o1 on t1.rank_id = o1.code and o1.type_code = 'TITLE_LEVEL' 
        left join hu_organization o2 on e.org_id = o2.id
        LEFT JOIN HU_TITLE j ON e.TITLE_ID = j.ID
        left join ot_other_list ot on j.rank_id = o1.code and o1.type_code = 'TITLE_LEVEL'         
        
        LEFT JOIN HU_EMPLOYEE_CV cv ON e.ID = cv.EMPLOYEE_ID
        left join hu_province pr on cv.birth_place = pr.id
        left join hu_nation na1 on na1.id = cv.nationality_code
        left join ot_other_list ot1 on cv.native_code  = to_char(ot1.id) and ot1.type_code = 'NATIVE'
        left join ot_other_list ot2 on cv.religion_code  = to_char(ot2.id) and ot2.type_code = 'RELIGION'
        left join ot_other_list ot3 on cv.marital_code  = to_char(ot3.id) and ot3.type_code = 'MARITAL_STATUS'
        left join ot_other_list ot4 on cv.id_place_code  = to_char(ot4.id) and ot4.type_code = 'ID_PLACE'
        left join ins_information inf on inf.employee_id = e.id
        
        left join hu_employee_education edu on edu.employee_id = e.id
        left join ot_other_list ot5 on edu.academy_code  = to_char(ot5.id) and ot5.type_code = 'ACADEMY'
        left join ot_other_list ot6 on edu.learning_level_code = to_char(ot6.id) and ot6.type_code = 'LEARNING_LEVEL'
        
        
        LEFT JOIN HU_NATION na  ON cv.nav_nation = na.ID
        WHERE se.ID = V_USER_ID AND         
        rownum = 1
        ORDER BY e.is_deleted  DESC ;

    EXCEPTION WHEN OTHERS THEN
        BEGIN 
             P_MESSAGE :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
			P_RESPONSESTATUS := -600;

        END;
    END; 
    -- L?y ds cho ph?p ch?m GPS 
PROCEDURE API_GetAllowGPSLocation
				(
		p_Language IN nvarchar2,
				    p_UserID IN NUMBER,
				    p_WorkDay IN nvarchar2,
				    p_Shift_Info OUT NVARCHAR2,
				    p_Cur OUT CURSOR_TYPE, 
				    p_Message OUT NVARCHAR2,
				    p_ResponseStatus OUT NUMBER
				)
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_WorkDay nvarchar2(20) := p_WorkDay;
        v_WorkDayDate DATE ;
        v_EmpId number(19,0);
    BEGIN
	    
	    -- Chuy?n d?i th?i gian
	    BEGIN
		    SELECT TO_DATE(v_WorkDay,'YYYY-MM-DD') INTO v_WorkDayDate FROM dual;
		EXCEPTION WHEN OTHERS THEN
			p_Message := 'WorkDay format is not in YYYY-MM-DD';
			p_ResponseStatus := -600;
			RETURN;
		END;
	    -- L?y ID nh?n vi?n
	    BEGIN
		    SELECT  ID 
		    INTO 	v_EmpId 
		    FROM 	HU_EMPLOYEE he 
		    WHERE 	he.EMPLOYEE_CODE  IN (SELECT EMPLOYEE_CODE FROM se_user WHERE id = v_UserId)
		    AND 	rownum = 1
		    ORDER BY id DESC ;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			p_Message := 'Employee is not found';
			p_ResponseStatus := -600;
			RETURN;
		END;
	    
		-- l?y th?ng tin ca 
		BEGIN
		    SELECT  as2.at_sign_code || u' - ' || CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then as2.Name  ELSE as2.Name END 
		    INTO 	p_Shift_Info 
		    FROM 	AT_WORKSIGN aw 
		    LEFT JOIN
		    		AT_SHIFT as2 ON as2.id = aw.SHIFT_ID
		    WHERE 	aw.EMPLOYEE_ID  = v_EmpId 
		   	AND 	TO_CHAR(aw.WORKINGDAY ,'YYYY-MM-DD' )= p_WorkDay
		    ORDER BY aw.id DESC ;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			p_Message := 'Shift and work sign are not found ' || p_WorkDay || '+' || to_char(v_EmpId);
			p_ResponseStatus := -600;
			RETURN;
		END;

		--p_Rowcount:= 0;
		-- tr? v? gi? tr? 
		OPEN p_Cur FOR 
		select 	code,
				CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NAME_VN ELSE NAME_EN END   AS Name, 
				ATTRIBUTE1  AS Longitude,
				ATTRIBUTE2  AS Latitude,
				ATTRIBUTE3  AS Radius
		from 	ot_other_list 
		where 	type_id in (select id from ot_other_list_type where code = 'GPS_LOCATION')
		;
	 	p_Message := u'Success';
	 	p_ResponseStatus := 1; 
   
	 EXCEPTION
      WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;
  Procedure API_Get_Process_Salary(        
            p_CompanyCode IN NVARCHAR2,
            p_Language In Nvarchar2,
            p_UserID     In Number,
            --p_Password          In Nvarchar2,
            --p_DeviceID  In Nvarchar2,
            --p_Firebase_Client_Id In Nvarchar2,   
            p_Cur            Out CURSOR_TYPE,    
            p_RowCount       OUT NUMBER,
            p_Message     Out Nvarchar2,
            p_ResponseStatus OUT Number
    )As  
     v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
     v_EMPID NUMBER(10);
      v_temp NUMBER(19, 0) := 0;   
      v_Pwd Nvarchar2(50):='';
    Begin 
      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF; 
     /* SELECT ID,PASSWORD INTO v_temp,v_Pwd FROM SE_User WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF; 
      IF p_Password<> trim(v_Pwd) THEN
          p_Message := 'PassWordIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF; */
      BEGIN
          SELECT su.employee_id INTO v_EmpID
          FROM SE_USER su 
          WHERE su.ID = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'EmployeeNotFound';
              p_ResponseStatus := -600;
              RETURN;
      END; 
      --Check Pw hop le khong?
       SELECT COUNT(*) INTO p_Rowcount
      FROM Hu_Salary S  
      Inner Join Hu_Employee E On E.Id=S.Employee_Id
      WHERE S.EMPLOYEE_ID = v_EMPID ;
      Open p_Cur For 
      Select ROWNUM STT,
             E.Employee_Code,  
             E.Fullname_Vn ,
             Nvl(to_char(S.Effect_Date, 'DD/MM/YYYY'), ' ') Effect_Date,
             S.Standard_Salary,
             S.Rate_Salary,
             S.Ins_Salary,
             S.Sumallow,
             S.Luong_Bh 
      From Hu_Salary S 
      Inner Join Hu_Employee E On E.Id=S.Employee_Id
      Where S.Employee_Id=v_EMPID;
      p_Message := u'Success';
	 	  p_ResponseStatus := 1; 
      EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
    End; 
  Procedure API_Get_Process_TrainOutBank( 
      p_CompanyCode IN NVARCHAR2,
      p_Language In Nvarchar2,
      p_UserID     In Number,
      p_Cur            Out CURSOR_TYPE,
      p_Message     Out Nvarchar2,
      p_ResponseStatus OUT Number
   )As
   v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
   v_EMPID NUMBER(10);
   v_temp NUMBER(19, 0) := 0;   
   Begin 
     IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
     SELECT ID INTO v_temp FROM SE_User WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
    Open p_Cur For
    Select E.Employee_Code,  
             E.Fullname_Vn ,
             S.School_Name,
             S.Specialize,
             Case When Nvl(p_Language,'vi-VN')='vi-VN' Then T.Name_Vn Else T.NAME_EN End As Specialize_Name ,
             S.Degree,
             Case When Nvl(p_Language,'vi-VN')='vi-VN' Then Deg.Name_Vn Else Deg.NAME_EN End As Degree_Name ,
             S.Training_Content,
             --S.From_Date,
             Nvl(to_char(S.From_Date, 'DD/MM/YYYY'), ' ')      From_Date,
             --S.To_Date     
             Nvl(to_char(S.To_Date, 'DD/MM/YYYY'), ' ')      To_Date
      From Hu_Employee_Train S 
      Inner Join Hu_Employee E On E.Id=S.Employee_Id
      Left Join Ot_Other_List T On T.CODE=S.specialize
      Left Join Ot_Other_List Deg On Deg.Code=S.Degree
      Where S.Employee_Id=v_EMPID;
    p_Message := u'Success';
	 	p_ResponseStatus := 1; 
     EXCEPTION
      WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
   End;
   Procedure API_Process_TrainInCompany(
                                         p_CompanyCode IN NVARCHAR2, 
                                         p_Language IN NVARCHAR2,
                                         p_UserID IN NUMBER,
                                         p_Cur   OUT CURSOR_TYPE,
                                         --p_RowCount       OUT NUMBER,
                                         p_Message OUT NVARCHAR2,
                                         p_ResponseStatus OUT NUMBER)
  As
  v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
  v_EMPID NUMBER(10);
  v_temp NUMBER(19, 0) := 0;
  Begin
    IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT ID INTO v_temp FROM SE_User WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      Begin
          Select He.id Into V_empid
          From Se_user Su 
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = V_userid;
      Exception
          When Others Then
              P_message := 'EMPLOYEENOTFOUND';
              P_responsestatus := -600;
              Return;
      End;
    Open P_cur For
    select rownum STT, A.* from(
      Select A.*
        From (
              Select Tp.id,
                      E.employee_code,
                      E.fullname_vn As Fullname_vn,
                      T.name As Topic_name,
                      C.code As Course_code,
                      C.name As Course_name,  
                      Nvl(to_char(Tp.from_date, 'DD/MM/YYYY'), ' ')  from_date,
                      Nvl(to_char(Tp.to_date, 'DD/MM/YYYY'), ' ')to_date,
                      Case Tp.result
                        When 0 Then
                         To_char(Unistr('kh\00f4ng \0111\1ea1t'))
                        Else
                         To_char(Unistr('\0110\1ea1t'))
                      End Is_result
                From Tr_employee_course Tp
                Left Join Tr_course C
                  On Tp.tr_course_id = C.id
               Inner Join Tr_topic T
                  On Tp.tr_topic_id = T.id
               Inner Join Hu_employee E
                  On Tp.employee_id = E.id
               Inner Join Hu_organization O
                  On E.org_id = O.id
               Where Tp.is_deleted = 0
                 And Tp.status = 1
                 And E.id = V_empid
                 And Nvl(Tp.result, 0) <> 0
              Union
              Select Tp1.id,
                      E1.employee_code,
                      E1.fullname_vn   As Fullname_vn,
                      T1.name          As Topic_name,
                      T1.code          As Course_code,
                      C1.name As Course_name,
                       Nvl(to_char(C1.from_date, 'DD/MM/YYYY'), ' ')  from_date,
                      Nvl(to_char(C1.to_date, 'DD/MM/YYYY'), ' ')to_date,
                      To_char(Unistr('\0110\1ea1t')) Is_result
                From Tr_empl_course_reg Tp1
               Inner Join Tr_course_reg C1
                  On C1.id = Tp1.tr_course_reg_id
               Inner Join Tr_topic T1
                  On T1.id = C1.tr_topic_id
               Inner Join Hu_employee E1
                  On Tp1.employee_id = E1.id
               Inner Join Hu_organization O1
                  On E1.org_id = O1.id
               Where Tp1.is_deleted = 0
                 And Tp1.status = 1
                 And C1.approved_status = 2
                 And E1.id = V_empid) A
       Order By A.from_date Desc)A;
  
   P_message := 'issuccess';
   P_responsestatus := 1;
   Exception
    When Others Then
      
     p_Message := 'DatabaseError';
     p_ResponseStatus := -99;
      SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE_SCB.API_PROCESS_TRAIN_IN_COMPANY',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL);
  End; 
  Procedure API_At_SummaryByEmployee(p_Companycode    In Nvarchar2,
                              p_UserId         In Number,
                              p_Language       In Nvarchar2,
                              p_Period         In Number,
                              --p_EmployeeCode      In Nvarchar2,
                              p_Cur            Out Cursor_type,
                              p_Message        Out Nvarchar2,
                              p_Responsestatus Out Number) As
                                         
  v_Userid Number(19,0) := Nvl(P_userid, -1);
  v_Empid Number(10);
  v_Temp Number(19, 0) := 0;
  v_Sql       Clob;
  v_Remark    Clob;
  v_Listemp   Clob;
  v_EmployeeCode  Nvarchar2(50):='';
  Begin
    If V_userid = -1 Then
          P_message := 'ISUSERIDNULL';
          P_responsestatus := -600;
          Return;
      End If;

      Select Id Into V_temp From Se_user Where Id = V_userid;
      If V_temp < 1 Then
          P_message := 'USERISNOTFOUND';
          P_responsestatus := -600;
          Return;
      End If;

      Begin
          Select He.id, he.employee_code Into V_empid  ,v_EmployeeCode
          From Se_user Su 
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = V_userid;
      Exception
          When Others Then
              P_message := 'EMPLOYEENOTFOUND';
              P_responsestatus := -600;
              Return;
      End;
  
  Select Listagg(To_char(E.id), ',') Within Group(Order By Rownum)
       Into v_Listemp
    From Hu_employee E
    Where E.dm_id = V_empid
       Or E.id = V_empid;
    
    Select Listagg('case When Nvl(' || To_char(A.code) ||
                   ',0) >0 Then Decode(Nvl(' || To_char(A.code) ||
                   ',0),''.5'',''0.5'',nvl(' || To_char(A.code) ||
                   ',0)) || '' ' || To_char(A.name) || ', ' || ''' End',
                   '||') Within Group(Order By Rownum)
      Into v_Remark
      From At_sign A
     Where A.code In ('p',
                      'tl',
                      'ch',
                      'l',
                      'ts',
                      'n',
                      'o',
                      'tnld',
                      'nb',
                      'bl',
                      'kld',
                      'tn',
                      'vs',
                      'vsbh',
                      'n7',
                      'kt',
                      'st',
                      'khhgd',
                      'ds',
                      'ct',
                      'tgc');    
         
   v_Sql := '
      Select /*o.name_vn Org_name,
                             O.description_path Org_desc,
                             T.name_vn Title_name,*/
                             ROWNUM STT,
                             E.id Employee_id,
                             E.employee_code,
                             E.fullname_vn,
                             Z.ncc,
                             Z.nctt,
                             Z.nctl,
                             Z.nncl,
                             Z.nnkl,
                             Trim(' || v_Remark || '
                              Case When Nvl(Ttnc,0) >0 Or Nvl(Ttnc,0) <0 Then Decode(Nvl(Ttnc,0),''.5'',''0.5'',''-.5'',''-0.5'',nvl(Ttnc,0)) || '' Truy Thu/ Truy Linh, ''
                              End
                            ) Note 
                        From At_aldata_summary Z
                       Inner Join Hu_employee E
                          On Z.employee_id = E.id
                        Left Join Hu_working W
                          On W.id = Z.working_id
                        Left Join Hu_decision_type Dt
                          On Dt.id = W.decision_type_id
                       Inner Join Hu_organization O
                          On O.id = Z.orgid
                        Left Join Hu_title T
                          On T.id = Z.title_id
                       Where Z.period= ' || P_period || '
                       And ((Upper(E.fullname_vn) Like ''%'' || Upper('''|| v_EmployeeCode ||''') || ''%'' Or
                E.employee_code Like ''%'' || '''|| v_EmployeeCode ||''' || ''%'') Or
                '''|| v_EmployeeCode ||''' Is Null) 
                       And Instr('','' || '''|| v_Listemp ||''' || '','', '','' || E.id || '','') > 0';
    Insert Into At_strsql Values (Seq_at_strsql.nextval, v_Sql);
    Commit;
    Execute Immediate v_Sql;
    Open P_cur For To_char(v_Sql);   
  
   P_message := 'ISSUCCESS';
   P_responsestatus := 1;
  
  Exception
    When Others Then
     P_message := 'DATABASEERROR';
     P_responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_At_SummaryByEmployee',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End;   
  
   Procedure API_At_SummaryByEmployeeMng(
                              p_Companycode    In Nvarchar2,
                              p_UserId         In Number,
                              p_Language       In Nvarchar2,
                              p_Period         In Number,
                              p_KeyEmployeeCode      In Nvarchar2 default '',
                              p_Cur            Out Cursor_type,
                              p_Message        Out Nvarchar2,
                              p_Responsestatus Out Number) As
                                         
  v_Userid Number(19,0) := Nvl(P_userid, -1);
  v_Empid Number(10);
  v_Temp Number(19, 0) := 0;
  v_Sql       Clob;
  v_Remark    Clob;
  v_Listemp   Clob;  
  v_EmployeeIds Clob;
  v_EmployeeCode  Nvarchar2(50):=''; 
  v_KeyEmployeeCode    Nvarchar2(100):=  Nvl(p_KeyEmployeeCode,'');
  Begin
    If V_userid = -1 Then
          P_message := 'ISUSERIDNULL';
          P_responsestatus := -600;
          Return;
      End If;

      Select Id Into V_temp From Se_user Where Id = V_userid;
      If V_temp < 1 Then
          P_message := 'USERISNOTFOUND';
          P_responsestatus := -600;
          Return;
      End If;

      Begin
          Select He.id, he.employee_code Into V_empid  ,v_EmployeeCode
          From Se_user Su 
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = V_userid;
      Exception
          When Others Then
              P_message := 'EMPLOYEENOTFOUND';
              P_responsestatus := -600;
              Return;
      End;
  
  Select Listagg(To_char(E.id), ',') Within Group(Order By Rownum)
       Into v_Listemp
    From Hu_employee E
    Where E.dm_id = V_empid   ;
  --     Or E.id = V_empid;
      
    Select Listagg('case When Nvl(' || To_char(A.code) ||
                   ',0) >0 Then Decode(Nvl(' || To_char(A.code) ||
                   ',0),''.5'',''0.5'',nvl(' || To_char(A.code) ||
                   ',0)) || '' ' || To_char(A.name) || ', ' || ''' End',
                   '||') Within Group(Order By Rownum)
      Into v_Remark
      From At_sign A
     Where A.code In ('p',
                      'tl',
                      'ch',
                      'l',
                      'ts',
                      'n',
                      'o',
                      'tnld',
                      'nb',
                      'bl',
                      'kld',
                      'tn',
                      'vs',
                      'vsbh',
                      'n7',
                      'kt',
                      'st',
                      'khhgd',
                      'ds',
                      'ct',
                      'tgc');    
         
   v_Sql := '
      Select /*o.name_vn Org_name,
                             O.description_path Org_desc,
                             T.name_vn Title_name,*/
                             ROWNUM STT,
                             E.id Employee_id,
                             E.employee_code,
                             E.fullname_vn,
                             Z.ncc,
                             Z.nctt,
                             Z.nctl,
                             Z.nncl,
                             Z.nnkl,
                             Trim(' || v_Remark || '
                              Case When Nvl(Ttnc,0) >0 Or Nvl(Ttnc,0) <0 Then Decode(Nvl(Ttnc,0),''.5'',''0.5'',''-.5'',''-0.5'',nvl(Ttnc,0)) || '' Truy Thu/ Truy Linh, ''
                              End
                            ) Note 
                        From At_aldata_summary Z
                       Inner Join Hu_employee E
                          On Z.employee_id = E.id
                        Left Join Hu_working W
                          On W.id = Z.working_id
                        Left Join Hu_decision_type Dt
                          On Dt.id = W.decision_type_id
                       Inner Join Hu_organization O
                          On O.id = Z.orgid
                        Left Join Hu_title T
                          On T.id = Z.title_id
                       Where Z.period= ' || P_period || '
                       And ((Upper(E.fullname_vn) Like ''%'' || Upper('''|| v_KeyEmployeeCode ||''') || ''%'' Or
                E.employee_code Like ''%'' || '''|| v_KeyEmployeeCode ||''' || ''%'') Or
                '''|| v_KeyEmployeeCode ||''' Is Null) 
                       And Instr('','' || '''|| v_Listemp ||''' || '','', '','' || E.id || '','') > 0';
    Insert Into At_strsql Values (Seq_at_strsql.nextval, v_Sql);
    Commit;
    Execute Immediate v_Sql;
    Open P_cur For (v_Sql);   
  
   P_message := 'ISSUCCESS';
   P_responsestatus := 1;
  
  Exception
    When Others Then
     P_message := 'DATABASEERROR';
     P_responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_At_SummaryByEmployeeMng',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End;   
 
 Procedure API_At_InOutByEmployee(  
  p_Companycode    In Nvarchar2,
  p_UserId         In Number,
  p_Language       In Nvarchar2, 
  p_FromDate      In Nvarchar2,
  p_ToDate         In  Nvarchar2,
  p_Cur            Out Cursor_type,
  p_Message        Out Nvarchar2,
  p_Responsestatus Out Number
 )As 
 v_Userid Number(19,0) := Nvl(P_userid, -1);
  v_Empid Number(10);
  v_Temp Number(19, 0) := 0;
  --v_Sql       Clob;
  v_Remark    Clob;
  v_Listemp   Clob;
  v_EmployeeCode  Nvarchar2(50):='';  
  v_ListSignCode Clob:=''; 
  v_StrSqlQuery Clob:='';
  v_FromDate       Date;
  v_ToDate           Date;
 Begin 
   v_FromDate      := To_Date(p_FromDate,'YYYY-MM-DD');
  v_ToDate       := To_Date(p_ToDate,'YYYY-MM-DD');
   If V_userid = -1 Then
          P_message := 'ISUSERIDNULL';
          P_responsestatus := -600;
          Return;
      End If;

      Select Id Into V_temp From Se_user Where Id = v_Userid;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If;

      Begin
          Select He.id, he.employee_code Into V_empid  ,v_EmployeeCode
          From Se_user Su 
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      Begin 
        With tbl_at_sign as (
             select 
             to_char(s.code) as sign_code           ,
             s.status
             From at_sign s 
             Where nvl(s.status,0)<>0
        ) 
        Select Listagg( 
                sign_code || ' As '''||sign_code||'''' ,','
                )Within Group (Order By Rownum Desc) list_code
        Into v_ListSignCode
        From tbl_at_sign a where Nvl( a.status,0)<>0    ;
        Exception
          When Others Then
              p_Message := 'SIGNCODENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      v_StrSqlQuery:='
         Select
           ROWNUM STT, 
           Employee_Id   ,
           Min(Employee_Code) Employee_Code ,
           Min(Fullname_Vn) Fullname_Vn,
           To_Char( Working_Day,''dd/mm/yyyy'') Working_Day,
           Min(At_Sign_Code) At_Sign_Code, 
           Min(In_Sys_1) In_Sys_1,
           Min(Out_Sys_1) Out_Sys_1,
           Min(DiTre) DiTre,
           Min(VeSom) VeSom,
           Min(Remark)  Remark,
            Listagg( 
                     CodeValue ,'',''
                     )Within Group (Order By Rownum Desc) list_code
      From (
        Select     
                       Employee_Id,
                       Employee_Code ,
                       Fullname_Vn,
                       Working_Day,
                       At_Sign_Code, 
                       In_Sys_1,
                       Out_Sys_1,
                       DiTre,
                       VeSom ,
                       Remark  ,
                      To_Char(valuesWithCode)||signCode As CodeValue
        From (
        Select  
        E.Employee_Code,
        E.Fullname_Vn,
        Shift.At_Sign_Code,
        To_Char(Io.In_Sys_1,''dd/mm/yyyy'')          as In_Sys_1,
        To_Char(Io.Out_Sys_1, ''dd/mm/yyyy'') as        Out_Sys_1,
        A.Dttt As DiTre ,
        A.Vstt As VeSom,
        R.Remark,
        A.*
        From At_Aldata     A 
        Inner Join At_Shift           Shift On Shift.Id=A.Shift_Id  
        Inner Join Hu_Employee E On E.Id =A.Employee_Id  
        Left Join At_Io Io On Io.Employee_Code=E.Employee_Code  
        Left Join At_Rgt R On R.Employee_Id=A.Employee_Id
        And R.Working_Day=A.Working_Day
        And A.Working_Day=Io.Working_Day
        where a.employee_id='||V_empid||'
       and a.working_day between :p_StartDate  and :p_EndDate )
      UNPIVOT(
          valuesWithCode  -- unpivot_clause
          For signCode --  unpivot_for_clause
          In ( -- unpivot_in_clause  
               '||v_ListSignCode||'
          )
      ) Where  valuesWithCode >0         and signCode <>''SALARY_ID''
      ) Temp 
      Group By Temp.Employee_Id,  Temp. Working_Day
      '; 
      /*Insert Into At_strsql Values (Seq_at_strsql.nextval, v_StrSqlQuery);
      Commit;*/
      Open p_Cur For v_StrSqlQuery Using  v_FromDate, v_ToDate;
      p_Message := 'ISSUCCESS';
      p_Responsestatus := 1;   
   Exception
    When Others Then 
      p_Message := 'DATABASEERROR';
      p_Responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_At_InOutByEmployee',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End;

  PROCEDURE API_SearchRegisterLeave( 
                                    p_Language       iN nvarchar2,
                                    p_UserID         IN NUMBER,
                                    p_FromDate       IN NVARCHAR2,
                                    p_ToDate         IN NVARCHAR2,
                                    p_Status         IN NVARCHAR2,
                                    p_Page           IN NUMBER,
                                    p_PageSize       IN NUMBER,
                                    p_Cur            OUT CURSOR_TYPE,
                                    p_InitCount      OUT NUMBER,
                                    p_PendingCount   OUT NUMBER,
                                    p_ApprovedCount  OUT NUMBER,
                                    p_RejectedCount  OUT NUMBER,
                                    p_Rowcount       OUT NUMBER,
                                    p_Message        OUT NVARCHAR2,
                                    p_ResponseStatus OUT NUMBER) AS
    v_UserId        NUMBER(19, 0) := NVL(p_UserId, -1);
    v_Page          NUMBER(10, 0) := NVL(p_Page, 1);
    v_PageSize      NUMBER(2, 0) := NVL(p_PageSize, 10);
    v_Status        NVARCHAR2(20) := NVL(p_Status, '-2');
    v_EmployeeID    NUMBER(19, 0);
    v_FD            NUMBER(19, 0) := 0;
    v_TD            NUMBER(19, 0) := 0;
    v_DefaultDate   DATE := TO_DATE('1900-01-01', 'YYYY-MM-DD');
    v_FromDate      DATE;
    v_ToDate        DATE;
    v_FromDateInput NVARCHAR2(20) := NVL(p_FromDate, '-1');
    v_ToDateInput   NVARCHAR2(20) := NVL(p_ToDate, '-1');
    v_temp          NUMBER(10, 0) := 0;
  BEGIN
    p_Rowcount := 0;
    IF v_UserID = -1 THEN
      p_Message        := 'IsUserIDNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;
    BEGIN
      SELECT he.ID
        INTO v_EmployeeID
        FROM HU_EMPLOYEE he
        JOIN SE_USER su
          ON su.EMPLOYEE_CODE = he.EMPLOYEE_CODE
       WHERE su.ID = v_UserID
         AND ((he.WORK_STATUS = 257 AND SYSDATE < he.TER_EFFECT_DATE) OR
             (he.WORK_STATUS <> 257))
         AND rownum = 1;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'UserNotConfig';
        p_ResponseStatus := -600;
        RETURN;
    END;
    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
    IF v_temp < 1 THEN
      p_Message        := 'UserIsNotFound';
      p_ResponseStatus := -600;
      RETURN;
    END IF;
  
    IF v_FromDateInput != '-1' THEN
      begin
        v_FromDate := TO_DATE(p_FromDate, 'YYYY-MM-DD');
        SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDD'))
          INTO v_FD
          FROM dual;
      EXCEPTION
        WHEN OTHERS THEN
          p_Message        := 'v_FromDate fail' || p_FromDate;
          p_ResponseStatus := -601;
          RETURN;
      END;
    end if;
    IF v_ToDateInput != '-1' then
      v_ToDate := TO_DATE(p_ToDate, 'YYYY-MM-DD');
      SELECT TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDD')) INTO v_TD FROM dual;
    end if;
  
    --Count tong so dong tra ve (total -> phan trang)
    BEGIN
      SELECT COUNT(*)
        INTO p_Rowcount
        FROM (SELECT rownum stt,
                       R.ID,
                       E.EMPLOYEE_CODE,
                       E.ID EMPLOYEE_ID,
                       E.FULLNAME_VN EMPLOYEE_NAME,
                       to_char(R.WORKING_DAY,'dd/mm/yyyy') WORKING_DAY,
                       S.ID SIGN_ID,
                       S.NAME SIGN_NAME,
                       O.CODE SIGN_CODE,
                       CASE
                         WHEN R.TYPE_LEAVE = 'TYPE_LEAVE1' AND
                              R.NVALUE = '0.5' THEN
                          'S 0.5'
                         WHEN R.TYPE_LEAVE = 'TYPE_LEAVE2' AND
                              R.NVALUE = '0.5' THEN
                          'C 0.5'
                         ELSE
                          case
                            when R.NVALUE = '0.5' then
                             TO_CHAR(TO_CHAR(NVL(R.NVALUE, 0)), '0.0')
                            else
                             to_char(NVL(R.NVALUE, 0))
                          end
                       END DAYCOUNT,
                       R.NOTE DISPLAY,
                       NULL PCONLAI,
                       NULL PBU,
                       NULL P_HAVE,
                       R.STATUS,
                       case
                         when r.status = 2 then
                          TO_CHAR(UNISTR('Ch\01B0a duy\1EC7t'))
                         when r.status = 1 then
                          TO_CHAR(UNISTR('\0110\00E3 duy\1EC7t'))
                         when r.status = 3 then
                          TO_CHAR(UNISTR('T\1EEB ch\1ED1i'))
                       end STATUS_NAME,
                       ot.name_vn TYPENAME,
                       to_char(r.regdate,'dd/mm/yyyy') TIMECREATE,
                       r.note
                  FROM AT_PORTAL_REG R
                 INNER JOIN HU_EMPLOYEE E
                    ON E.ID = R.EMPLOYEE_ID
                 INNER JOIN AT_SIGN S
                    ON R.SIGN_ID = S.ID
                 INNER JOIN AT_GSIGN O
                    ON S.AT_GSIGNID = O.ID
                 left join ot_other_list ot on r.type_leave = ot.code
                 WHERE O.CODE = 'LEAVE'
                   AND NVL(R.STATUS, 0) <> 4
                   AND (case
                               when v_Status IN ('-2', '-1') then
                                1
                               when v_Status NOT IN ('-2', '-1') and
                                    R.STATUS IN
                                    (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                       FROM (SELECT LEVEL AS IAB,
                                                    REGEXP_SUBSTR(v_Status,
                                                                  '[^,]+',
                                                                  1,
                                                                  LEVEL) AS IVALUE
                                               FROM DUAL
                                             CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                      '[^,]+',
                                                                      1,
                                                                      LEVEL) IS NOT NULL)) then
                                1
                               else
                                0
                             end) = 1
                  /* AND E.DM_ID = (SELECT DM.ID
                                    FROM HU_EMPLOYEE DM
                                   WHERE DM.id = v_EmployeeID)*/
                      --AND (P_SIGN = 0  OR S.ID = P_SIGN)
                   AND r.employee_id = v_EmployeeID
                   AND ((v_ToDate IS NUll and v_FromDate is null and 1 = 1) or
                       (v_ToDate is not null and v_FromDate is null and
                       R.WORKING_DAY <= v_ToDate) or
                       (v_ToDate is null and v_FromDate is not null and
                       R.WORKING_DAY >= v_FromDate) or
                       (v_ToDate is not null and v_FromDate is not null and
                       R.WORKING_DAY BETWEEN v_FromDate and v_ToDate))) R;
    
      -- d?m t?ng theo nh?n vi?n: c?n th?m m?c d?nh th?i gian gi?i h?n
      SELECT sum(CASE
                   WHEN R.STATUS = 0 THEN
                    1
                   ELSE
                    0
                 END),
             sum(CASE
                   WHEN R.STATUS = 2 THEN -- waiting
                    1
                   ELSE
                    0
                 END),
             sum(CASE
                   WHEN R.STATUS = 1 THEN --approve
                    1
                   ELSE
                    0
                 END),
             sum(CASE
                   WHEN R.STATUS = 3 THEN --reject
                    1
                   ELSE
                    0
                 END)
        INTO p_InitCount, p_PendingCount, p_ApprovedCount, p_RejectedCount
        FROM (SELECT R.ID,
                     E.EMPLOYEE_CODE,
                     E.ID EMPLOYEE_ID,
                     E.FULLNAME_VN EMPLOYEE_NAME,
                     R.WORKING_DAY WORKING_DAY,
                     S.ID SIGN_ID,
                     S.NAME SIGN_NAME,
                     O.CODE SIGN_CODE,
                     CASE
                       WHEN R.TYPE_LEAVE = 'TYPE_LEAVE1' AND R.NVALUE = '0.5' THEN
                        'S 0.5'
                       WHEN R.TYPE_LEAVE = 'TYPE_LEAVE2' AND R.NVALUE = '0.5' THEN
                        'C 0.5'
                       ELSE
                        case
                          when R.NVALUE = '0.5' then
                           TO_CHAR(TO_CHAR(NVL(R.NVALUE, 0)), '0.0')
                          else
                           to_char(NVL(R.NVALUE, 0))
                        end
                     END DAYCOUNT,
                     R.NOTE DISPLAY,
                     NULL PCONLAI,
                     NULL PBU,
                     NULL P_HAVE,
                     R.STATUS
                       
                FROM AT_PORTAL_REG R
               INNER JOIN HU_EMPLOYEE E
                  ON E.ID = R.EMPLOYEE_ID
               INNER JOIN AT_SIGN S
                  ON R.SIGN_ID = S.ID
               INNER JOIN AT_GSIGN O
                  ON S.AT_GSIGNID = O.ID
               WHERE O.CODE = 'LEAVE'
                 AND NVL(R.STATUS, 0) <> 4
                  AND (case
                               when v_Status IN ('-2', '-1') then
                                1
                               when v_Status NOT IN ('-2', '-1') and
                                    R.STATUS IN
                                    (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                       FROM (SELECT LEVEL AS IAB,
                                                    REGEXP_SUBSTR(v_Status,
                                                                  '[^,]+',
                                                                  1,
                                                                  LEVEL) AS IVALUE
                                               FROM DUAL
                                             CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                      '[^,]+',
                                                                      1,
                                                                      LEVEL) IS NOT NULL)) then
                                1
                               else
                                0
                             end) = 1
                 /*AND E.DM_ID = (SELECT DM.ID
                                  FROM HU_EMPLOYEE DM
                                 WHERE DM.id = v_EmployeeID)*/
                    --AND (P_SIGN = 0  OR S.ID = P_SIGN)
                 AND r.employee_id = v_EmployeeID
                 AND ((v_ToDate IS NUll and v_FromDate is null and 1 = 1) or
                     (v_ToDate is not null and v_FromDate is null and
                     R.WORKING_DAY <= v_ToDate) or
                     (v_ToDate is null and v_FromDate is not null and
                     R.WORKING_DAY >= v_FromDate) or
                     (v_ToDate is not null and v_FromDate is not null and
                     R.WORKING_DAY BETWEEN v_FromDate and v_ToDate))) R;
    
      -- set lai neu null                         
      SELECT NVL(p_InitCount, 0),
             NVL(p_PendingCount, 0),
             NVL(p_ApprovedCount, 0),
             NVL(p_RejectedCount, 0)
        INTO p_InitCount, p_PendingCount, p_ApprovedCount, p_RejectedCount
        FROM dual;
    
      -- ds tra ve
      OPEN p_Cur FOR
        SELECT *
          FROM (SELECT rownum stt,
                       R.ID,
                       E.EMPLOYEE_CODE,
                       E.ID EMPLOYEE_ID,
                       E.FULLNAME_VN EMPLOYEE_NAME,
                       to_char(R.WORKING_DAY,'dd/mm/yyyy') WORKING_DAY,
                       S.ID SIGN_ID,
                       S.NAME SIGN_NAME,
                       O.CODE SIGN_CODE,
                       CASE
                         WHEN R.TYPE_LEAVE = 'TYPE_LEAVE1' AND
                              R.NVALUE = '0.5' THEN
                          'S 0.5'
                         WHEN R.TYPE_LEAVE = 'TYPE_LEAVE2' AND
                              R.NVALUE = '0.5' THEN
                          'C 0.5'
                         ELSE
                          case
                            when R.NVALUE = '0.5' then
                             TO_CHAR(TO_CHAR(NVL(R.NVALUE, 0)), '0.0')
                            else
                             to_char(NVL(R.NVALUE, 0))
                          end
                       END DAYCOUNT,
                       R.NOTE DISPLAY,
                       NULL PCONLAI,
                       NULL PBU,
                       NULL P_HAVE,
                       R.STATUS,
                       case
                         when r.status = 2 then
                          TO_CHAR(UNISTR('Ch\01B0a duy\1EC7t'))
                         when r.status = 1 then
                          TO_CHAR(UNISTR('\0110\00E3 duy\1EC7t'))
                         when r.status = 3 then
                          TO_CHAR(UNISTR('T\1EEB ch\1ED1i'))
                       end STATUS_NAME,
                       ot.name_vn TYPENAME,
                       to_char(r.regdate,'yyyy-mm-dd') TIMECREATE,
                       r.note,
                       to_char(r.from_hour,'yyyy-mm-dd') LEAVEFROM,                       
                       to_char(r.to_hour,'yyyy-mm-dd') LEAVETO
                  FROM AT_PORTAL_REG R
                 INNER JOIN HU_EMPLOYEE E
                    ON E.ID = R.EMPLOYEE_ID
                 INNER JOIN AT_SIGN S
                    ON R.SIGN_ID = S.ID
                 INNER JOIN AT_GSIGN O
                    ON S.AT_GSIGNID = O.ID
                 left join ot_other_list ot on r.type_leave = ot.code
                 WHERE O.CODE = 'LEAVE'
                   AND NVL(R.STATUS, 0) <> 4
                   AND (case
                               when v_Status IN ('-2', '-1') then
                                1
                               when v_Status NOT IN ('-2', '-1') and
                                    R.STATUS IN
                                    (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                       FROM (SELECT LEVEL AS IAB,
                                                    REGEXP_SUBSTR(v_Status,
                                                                  '[^,]+',
                                                                  1,
                                                                  LEVEL) AS IVALUE
                                               FROM DUAL
                                             CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                      '[^,]+',
                                                                      1,
                                                                      LEVEL) IS NOT NULL)) then
                                1
                               else
                                0
                             end) = 1
                  /* AND E.DM_ID = (SELECT DM.ID
                                    FROM HU_EMPLOYEE DM
                                   WHERE DM.id = v_EmployeeID)*/
                      --AND (P_SIGN = 0  OR S.ID = P_SIGN)
                   AND r.employee_id = v_EmployeeID
                   AND ((v_ToDate IS NUll and v_FromDate is null and 1 = 1) or
                       (v_ToDate is not null and v_FromDate is null and
                       R.WORKING_DAY <= v_ToDate) or
                       (v_ToDate is null and v_FromDate is not null and
                       R.WORKING_DAY >= v_FromDate) or
                       (v_ToDate is not null and v_FromDate is not null and
                       R.WORKING_DAY BETWEEN v_FromDate and v_ToDate))) R
    
      WHERE STT >((v_PAGE - 1) * v_PAGESIZE) AND STT <(v_PAGE * v_PAGESIZE + 1);
    END;
  
    p_Message        := 'IsSuccess';
    p_ResponseStatus := 1;
  EXCEPTION
    WHEN OTHERS THEN
      p_Message        := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
      p_ResponseStatus := -99;
  END;
  
  Procedure API_At_InOutByEmployeeMng(  
  p_Companycode    In Nvarchar2,
  p_UserId         In Number,
  p_Language       In Nvarchar2, 
  p_FromDate      In Nvarchar2,
  p_ToDate         In  Nvarchar2,
  p_EmpName        in nvarchar2,
  p_Cur            Out Cursor_type,
  p_Message        Out Nvarchar2,
  p_Responsestatus Out Number
 )As 
 v_Userid Number(19,0) := Nvl(P_userid, -1);
  v_Empid Number(10);
  v_Temp Number(19, 0) := 0;
  --v_Sql       Clob;
  v_Remark    Clob;
  v_Listemp   Clob;
  v_EmployeeCode  Nvarchar2(50):='';  
  v_ListSignCode Clob:=''; 
  v_StrSqlQuery Clob:='';
  v_FromDate       Date;
  v_ToDate           Date;
  v_EmployeeIds Clob;
 Begin 
   v_FromDate      := To_Date(p_FromDate,'YYYY-MM-DD');
  v_ToDate       := To_Date(p_ToDate,'YYYY-MM-DD');
   If V_userid = -1 Then
          P_message := 'ISUSERIDNULL';
          P_responsestatus := -600;
          Return;
      End If;

      Select Id Into V_temp From Se_user Where Id = v_Userid;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If;

      Begin
          Select He.id, he.employee_code Into V_empid  ,v_EmployeeCode
          From Se_user Su 
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      --lay ds nhan vien thuoc quan ly:   
      Begin
        Select Listagg(To_Char(E.Id),',') Within Group (Order By E.Id)
        Into v_EmployeeIds 
        From Hu_Employee E
        Where E.Dm_Id =V_empid;
        v_EmployeeIds:= ','||v_EmployeeIds ||',';
        Exception
          When Others Then
              p_Message := 'LISTEMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      Begin 
        With tbl_at_sign as (
             select 
             to_char(s.code) as sign_code           ,
             s.status
             From at_sign s 
             Where nvl(s.status,0)<>0
        ) 
        Select Listagg( 
                sign_code || ' As '''||sign_code||'''' ,','
                )Within Group (Order By Rownum Desc) list_code
        Into v_ListSignCode
        From tbl_at_sign a where Nvl( a.status,0)<>0    ;
        Exception
          When Others Then
              p_Message := 'SIGNCODENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      v_StrSqlQuery:='
         Select
           ROWNUM STT, 
           EMPLOYEE_ID   ,
           MIN(EMPLOYEE_CODE) EMPLOYEE_CODE ,
           MIN(FULLNAME_VN) FULLNAME_VN,
           TO_CHAR( WORKING_DAY,''DD/MM/YYYY'') WORKING_DAY,
           MIN(AT_SIGN_CODE) AT_SIGN_CODE, 
           MIN(IN_SYS_1) IN_SYS_1,
           MIN(OUT_SYS_1) OUT_SYS_1,
           MIN(DITRE) DITRE,
           MIN(VESOM) VESOM,
           MIN(REMARK)  REMARK,
            LISTAGG( 
                     CODEVALUE ,'',''
                     )WITHIN GROUP (ORDER BY ROWNUM DESC) LIST_CODE
      From (
        Select     
                       Employee_Id,
                       Employee_Code ,
                       Fullname_Vn,
                       Working_Day,
                       At_Sign_Code, 
                       In_Sys_1,
                       Out_Sys_1,
                       DiTre,
                       VeSom ,
                       Remark  ,
                      To_Char(valuesWithCode)||signCode As CodeValue
        From (
        Select  
        E.Employee_Code,
        E.Fullname_Vn,
        Shift.At_Sign_Code,
        To_Char(Io.In_Sys_1,''dd/mm/yyyy'')             as In_Sys_1,
        To_Char(Io.Out_Sys_1, ''dd/mm/yyyy'') as        Out_Sys_1,
        A.Dttt As DiTre ,
        A.Vstt As VeSom,
        R.Remark,
        A.*
        From At_Aldata     A 
        Inner Join At_Shift           Shift On Shift.Id=A.Shift_Id  
        Inner Join Hu_Employee E On E.Id =A.Employee_Id  
        Left Join At_Io Io On Io.Employee_Code=E.Employee_Code  
        Left Join At_Rgt R On R.Employee_Id=A.Employee_Id
        And R.Working_Day=A.Working_Day
        And A.Working_Day=Io.Working_Day
        where Instr('''||v_EmployeeIds||''','||''','''||'||a.employee_id||'||''','''||') >0
        
        And ((Upper(E.fullname_vn) Like ''%'' || Upper(''N'|| p_EmpName ||''') || ''%'' Or
                E.employee_code Like ''%'' || '''|| p_EmpName ||''' || ''%'') Or
                '''|| p_EmpName ||''' Is Null) 
        
       and a.working_day between :p_StartDate  and :p_EndDate )
      UNPIVOT(
          valuesWithCode  -- unpivot_clause
          For signCode --  unpivot_for_clause
          In ( -- unpivot_in_clause  
               '||v_ListSignCode||'
          )
      ) Where  valuesWithCode >0         and signCode <>''SALARY_ID''
      ) Temp 
      Group By Temp.Employee_Id,  Temp. Working_Day
      '; 
      Insert Into At_strsql Values (Seq_at_strsql.nextval, v_StrSqlQuery);
      Commit;
      Open p_Cur For v_StrSqlQuery Using  v_FromDate, v_ToDate;
      p_Message := 'ISSUCCESS';
      p_Responsestatus := 1;   
   Exception
    When Others Then 
      p_Message := 'DATABASEERROR';
      p_Responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_At_InOutByEmployee',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End; 
  Procedure API_Insert_Register_Leave(  
   p_UserId        In Number,  
   p_SignCode      In Nvarchar2,
   p_FromDate      In Nvarchar2,
   p_ToDate        In Nvarchar2,  
   p_LeaveType     In Nvarchar2,
   p_LeaveStart    In Nvarchar2,
   p_LeaveEnd      In Nvarchar2, 
   p_Note          In Nvarchar2,
   p_Message        Out Nvarchar2,
   p_Responsestatus Out Number
  )As  
  v_FromDate Date;
  v_ToDate Date;
  v_UserId Number:=Nvl(p_Userid, -1);
  v_Temp Number(19, 0) := 0;
  v_EmployeeId Number; 
  v_EmployeeCode  Nvarchar2(50):='';  
  v_IdGroup Number;  
  v_Value Number; 
  v_LeaveType Nvarchar2(15);  
  v_SignId Number;
  v_GSignCode Nvarchar2(100);   
  v_Date_Temp Date;
  Begin
    Begin  
            v_FromDate:=To_Date(p_FromDate,'yyyy-mm-dd'); 
            v_ToDate:=To_Date(p_ToDate,'yyyy-mm-dd');   
            Exception When Others Then 
               p_Message := 'DATETIMEINCORRECTFORMAT';
               p_Responsestatus := -99; 
               Return;
     End; 
     If v_UserId = -1 Then
          p_Message := 'ISUSERIDNULL';
          p_Responsestatus := -600;
          Return;
      End If;
      Select Id Into v_Temp From Se_user Where Id = v_UserId;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If; 
      Begin
          Select He.id, he.employee_code Into v_EmployeeId  ,v_EmployeeCode
          From Se_user Su 
          Inner Join Hu_employee He
           On He.Employee_code  = Su.Employee_code
          Where Su.Id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      Begin  
        Select S.Id,G.Code
        Into v_SignId,v_GSignCode
        From At_Sign S
        Inner Join At_Gsign G On G.Id=S.At_Gsignid
        Where S.Code=p_SignCode
        And Rownum=1 ;
        Exception
          When Others Then
             p_Message := 'SIGNCODENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
   --Kiem tra dky vuot phep...........................................................................  
   --Ket thuc kiem tra-------------------------------------------------------------
        
   
    --TH FromDate=ToDate 
    If v_FromDate =v_ToDate Then    
    -->        
       v_IdGroup:= Seq_At_Portal_Reg.Nextval; 
       If p_LeaveStart=p_LeaveEnd Then 
         v_Value:=1;
         v_LeaveType:='TYPE_LEAVE3';
       Else 
         v_Value:=0.5;
         v_LeaveType:=p_LeaveStart;
       End If;    
       Sub_Insert_Portal_Reg(v_EmployeeId, v_FromDate,p_SignCode,v_Value,v_LeaveType,'','',p_Note,v_IdGroup,'',p_Message,p_Responsestatus );
    --TH FromDate < ToDate 
    Else
    -->   
      For ItemsDate In( 
        Select  C.CDate
        From Table(Table_ListDate(sysdate, sysdate+10)) C
        Left Join At_Holiday H On  H.Workingday=C.Cdate
        Where H.Id Is Null And  To_Char(C.CDate, 'd') <>1
      )Loop  
        v_IdGroup:= Seq_At_Portal_Reg.Nextval; 
        If ItemsDate.Cdate= v_FromDate Then  
          If p_LeaveStart='TYPE_LEAVE1' Then     
            v_Value:=1;
            v_LeaveType:='TYPE_LEAVE3';
          Else
            v_LeaveType:='LEAVE_START';
            v_Value:=0.5;
          End If;
        End If;
        If ItemsDate.Cdate>v_FromDate And ItemsDate.Cdate<v_ToDate Then
          v_Value:=1;
          v_LeaveType:='TYPE_LEAVE3';
        End If;   
        If ItemsDate.Cdate= v_ToDate Then  
          If p_LeaveEnd='TYPE_LEAVE1' Then 
            v_LeaveType:='LEAVE_END';
            v_Value:=0.5;
          Else 
            v_Value:=1;
            v_LeaveType:='TYPE_LEAVE3';
          End If;
        End If;  
        Dbms_Output.put_line('cc'); 
       Sub_Insert_Portal_Reg(v_EmployeeId, ItemsDate.Cdate,p_SignCode,
       v_Value,v_LeaveType,'','',p_Note,v_IdGroup,'',p_Message,p_Responsestatus ); 
       If p_Responsestatus <>1 Then 
          p_Message := 'DATABASEERROR';
          p_Responsestatus := -99; 
          Rollback;
         Exit; 
       End If;
      End Loop;
     /* If p_LeaveStart=p_LeaveEnd Then 
         v_Value:=1;
         v_LeaveType:='TYPE_LEAVE3';
       End If;*/
    End If;
    Exception When Others Then 
      p_Message := 'DATABASEERROR';
      p_Responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_Insert_Register_Leave',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End;   

 Procedure API_At_InOutByEmployeeMngAll(  
  p_Companycode    In Nvarchar2,
  p_UserId         In Number,
  p_Language       In Nvarchar2, 
  p_FromDate      In Nvarchar2,
  p_Cur            Out Cursor_type,
  p_Message        Out Nvarchar2,
  p_Responsestatus Out Number
 )As 
 
v_Userid Number(19,0) := Nvl(P_userid, -1);
  v_Empid Number(10);
  v_Temp Number(19, 0) := 0;
  --v_Sql       Clob;
  v_Remark    Clob;
  v_Listemp   Clob;
  v_EmployeeCode  Nvarchar2(50):='';  
  v_ListSignCode Clob:=''; 
  v_StrSqlQuery Clob:='';
  v_FromDate       Date;
  v_ToDate           Date;
  v_EmployeeIds Clob;
 Begin 
   v_FromDate      := To_Date(p_FromDate,'YYYY-MM-DD');
   If V_userid = -1 Then
          P_message := 'ISUSERIDNULL';
          P_responsestatus := -600;
          Return;
      End If;

      Select Id Into V_temp From Se_user Where Id = v_Userid;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If;

      Begin
          Select He.id, he.employee_code Into V_empid  ,v_EmployeeCode
          From Se_user Su 
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      --lay ds nhan vien thuoc quan ly:   
      Begin
        Select Listagg(To_Char(E.Id),',') Within Group (Order By E.Id)
        Into v_EmployeeIds 
        From Hu_Employee E
        Where E.Dm_Id =V_empid;
        v_EmployeeIds:= ','||v_EmployeeIds ||',';
        Exception
          When Others Then
              p_Message := 'LISTEMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      Begin 
        With tbl_at_sign as (
             select 
             to_char(s.code) as sign_code           ,
             s.status
             From at_sign s 
             Where nvl(s.status,0)<>0
        ) 
        Select Listagg( 
                sign_code || ' As '''||sign_code||'''' ,','
                )Within Group (Order By Rownum Desc) list_code
        Into v_ListSignCode
        From tbl_at_sign a where Nvl( a.status,0)<>0    ;
        Exception
          When Others Then
              p_Message := 'SIGNCODENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      
      --TEST
     -- Open p_Cur For 
      if v_FromDate = '21-mar-11' then
        Open p_Cur For
      select 11 id, 'name' name from dual;
      else
        Open p_Cur For
      select 22 id, 'name' name from dual      ;
      end if;
        
      p_Message := 'ISSUCCESS';
      p_Responsestatus := 1;  
  Exception
    When Others Then 
      p_Message := 'DATABASEERROR';
      p_Responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_At_InOutByEmployeeMngAll',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End; 
  Procedure Sub_Insert_Portal_Reg( 
   p_Employee_Id In Number,
   p_Working_Day In Date,
   p_SignCode      In Nvarchar2,
   p_Nvalue        In Number,       
   p_LeaveType     In Nvarchar2,
   p_FromHour   In Nvarchar2,
   p_ToHour     In Nvarchar2,
   p_Note          In Nvarchar2,
   p_IdGroup In Number,
   p_ReportNo In Nvarchar2,
   p_Message        Out Nvarchar2,
   p_Responsestatus Out Number
 )As  
  v_Id      number;
  v_IdGroup number := p_IdGroup;
  v_Sign_Id number;
  v_CheckHoliday number;
  v_GSignCode nvarchar2(250);
  v_Values number;
  v_Type_Leave nvarchar2(250);
  v_Values_App number;
  v_Values_Portal number;
  v_Type_Leave_App nvarchar2(250);
  v_Type_Leave_Portal nvarchar2(250);
  v_Check_Off number:=0;
  v_SumOff number:=0;
  v_CheckRgt number:=0;
  v_Used_Portal number:=0;
  v_Rgt_App number:=0;
  v_Check_Working number:=0;
  v_Check_Status number:=0;
  v_Check_Ot number:=0;
  v_Check_Nvalue    number := 0;
  v_Check_Ca    number := 0;
 Begin
     -- Lay id ky hieu cong
    Select s.Id, g.Code
      Into v_Sign_Id,v_GSignCode
      from At_Sign s
       Inner Join At_sign g
          On s.At_Gsignid = g.Id
     Where s.Code = p_SignCode
       and rownum = 1;
      IF p_SignCode = 'TS'  THEN
          BEGIN
          SELECT NVL(R.NVALUE,0) INTO V_CHECK_NVALUE
          FROM AT_RGT R WHERE R.EMPLOYEE_ID=P_EMPLOYEE_ID
           AND R.WORKING_DAY=P_WORKING_DAY
          AND R.SIGN_CODE='OFF';
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            V_CHECK_NVALUE := 0;
              
          SELECT COUNT(*) INTO V_CHECK_CA
          FROM AT_RGT R
          INNER JOIN AT_SIGN S
            ON S.ID = R.SIGN_ID
           AND S.AT_GSIGNID <> 8
           WHERE R.EMPLOYEE_ID=P_EMPLOYEE_ID
           AND R.WORKING_DAY=P_WORKING_DAY ;  
        END;
        
        IF V_CHECK_NVALUE = 0 AND V_CHECK_CA = 0 THEN
          IF TO_CHAR(P_WORKING_DAY, 'd') = 7 THEN
            V_VALUES     := 0.5;
            V_TYPE_LEAVE := 'TYPE_LEAVE1';
          ELSIF TO_CHAR(P_WORKING_DAY, 'd') = 1 THEN
            RETURN;
          ELSE
            V_VALUES     := P_NVALUE;
            V_TYPE_LEAVE := p_LeaveType;
          END IF;
        ELSE
          IF V_CHECK_NVALUE = 0.5 THEN
           V_VALUES     := 0.5;
            V_TYPE_LEAVE := 'TYPE_LEAVE1';
          ELSIF V_CHECK_NVALUE = 1 THEN
            RETURN; 
          ELSE
            V_VALUES     := P_NVALUE;
            V_TYPE_LEAVE := p_LeaveType;
          END IF;
        END IF;


           -- Xoa du lieu trong trong qua trinh gui duyet ky hieu nghi truoc do
           DELETE FROM PO_PLAN_REG_PROCESS_AT A
           WHERE A.EMPLOYEE_ID= P_EMPLOYEE_ID
           AND A.PO_PLAN_REG_ID IN
           (SELECT AP.ID FROM AT_PORTAL_REG AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY
            AND S.AT_GSIGNID=8);

           -- Xoa du lieu nghi truoc do tren portal
           DELETE FROM AT_PORTAL_REG AP
           WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY AND AP.STATUS <>4
           AND EXISTS (SELECT S.ID FROM AT_SIGN S
           WHERE S.AT_GSIGNID=8 AND ROWNUM=1);

           -- Xoa du lieu nghi truoc do
           DELETE FROM AT_RGT AP
           WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY
           AND EXISTS (SELECT S.ID FROM AT_SIGN S
           WHERE S.AT_GSIGNID=8
           AND S.ID = AP.Sign_Id
           AND S.CODE <> 'OFF' AND ROWNUM=1);
       -- Cac truong hop dang ky nghi
       ELSIF V_GSIGNCODE = 'LEAVE'  THEN
           -- Kiem tra du lieu nghi dang ky ho duoi app
            SELECT TO_NUMBER(NVL(SUM(NVL(AP.NVALUE,0)),0)) INTO V_RGT_APP
            FROM AT_RGT AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY
            AND S.AT_GSIGNID=8;
           -- Neu da dang ky ho duoi app 1 ngay thi bo return
            IF V_RGT_APP >=1 THEN
              p_Message := 'INAPP';
              p_Responsestatus := 1; 
              Return;
            END IF;

            -- lay type leave xac nhan nghi sang hoac chieu tren app
           BEGIN
            SELECT AP.Type_Leave INTO V_TYPE_LEAVE_APP
            FROM AT_RGT AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY
            AND S.AT_GSIGNID=8;
            EXCEPTION WHEN NO_DATA_FOUND THEN
              V_TYPE_LEAVE_APP:='';
            END;

          -- Lay ky hieu nghi truoc do dang dang ky
            SELECT TO_NUMBER(NVL(SUM(NVL(AP.NVALUE,0)),0)) INTO V_USED_PORTAL
            FROM AT_PORTAL_REG AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY AND AP.STATUS <>4
            AND S.AT_GSIGNID=8;

            -- lay type leave xac nhan nghi sang hoac chieu tren portal
           BEGIN
            SELECT AP.Type_Leave INTO V_TYPE_LEAVE_PORTAL
            FROM AT_PORTAL_REG AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY AND AP.STATUS <>4
            AND S.AT_GSIGNID=8;
            EXCEPTION WHEN NO_DATA_FOUND THEN
              V_TYPE_LEAVE_PORTAL:='';
            END;

          -- Cac dieu kien de insert du lieu
          IF TO_NUMBER(V_RGT_APP) = 0.5 AND V_USED_PORTAL = 0  THEN
             V_VALUES:=0.5;
             IF V_TYPE_LEAVE_APP = 'TYPE_LEAVE1' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE2';
             ELSIF V_TYPE_LEAVE_APP = 'TYPE_LEAVE2' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE1';
               ELSE
             V_TYPE_LEAVE:=p_LeaveType;
             END IF;
          ELSIF TO_NUMBER(V_RGT_APP) = 0.5 AND V_USED_PORTAL = 0.5  THEN
            -- Truong hop nhan vien da dang ky nghi 05 va da duoc phe duyet thi van tiep tuc cho dang ky
            BEGIN
              SELECT NVL(AP.STATUS,0) INTO V_CHECK_STATUS
              FROM AT_PORTAL_REG AP
              INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
              WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY AND AP.STATUS <>4
              AND S.AT_GSIGNID=8;
            IF V_CHECK_STATUS = 1 THEN
             V_VALUES:=0.5;
             IF V_TYPE_LEAVE_PORTAL = 'TYPE_LEAVE1' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE2';
             ELSIF V_TYPE_LEAVE_PORTAL = 'TYPE_LEAVE2' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE1';
             ELSE
             V_TYPE_LEAVE:=p_LeaveType;
             END IF;
             /*PV_TYPE_LEAVE:=P_TYPE_LEAVE;*/
            ELSE
              p_Message := 'INAPP';
              p_Responsestatus := 1; 
              Return;
            END IF;
            EXCEPTION WHEN NO_DATA_FOUND THEN
              V_CHECK_STATUS:=0;
               p_Message := 'INAPP';
              p_Responsestatus := 1; 
              Return;
            END;

          ELSIF TO_NUMBER(V_RGT_APP) = 1 THEN
              p_Message := 'INAPP';
              p_Responsestatus := 1; 
              Return;
          ELSIF TO_NUMBER(V_RGT_APP) = 0 AND V_USED_PORTAL = 0.5 THEN
             V_VALUES:=0.5;
             IF V_TYPE_LEAVE_PORTAL = 'TYPE_LEAVE1' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE2';
             ELSIF V_TYPE_LEAVE_PORTAL = 'TYPE_LEAVE2' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE1';
             ELSE
               V_TYPE_LEAVE:=p_LeaveType;
             END IF;
          ELSIF TO_NUMBER(V_RGT_APP) = 0 AND V_USED_PORTAL = 1 THEN
             p_Message := 'INAPP';
              p_Responsestatus := 1; 
              Return;
          ELSIF TO_NUMBER(V_RGT_APP) = 0.5 AND V_USED_PORTAL = 1 THEN
             p_Message := 'INAPP';
              p_Responsestatus := 1; 
              Return;
          ELSE
             V_VALUES:=P_NVALUE;
             V_TYPE_LEAVE:=p_LeaveType;
          END IF;
     ELSE
         V_VALUES:=P_NVALUE;
         V_TYPE_LEAVE:=p_LeaveType;
     END IF;
    SELECT SEQ_AT_PORTAL_REG.NEXTVAL INTO V_ID FROM DUAL;
    INSERT INTO AT_PORTAL_REG
      (ID,
       ID_REGGROUP,
       EMPLOYEE_ID,
       WORKING_DAY,
       SIGN_ID,
       NVALUE,
       TYPE_LEAVE,
       NOTE,
       REGDATE,
       STATUS,
       FROM_HOUR,
       TO_HOUR,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       REPORT_NO)
    VALUES
      (V_ID,
       V_IDGROUP,
       P_EMPLOYEE_ID,
       P_WORKING_DAY,
       V_SIGN_ID,
       V_VALUES,
       V_TYPE_LEAVE,
       P_NOTE,
       SYSDATE,
       0,
       TO_DATE(P_WORKING_DAY || ' ' || p_FromHour, 'dd/MM/RRRR HH24:MI'),
       TO_DATE(P_WORKING_DAY || ' ' || p_ToHour, 'dd/MM/RRRR HH24:MI'),
       SYSDATE,
       to_char(p_Employee_Id),
       to_char(p_Employee_Id),
       p_ReportNo); 
       p_Message := 'ISSUCCESS';
       p_Responsestatus := 1; 
            
   Exception
    When Others Then 
      p_Message := 'DATABASEERROR';
      p_Responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'Sub_Insert_Portal_Reg',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
 End; 
 PROCEDURE API_Get_Salary(p_Language       In nvarchar2,
                            p_UserID         In Number,
                            p_Period         In Number,
                            P_CUR            Out CURSOR_TYPE,
                            p_Message        Out NVARCHAR2,
                            p_ResponseStatus Out Number) as
    v_UserID     NUMBER(19, 0) := NVL(p_UserID, -1);
    v_Period     NUMBER(19, 0) := NVL(p_Period, -1);
    v_EmployeeID NUMBER(19, 0);
    v_DayWork    NUMBER(19, 0) := 0;
    v_DayNotWork NUMBER(10, 0) := 0;
    v_StartDate  date;
    v_temp       NUMBER(19, 0) := 0;
    v_username nvarchar2(50);
    PV_SQL CLOB;
    P_LIST_ALLOWANCE CLOB;
    PV_SI_EMP NUMBER;
    PV_HI_EMP NUMBER;
    PV_HI_SI_EMP NUMBER;
  begin
    p_ResponseStatus := 1;

    IF v_UserID = -1 THEN
      p_Message        := 'UserIDIsNUll';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_Period = -1 THEN
      p_Message        := 'PeriodIsNUll';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE su.ID = v_UserID;
    IF v_temp < 1 THEN
      p_Message        := 'UserIsNotFound';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    BEGIN
      SELECT Emp.id,e.USERNAME
        INTO v_EmployeeID,v_username
        FROM se_user e
        left join hu_employee emp
          on emp.employee_code = e.employee_code
       WHERE e.id = v_UserID
      AND rownum = 1
       ;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'UserNotConfig';
        p_ResponseStatus := -600;
        RETURN;
    END;

    BEGIN
      SELECT p.start_date
        INTO v_StartDate
        FROM AT_PERIOD p
       WHERE Id = p_Period;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'PeriodIDNotConfig';
        p_ResponseStatus := -600;
        RETURN;
    END;
    
    SELECT (Z.SI_EMP / 100)/(NVL(Z.SI_EMP / 100,0) + NVL(Z.HI_EMP / 100,0)),
           (Z.HI_EMP / 100)/(NVL(Z.SI_EMP / 100,0) + NVL(Z.HI_EMP / 100,0))
      INTO PV_SI_EMP,PV_HI_EMP
        FROM (SELECT E.EFFECTIVE_FROM_DATE EFFECTIVE_FROM_DATE,
                     e."1"                 SI_EMP,
                     e."2"                 HI_EMP
                FROM INS_LIST_AREA_ALL T
                LEFT JOIN (SELECT *
                            FROM (SELECT INS_ID,
                                         EFFECTIVE_FROM_DATE,
                                         EMPLOYEE_PERCENT
                                    FROM INS_LIST_AREA_VALUE
                                   WHERE INS_ID IN (1, 2, 3))
                          PIVOT(SUM(NVL(EMPLOYEE_PERCENT, 0))
                             FOR INS_ID IN(1, 2, 3))) E
                  ON T.EFFECTIVE_FROM_DATE = E.EFFECTIVE_FROM_DATE
               WHERE  T.IS_DELETED = 0
               ORDER BY T.EFFECTIVE_FROM_DATE DESC) Z
       INNER JOIN AT_PERIOD P
          ON TO_CHAR(Z.EFFECTIVE_FROM_DATE, 'yyyy') <= P.YEAR
         AND TO_CHAR(Z.EFFECTIVE_FROM_DATE, 'MM') <= P.MONTH
         AND P.ID = p_Period
       WHERE ROWNUM = 1;
      
    SELECT  LISTAGG('PAY.'||TO_CHAR(B.COL_NAME), ',') WITHIN GROUP(ORDER BY ROWNUM)
           INTO P_LIST_ALLOWANCE
        FROM (SELECT A.COL_NAME, A.NAME_VN, 0 MONEY, 0 TNTT, NULL NOTE
                FROM PA_LISTSALARIES A
               WHERE A.GROUP_IMPORT_SALARY = 'GROUP_IMPORT_SALARY_2'
                 AND A.IS_DELETED = 0
              UNION ALL
              SELECT A.COL_NAME, A.NAME_VN, 0 MONEY, 0 TNTT, NULL NOTE
                FROM PA_LISTSALARIES A
               WHERE A.GROUP_IMPORT_SALARY = 'GROUP_IMPORT_SALARY_4'
                 AND A.IS_DELETED = 0
              UNION ALL
              SELECT A.COL_NAME, A.NAME_VN, 0 MONEY, 0 TNTT, NULL NOTE
                FROM PA_LISTSALARIES A
               WHERE A.GROUP_IMPORT_SALARY = 'GROUP_IMPORT_SALARY_3'
                 AND A.IS_DELETED = 0
              UNION ALL
              SELECT A.COL_NAME, A.NAME_VN, 0 MONEY, 0 TNTT, NULL NOTE
                FROM PA_LISTSALARIES A
               WHERE A.GROUP_IMPORT_SALARY = 'GROUP_IMPORT_SALARY_7'
                 AND A.IS_DELETED = 0) B;
    
    
    PV_SQL := ' SELECT  
     --ROWNUM as STT,
      NVL(A.s16,0) period_standard,
      NVL(A.s19,0) period_salary,   
      NVL(a.s17,0) period_actual,  
      NVL(a.s18,0) phep_thuong_nien,
      NVL(a.s55,0) pc_an_trua,
      NVL(a.s53,0) truy_linh_luong,
      NVL(a.s54,0) truy_linh_doc_hai,
      NVL(a.s52,0) truy_linh_com,   
      NVL(a.s60,0) salary_bhxh_bhyt,
      NVL(a.s61,0) salary_bhtn,     
      NVL(a.s70 ,  0) S70,  
      NVL(a.s71,0) S71,
      NVL(a.s81, 0) S81,
      NVL(a.s82,0) S82,
      NVL(a.s80, 0) S80,
      NVL(a.s72, 0) S72,
      NVL(a.s73, 0) S73,
      NVL(a.s78, 0) As S78,
      NVL(a.s74, 0) As S74,
      Nvl(a.s75,0) S75,
      Nvl(a.s76, 0) S76,
      Nvl(a.s77,0) S77,
      NVL(A.S3,  0) S3,       
      NVL(a.s93,   0) S93,
         NVL(A.S203,0) PCTH,
         NVL(A.S204,0) PCTNDT,
         NVL(A.S212,0) LUONG,
         NVL(A.S205,0)DHNQ,
         NVL(A.S206,0) PCTNCV,
         NVL(A.S207,0) PCKNCV,
         NVL(A.S208,0) PCKNVPKV,
         NVL(A.S209,0) LD,
         NVL(A.S210,0) LVC2,
       (  NVL(A.S34,0) +  NVL(A.S49,0))/2 KHAC,
          ( NVL(A.S63,0)+  NVL(A.S64,0)) BH_19,
       NVL(A.S65 ,0) BH_20,
       NVL(A.S66,  0) S66,
       NVL(A.S67,0) S67,
      (  NVL(A.S68,0) +  NVL(A.S69,0)) BH_21,
       NVL(A.S200,0) PCHHL,
           TO_CHAR( AP.START_DATE,''DD/MM/YYYY'') START_DATE,
      TO_CHAR( AP.END_DATE,''DD/MM/YYYY'') END_DATE
         FROM (
         SELECT    CASE
                 WHEN O.ORG_TYPE = ''HOI_SO'' THEN
                  O.NAME_VN
                 ELSE
                  OV.NAME_C5 || '' - '' || OV.NAME_C4
             END S2,
             EM.EMPLOYEE_CODE S3,
             NVL((SELECT SUM(A.NCTL)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD || '
               AND A.SALARY_ID = SAT.SALARY_ID1),0) S4,
             ''PC '' || SAL1.NAME ||
             CASE WHEN SAR1.RANK IS NOT NULL THEN
              ''-'' || SAR1.RANK
              ELSE
                '''' END S5,
             --SAL1.NAME /*|| ''-'' || SAR1.RANK*/ S5,
             SAT.COEFICIENT_AREA1 S6,
             SAT.COEFICIENT_NSLDBQ1 S7,
             SA1.PERCENT || ''%'' S8,
             SAT.STANDARD_SALARY1 S9,
             NVL((SELECT SUM(A.NCTL)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD || '
               AND A.SALARY_ID = SAT.SALARY_ID2),0) S10,
             CASE WHEN SAL2.NAME IS NOT NULL THEN
             ''PC '' || SAL2.NAME ||
             CASE WHEN SAR2.RANK IS NOT NULL THEN
              ''-'' || SAR2.RANK
              ELSE
                '''' END
             ELSE
              N'''' END S11,
             --SAL2.NAME/* || ''-'' || SAR2.RANK*/ S11,
             SAT.COEFICIENT_AREA2 S12,
             SAT.COEFICIENT_NSLDBQ2 S13,
             SA2.PERCENT || ''%'' S14,
             SAT.STANDARD_SALARY2 S15,
             NVL(PAY.CW1,0) S16,
             NVL(PAY.CW2,0) S17,
             NVL((SELECT SUM(A.P)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD ||
              '),0) S18,
             NVL((SELECT SUM(A.NCTL)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD ||
              '),0) S19,
             NVL(PAY.CW3,0) - NVL((SELECT SUM(A.P)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD ||
              '),0) S20,
             NVL(PAY.CW4,0) S21,
             ROUND(NVL(S.PCTHN1,0) ,0)S22,
             ROUND(NVL(S.PCXL1,0),0) S23,
             ROUND(NVL(S.PCTH1,0),0) S24,
             ROUND(NVL(S.PCTNDT1,0),0) S25,
             ROUND(
                     (S.PCDHQ2 * S.PERCENT2/100)+
                     S.PCTN2+
                     S.PCKN2+
                     S.PCKNVP2+
                     S.PCLD2+
                     S.PCCA22+
                     S.PCK2,0) S26,
             ROUND(NVL(S.PCDHQ1,0),0) S28,
             ROUND(NVL(S.PCTN1,0),0)  S29,
             ROUND(NVL(S.PCKN1,0),0) S30,
             ROUND(NVL(S.PCKNVP1,0),0)  S31,
             ROUND(NVL(S.PCLD1,0),0)  S32,
             ROUND(NVL(S.PCCA21,0),0)  S33,
             ROUND(NVL(S.PCK1,0),0)  S34,
             ROUND(NVL(((NVL(S.STANDARD_SALARY1, 1)) *
             S.COEFICIENT_AREA1 *
             S.COEFICIENT_NSLDBQ1 *
             ((S.PERCENT1)/100)),0),0) S36,
             S.PCTHN2 S37,
             ROUND(S.STANDARD_SALARY2, 0) *
             S.COEFICIENT_AREA2 *
             S.COEFICIENT_NSLDBQ2 *
             (S.PERCENT2)/100 S38,
             ROUND(NVL(S.PCXL2,0),0) S39,
             ROUND(NVL(S.PCTH2,0),0) S40,
             ROUND(NVL(S.PCTNDT2,0),0) S41,
             ROUND(NVL(S.PCDHQ2,0),0)  S43,
             ROUND(NVL(S.PCTN2,0),0)  S44,
             ROUND(NVL(S.PCKN2,0),0)  S45,
             ROUND(NVL(S.PCKNVP2,0),0)  S46,
             ROUND(NVL(S.PCLD2,0),0)  S47,
             ROUND(NVL(S.PCCA22,0),0)  S48,
             ROUND(S.PCK2,0) S49,
             ROUND(NVL(PAY.ADD4,0),0) S52,
             ROUND(PAY.ADD1, 0) +
             ROUND(PAY.ADD20, 0) S53,
             ROUND(NVL(PAY.ADD18,0),0) S54,
             ROUND(NVL(PAY.CLCHINH9,0),0) S55,
             ROUND(NVL(PAY.ADD19,0),0) S56,
             ROUND(NVL(PAY.ADD56,0),0) S57,
             ROUND(NVL(PAY.INSU20,0),0) S60,
             ROUND(PAY.INSU21, 0) S61,
             ROUND(NVL(PAY.INSU1,0),0) S63,
             ROUND(NVL(PAY.INSU2,0),0) S64,
             ROUND(NVL(PAY.INSU3,0),0) S65,
             ROUND(NVL(PAY.DEDUCT2,0), 0) S66,
             ROUND(NVL(PAY.ADD9,0) ,0) S67,
             ROUND(ROUND(PAY.ADD2,0)* '|| PV_SI_EMP ||',0) S68,
             ROUND(ROUND(PAY.ADD2,0)* '|| PV_HI_EMP ||',0) S69,
             ROUND(PAY.ADD3 , 0) S70,
             ROUND(NVL(PAY.ADD106,0),0) S71,
             ROUND(NVL(PAY.INSU9,0) + NVL(PAY.DEDUCT6,0),0) S72,
             ROUND(NVL(PAY.DEDUCT4,0),0) S73,
             ROUND(NVL(PAY.TAX4,0),0) S74,
             ROUND(NVL(PAY.FAMILY1,0),0) S75,
             ROUND(NVL(PAY.FAMILY4,0),0) S76,
             ROUND(NVL(PAY.TAX1,0),0) S77,
             ROUND(NVL(PAY.TAX2,0),0) S78,
             ROUND(NVL(PAY.DEDUCT5,0),0) S80,
             ROUND(PAY.DEDUCT1, 0) +
             ROUND(PAY.DEDUCT8, 0) +
             ROUND(PAY.DEDUCT9, 0) S81,
             ROUND(NVL(PAY.DEDUCT7,0),0) S82,
             ROUND(NVL(PAY.CLCHINH18,0),0) S83,
             ROUND(NVL(PAY.DEDUCT3,0),0) S84,
             ROUND(NVL(PAY.DEDUCT10,0),0) S85,
             ROUND(NVL(PAY.DEDUCT11,0),0) S86,
             ROUND(((ROUND(((S.STANDARD_SALARY1 *
                      S.COEFICIENT_AREA1 *
                      S.COEFICIENT_NSLDBQ1) +
                     ( S.PCXL1
                      +S.PCTH1
                      +S.PCTHN1
                      +S.PCTNDT1 ))* S.PERCENT1 / 100,0) /
              NVL(PAY.CW1,0) *
              (SELECT SUM(A.NCTL) FROM AT_ALDATA_SUMMARY A
                     WHERE A.EMPLOYEE_ID=PAY.EMPLOYEE_ID AND A.PERIOD=PAY.PERIOD_ID
                     AND A.SALARY_ID=S.SALARY_ID1)) +
             (ROUND(
                     (S.PCDHQ1 * S.PERCENT1/100)+
                     S.PCTN1+
                     S.PCKN1+
                     S.PCKNVP1+
                     S.PCLD1+
                     S.PCCA21+
                     S.PCK1,0) /
              NVL(PAY.CW1,0) *
              (SELECT SUM(A.NCTL) FROM AT_ALDATA_SUMMARY A
                     WHERE A.EMPLOYEE_ID=PAY.EMPLOYEE_ID AND A.PERIOD=PAY.PERIOD_ID
                     AND A.SALARY_ID=S.SALARY_ID1))),0) S87,
             ROUND(NVL(
                   S.PCDHQ1+
                   S.PCTN1+
                   S.PCKN1+
                   S.PCKNVP1+
                   S.PCLD1+
                   S.PCCA21+
                   S.PCK1,0),0)  S88,
             ROUND(S.PCXL1
                  +S.PCTH1
                  +S.PCTHN1
                  +S.PCTNDT1,0) S89,
             ROUND(NVL(
                      S.PCXL2
                      +S.PCTH2
                      +S.PCTHN2
                      +S.PCTNDT2,0),0) S90,
             NULL S91,
             0 S92,
             ROUND(PAY.ADD57,0) S93,
             EM.FULLNAME_VN S96,
             TI.NAME_VN S97,
             ' || P_LIST_ALLOWANCE || '
             ,EM.EMPLOYEE_CODE EMPLOYEE_CODE,
             PAY.ORG_ID ORG_ID,
             ROUND(((ROUND(((S.STANDARD_SALARY2 *
                       S.COEFICIENT_AREA2 *
                       S.COEFICIENT_NSLDBQ2) +
                        (S.PCXL2
                      +S.PCTH2
                      +S.PCTHN2
                      +S.PCTNDT2)) * S.PERCENT2 / 100,0) /
              NVL(PAY.CW1,0) *
              (SELECT SUM(A.NCTL) FROM AT_ALDATA_SUMMARY A
                     WHERE A.EMPLOYEE_ID=PAY.EMPLOYEE_ID AND A.PERIOD=PAY.PERIOD_ID
                     AND A.SALARY_ID=S.SALARY_ID2)) +
             (ROUND(
                     (S.PCDHQ2 * S.PERCENT2/100)+
                     S.PCTN2+
                     S.PCKN2+
                     S.PCKNVP2+
                     S.PCLD2+
                     S.PCCA22+
                     S.PCK2,0) /
              NVL(PAY.CW1,0) *
              (SELECT SUM(A.NCTL) FROM AT_ALDATA_SUMMARY A
                     WHERE A.EMPLOYEE_ID=PAY.EMPLOYEE_ID AND A.PERIOD=PAY.PERIOD_ID
                     AND A.SALARY_ID=S.SALARY_ID2))),0) S92,

             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''ADD19'') S98,
             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''ADD56'')  S99,
             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''DEDUCT3'') S100,
             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''DEDUCT10'') S101,
             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''DEDUCT11'') S102,
             PAY.CLCHINH16, 
             PAY.PERIOD_ID,
             ROUND(NVL( PAY.ADD64,0),0) S200,
             ROUND(NVL(PAY.CLCHINH55,0),0) S212,
             FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCTH'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S203,
             FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCTNDT'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S204,
            FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCDHQ'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S205,
            FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCTN'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S206,
            FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCKN'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S207,
            FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCKNVP'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S208 ,
           FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCLD'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S209,   
           FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCCA2'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S210 ,
           ROUND(NVL(PAY.ADD21,0),0)  S211,
           ROUND(NVL(PAY.DEDUCT3,0) + NVL(PAY.DEDUCT10,0) + NVL(PAY.DEDUCT11,0) ,0) S213,
         (CASE
         WHEN NVL(PAY.DEDUCT3, 0) > 0 THEN
          PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT3'') || CASE
            WHEN NVL(PAY.DEDUCT10, 0) > 0 THEN
             '', '' ||
             PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT10'')
          END || CASE
            WHEN NVL(PAY.DEDUCT11, 0) > 0 THEN
             '', '' || PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT11'')
          END
         WHEN NVL(PAY.DEDUCT10, 0) > 0 THEN
          PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT10'')
          || CASE
            WHEN NVL(PAY.DEDUCT11, 0) > 0 THEN
             '', '' || PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT11'')
          END
          WHEN NVL(PAY.DEDUCT11, 0) > 0 THEN
            PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT11'')
       END) S214
      FROM PA_PAYROLLSHEET_FINAL PAY
      LEFT JOIN INFO_SALARY_ALLOW_TEMP S
        ON PAY.EMPLOYEE_ID = S.EMPLOYEE_ID
       AND PAY.PERIOD_ID = S.PERIOD
      INNER JOIN HU_EMPLOYEE EM
        ON EM.ID = PAY.EMPLOYEE_ID
      LEFT JOIN HU_ORGANIZATION O
         ON O.ID = PAY.ORG_ID
      LEFT JOIN HU_ORGANIZATION_V OV
         ON OV.ID = O.ID
      LEFT JOIN HU_TITLE TI
         ON TI.ID = EM.TITLE_ID
      LEFT JOIN HU_SALARY_TEMP SAT
        ON SAT.EMPLOYEE_ID = PAY.EMPLOYEE_ID
       AND SAT.PERIOD = ' || P_PERIOD || '
    
      LEFT JOIN PA_SALARY_LEVEL SAL1
        ON SAL1.ID = SAT.QUANTUM_SALARY1
      LEFT JOIN PA_SALARY_RANK SAR1
        ON SAR1.ID = SAT.UNCLE_SALARY1
    
      LEFT JOIN PA_SALARY_LEVEL SAL2
        ON SAL2.ID = SAT.QUANTUM_SALARY2
      LEFT JOIN PA_SALARY_RANK SAR2
        ON SAR2.ID = SAT.UNCLE_SALARY2
      LEFT JOIN HU_SALARY SA1
        ON SA1.ID = SAT.SALARY_ID1
      LEFT JOIN HU_SALARY SA2
        ON SA2.ID = SAT.SALARY_ID2 
    WHERE PAY.EMPLOYEE_ID = ' || v_EmployeeID || '
      AND PAY.PERIOD_ID = ' || P_PERIOD || ')A
     LEFT JOIN AT_PERIOD AP
            ON AP.ID=PERIOD_ID  ';
            
            
    INSERT INTO AT_STRSQL VALUES (seq_at_strsql.nextval,PV_SQL);
    COMMIT;
    --EXECUTE IMMEDIATE PV_SQL;
    OPEN P_CUR FOR (PV_SQL);        

       
    p_Message        := 'IsSuccess';
    p_ResponseStatus := 1;
  EXCEPTION
    WHEN OTHERS THEN
      Sys_write_exception_log(Sqlcode,
                              'API_GET_Salary',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
      p_Message        := 'Database Error';
      p_ResponseStatus := -99;
  end;       
  FUNCTION  GET_NOTE_SALARY_ALLOW(P_EMPID IN NUMBER,
                                 P_PERIOD  IN NUMBER,
                                 P_CODE    IN NVARCHAR2) RETURN NVARCHAR2 AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    PV_RESULT NVARCHAR2(225);
    
  BEGIN
    SELECT ' - ' || P.NOTE INTO PV_RESULT
        FROM PA_IMPORT_SALARY P
       WHERE P.PERIOD_SALARY_ID = P_PERIOD
         AND P.FIELD_DATA_CODE = P_CODE
         AND P.EMPLOYEE_ID =P_EMPID;
  
  RETURN PV_RESULT;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN '';
      SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL);
      RETURN NULL;
  END; 
   PROCEDURE API_GET_APPROVE_LIST(P_USERID         IN NUMBER,
                             P_LANGUAGE       IN NVARCHAR2,
                             P_KEYSEARCH_EMPLOYEE       IN NVARCHAR2,
                             P_FROMDATE       IN NVARCHAR2,
                             P_TODATE         IN NVARCHAR2,
                             P_CODE           IN NVARCHAR2,
                             P_SIGN           IN NUMBER,
                             P_STATUS         IN NVARCHAR2,
                             P_PAGE           IN NUMBER,
                             P_PAGESIZE       IN NUMBER,
                             P_CUR            OUT CURSOR_TYPE,
                             P_PENDINGCOUNT   OUT NUMBER,
                             P_APPROVEDCOUNT  OUT NUMBER,
                             P_REJECTEDCOUNT  OUT NUMBER,
                             P_MESSAGE        OUT NVARCHAR2,
                             P_RESPONSESTATUS OUT NUMBER) AS
  
    V_USERID     NUMBER(19, 0) := NVL(P_USERID, -1);
    V_EMPID      NUMBER(10);
    V_TEMP       NUMBER(19, 0) := 0;
    V_PAGE       NUMBER(10, 0) := NVL(P_PAGE, 1);
    V_PAGESIZE   NUMBER(2, 0) := NVL(P_PAGESIZE, 10);
    V_STATUS     NVARCHAR2(20) := NVL(P_STATUS, '-2');
    V_EMPLOYEEID NUMBER(19, 0);
    V_FROMDATE   DATE;
    V_TODATE     DATE;
  BEGIN
    IF V_USERID = -1 THEN
      P_MESSAGE        := 'ISUSERIDNULL';
      P_RESPONSESTATUS := -600;
      RETURN;
    END IF;
  
    SELECT ID INTO V_TEMP FROM SE_USER WHERE ID = V_USERID;
    IF V_TEMP < 1 THEN
      P_MESSAGE        := 'USERISNOTFOUND';
      P_RESPONSESTATUS := -600;
      RETURN;
    END IF;
    BEGIN
      SELECT HE.ID
        INTO V_EMPLOYEEID
        FROM HU_EMPLOYEE HE
        JOIN SE_USER SU
          ON SU.EMPLOYEE_CODE = HE.EMPLOYEE_CODE
       WHERE SU.ID = V_USERID
         AND ((HE.WORK_STATUS = 257 AND SYSDATE < HE.TER_EFFECT_DATE) OR
             (HE.WORK_STATUS <> 257))
         AND ROWNUM = 1;
    EXCEPTION
      WHEN OTHERS THEN
        P_MESSAGE        := 'USERNOTCONFIG';
        P_RESPONSESTATUS := -600;
        RETURN;
    END;
  
    BEGIN
      SELECT HE.ID
        INTO V_EMPID
        FROM SE_USER SU
       INNER JOIN HU_EMPLOYEE HE
          ON HE.EMPLOYEE_CODE = SU.EMPLOYEE_CODE
       WHERE SU.ID = V_USERID;
    EXCEPTION
      WHEN OTHERS THEN
        P_MESSAGE        := 'EMPLOYEENOTFOUND';
        P_RESPONSESTATUS := -600;
        RETURN;
    END;
  
    IF P_FROMDATE IS NOT NULL THEN
      V_FROMDATE := TO_DATE(P_FROMDATE, 'YYYY-MM-DD');
    END IF;
  
    IF P_TODATE IS NOT NULL THEN
      V_TODATE := TO_DATE(P_TODATE, 'YYYY-MM-DD');
    END IF;
  
    SELECT SUM(CASE
                 WHEN R.STATUS = 0 THEN -- WAITING
                  1
                 ELSE
                  0
               END),
           SUM(CASE
                 WHEN R.STATUS = 1 THEN --APPROVE
                  1
                 ELSE
                  0
               END),
           SUM(CASE
                 WHEN R.STATUS = 2 THEN --REJECT
                  1
                 ELSE
                  0
               END)
      INTO P_PENDINGCOUNT, P_APPROVEDCOUNT, P_REJECTEDCOUNT
      FROM (SELECT DISTINCT R.ID_REGGROUP,A.APP_STATUS STATUS
              FROM AT_PORTAL_REG R
             INNER JOIN (SELECT RE.EMPLOYEE_ID,
                               RE.ID_REGGROUP,
                               MIN(RE.FROM_HOUR) FROM_DATE,
                               MAX(RE.FROM_HOUR) TO_DATE,
                               SUM(RE.NVALUE) NVALUE,
                               MIN(RE.SIGN_ID) SIGN_ID,
                               MIN(RE.NOTE) NOTE
                          FROM AT_PORTAL_REG RE
                         GROUP BY RE.EMPLOYEE_ID, RE.ID_REGGROUP) R2
                ON R2.ID_REGGROUP = R.ID_REGGROUP
              LEFT JOIN AT_PORTAL_REG L_FROM
                ON L_FROM.ID_REGGROUP = R2.ID_REGGROUP
               AND L_FROM.WORKING_DAY = R2.FROM_DATE
              LEFT JOIN OT_OTHER_LIST FR_SS
                ON UPPER(FR_SS.CODE) = UPPER(L_FROM.TYPE_LEAVE)
              LEFT JOIN AT_PORTAL_REG L_TO
                ON L_TO.ID_REGGROUP = R2.ID_REGGROUP
               AND L_TO.WORKING_DAY = R2.TO_DATE
              LEFT JOIN OT_OTHER_LIST TO_SS
                ON UPPER(TO_SS.CODE) = UPPER(L_TO.TYPE_LEAVE)
             INNER JOIN HU_EMPLOYEE E
                ON E.ID = R.EMPLOYEE_ID
             INNER JOIN AT_SIGN S
                ON R.SIGN_ID = S.ID
             INNER JOIN AT_GSIGN O
                ON S.AT_GSIGNID = O.ID
             INNER JOIN PROCESS_APPROVED_STATUS A
                ON R.ID_REGGROUP = A.ID_REGGROUP
              LEFT JOIN HU_EMPLOYEE AUTHORIZED
                ON AUTHORIZED.ID = A.EMPLOYEE_AUTHORIZED
              LEFT JOIN (SELECT S3.ID_REGGROUP,
                               EMP_NEXT.FULLNAME_VN EMP_APP_NAME,
                               S3.APP_LEVEL,
                               ROW_NUMBER() OVER(PARTITION BY S3.ID_REGGROUP ORDER BY S3.APP_LEVEL DESC) AS RN
                          FROM PROCESS_APPROVED_STATUS S3
                         INNER JOIN HU_EMPLOYEE EMP_NEXT
                            ON EMP_NEXT.ID = S3.EMPLOYEE_APPROVED
                         WHERE S3.APP_STATUS = 0) S4
                ON S4.ID_REGGROUP = R.ID_REGGROUP
               AND S4.APP_LEVEL = A.APP_LEVEL + 1
              LEFT JOIN SE_USER EMP_U
                ON EMP_U.USERNAME = R.MODIFIED_BY
              LEFT JOIN HU_EMPLOYEE EMP_UN
                ON EMP_UN.ID = EMP_U.EMPLOYEE_ID
             WHERE O.CODE = P_CODE
               AND NVL(R.STATUS, 0) <> 4
               AND (A.EMPLOYEE_APPROVED = V_EMPLOYEEID OR
                   A.EMPLOYEE_AUTHORIZED = V_EMPLOYEEID)
               AND (P_SIGN = 0 OR S.ID = P_SIGN)
               AND (CASE
                     WHEN V_STATUS IN ('-2', '-1') THEN
                      1
                     WHEN V_STATUS NOT IN ('-2', '-1') AND
                          R.STATUS IN
                          (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                             FROM (SELECT LEVEL AS IAB,
                                          REGEXP_SUBSTR(V_STATUS,
                                                        '[^,]+',
                                                        1,
                                                        LEVEL) AS IVALUE
                                     FROM DUAL
                                   CONNECT BY REGEXP_SUBSTR(V_STATUS,
                                                            '[^,]+',
                                                            1,
                                                            LEVEL) IS NOT NULL)) THEN
                      1
                     ELSE
                      0
                   END) = 1
               AND ((UPPER(E.FULLNAME_VN) LIKE
                   '%' || UPPER(P_KEYSEARCH_EMPLOYEE) || '%' OR
                   E.EMPLOYEE_CODE LIKE '%' || P_KEYSEARCH_EMPLOYEE || '%') OR
                   P_KEYSEARCH_EMPLOYEE IS NULL)
               AND ((P_TODATE IS NULL AND V_FROMDATE IS NULL AND 1 = 1) OR
                   (P_TODATE IS NOT NULL AND V_FROMDATE IS NULL AND
                   R.WORKING_DAY <= V_TODATE) OR
                   (P_TODATE IS NULL AND V_FROMDATE IS NOT NULL AND
                   R.WORKING_DAY >= V_FROMDATE) OR
                   (P_TODATE IS NOT NULL AND V_FROMDATE IS NOT NULL AND
                   R.WORKING_DAY BETWEEN V_FROMDATE AND V_TODATE))
               AND ((A.APP_STATUS = 0 AND
                   PKG_FUNCTION.FN_CHECK_APP(A.EMPLOYEE_ID,
                                               A.PE_PERIOD_ID,
                                               A.APP_LEVEL - 1,
                                               A.ID_REGGROUP) = 1 AND
                   PKG_FUNCTION.FN_CHECK_APP(A.EMPLOYEE_ID,
                                               A.PE_PERIOD_ID,
                                               A.APP_LEVEL + 1,
                                               A.ID_REGGROUP) IN (0, 2)) OR
                   (A.APP_STATUS IN (1, 2)))) R;
  
    OPEN P_CUR FOR
      SELECT *
        FROM (SELECT ROWNUM STT, R.*
                FROM (SELECT DISTINCT R.ID_REGGROUP,
                                      E.EMPLOYEE_CODE,
                                      E.ID                   EMPLOYEE_ID,
                                      E.FULLNAME_VN          EMPLOYEE_NAME,
                                      TO_CHAR(R2.FROM_DATE, 'DD/MM/YYYY')   FROM_DATE,     
                                      TO_CHAR(R2.TO_DATE, 'DD/MM/YYYY')   TO_DATE,
                                      --R2.TO_DATE,
                                      --R2.FROM_DATE           FROM_HOUR,            
                                      TO_CHAR(R2.FROM_DATE, 'DD/MM/YYYY HH24:MI')   FROM_HOUR,
                                      --R2.TO_DATE             TO_HOUR,         
                                      TO_CHAR(R2.TO_DATE, 'DD/MM/YYYY HH24:MI')   TO_HOUR,
                                      FR_SS.NAME_VN          FROM_SESSION,
                                      TO_SS.NAME_VN          TO_SESSION,
                                      S.ID                   SIGN_ID,
                                      S.NAME                 SIGN_NAME,
                                      O.CODE                 SIGN_CODE,
                                      R2.NVALUE              DAYCOUNT,
                                      R.NOTE                 DISPLAY,
                                      NULL                   PCONLAI,
                                      NULL                   PBU,
                                      NULL                   P_HAVE,
                                      A.APP_STATUS           STATUS,
                                      R.REPORT_NO,
                                      EMP_UN.FULLNAME_VN     MODIFIED_NAME, -- NGUOI CAP NHAT CUOI CUNG
                                      --R.MODIFIED_DATE, -- NG?Y CAP NHAT CUOI CUNG   
                                      TO_CHAR(R.MODIFIED_DATE, 'DD/MM/YYYY')   MODIFIED_DATE,
                                      S4.EMP_APP_NAME        APPROVE_NEXT, -- NGUOI PHE DUYET KE TIEP
                                      AUTHORIZED.FULLNAME_VN AUTHORIZED_NAME, -- NGUOI PHE DUYET THAY THE
                                      --A.AUT_MODIFIED_DATE, -- NGAY PHE DUYET THAY THE       
                                      TO_CHAR(A.AUT_MODIFIED_DATE, 'DD/MM/YYYY')   AUT_MODIFIED_DATE,
                                      A.APP_NOTES -- Y KIEN PHE DUYET
                        FROM AT_PORTAL_REG R
                       INNER JOIN (SELECT RE.EMPLOYEE_ID,
                                         RE.ID_REGGROUP,
                                         MIN(RE.FROM_HOUR) FROM_DATE,
                                         MAX(RE.FROM_HOUR) TO_DATE,
                                         SUM(RE.NVALUE) NVALUE,
                                         MIN(RE.SIGN_ID) SIGN_ID,
                                         MIN(RE.NOTE) NOTE
                                    FROM AT_PORTAL_REG RE
                                   GROUP BY RE.EMPLOYEE_ID, RE.ID_REGGROUP) R2
                          ON R2.ID_REGGROUP = R.ID_REGGROUP
                        LEFT JOIN AT_PORTAL_REG L_FROM
                          ON L_FROM.ID_REGGROUP = R2.ID_REGGROUP
                         AND L_FROM.WORKING_DAY = R2.FROM_DATE
                        LEFT JOIN OT_OTHER_LIST FR_SS
                          ON UPPER(FR_SS.CODE) = UPPER(L_FROM.TYPE_LEAVE)
                        LEFT JOIN AT_PORTAL_REG L_TO
                          ON L_TO.ID_REGGROUP = R2.ID_REGGROUP
                         AND L_TO.WORKING_DAY = R2.TO_DATE
                        LEFT JOIN OT_OTHER_LIST TO_SS
                          ON UPPER(TO_SS.CODE) = UPPER(L_TO.TYPE_LEAVE)
                       INNER JOIN HU_EMPLOYEE E
                          ON E.ID = R.EMPLOYEE_ID
                       INNER JOIN AT_SIGN S
                          ON R.SIGN_ID = S.ID
                       INNER JOIN AT_GSIGN O
                          ON S.AT_GSIGNID = O.ID
                       INNER JOIN PROCESS_APPROVED_STATUS A
                          ON R.ID_REGGROUP = A.ID_REGGROUP
                        LEFT JOIN HU_EMPLOYEE AUTHORIZED
                          ON AUTHORIZED.ID = A.EMPLOYEE_AUTHORIZED
                        LEFT JOIN (SELECT S3.ID_REGGROUP,
                                         EMP_NEXT.FULLNAME_VN EMP_APP_NAME,
                                         S3.APP_LEVEL,
                                         ROW_NUMBER() OVER(PARTITION BY S3.ID_REGGROUP ORDER BY S3.APP_LEVEL DESC) AS RN
                                    FROM PROCESS_APPROVED_STATUS S3
                                   INNER JOIN HU_EMPLOYEE EMP_NEXT
                                      ON EMP_NEXT.ID = S3.EMPLOYEE_APPROVED
                                   WHERE S3.APP_STATUS = 0) S4
                          ON S4.ID_REGGROUP = R.ID_REGGROUP
                         AND S4.APP_LEVEL = A.APP_LEVEL + 1
                        LEFT JOIN SE_USER EMP_U
                          ON EMP_U.USERNAME = R.MODIFIED_BY
                        LEFT JOIN HU_EMPLOYEE EMP_UN
                          ON EMP_UN.ID = EMP_U.EMPLOYEE_ID
                       WHERE O.CODE = P_CODE
                         AND NVL(R.STATUS, 0) <> 4
                         AND (A.EMPLOYEE_APPROVED = V_EMPLOYEEID OR
                             A.EMPLOYEE_AUTHORIZED = V_EMPLOYEEID)
                         AND (P_SIGN = 0 OR S.ID = P_SIGN)
                         AND (CASE
                               WHEN V_STATUS IN ('-2', '-1') THEN
                                1
                               WHEN V_STATUS NOT IN ('-2', '-1') AND
                                    R.STATUS IN
                                    (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                       FROM (SELECT LEVEL AS IAB,
                                                    REGEXP_SUBSTR(V_STATUS,
                                                                  '[^,]+',
                                                                  1,
                                                                  LEVEL) AS IVALUE
                                               FROM DUAL
                                             CONNECT BY REGEXP_SUBSTR(V_STATUS,
                                                                      '[^,]+',
                                                                      1,
                                                                      LEVEL) IS NOT NULL)) THEN
                                1
                               ELSE
                                0
                             END) = 1
                         AND ((UPPER(E.FULLNAME_VN) LIKE
                             '%' || UPPER(P_KEYSEARCH_EMPLOYEE) || '%' OR
                             E.EMPLOYEE_CODE LIKE '%' || P_KEYSEARCH_EMPLOYEE || '%') OR
                             P_KEYSEARCH_EMPLOYEE IS NULL)
                         AND ((P_TODATE IS NULL AND V_FROMDATE IS NULL AND
                             1 = 1) OR
                             (P_TODATE IS NOT NULL AND V_FROMDATE IS NULL AND
                             R.WORKING_DAY <= V_TODATE) OR
                             (P_TODATE IS NULL AND V_FROMDATE IS NOT NULL AND
                             R.WORKING_DAY >= V_FROMDATE) OR
                             (P_TODATE IS NOT NULL AND
                             V_FROMDATE IS NOT NULL AND
                             R.WORKING_DAY BETWEEN V_FROMDATE AND V_TODATE))
                         AND ((A.APP_STATUS = 0 AND
                             PKG_FUNCTION.FN_CHECK_APP(A.EMPLOYEE_ID,
                                                         A.PE_PERIOD_ID,
                                                         A.APP_LEVEL - 1,
                                                         A.ID_REGGROUP) = 1 AND
                             PKG_FUNCTION.FN_CHECK_APP(A.EMPLOYEE_ID,
                                                         A.PE_PERIOD_ID,
                                                         A.APP_LEVEL + 1,
                                                         A.ID_REGGROUP) IN
                             (0, 2)) OR (A.APP_STATUS IN (1, 2)))) R) B
       WHERE STT > ((V_PAGE - 1) * V_PAGESIZE)
         AND STT < (V_PAGE * V_PAGESIZE + 1);
    P_MESSAGE        := 'ISSUCCESS';
    P_RESPONSESTATUS := 1;
  
  EXCEPTION
    WHEN OTHERS THEN
      P_MESSAGE        := 'DATABASEERROR';
      P_RESPONSESTATUS := -99;
      SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE_SCB.API_APPROVE_LIST',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL);
  END;
END PKG_API_MOBILE;
