CREATE OR REPLACE PACKAGE BODY SCB_CR.PKG_API_MOBILE
AS

  FUNCTION API_FN_HASH(
          p_string varchar2,
          p_method varchar2 default 'SHA1'
  ) return varchar2 is
      v_method number;
      v_invalid_identifier exception;
      pragma exception_init(v_invalid_identifier, -904);
  begin
      --Intentionally case-sensitive, just like the 12c version.
      if p_method = 'SHA1' then
          v_method := dbms_crypto.hash_sh1;
      --These algorithms are only available in 12c and above.
      $IF NOT DBMS_DB_VERSION.VER_LE_11 $THEN
          elsif p_method = 'SHA256' then
              v_method := dbms_crypto.hash_sh256;
          elsif p_method = 'SHA384' then
              v_method := dbms_crypto.hash_sh384;
          elsif p_method = 'SHA512' then
              v_method := dbms_crypto.hash_sh512;
      $END
      elsif p_method = 'MD5' then
          v_method := dbms_crypto.hash_md5;
      ELSE
          raise v_invalid_identifier;
      end if;

      return rawToHex(dbms_crypto.hash(utl_raw.cast_to_raw(p_string), v_method));
  end;


  /*Convert number to date*/
  FUNCTION API_FN_CONVERTNUMBERTODATE
  (
    P_D IN NUMBER
  )
  RETURN DATE
  AS
    V_DIN NUMBER := P_D;
    V_D   VARCHAR2(30);
  BEGIN
    IF (V_DIN IS NULL) THEN
      V_DIN := 0;
      RETURN NULL;
    END IF;
    SELECT TO_CHAR(V_DIN) INTO V_D FROM DUAL;

    IF (LENGTH(V_D) = 6) THEN
      V_D := V_D || '01000000';
    END IF;

    IF (LENGTH(V_D) = 8) THEN
      V_D := V_D || '000000';
    END IF;

    RETURN TO_TIMESTAMP(V_D, 'YYYYMMDDHH24MISS');
  END;



  /*API_Shift_Calculate */
  PROCEDURE API_Shift_Calculate
  (
      v_WorkingDay IN DATE,
      v_StartDate IN NUMBER,
      v_EndDate IN NUMBER,
      v_ResultStart OUT NUMBER,
      v_ResultEnd OUT NUMBER
  )
  AS
  BEGIN
      v_ResultStart := NULL;
      v_ResultEnd := NULL;

      IF v_StartDate IS NOT NULL AND v_EndDate IS NOT NULL THEN
          DECLARE
              v_StartHour NVARCHAR2(10) := TO_CHAR(SUBSTR(v_StartDate, 9, 9));
              v_EndHour NVARCHAR2(10) := TO_CHAR(SUBSTR(v_EndDate, 9, 9));
              v_WorkingDate DATE := (v_WorkingDay);
          BEGIN
              v_ResultStart := TO_CHAR(SUBSTR(v_WorkingDay, 0, 8)) || v_StartHour;
              v_ResultEnd := TO_CHAR(SUBSTR(v_WorkingDay, 0, 8)) || v_EndHour;

              IF SUBSTR(v_StartDate, 0, 8) < SUBSTR(v_EndDate, 0, 8) THEN
                  v_WorkingDate := v_WorkingDate + 1;
                   SELECT TO_CHAR(SUBSTR(TO_NUMBER(TO_CHAR(v_WorkingDate, 'YYYYMMDDHH24MISS')),0,8)) || v_EndHour  INTO v_ResultEnd FROM dual;
                  --v_ResultEnd := TO_CHAR(SUBSTR(BOS.FN_ConvertDateToNumber(v_WorkingDate), 0, 8)) || v_EndHour;
              END IF;
          END;
      END IF;
  END;


  /*Ki?m tra th?ng tin access token (C?n b? sung check t? DB v? h?t h?n)*/
  PROCEDURE API_User_CheckAccessToken
  (
      p_CompanyCode IN NVARCHAR2,
      p_UserID IN NUMBER,
      p_DeviceID IN NVARCHAR2,
      p_Language IN NVARCHAR2,
      p_Token IN NVARCHAR2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := p_UserID;
      v_Token NVARCHAR2(50) := p_Token;
      v_Language nvarchar2(20) := NVL(p_language,'vi-VN');
      v__ERR_INVALID_ACCESSTOKEN NUMBER(10,0) := -102;
      v__ERR_ACCOUNTTOKEN_TIMEOUT NUMBER(10,0) := -103;
      v_Today TIMESTAMP;
      v_TimeoutMinutes NUMBER(10,0);
      v_TMP1 NUMBER(19,0);
      v_TMP2 NVARCHAR2(100);
      v_TMP_HASH nvarchar2(100);
      v_TMP NVARCHAR2(100);
      v_Status NUMBER(5,0);
      v_TokenCountParam NUMERIC(5,0) := 0;
      v_activeFlag nvarchar2(1) := '';
  BEGIN
      v_UserID := NVL(v_UserID, 0) ;
      v_Token := NVL(v_Token, ' ') ;
      v_Today := SYSDATE ;
      v_TimeoutMinutes := 525600;/* 525600 = 365 * 24 * 60   TO_NUMBER(FN_GetParamValue('TimeoutMinutes'));*/

      -- Check Users
      BEGIN
          SELECT CASE when ACTFLG = 'A' THEN 1 ELSE 0 end  INTO v_Status
          FROM SE_USER WHERE  ID = v_UserID;
          EXCEPTION WHEN NO_DATA_FOUND THEN
          BEGIN
              p_Message := u'X\00e1c th\1ef1c kh\00f4ng h\1ee3p l\1ec7: d\1eef li\1ec7u ng\01b0\1eddi d\00f9ng kh\00f4ng h\1ee3p l\1ec7' ;
              p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
              RETURN;
          END;
      END;
      v_Status := NVL(v_Status, -1);
      IF ( v_Status < 1 ) THEN
          p_Message := u'X\00e1c th\1ef1c kh\00f4ng h\1ee3p l\1ec7: T\00e0i kho\1ea3n \0111\00e3 b\1ecb kh\00f3a' ;
          p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
          RETURN;
      END IF;
      -- Check Token Param
      BEGIN
          WITH TokenTbl AS (
            SELECT level AS Iab, regexp_substr(v_Token,'[^.]+', 1, level) AS iValue FROM DUAL
            CONNECT BY regexp_substr(v_Token, '[^.]+', 1, level) IS NOT NULL)
            SELECT TMP1, TMP2 INTO v_TMP1, v_TMP2
            FROM (SELECT TO_NUMBER(iValue) TMP1 FROM TokenTbl WHERE Iab = 1) B,
                 (SELECT iValue TMP2 FROM TokenTbl WHERE Iab = 2) C;
          EXCEPTION WHEN NO_DATA_FOUND THEN
          BEGIN
            IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                p_Message :=TO_CHAR(UNISTR('X\00E1c th\1EF1c kh\00F4ng h\1EE3p l\1EC7, 
                Token kh\00F4ng \0111\01B0\1EE3c truy c\1EADp'));
             ELSE
               p_Message := u'Token is not accepted' ;
             end if;

              p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
              RETURN;
          END;
      END;

      -- Check Param OK
      v_TMP :=nvl( p_CompanyCode,' ') || '.' || TO_CHAR(v_UserID) || '.' || p_DeviceID || '.' || TO_CHAR(v_TMP1) || '.' || v_Language ;
      SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP_HASH FROM DUAL;
      IF ( v_TMP_HASH  <> v_TMP2 ) THEN
        -- Check th?m case api cu chua c? Language
        v_TMP :=nvl( p_CompanyCode,' ') || '.' || TO_CHAR(v_UserID) || '.' || p_DeviceID || '.' || TO_CHAR(v_TMP1) ;
        SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP_HASH FROM DUAL;
        DBMS_OUTPUT.PUT_LINE(    v_TMP_HASH);
        DBMS_OUTPUT.PUT_LINE(    v_TMP2);
        IF  ( v_TMP_HASH  <> v_TMP2 ) THEN
            IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                p_Message :=TO_CHAR(UNISTR('X\00E1c th\1EF1c kh\00F4ng h\1EE3p l\1EC7'));
             ELSE
               p_Message := u'Token is not accepted: decrypt is error' ;
             end if;
            p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
            RETURN;
          END IF;
      END IF;
      -- Check Token Timeout

       IF ( TO_NUMBER(TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')) - v_TMP1  > (v_TimeoutMinutes * 60) ) THEN
         IF NVL(p_Language,'vi-VN')= 'vi-VN' then
              p_Message := TO_CHAR(UNISTR('Phi\00EAn la\0300m vi\00EA\0323c k\00EA\0301t thu\0301c')) ;
           ELSE
             p_Message := u'Session ended' ;
           end if;

          p_ResponseStatus := v__ERR_ACCOUNTTOKEN_TIMEOUT ;
          RETURN;
      END IF;

      -- Check token hop le
      -- case n?y n?u d? li?u ko c? token th? ko logout du?c -> th?ng nh?t

      BEGIN
          v_TokenCountParam := 0;
          -- Ki?m tra phi?n l?m vi?c c? th?ng tin c?a token v? user id kh?ng
          SELECT count(ID) INTO v_TokenCountParam
        FROM SE_UserLogin
        WHERE  UPPER(Token) = UPPER(v_Token)
        AND USERID  = v_UserID
        --AND ACTFLG = 'A'
        ;
        SELECT   ACTFLG INTO v_activeFlag
        FROM   SE_UserLogin
        WHERE    UPPER(Token) = UPPER(v_Token)
        AND   USERID  = v_UserID
        --AND ACTFLG = 'A'
        ;
          EXCEPTION WHEN NO_DATA_FOUND THEN
          BEGIN
              --p_Message := u'Kh\00f4ng t\1ed3n t\1ea1i phi\00ean l\00e0m vi\1ec7c' ;
              --p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
              p_ResponseStatus := 1 ;
          p_Message := TO_CHAR(UNISTR('X\00E1c th\1EF1c th\00E0nh c\00F4ng'));
              RETURN;
          END;
      END;
    IF  v_activeFlag = 'I' OR v_TokenCountParam = 0 THEN
      IF NVL(p_Language,'vi-VN')= 'vi-VN' then
              p_Message := TO_CHAR(UNISTR('Phi\00EAn la\0300m vi\00EA\0323c k\00EA\0301t thu\0301c')) ;
           ELSE
             p_Message := u'Session ended' ;
           end if;
            p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
            RETURN;
    END IF;

      p_ResponseStatus := 1 ;
      p_Message :=TO_CHAR(UNISTR('X\00E1c th\1EF1c th\00E0nh c\00F4ng'));
  END;
  /*X? l? dang nh?p v? gentoken*/
  PROCEDURE API_User_Login
  (
      p_UserName IN NVARCHAR2,
      p_Pwd IN NVARCHAR2,
      p_DeviceID IN NVARCHAR2,
      p_Firebase_Client_Id IN NVARCHAR2,
      p_Language IN NVARCHAR2,
      p_CompanyCode OUT NVARCHAR2,
      p_UserID OUT NUMBER,
      p_FullName OUT NVARCHAR2,
      p_Email OUT NVARCHAR2,
      p_Mobile OUT NVARCHAR2,
      p_Avatar OUT NVARCHAR2,
      p_Token OUT NVARCHAR2,
      p_IsAd Out Number,
      p_LdapName Out     NVARCHAR2,
      p_LdapBase Out Nvarchar2,
      p_DomainName Out Nvarchar2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserName NVARCHAR2(30) := p_UserName;
      v_Pwd NVARCHAR2(200) := p_Pwd;
      v_DeviceID NVARCHAR2(50) := p_DeviceID;
      v_Firebase_Client_Id nvarchar2(200) := NVL(p_Firebase_Client_Id,' ');
      v_Language nvarchar2(20) := NVL(p_Language,'vi-VN');
      v_Today DATE;
      v_TimeOut DATE;
      v_TimeOutBigint NUMBER(19,0);
      v_PwdMD5 NVARCHAR2(200);
      v_PwdCurrMD5 NVARCHAR2(200);
      v_UserType NUMBER(5,0);
      v_Status NUMBER(5,0);
      v_ImageID NUMBER(19,0);
      v_LastPwdChanged DATE;
      v_PwdExpireDay Date;
      v_CompanyID NUMBER(19,0);
      v_StoreName NVARCHAR2(200) := 'API_User_Login';
      v_LoginID NUMERIC(19,0);
      v_LogLoginID NUMERIC(19,0);
      --v_IsAD Number;
  BEGIN
      v_Today := SYSDATE ;
      v_UserName := NVL(v_UserName, ' ') ;
      v_Pwd := NVL(v_Pwd, '') ;
      v_DeviceID := NVL(v_DeviceID, ' ') ;
      p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
      v_PwdMD5 := v_Pwd;--FN_Md5Encode(v_Pwd) ;
      --SELECT API_FN_HASH(v_Pwd, 'MD5') INTO v_PwdMD5 FROM DUAL;

      IF ( v_DeviceID = ' ' ) THEN
          p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
          IF NVL(p_Language,'vi-VN')= 'vi-VN' then
             p_Message := u'ID thiet bi khong hop le' ;
           ELSE
             p_Message := u'Device ID is not allowed';
           end if;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      BEGIN
        SELECT  ID,
                0 AS ImG,
                0 AS TYPE,
                t.Password AS Pwd,
                CASE when t.ACTFLG ='A' THEN 1 ELSE 0 END  ,
                0 AS COMPANYID, t.CHANGE_PASS_DATE AS LASTPWDCHANGED ,
                t.EXPIRE_DATE,
                t.FULLNAME,
                nvl(t.EMAIL, ' ') ,
                nvl(t.TELEPHONE, ' ') ,
                nvl(t.is_ad,0)
            INTO p_UserID, v_ImageID, v_UserType, v_PwdCurrMD5,
            v_Status, v_CompanyID, v_LastPwdChanged, v_PwdExpireDay,
            p_FullName, p_Email, p_Mobile,p_IsAd
        FROM   SE_USER t
        WHERE   UPPER(t.username)=UPPER(v_UserName) 
       AND rownum = 1 
        ;
         -- AND   UPPER(t.password) = UPPER(v_PwdMD5);

          EXCEPTION WHEN NO_DATA_FOUND THEN
            SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE.API_User_Login',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              v_UserName,
                              v_PwdMD5,
                              NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                              NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                              NULL, NULL, NULL);
          BEGIN
              p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
              v_LastPwdChanged := SYSDATE;
              v_PwdExpireDay := SYSDATE + 236;
                IF NVL(p_Language,'vi-VN')= 'vi-VN' then
               p_Message := u'Username is not found' ;
             ELSE
               p_Message := u'Username is not found' ;
             end if;

              p_ResponseStatus := -600 ;
              RETURN;
          END;
      END;

     BEGIN
        SELECT  ID,
                0 AS ImG,
                0 AS TYPE,
                t.Password AS Pwd,
                CASE when t.ACTFLG ='A' THEN 1 ELSE 0 END  ,
                0 AS COMPANYID,
                t.CHANGE_PASS_DATE AS LASTPWDCHANGED ,
                t.EXPIRE_DATE,
                t.FULLNAME,
                nvl(t.EMAIL, ' ') ,
                nvl(t.TELEPHONE, ' ')
            INTO p_UserID, v_ImageID, v_UserType, v_PwdCurrMD5, v_Status,
            v_CompanyID, v_LastPwdChanged, v_PwdExpireDay, p_FullName,      p_Email, p_Mobile
        FROM   SE_USER t
        WHERE   UPPER(t.username)=UPPER(v_UserName)
          AND   (UPPER(t.password) = UPPER(v_PwdMD5) Or p_IsAd=-1)
         AND rownum = 1 
          ;

          EXCEPTION WHEN NO_DATA_FOUND THEN

            SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE.API_User_Login',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              v_UserName,
                              p_Pwd,
                              NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                              NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                              NULL, NULL, NULL);
          BEGIN
              p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
              v_LastPwdChanged := SYSDATE;
              v_PwdExpireDay := SYSDATE + 236;
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                p_Message := u'Password is incorrect' ;
             ELSE
               p_Message := u'Password is incorrect' ;
             end if;
              p_ResponseStatus := -600 ;
              RETURN;
          END;
      END;
      --v_LastPwdChanged := FN_ConvertDateToNumber(FN_ConvertNumberToDate(v_LastPwdChanged) + v_PwdExpireDay);

      IF ( v_Status <> 1 ) THEN
          p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
          IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                p_Message := u'User is not allowed' ;
             ELSE
               p_Message := u'User is not allowed' ;
             end if;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;
      If p_IsAd =0 Then
        IF ( v_PwdCurrMD5 <> v_PwdMD5 ) THEN
            p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
            p_Message := u'Password is incorrect' ;
            p_ResponseStatus := -600 ;
            RETURN;
        End If;
      Else
        Begin
          Select L.Ldap_Name,L.Base_Dn,L.Domain_Name
          InTo  p_LdapName,p_LdapBase,p_DomainName
          From Se_Ldap L
          Where RowNum=1;
          EXCEPTION WHEN NO_DATA_FOUND THEN
              p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
               IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                p_Message := TO_CHAR(UNISTR('\0110\0103ng nh\1EADp t\00E0i kho\1EA3n Ldap kh\00F4ng th\00E0nh c\00F4ng')) ;
              ELSE
                p_Message := 'LDAP sign in failed' ;
              end if;
            p_ResponseStatus := -600 ;
            Return;
        End ;
      End If;
  
      -- Gen token
      API_User_GenAccessToken(
                          p_CompanyCode => p_CompanyCode,
                          p_UserID => p_UserID,
                          p_DeviceID => v_DeviceID,
                          p_Language => p_Language,
                          p_Token => p_Token,
                          p_Message => p_Message,
                          p_ResponseStatus => p_ResponseStatus) ;
      IF ( p_ResponseStatus < 1 ) THEN
          p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
          IF NVL(p_Language,'vi-VN')= 'vi-VN' then
             p_Message := u'Your session is not created' ;
           ELSE
             p_Message := u'Your session is not created' ;
           end if;
        p_ResponseStatus := -600 ;
          RETURN;
      END IF;

     --13/01/21: cap nhat cac phien lam viec cu -> Inactive -> chi su dung phien moi
     	UPDATE SE_USERLOGIN SET ACTFLG  = 'I' WHERE USERID  =  p_UserID;
     	COMMIT;
      -- insert session
        Insert into SE_USERLOGIN(ID,     USERID,   TOKEN,     DEVICE_ID,   ACTFLG, Firebase_Client_Id )
        SELECT SEQ_SE_USERLOGIN.NEXTVAL, p_UserID,   p_Token ,   v_DeviceID ,'A',   p_Firebase_Client_Id
        FROM DUAL;
      	COMMIT;

       -- l?y avater
          Select nvl(IMAGE, 'NoImage.jpg') INTO p_Avatar FROM SE_USER u
         join HU_EMPLOYEE he on u.EMPLOYEE_CODE = he.EMPLOYEE_CODE
         LEFT JOIN HU_EMPLOYEE_CV  E ON e.EMPLOYEE_ID  = he.id
         WHERE u.Id = p_UserID
        AND rownum = 1 ;

      p_Message := u'Login Is Success ';
      p_ResponseStatus := 1 ;

      EXCEPTION WHEN OTHERS THEN
      BEGIN
          ROLLBACK;
          p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
          p_ResponseStatus := -99 ;
         IF NVL(p_Language,'vi-VN')= 'vi-VN' then
             p_Message := 'Internal server is error:' || SQLERRM ;
           ELSE
             p_Message := 'Internal server is error:' || SQLERRM ;
           end if;

      END;
  END;

  /*t?o access token*/
  /*Error code = */
  PROCEDURE API_User_GenAccessToken
  (
    p_CompanyCode IN NVARCHAR2,
    p_UserID IN NUMBER,
    p_DeviceID IN NVARCHAR2,
    p_Language IN nvarchar2,
    p_Token OUT NVARCHAR2,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  )
  AS
     v_UserID NUMBER(19,0) := p_UserID;
     v_CompanyCode NVARCHAR2(30) := p_CompanyCode;
     v_DeviceID NVARCHAR2(50) := p_DeviceID;
     v_Language nvarchar2(20):= NVL(p_Language,'vi-VN');
     v_Today DATE;
     v_TMP1 NUMBER(19,0);
     v_TMP2 NVARCHAR2(100);
     v_TMP NVARCHAR2(100);
     v_temp NUMBER(1, 0) := 0;
     v_StoreName NVARCHAR2(200) := 'API_User_GenAccessToken';

  BEGIN
     --/*TODO:SQLDEV*/ SET NOCOUNT, XACT_ABORT ON /*END:SQLDEV*/
     v_UserID := NVL(v_UserID, 0) ;
     v_CompanyCode := NVL(v_CompanyCode, ' ') ;
     v_Today := SYSDATE ;
     BEGIN
        BEGIN
           v_TMP1 := TO_NUMBER(TO_CHAR(v_Today, 'YYYYMMDDHH24MISS'));
           -- COMPANYCODE.USERID.DEVICEID.TIME.LANGUAGE
           v_TMP := v_CompanyCode || '.' || TO_NCHAR(v_UserID) || '.' || v_DeviceID || '.' || TO_NCHAR(v_TMP1) || '.' || v_Language ;
           --v_TMP2 := FN_Md5Encode(v_TMP) ;
           SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP2 FROM DUAL;
           p_Token := TO_NCHAR(v_TMP1) || '.' || v_TMP2 ;
           p_ResponseStatus := 1 ;
           p_Message := u'Token \0111\00e3 \0111\01b0\1ee3c t\1ea1o' ;

        END;
     EXCEPTION
        WHEN OTHERS THEN
       BEGIN
          p_Token := ' ' ;
          p_ResponseStatus := -99 ;
          p_Message := u'Ph\00e1t sinh l\1ed7i API nghi\1ec7p v\1ee5' ;
       END;
    END;
  --EXCEPTION WHEN OTHERS THEN utils.handleerror(SQLCODE,SQLERRM);
  END;


  /*API_User_LoginWToken*/
  PROCEDURE API_User_LoginWToken
  (
      p_CompanyCode IN NVARCHAR2,
      p_UserID IN NUMBER,
      p_DeviceID IN NVARCHAR2,
    p_Language IN nvarchar2,
      p_Token IN NVARCHAR2,
      p_UserName OUT NVARCHAR2,
      p_FullName OUT NVARCHAR2,
      p_Email OUT NVARCHAR2,
      p_Mobile OUT NVARCHAR2,
      p_Avatar OUT NVARCHAR2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
    v_Status NUMBER(5,0);
  BEGIN
       API_User_CheckAccessToken(p_CompanyCode => p_CompanyCode,
                                          p_UserID => p_UserID,
                                          p_Language => p_Language,
                                          p_DeviceID => p_DeviceID,
                                          p_Token => p_Token,
                                          p_Message => p_Message,
                                          p_ResponseStatus => p_ResponseStatus) ;

    -- return user info
    IF ( p_ResponseStatus = 1) THEN
        SELECT  ' ' AS ImG,
            CASE when t.ACTFLG ='A' THEN 1 ELSE 0 END  ,
            t.FULLNAME,t.EMAIL ,t.TELEPHONE , t.USERNAME
          INTO   p_Avatar, v_Status, p_FullName, p_Email, p_Mobile, p_UserName
        FROM   SE_USER t
        WHERE   t.ID = p_UserID ;

       Select nvl(IMAGE, 'NoImage.jpg') INTO p_Avatar
       FROM SE_USER u
            join HU_EMPLOYEE he on u.EMPLOYEE_CODE = he.EMPLOYEE_CODE
            LEFT JOIN HU_EMPLOYEE_CV  E ON e.EMPLOYEE_ID  = he.id
            WHERE   u.ID = p_UserID;

        IF ( v_Status <> 1 ) THEN
            p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ;  p_UserName := '';
            p_Message := u'Ngu?i d?ng kh?ng duoc ph?p ho?t d?ng' ;
            p_ResponseStatus := -600 ;
            RETURN;
        END IF;
      END IF;
  END;

  /*?ang xu?t (c?n x? l? d?nh d?u token h?t h?n*/
  PROCEDURE API_User_Logout
  (
      p_Token IN NVARCHAR2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_Token NVARCHAR2(50) := p_Token;
      v_Today DATE;
      v_I NUMBER(19,0);
      v_UserID NUMBER(10,0);
      v_UserName NVARCHAR2(30);
      v_StoreName NVARCHAR2(200) := 'API_User_Logout';
  BEGIN
      v_Today := SYSDATE ;
      v_Token := NVL(v_Token, ' ') ;
      BEGIN
        v_Today := SYSDATE ;

          --Check token exists
          SELECT ID, UserID INTO v_I, v_UserID FROM SE_UserLogin WHERE  UPPER(Token) = UPPER(v_Token) AND rownum = 1 ;
          EXCEPTION WHEN NO_DATA_FOUND THEN
          BEGIN
              v_UserID := -1;
              v_I := -1;
          END;
         --kh?ng t?n t?i th? m?c d?nh out lu?n
          IF ( v_UserID < 0 ) THEN
             p_Message := u'?ang xu?t th?nh c?ng' ;
          p_ResponseStatus := 1 ;
              RETURN;
          END IF;

      END;
         --C?p nh?t tr?ng th?i c?a token, device_id tuong ?ng user
         --13/01/21 hi?n s? cho co ch? logout s? x?a h?t phi?n l?m vi?c cu
          UPDATE  SE_UserLogin SET ACTFLG = 'I' WHERE USERID  = v_UserID ;--ID = v_I;
        p_Message := u'?ang xu?t th?nh c?ng' ;
        p_ResponseStatus := 1 ;
      EXCEPTION WHEN OTHERS THEN
      BEGIN
      ROLLBACK;
          p_ResponseStatus := -99 ;
          p_Message := u'L?i h? th?ng API nghi?p v?' ;
      END;
  END;
  -- Ki?m tra permission -> m?i ch? ki?m tra user portal hay kh?ng, c?n thay d?i c?u tr?c d? ph?n ho?c check quy?n theo ch?c nang
  PROCEDURE API_User_CheckPermission
  (
      p_UserID IN NUMBER,
      p_Url IN NVARCHAR2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
  BEGIN
      SELECT u'Grant!', ID INTO p_Message, p_ResponseStatus
      FROM   SE_USER
      WHERE UPPER(ID)  = UPPER( p_UserID)
       AND IS_PORTAL  = -1;
      EXCEPTION WHEN NO_DATA_FOUND THEN
      BEGIN
          p_Message := u'{YouAreNotIsGrantToFunction}!' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END;
  END;
/*==========================*/
  /*GET PROCEDURE*/
  PROCEDURE API_Get_Contract
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, -1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
      v_EmpID NUMBER(19,0);
      v_EmpCode Nvarchar2(50);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(19, 0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
      SELECT ID,EMPLOYEE_CODE INTO v_temp,v_EmpCode  FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
    IF NVL(v_EmpCode,'') = '' THEN
      p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
    END IF;

        SELECT he.ID INTO v_EmpID  FROM HU_Employee he JOIN SE_USER u on he.EMPLOYEE_CODE = u.EMPLOYEE_CODE WHERE  u.ID = v_UserID;
      SELECT COUNT(*) INTO p_Rowcount
      FROM HU_Contract W
                  LEFT JOIN HU_Contract_Type HT ON W.CONTRACT_TYPE = HT.ID
              WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

      OPEN p_Cur FOR
      SELECT *
      FROM
      (
          SELECT   ROWNUM STT, ID, NAME, NUMBERDECIDE,
              TO_CHAR(SIGNDATE,'YYYY-MM-DD') SIGNDATE,
              TO_CHAR(EFFECTDATE,'YYYY-MM-DD') EFFECTDATE,
              TO_CHAR(EXPIREDATE,'YYYY-MM-DD') EXPIREDATE,
              SIGNNAME, TITLE_NAME  ,ORG_NAME
          FROM
          (
              SELECT
                  W.ID ID,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then  HT.NAME else ht.name_en end Name,
                  W.CONTRACT_NO NumberDecide ,
                  W.Sign_Date  SignDate,
                  W.EFFECT_DATE  EffectDate,
                  W.END_DATE  ExpireDate,
                  NVL(E.FULLNAME_VN , ' ') SignName  ,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then T.Name_Vn Else T.NAME_EN End As  Title_Name,
                 Case When Nvl(p_Language,'vi-VN')='vi-VN' Then O.Name_Vn Else O.NAME_EN End As Org_Name
                  --NVL(W.SIGN_TITLE , 0) SignTitleName
              FROM HU_Contract W
                  LEFT JOIN HU_Contract_Type HT ON W.CONTRACT_TYPE = HT.ID
                  LEFT JOIN HU_EMPLOYEE E ON E.ID=W.SIGN_LIQUI
                  Left Join Hu_Organization O On O.Id=W.ORG_ID
                  LEFT JOIN HU_TITLE T ON T.ID=W.TITLE_ID
              WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
              and nvl(w.is_deleted,0) <> 1
              ORDER BY W.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


   PROCEDURE API_Get_Dashboard(p_Language                  IN nvarchar2,
                            p_UserID                    IN NUMBER,
                            p_Pending                   OUT NUMBER,
                            p_OtHours                   OUT NUMBER,
                            p_RegisterHour              OUT NUMBER,

                            p_PhepDon            out number,
                            p_QuyPhepNam         out number,
                            p_PhepThamNien       out number,
                            p_PhepUuDai          out number,
                            p_QuyPhepTheoThang   out number,
                            p_QuyUng             out number,
                            p_DaDangKyVaSuDung   out number,
                            p_TongPhepThucCo     out number,
                            p_SoNgayNghiBuConLai out number,
                            p_IsMng              out number,

                            p_Message        OUT NVARCHAR2,
                            p_ResponseStatus OUT NUMBER) AS
  v_UserID     NUMBER(19, 0) := NVL(p_UserID, 0);
  v_EmployeeID NUMBER(19, 0);
  v_UserName   Nvarchar2(50);
  v_temp       NUMBER(1, 0) := 0;

  PV_STARTDATE DATE;
  PV_ENDDATE   DATE;
  PV_MONTH     NUMBER;
  PV_YEAR      NUMBER;
  PV_EXPREDATE DATE;
  PV_COUNT_RGT NUMBER := 0; -- So ngay da nghi
  PV_CUR_USED  NUMBER := 0; -- So ngay phep da su dung
  PV_SENIORITY NUMBER := 0; -- Phep tham nien
  PV_CUR_HAVE  NUMBER := 0; -- So phep ton

  PV_CUR_HAVE_NOW     NUMBER := 0; -- quy phep nam nay con lai
  PV_CODE_CT          NVARCHAR2(250);
  PV_PHEPUNG          NUMBER := 0;
  PV_RGT              NUMBER := 0;
  PV_RGT_PORTAL       NUMBER := 0;
  PV_ANNUAL_SUM       NUMBER := 0;
  PV_PERIOD           NUMBER := 0;
  PV_IS_UNGPHEP       NUMBER := 0;
  PV_PRE_HAVE         NUMBER := 0; -- Phep ton nam truoc
  PV_DATE_FIRTH_YEAR  DATE := NULL; -- Lay ngay 01/01/nam hien tai
  PV_QP_YEAR          NUMBER := 0;
  PV_QP_YEAR_NOT_NCTT NUMBER := 0;
  PV_QP_MONTH         NUMBER := 0;

  PV_DATE_RESET    NVARCHAR2(50);
  PV_IMPORT_USED   NUMBER := 0;
  PV_USED_PORTAL   NUMBER := 0;
  PV_PRE_HAVE_TEMP NUMBER := 0; -- Phep ton nam truoc
  PV_PRE_USED      NUMBER := 0; -- Phep ton nam truoc da su dung

  PV_NB        NUMBER := 0; -- So phep bu con l?i
  PV_NB_USED   NUMBER := 0; -- So phep da nghi bu tren app
  PV_NB_PORTAL NUMBER := 0; -- So da nghi bu tren portal

  PV_TONG_NGHI    NUMBER := 0;
  PV_PHEP_HIEN_CO NUMBER := 0;
  PV_PHEP_UU_DAI  NUMBER := 0;

BEGIN
  p_Pending                   := 0;
  p_OtHours                   := 0;
  p_RegisterHour              := 0;

  p_PhepDon            := 0;
  p_QuyPhepNam         := 0;
  p_PhepThamNien       := 0;
  p_PhepUuDai          := 0;
  p_QuyPhepTheoThang   := 0;
  p_QuyUng             := 0;
  p_DaDangKyVaSuDung   := 0;
  p_TongPhepThucCo     := 0;
  p_SoNgayNghiBuConLai := 0;
  p_IsMng              := 0;

  BEGIN
    SELECT he.ID, su.username
      INTO v_EmployeeID, v_UserName
      FROM HU_EMPLOYEE he
      JOIN SE_USER su
        ON su.EMPLOYEE_CODE = he.EMPLOYEE_CODE
     WHERE su.ID = v_UserID
       AND ((he.WORK_STATUS = 257 AND SYSDATE < he.TER_EFFECT_DATE) OR
           (he.WORK_STATUS <> 257))
       AND rownum = 1;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      v_EmployeeID := NULL;
  END;
  v_EmployeeID := NVL(v_EmployeeID, -1);
  
  --check dm_id
  select case when count(*) >0 then 1 else 0 end into p_IsMng
    from hu_direct_manager d
    where d.dm_id = v_EmployeeID;

  SELECT TO_DATE('31' || '03' || TO_CHAR(TRUNC (LAST_DAY (SYSDATE)), 'YYYY'), 'DD/MM/YYYY'),
         TO_DATE('01' || '01' || TO_CHAR(TRUNC (LAST_DAY (SYSDATE)), 'YYYY'), 'DD/MM/YYYY')
    INTO PV_EXPREDATE, PV_DATE_FIRTH_YEAR
    FROM DUAL;

  SELECT TO_NUMBER(TO_CHAR(TRUNC (LAST_DAY (SYSDATE)), 'MM')), TO_CHAR(TRUNC (LAST_DAY (SYSDATE)), 'YYYY')
    INTO PV_MONTH, PV_YEAR
    FROM DUAL;

  -- Lay ngay reset phep nam
  SELECT get_param('RESET_ANNUAL') into PV_DATE_RESET FROM DUAL;

  -- tao ngay reset phep nam
  SELECT TO_DATE(PV_DATE_RESET || '/' || PV_YEAR, 'DD/MM/YYYY')
    INTO PV_EXPREDATE
    FROM DUAL;

  BEGIN
    SELECT P.START_DATE, P.END_DATE, P.ID
      INTO PV_STARTDATE, PV_ENDDATE, PV_PERIOD
      FROM AT_PERIOD P
     WHERE P.YEAR = PV_YEAR
       AND P.MONTH = PV_MONTH
       AND ROWNUM = 1;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      PV_STARTDATE := NULL;
      PV_ENDDATE   := NULL;
      PV_PERIOD    := 0;
  END;

  -- Phep uu dai
  if v_EmployeeID <> 0 then
    SELECT CASE
             WHEN I.ANNUAL_NUMBER IS NOT NULL THEN
              TO_NUMBER(I.ANNUAL_NUMBER)
             ELSE
              0
           END
      INTO PV_PHEP_UU_DAI
      FROM HU_EMPLOYEE_OTHER_INFO I
     WHERE I.EMPLOYEE_ID = v_EmployeeID
       AND I.IS_DELETED = 0;
  end if;

  -- Lay so phep da su dung trong nam
  SELECT NVL(SUM(NVL(A.NVALUE, 0)), 0)
    INTO PV_CUR_USED
    FROM AT_RGT A
   INNER JOIN AT_SIGN S
      ON A.SIGN_ID = S.ID
   WHERE A.WORKING_DAY BETWEEN PV_DATE_FIRTH_YEAR AND TRUNC (LAST_DAY (SYSDATE))
     AND A.EMPLOYEE_ID = v_EmployeeID
     AND S.CODE = 'P';

  -- Lay so phep da su dung tren portal
  SELECT NVL(SUM(NVL(A.NVALUE, 0)), 0)
    INTO PV_USED_PORTAL
    FROM AT_PORTAL_REG A
   INNER JOIN AT_SIGN S
      ON A.SIGN_ID = S.ID
   WHERE A.WORKING_DAY BETWEEN PV_DATE_FIRTH_YEAR AND TRUNC (LAST_DAY (SYSDATE))
     AND A.EMPLOYEE_ID = v_EmployeeID
     AND S.CODE = 'P'
     AND A.STATUS NOT IN (4, 3, 1);

  PV_CUR_USED := PV_CUR_USED + PV_USED_PORTAL;

  -- Phep tham nien
  BEGIN
    SELECT T.SENIORITYHAVE
      INTO PV_SENIORITY
      FROM AT_ANNUALLEAVE_DETAIL T
     WHERE T.EMPLOYEE_ID = v_EmployeeID
       AND T.YEAR = PV_YEAR
       AND T.MONTH = PV_MONTH
       AND ROWNUM <= 1;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      PV_SENIORITY := 0;
  END;
  -- Phep nam con l?i
  -- Quy phep nam nay con
  BEGIN
    SELECT T.PREV_USED,
           (NVL(T.Prev_Temp, 0)),
           -- Neu ngay truyen vao ma lon hon ngay reset phep
           -- Thi gan phep don bang phep ton nam truoc da su dung
           -- Nguoc lai thay lay pheo ton nam truoc
           CASE
             WHEN PV_ENDDATE > PV_EXPREDATE THEN
              T.PREV_USED
             ELSE
              T.Prev_Temp
           END,
           (NVL(T.QP_MONTH_TEMP, 0)),
           (NVL(T.PHEPUNG, 0)),
           (NVL(T.QP_YEAR, 0)),
           (NVL(T.QP_MONTH, 0)),
           CASE
             WHEN (NVL(T.QP_YEAR_TEMP, 0)) > 14 THEN
              14
             ELSE
              (NVL(T.QP_YEAR_TEMP, 0))
           END
      INTO PV_PRE_USED,
           PV_PRE_HAVE,
           PV_PRE_HAVE_TEMP,
           PV_CUR_HAVE,
           PV_PHEPUNG,
           PV_QP_YEAR,
           PV_QP_MONTH,
           PV_QP_YEAR_NOT_NCTT
      FROM AT_ANNUALLEAVE_DETAIL T
     INNER JOIN HU_EMPLOYEE E
        ON E.ID = T.EMPLOYEE_ID
     INNER JOIN HU_TITLE TT
        ON E.TITLE_ID = TT.ID
     WHERE T.EMPLOYEE_ID = v_EmployeeID
       AND T.YEAR = PV_YEAR
       AND T.MONTH = PV_MONTH
       AND ROWNUM <= 1;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      PV_CUR_HAVE := 0; -- Tra ve canh bao nhan vien chua duoc tinh phep nam
  END;

  -- Phep bu con lai
  BEGIN
    SELECT (NVL(T.NB_TOTAL_HAVE, 0))
      INTO PV_NB
      FROM AT_NB T
     WHERE T.EMPLOYEE_ID = v_EmployeeID
       AND T.YEAR = PV_YEAR
       AND ROWNUM <= 1;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      PV_NB := 0;
  END;

  -- Lay so phep nghi bu da su dung trong nam
  SELECT NVL(SUM(NVL(A.NVALUE, 0)), 0)
    INTO PV_NB_USED
    FROM AT_RGT A
   INNER JOIN AT_SIGN S
      ON A.SIGN_ID = S.ID
   WHERE A.WORKING_DAY BETWEEN PV_DATE_FIRTH_YEAR AND TRUNC (LAST_DAY (SYSDATE))
     AND A.EMPLOYEE_ID = v_EmployeeID
     AND S.CODE = 'NB';

  -- Lay so phep nghi bu da su dung tren portal
  SELECT NVL(SUM(NVL(A.NVALUE, 0)), 0)
    INTO PV_NB_PORTAL
    FROM AT_PORTAL_REG A
   INNER JOIN AT_SIGN S
      ON A.SIGN_ID = S.ID
   WHERE A.WORKING_DAY BETWEEN PV_DATE_FIRTH_YEAR AND TRUNC (LAST_DAY (SYSDATE))
     AND A.EMPLOYEE_ID = v_EmployeeID
     AND S.CODE = 'NB'
     AND A.STATUS NOT IN (4, 3, 1);

  PV_NB_USED := PV_NB_USED + PV_NB_PORTAL;
  PV_NB      := PV_NB - PV_NB_USED;

  -- Lay so phep da dang ky tren portal
  SELECT NVL(SUM(NVL(A.NVALUE, 0)), 0)
    INTO PV_RGT_PORTAL
    FROM AT_PORTAL_REG A
   INNER JOIN AT_SIGN S
      ON A.SIGN_ID = S.ID
   WHERE A.WORKING_DAY BETWEEN PV_DATE_FIRTH_YEAR AND TRUNC (LAST_DAY (SYSDATE))
     AND A.EMPLOYEE_ID = v_EmployeeID
     AND S.CODE = 'P'
        -- Loai tru nhung trang thai tu choi phe duyet
     AND A.STATUS NOT IN (3, 4);

  -- Lay thong tin phep hien co
  PV_PHEP_HIEN_CO := GET_PHEP_HIEN_CO(v_EmployeeID,
                                      PV_STARTDATE,
                                      TRUNC (LAST_DAY (SYSDATE)),
                                      PV_YEAR);

  PV_CUR_HAVE := PV_PHEP_HIEN_CO - PV_TONG_NGHI;

  p_PhepDon            := ROUND_ANNUAL(PV_PRE_HAVE_TEMP);--DECODE(ROUND_ANNUAL(PV_PRE_HAVE_TEMP),'.5','0.5',ROUND_ANNUAL(PV_PRE_HAVE_TEMP));
  p_QuyPhepNam         := ROUND_ANNUAL(PV_QP_YEAR_NOT_NCTT);--DECODE(ROUND_ANNUAL(PV_QP_YEAR_NOT_NCTT),'.5','0.5',ROUND_ANNUAL(PV_QP_YEAR_NOT_NCTT));
  p_PhepThamNien       := ROUND_ANNUAL(PV_SENIORITY);
  p_PhepUuDai          := ROUND_ANNUAL(PV_PHEP_UU_DAI);
  p_QuyPhepTheoThang   := ROUND_ANNUAL(PV_QP_MONTH);--DECODE(ROUND_ANNUAL(PV_QP_MONTH),'.5','0.5',ROUND_ANNUAL(PV_QP_MONTH));
  p_QuyUng             := ROUND_ANNUAL(NVL(PV_PHEPUNG,0));--DECODE(ROUND_ANNUAL(NVL(PV_PHEPUNG,0)),'.5','0.5',ROUND_ANNUAL(NVL(PV_PHEPUNG,0)));
  p_DaDangKyVaSuDung   := ROUND_ANNUAL(PV_CUR_USED);--DECODE(ROUND_ANNUAL(PV_CUR_USED),'.5','0.5',ROUND_ANNUAL(PV_CUR_USED));
  p_TongPhepThucCo     := ROUND_ANNUAL(PV_CUR_HAVE);--DECODE(ROUND_ANNUAL(PV_CUR_HAVE),'.5','0.5',ROUND_ANNUAL(PV_CUR_HAVE));
  p_SoNgayNghiBuConLai := ROUND_ANNUAL(PV_NB);--DECODE(ROUND_ANNUAL(PV_NB),'.5','0.5',ROUND_ANNUAL(PV_NB));



  --======================================================

  SELECT COUNT(ID) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
  IF v_temp < 1 THEN
    p_Message        := 'UserIsNotFound';
    p_ResponseStatus := -600;
    RETURN;
  ELSE
    BEGIN
      IF v_EmployeeID < 1 THEN
        p_Message        := 'UserNotConfig';
        p_ResponseStatus := -600;
        RETURN;
      ELSE
        BEGIN
          /*C? v? thi?u di?u ki?n l?c c?a nam, th?ng??*/
          SELECT R.NVALUE * 8 /*COALESCE(SUM(HOURCOUNT) , 0)*/
            INTO p_RegisterHour
            FROM AT_PORTAL_REG R
           INNER JOIN AT_SIGN S
              ON S.ID = R.SIGN_ID
           INNER JOIN AT_GSIGN G
              ON G.ID = S.AT_GSIGNID
           WHERE R.EMPLOYEE_ID = v_EmployeeID
             AND G.CODE = 'LEAVE';
        EXCEPTION
          WHEN OTHERS THEN
            p_RegisterHour := 0;
        END;
        BEGIN
          SELECT R.NVALUE * 8 /*COALESCE(SUM(HOURCOUNT) , 0)*/
            INTO p_OtHours
            FROM AT_PORTAL_REG R
           INNER JOIN AT_SIGN S
              ON S.ID = R.SIGN_ID
           INNER JOIN AT_GSIGN G
              ON G.ID = S.AT_GSIGNID
           WHERE R.EMPLOYEE_ID = v_EmployeeID
             AND G.CODE = 'OVERTIME';
        EXCEPTION
          WHEN OTHERS THEN
            p_OtHours := 0;
        END;
        BEGIN
          --d?m c?c dk? c?n ph? duy?t n?u user n?y l? qu?n l?
          SELECT (SELECT COUNT(*)
                    FROM PO_PLAN_REG_PROCESS_AT a
                   WHERE a.status_id = 2 -- ch? ph? duy?t
                     AND a.approvebyuser = v_UserName)
            INTO p_Pending
            FROM DUAL;
        EXCEPTION
          WHEN OTHERS THEN
            p_Pending := 0;
        END;
        p_Message        := 'IsSuccess';
        p_ResponseStatus := 1;
        RETURN;
      END IF;
    END;
  END IF;
  --=============================

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    p_Message        := 'DATABASEERROR';
    P_responsestatus := -99;
    Sys_write_exception_log(Sqlcode,
                            'API_Get_Dashboard',
                            Sqlerrm || '_' ||
                            Dbms_utility.format_error_backtrace,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null);
END;


  PROCEDURE API_Get_Employee
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_RowCount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1) ;
      v_Page NUMBER(5, 0) := NVL(p_Page, 1) ;
      v_PageSize NUMBER(5, 0) := NVL(p_PageSize, 10) ;
      v_EmployeeID NUMBER(19,0);
      v_temp NUMBER(19,0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_RowCount := 0;

      IF ( v_UserID = -1 ) THEN
        p_Message := 'UserIDIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257 )  )
         AND rownum = 1  ;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      SELECT COUNT(*) INTO p_RowCount
      FROM HU_Employee E
          LEFT JOIN HU_Employee_CV CV ON E.ID = CV.EMPLOYEE_ID
      WHERE E.DM_ID = v_EmployeeID;

      OPEN p_Cur FOR
          SELECT
              E.ID ID,
              E.FULLNAME_VN NAME,
              CV.Image AVATAR
          FROM HU_Employee E
              LEFT JOIN HU_Employee_CV CV ON E.ID = CV.EMPLOYEE_ID
          WHERE E.DM_ID = v_EmployeeID
          AND ROWNUM > (v_Page - 1) * v_PageSize AND ROWNUM > (v_Page * v_PageSize + 1);


      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);
  END;


  PROCEDURE API_Get_Family
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, -1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
      v_EmpID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(19, 0) := 0;
  BEGIN
      p_Rowcount := 0;
      If     v_EmployeeID<0 Then
        Begin
        Select Employee_Id
        Into v_EmployeeID
        From Se_User U
        Where U.Id=v_UserID;
        EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotEmployeeId';
              p_ResponseStatus := -600;
              RETURN;
        End;
      End If;
      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT ID INTO v_temp FROM SE_USER  WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT he.dm_id INTO v_EmpID FROM HU_EMPLOYEE he
          JOIN SE_USER su ON su.employee_id = he.id WHERE su.ID = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      IF p_EmployeeID != -1 THEN
          BEGIN
              SELECT ID INTO v_EpmViewID FROM HU_Employee WHERE ID = p_EmployeeID;
          EXCEPTION
              WHEN OTHERS THEN
                  p_Message := 'EmployeeNotFound';
                  p_ResponseStatus := -600;
                  RETURN;
          END;

          SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DM_ID = v_EmpID AND ID = v_EmployeeID;
          IF v_temp < 1 THEN
              p_Message := 'YouNotManagerEmployee';
              p_ResponseStatus := -600;
              RETURN;
          END IF;
      END IF;

      SELECT COUNT(*) INTO p_Rowcount
      FROM HU_Family W
          LEFT JOIN OT_OTHER_LIST O ON W.RELATION = O.Code
      WHERE W.EMPLOYEE_ID = CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmployeeID END;

      OPEN p_Cur FOR
      SELECT *
      FROM
      (
          SELECT   ROWNUM STT, ID, NAME, CARDID, ISDEDUCT,
              DOFB,
              DEDUCTFROM,
              DEDUCTTO,
              DEDUCTREG,
              REMARK, RELATION, ADDRESS,REDUCE_FROM,REDUCE_TO
          FROM
          (
              SELECT
                  W.ID ID,
                  W.Name_Family NAME,
                  W.ID_NO CARDID,
                  NVL(W.IS_DELETED, 0) ISDEDUCT,
                  --to_char(sysdate,'YYYY-MM-DD') DOFB,
                  to_char(ltrim((w.day || '/' || w.month || '/' || w.year),'/')) DOFB,
                  --TO_CHAR(W.BIRTH_DAY,'YYYY-MM-DD')  DOFB,
                  --to_char(to_date(w.year||'/'||w.month||'/'||w.day,'YYYY-MM-DD'),'YYYY-MM-DD') DOFB,
                  TO_CHAR(W.FROM_DATE,'YYYY-MM-DD')  DEDUCTFROM,
                  TO_CHAR(W.TO_DATE,'YYYY-MM-DD')  DEDUCTTO,
                  --TO_CHAR(W.REDUCE,'DD/MM/YYYY')  DEDUCTREG,
                  to_char(w.reduce) DEDUCTREG,
                  NVL(W.REMARK , ' ') REMARK,
                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NVL('' || O.NAME_VN || '', ' ') else NVL('' || O.Name_En || '', ' ') end RELATION,
                  NVL(W.PER_ADDRESS , ' ') ADDRESS,

                  TO_CHAR(W.REDUCE_FROM,'YYYY-MM-DD')  REDUCE_FROM,
                  TO_CHAR(W.REDUCE_TO,'YYYY-MM-DD')  REDUCE_TO

              FROM HU_Family W
                       LEFT JOIN OT_OTHER_LIST O ON W.RELATION = O.Code
              WHERE  nvl(w.is_deleted,0) <> 1 and
              W.EMPLOYEE_ID = CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmployeeID END
              ORDER BY W.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_Get_ListRegisterLeave
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_ManagerStatus IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
      v_Page NUMBER(19, 0) := NVL(p_Page, 1);
      v_PageSize NUMBER(19,0) := NVL(p_PageSize, 10);
      v_ManagerStatus NUMBER(19, 0) := NVL(p_ManagerStatus, 0);
      v_EmployeeID NUMBER(19, 0);
      v_temp NUMBER(1, 0) := 0;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Status = '-1' THEN
          p_Message := 'Type Register Is Empty';
          p_ResponseStatus := -600;
          RETURN;
      END IF;


      SELECT COUNT(ID) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      v_EmployeeID := NVL(v_EmployeeID, -1);
      IF v_EmployeeID < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT COUNT(*) INTO p_Rowcount
          FROM AT_PORTAL_REG R --LEFT JOIN AT_Symbol S ON R.ID_SIGN = S.ID
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
          WHERE R.Employee_Id = v_EmployeeID
          AND a.code IN ('LEAVE')
          AND R.Status IN (
                  SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                  FROM (
                      SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                      FROM DUAL
                        CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL));
      END;

      BEGIN
          OPEN p_Cur FOR
              SELECT 0 As ClientCheck,b. *
              FROM
              (
                  SELECT ROWNUM AS STT, ID, NAME, TotalHour, Remark, Status, ManagerID,
                  TIMECREATE,
                  LEAVEFROM,
                  LEAVETO
                  FROM
                  (
                      SELECT
                          R.ID AS ID,
                          '' || R.Nvalue || '' AS NAME,
                          NVL(r.TO_HOUR-R.FROM_HOUR , 0)*24 AS TotalHour,
                          NVL(R.NOTE , '') AS Remark,
                            --'ngh? vi?c v? vi?c ri?ng' as Remark,
                          R.Status AS Status,
                          NVL(he.dm_id , 0) AS ManagerID,
                          TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')  AS TIMECREATE,
                          TO_CHAR(R.WORKING_DAY,'DD/MM/YYYY')   AS LEAVEFROM,
                          TO_CHAR(R.WORKING_DAY,'DD/MM/YYYY')   AS LEAVETO
                      FROM AT_PORTAL_REG R  --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
                      inner join at_sign s on s.id=r.sign_id
                      inner join at_gsign           a on a.id =s.at_gsignid
                      JOIN HU_EMPLOYEE he ON he.ID  = R.Employee_Id
                      WHERE R.Employee_Id = v_EmployeeID
                      AND a.code IN ('LEAVE')
                      AND R.Status IN (
                          SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                          FROM (
                              SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                              FROM DUAL
                                CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
                      ORDER BY r.CREATED_DATE DESC
                  )
              )B WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);

          p_Message := 'IsSuccess';
          p_ResponseStatus := 1;
      END;

      ----DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
      p_Message := 'ServerError';
          p_ResponseStatus := -99;
  END;

  /*API_Get_ListRegisterLeaveManager*/
  PROCEDURE API_Get_ListRegisterLeaveMng
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_Type IN NUMBER,
      p_FromDate IN NVARCHAR2,
      p_ToDate IN NVARCHAR2,
      p_KeyEmployee IN NVARCHAR2,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID,-1);
      v_Status NVARCHAR2(20) := NVL(p_Status, '-1');
      v_Page NUMBER(10,0) := NVL(p_Page, 1) ;
      v_PageSize NUMBER(2,0) := NVL(p_PageSize, 10);
      v_Type NUMBER(10,0) := NVL(p_Type, -1);
      v_KeyEmployee NVARCHAR2(100);
      v_EmployeeID NUMBER(19,0);
      v_FD NUMBER(19,0);
      v_TD NUMBER(19,0);
      v_StautsID NUMBER(19,0);
      v_DefaultDate DATE := TO_DATE('01-01-1900', 'MM/DD/YYYY');
      v_FromDate DATE;
      v_ToDate DATE;
      v_temp NUMBER(10, 0) := 0;
  BEGIN
      p_Rowcount := 0;
      v_FromDate := TO_DATE( p_FromDate, 'MM/DD/YYYY');
      v_ToDate := TO_DATE( p_ToDate, 'MM/DD/YYYY');--NVL(p_ToDate, v_DefaultDate);
      v_KeyEmployee := '%' || NVL(p_KeyEmployee, ' ') || '%' ;
    SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDDHH24MISS')), TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDDHH24MISS')) INTO v_FD,v_TD FROM dual;

      IF v_Status = '-1' THEN
          p_Message := 'StatusIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
           SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
         ;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      BEGIN
          SELECT COUNT(*) INTO p_Rowcount
          FROM AT_PORTAL_REG R
             JOIN HU_Employee E   ON R.Employee_Id = E.ID
            -- JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP
             inner join at_sign s on s.id=r.sign_id
             inner join at_gsign           a on a.id =s.at_gsignid
            WHERE r.employee_id = v_EmployeeID
            AND a.code IN ('LEAVE')
            AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR R.Employee_Id LIKE v_KeyEmployee )
           -- AND TO_NUMBER(TO_CHAR(R.Working_Day, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
            AND TO_NUMBER(TO_CHAR(R.Working_Day, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD;


          OPEN p_Cur FOR
          SELECT *
          FROM
          (
              SELECT ROWNUM STT, ID, LeaveFrom, LeaveTo, FromHour, ToHour, SymbolName, TotalHour, Remark, Status, EmployeeName, CreateTime
              FROM
              (
                  SELECT
                      R.ID ID,
                      TO_CHAR(R.From_Hour, 'YYYY-MM-DD')  LeaveFrom,
                      TO_CHAR(R.To_Hour, 'YYYY-MM-DD')  LeaveTo,
                      R.FROM_HOUR  FromHour,
                      R.TO_HOUR   ToHour,
                      '' || a.code || '' SymbolName,
                      NVL(R.TO_HOUR-r.from_hour , 0)*24 TotalHour,
                      NVL(R.NOTE, ' ') Remark,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')   CreateTime,
                        ApiType.Name TypeName,
                        R.Note Note
                  FROM AT_PORTAL_REG R
                  inner join at_sign s on s.id=r.sign_id
                  inner join at_gsign           a on a.id =s.at_gsignid
                         --JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP
                         JOIN HU_Employee E   ON R.Employee_Id = E.ID
                           LEFT JOIN (SELECT
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Sign_Id = ApiType.Id
                  WHERE r.employee_id = v_EmployeeID
                  AND a.code IN ('LEAVE')
                          AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR R.Employee_Id LIKE v_KeyEmployee )
                          AND TO_NUMBER(TO_CHAR(R.Working_Day, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
                      ORDER BY R.ID DESC
              )
          )
          WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
      END;

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'ServerError';
          p_ResponseStatus := -99;
  END;


  /*API_Get_ListRegisterWLEOMng*/
  PROCEDURE API_Get_ListRegisterWLEOMng
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_Type IN NUMBER,
      p_FromDate IN NVARCHAR2,
      p_ToDate IN NVARCHAR2,
      p_KeyEmployee IN NVARCHAR2,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID,-1);
      v_Status NVARCHAR2(20) := NVL(p_Status, '-1');
      v_Page NUMBER(10,0) := NVL(p_Page, 1) ;
      v_PageSize NUMBER(2,0) := NVL(p_PageSize, 10);
      v_Type NUMBER(10,0) := NVL(p_Type, -1);
      v_KeyEmployee NVARCHAR2(100);
      v_EmployeeID NUMBER(19,0);
      v_FD NUMBER(19,0);
      v_TD NUMBER(19,0);
      v_StautsID NUMBER(19,0);
      v_DefaultDate DATE := TO_DATE('01-01-1900', 'MM/DD/YYYY');
      v_FromDate DATE;
      v_ToDate DATE;
      v_temp NUMBER(10, 0) := 0;
  BEGIN
      p_Rowcount := 0;
      v_FromDate := TO_DATE( p_FromDate, 'MM/DD/YYYY');
      v_ToDate := TO_DATE( p_ToDate, 'MM/DD/YYYY');--NVL(p_ToDate, v_DefaultDate);
      v_KeyEmployee := '%' || NVL(p_KeyEmployee, ' ') || '%' ;
      --v_FD := BOS.FN_ConvertDateToNumber(v_FromDate);
      --v_TD := BOS.FN_ConvertDateToNumber(v_ToDate);
    SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDDHH24MISS')), TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDDHH24MISS')) INTO v_FD,v_TD FROM dual;

      IF v_Status = '-1' THEN
          p_Message := 'StatusIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
         ;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      BEGIN
          SELECT COUNT(*) INTO p_Rowcount
          FROM AT_PORTAL_REG R
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
            JOIN HU_Employee E   ON  r.employee_id = E.ID
        --    JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP
            WHERE r.employee_id = v_EmployeeID
            AND a.code IN ('WLEO')

            AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR r.employee_id LIKE v_KeyEmployee )
            AND TO_NUMBER(TO_CHAR(R.From_Hour, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
            AND TO_NUMBER(TO_CHAR(R.To_Hour, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD;


          OPEN p_Cur FOR
          SELECT *
          FROM
          (
              SELECT ROWNUM STT, ID, LeaveFrom, LeaveTo, FromHour, ToHour, SymbolName, TotalHour, Remark, Status, EmployeeName, CreateTime, Note, TypeName
              FROM
              (
                  SELECT
                      R.ID ID,
                      TO_CHAR(R.From_Hour, 'DD/MM/YYYY')  LeaveFrom,
                      TO_CHAR(R.To_Hour, 'DD/MM/YYYY')  LeaveTo,
                      R.FROM_HOUR  FromHour,
                      R.TO_HOUR   ToHour,
                      '' || a.code || '' SymbolName,
                      NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour,
                      NVL(R.Note, ' ') Remark,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')   CreateTime,
                        NVL(R.Note, ' ') Note,
                        NVL(apiType.NAME, ' ') TypeName
                  FROM AT_PORTAL_REG R
                  inner join at_sign s on s.id=r.sign_id
                  inner join at_gsign           a on a.id =s.at_gsignid
                         --JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP
                         JOIN HU_Employee E   ON r.employee_id = E.ID
                           LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME
                                    FROM   AT_TIME_MANUAL atm
                                    WHERE   ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.sign_id = apiType.Id
                  WHERE r.employee_id = v_EmployeeID
                  AND a.code IN ('WLEO')

                          AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR r.employee_id LIKE v_KeyEmployee )
                          AND TO_NUMBER(TO_CHAR(R.From_Hour, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
                AND TO_NUMBER(TO_CHAR(R.To_Hour, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD
                      ORDER BY R.ID DESC
              )
          )
          WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
      END;

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'ServerError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_Get_ListRegisterWLEO
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_ManagerStatus IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
      v_Page NUMBER(19, 0) := NVL(p_Page, 1);
      v_PageSize NUMBER(19,0) := NVL(p_PageSize, 10);
      v_ManagerStatus NUMBER(19, 0) := NVL(p_ManagerStatus, 0);
      v_EmployeeID NUMBER(19, 0);
      v_temp NUMBER(1, 0) := 0;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Status = '-1' THEN
          p_Message := 'Type Register Is Empty';
          p_ResponseStatus := -600;
          RETURN;
      END IF;


      SELECT COUNT(ID) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1 ;

        v_EmployeeID := NVL(v_EmployeeID, -1);
      IF v_EmployeeID < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT COUNT(*) INTO p_Rowcount
          FROM AT_PORTAL_REG R --LEFT JOIN AT_Symbol S ON R.ID_SIGN = S.ID
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
          WHERE r.employee_id = v_EmployeeID
          AND a.code IN ('WLEO')
          AND R.Status IN (
                  SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                  FROM (
                      SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                      FROM DUAL
                        CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL));
      END;

      BEGIN
          OPEN p_Cur FOR
              SELECT *
              FROM
              (
                  SELECT ROWNUM AS STT, ID, NAME, TotalHour, Remark, Status, ManagerID,
                  TIMECREATE,
                  LEAVEFROM,
                  LEAVETO
                  FROM
                  (
                      SELECT
                          R.ID AS ID,
                          '' ||a.code || '' AS NAME,
                          NVL(R.To_Hour-r.from_hour , 0)*24 AS TotalHour,
                          NVL(R.NOTE , '') AS Remark,
                          R.Status AS Status,
                          NVL(he.dm_id , 0) AS ManagerID,
                          TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')  AS TIMECREATE,
                          TO_CHAR(R.From_Hour,'DD/MM/YYYY')   AS LEAVEFROM,
                          TO_CHAR(R.To_Hour,'DD/MM/YYYY')   AS LEAVETO
                      FROM AT_PORTAL_REG R  --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
                      inner join at_sign s on s.id=r.sign_id
                      inner join at_gsign           a on a.id =s.at_gsignid
                      JOIN HU_EMPLOYEE he ON he.ID  = r.employee_id
                      WHERE r.employee_id = v_EmployeeID
                      AND a.code in ('WLEO')
                      AND R.Status IN (
                          SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                          FROM (
                              SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                              FROM DUAL
                                CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
                      ORDER BY TIMECREATE DESC
                  )
              ) WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);

          p_Message := 'IsSuccess';
          p_ResponseStatus := 1;
      END;

      ----DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
      p_Message := 'ServerError';
          p_ResponseStatus := -99;
  END;


  /*API_Get_ListRegisterOT*/
  PROCEDURE API_Get_ListRegisterOT
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_ManagerStatus IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
      v_ManagerStatus NUMBER(4,0) := NVL(p_ManagerStatus, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, 1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, 10);
      v_EmployeeID NUMBER(19,0);
      v_StautsID NUMBER(19,0);
      v_temp NUMBER(1, 0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_Rowcount := 0;

      IF v_Status = '-1' THEN
          p_Message := u'StatusIsNotNull' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      IF v_UserID = -1 THEN
          p_Message := u'IsUserIDNull' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      v_temp := 0;
      SELECT COUNT(*) INTO v_temp FROM HU_EMPLOYEE he JOIN SE_USER su ON su.EMPLOYEE_CODE  = he.EMPLOYEE_CODE WHERE su.ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserNotConfig' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
        ;

      SELECT COUNT(*) INTO p_Rowcount
      FROM
      (
          SELECT  R.ID ID
          FROM AT_PORTAL_REG R
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
            JOIN HU_EMPLOYEE he ON he.id = r.employee_id
          WHERE r.employee_id = (CASE WHEN v_ManagerStatus = 0 THEN v_EmployeeID ELSE r.employee_id END)
          AND a.code  IN ('OVERTIME')
                        AND R.Status IN (
                          SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                          FROM (
                              SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                              FROM DUAL
                                CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
      );

      OPEN p_Cur FOR
      SELECT 0 As ClientCheck,B. *
      FROM
      (
          SELECT ROWNUM AS STT, WORKINGDAY, FROMHOUR, TOHOUR, TOTALHOUR, REMARK, IsCompensatory, Status, ManagerID, TIMECREATE
          FROM
          (
              SELECT
                  R.ID ID,
                  TO_CHAR(R.REGDATE,'DD/MM/YYYY')  WORKINGDAY,
                  TO_CHAR(R.FROM_HOUR,'DD/MM/YYYY HH24:MI:SS')   FromHour,
                  TO_CHAR(R.TO_HOUR,'DD/MM/YYYY HH24:MI:SS')   ToHour,
                  NVL(R.To_Hour-r.from_hour, 0)*24 TOTALHOUR,
                  R.NOTE REMARK,
                  0 IsCompensatory,
                  R.Status Status,
                  NVL(he.dm_id,0) ManagerID,
                  TO_CHAR(R.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS')  TIMECREATE
              FROM AT_PORTAL_REG R
              inner join at_sign s on s.id=r.sign_id
              inner join at_gsign           a on a.id =s.at_gsignid
              JOIN HU_EMPLOYEE he ON he.id = r.employee_id
              WHERE r.employee_id = (CASE WHEN v_ManagerStatus = 0 THEN v_EmployeeID ELSE r.employee_id END)
               AND a.code  IN ('OVERTIME')
                        AND R.Status IN (
                          SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                          FROM (
                              SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                              FROM DUAL
                                CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
              ORDER BY R.ID DESC
          )
      )B WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);
      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      ----DBMS_SQL.RETURN_RESULT(v_cursor);

  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'Databaserror' ;
          p_ResponseStatus := -99 ;
  END;


  /*Manager truy v?n l?y danh s?ch dang k? l?m th?m */
  PROCEDURE API_Get_ListRegisterOTMng
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Status IN NVARCHAR2,
      p_Type IN NUMBER,
      p_FromDate IN NVARCHAR2,
      p_ToDate IN NVARCHAR2,
      p_KeyEmployee IN NVARCHAR2,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
    p_Cur OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
      v_Type NUMBER(19,0) := NVL(p_Type, -1);
      v_FromDate DATE;
      v_ToDate DATE;
      v_KeyEmployee NVARCHAR2(500) := '%' || NVL(p_KeyEmployee, '') || '%';
      v_Page NUMBER(10,0) := NVL(p_Page, 1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, 10);
      v_EmployeeID NUMBER(19,0);
      v_StautsID NUMBER(19,0);
      v_FD NUMBER(19,0);
      v_TD NUMBER(19,0);
      v_DefaultDate DATE := TO_DATE('01/01/1900', 'DD/MM/YYYY');
      v_temp NUMBER(1, 0) := 0;
  BEGIN
      p_Rowcount := 0;
      v_FromDate := TO_DATE(p_FromDate,  'MM/DD/YYYY');
      v_ToDate := TO_DATE(p_ToDate,  'MM/DD/YYYY');--NVL(p_ToDate, v_DefaultDate);
      --v_FD := BOS.FN_ConvertDateToNumber(v_FromDate);
      --v_TD := BOS.FN_ConvertDateToNumber(v_ToDate);
    SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDDHH24MISS')), TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDDHH24MISS')) INTO v_FD,v_TD FROM dual;


      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Status = '-1' THEN
          p_Message := 'StatusIsNotNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE su.ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
        ;
      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

       -- ??m s? d?ng
      SELECT COUNT(*) INTO p_Rowcount
      FROM
       AT_PORTAL_REG r
       inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
              WHERE
              a.code  IN ('OVERTIME')
              AND r.STATUS IN (
                      SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                      FROM (
                          SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                          FROM DUAL
                            CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
                  AND r.employee_id = v_EmployeeID
                  AND ( UPPER(e.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR r.employee_id LIKE v_KeyEmployee )
                  AND ( r.regdate BETWEEN v_FromDate AND v_ToDate )
                  ;

      --DBMS_OUTPUT.PUT_LINE(p_FromDate || ' - ' || v_FD || ' ,' || v_TD);
      OPEN p_Cur FOR
      SELECT *
      FROM
      (
          SELECT ROWNUM AS STT, ID, WorkingDay, FromHour, ToHour, TotalHour, Remark, Status, ManagerID, EmployeeName, CREATEDATE, Note, TypeName
          FROM
          (
              SELECT
                  r.ID ID, -- t?m th?i l?y theo ID dang k? th?ng nh?t l?y 1 ID dang k?
                  TO_CHAR( r.regdate,'DD/MM/YYYY') WorkingDay,
                  r.FROM_HOUR FromHour,
                  r.to_hour ToHour,
                  (r.to_hour-r.from_hour)*24 TotalHour,
                  r.note Remark,
                  r.STATUS  Status,
                  r.employee_id ManagerID,
                  E.FULLNAME_VN EmployeeName,
                  TO_CHAR( r.CREATED_DATE,'DD/MM/YYYY HH24:MI:SS') CREATEDATE,
                   r.Note Note,
                    a.name_vn TypeName
              FROM AT_PORTAL_REG r
          Inner  JOIN HU_Employee E   ON r.employee_id = E.ID
          inner join at_sign s on s.id=r.sign_id
          inner join at_gsign           a on a.id =s.at_gsignid
                WHERE a.code  = 'OVERTIME'
                  AND r.employee_id = v_EmployeeID
                  AND ( UPPER(e.fullname_vn) LIKE UPPER(v_KeyEmployee) OR r.employee_id LIKE v_KeyEmployee )
                  AND (r.REGDATE BETWEEN v_FromDate AND v_ToDate )
          )
          ORDER BY ID DESC
      ) WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;




  /*API_Get_Period*/
  PROCEDURE API_Get_Period
    (p_Language       IN nvarchar2,
        p_Year IN NUMBER,
        p_Page IN NUMBER,
        p_PageSize IN NUMBER,
        p_cur out CURSOR_TYPE,
        p_Rowcount OUT NUMBER,
        p_CurrentPeriodId OUT NUMBER,
        p_Message OUT NVARCHAR2,
        p_ResponseStatus OUT NUMBER
    )
    AS
        v_Year NUMBER(4,0) := NVL(p_Year, 0);
        --v_Page NUMBER(4,0) := NVL(p_Page, 1);
        --v_PageSize NUMBER(4,0) := NVL(p_PageSize, 10);
        --v_cursor SYS_REFCURSOR;
    BEGIN
        p_Rowcount := 0;

        SELECT COUNT(*) INTO p_Rowcount
        FROM AT_Period W
        WHERE  W.Actflg = 'A'
                AND W.Year = (CASE WHEN v_Year = 0 THEN W.Year ELSE v_Year END);

        OPEN p_cur FOR
            SELECT *
            FROM
            (
                    SELECT
                        ROWNUM AS STT, ID, Name, Year,
                        TO_CHAR(StartDate,'DD/MM/YYYY') StartDate,
                        TO_CHAR(EndDate,'DD/MM/YYYY') EndDate,
                        TO_CHAR(PayDate,'DD/MM/YYYY HH24:MI:SS') PayDate
                    FROM
                    (
                        SELECT
                            W.Id AS ID,
                            W.Period_Name AS Name,
                            NVL(W.Year, 1900) AS Year,
                            w.start_date AS StartDate,
                            w.end_date AS EndDate,
                            w.end_date AS PayDate
                        FROM AT_Period W
                        WHERE  W.Actflg = 'A'
                                AND W.Year = (CASE WHEN v_Year = 0 THEN W.Year ELSE v_Year END)
                        ORDER BY W.Id DESC
                    )
            ) WHERE STT > (p_Page - 1)* p_PageSize AND STT < (p_Page * p_PageSize + 1)
            order by stt asc;

            SELECT ID into p_CurrentPeriodId
            FROM AT_Period W
            WHERE W.Actflg = 'A'
            AND W.Year = (SELECT EXTRACT(year FROM sysdate) FROM DUAL)
            AND w.month = (SELECT EXTRACT(month FROM sysdate) FROM DUAL);

          p_Message := 'IsSuccess';
          p_ResponseStatus := 1 ;
          --DBMS_SQL.RETURN_RESULT(v_cursor);
    EXCEPTION
        WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99 ;
    END;

     /*Manager reject record registerleave */
     PROCEDURE API_CancelRegisterLeave
    (p_Language       IN nvarchar2,
        p_UserID IN NUMBER,
        p_RegisterID IN NUMBER,
        p_Comment IN NVARCHAR2,
        p_cur out CURSOR_TYPE,
        p_Message OUT NVARCHAR2,
        p_ResponseStatus OUT NUMBER
    )
    AS
        v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
        v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
        v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
        v_EmployeeID NUMBER(19,0);
        v_UserRegisterID NUMBER(19,0);
        v_StatusNow NUMBER(19,0);
        v_ManagerID NUMBER(19,0);
        v_I NUMBER(19,0);
        --v_cursor SYS_REFCURSOR;
        v_temp NUMBER(19, 0) := 0;
    BEGIN
        p_ResponseStatus := 1;

        IF v_UserID = -1 THEN
            p_Message := 'UserIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        IF v_RegisterID = -1 THEN
            p_Message := 'RegisterIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;


        IF p_Message = '-1' THEN
            p_Message := 'CommentIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
        IF v_temp < 1 THEN
            p_Message := 'UserIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        BEGIN
            SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
        EXCEPTION
            WHEN OTHERS THEN
                p_Message := 'UserNotConfig';
                p_ResponseStatus := -600;
                RETURN;
        END;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg WHERE Id = v_RegisterID;
        IF v_temp < 1 THEN
            p_Message := 'RegisterIDIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg r --JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP = r.ID_REGGROUP
        WHERE r.employee_id = v_EmployeeID ;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependent:' || v_EmployeeID;
            p_ResponseStatus := -600;
            RETURN;
        END IF;--infomation approve employee??;

        SELECT r.sign_id, r.status INTO v_UserRegisterID, v_StatusNow
        FROM at_portal_reg r
        WHERE Id = v_RegisterID;

       /* -- c?n check l?i
        SELECT COUNT(*) INTO v_temp FROM HU_Employee  e
        WHERE e.direct_manager = v_EmployeeID
            AND Id = v_UserRegisterID;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependentEmployee';
            p_ResponseStatus := -600;
            RETURN;
        END IF;
    */

        IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
            BEGIN
                UPDATE at_portal_reg r SET r.status = 3, r.note = v_Comment
                WHERE Id = v_RegisterID;

                 UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 3--, ManagerComment = v_Comment
              WHERE ID_EMPLOYEE  = v_EmployeeID AND ID_REGGROUP in
              (select ID_REGGROUP from AT_PORTAL_REG where Id = v_RegisterID);

                SELECT r.employee_id , r.Id INTO v_ManagerID, v_I
                FROM at_portal_reg r --JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP  = r.ID_REGGROUP
                WHERE r.Id = v_RegisterID
                AND r.employee_id  = v_EmployeeID
                AND rownum = 1
                ;

               /*??y luu notify*/
                /*API_SaveNotification('',v_EmployeeID,v_ManagerID,  3, v_I, 'Cancel Request Register Leave',0,0, p_Message, p_ResponseStatus);
                COMMIT;*/
                p_Message := 'IsSuccess';

                OPEN p_cur FOR
                    SELECT
                        1 STT,
                        R.Id ID,
                        TO_CHAR(r.from_hour , 'DD/MM/YYYY') LeaveFrom,
                        TO_CHAR(r.to_hour, 'DD/MM/YYYY') LeaveTo,
                        r.from_hour FromHour,
                        r.to_hour ToHour,
                        '' SymbolName,
                        NVL(R.To_Hour-r.from_hour, 0)*24 TotalHour,
                        NVL(R.Note, ' ') Remark,
                        R.Status Status,
                        E.Fullname_Vn EmployeeName,
                         TO_CHAR(r.created_date, 'DD/MM/YYYY HH24:MI:SS') CreateTime,
                         ApiType.Name TypeName,
                         R.Note Note
                    FROM at_portal_reg R
                         --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
                         LEFT JOIN HU_Employee E   ON r.employee_id = E.Id
                         LEFT JOIN (SELECT
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Sign_Id = ApiType.Id
                    WHERE R.Id = v_RegisterID;

               -- DBMS_SQL.RETURN_RESULT(v_CURSOR);
            EXCEPTION
                WHEN OTHERS THEN
                    p_Message := 'DatabaseError';
                    p_ResponseStatus := -99;
                    RETURN;
            END;
        ELSE
            p_Message := 'RegisterIsCancel';
            p_ResponseStatus := -600;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE || ', SQLERRM: ' || SQLERRM);
            p_Message := 'IsError-DatabaseError';
            p_ResponseStatus := -99;
    END;

    PROCEDURE API_CancelRegisterWLEO
    (p_Language       IN nvarchar2,
        p_UserID IN NUMBER,
        p_RegisterID IN NUMBER,
        p_Comment IN NVARCHAR2,
        p_cur out CURSOR_TYPE,
        p_Message OUT NVARCHAR2,
        p_ResponseStatus OUT NUMBER
    )
    AS
        v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
        v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
        v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
        v_EmployeeID NUMBER(19,0);
        v_UserRegisterID NUMBER(19,0);
        v_StatusNow NUMBER(19,0);
        v_ManagerID NUMBER(19,0);
        v_I NUMBER(19,0);
        --v_cursor SYS_REFCURSOR;
        v_temp NUMBER(19, 0) := 0;
    BEGIN
        p_ResponseStatus := 1;

        IF v_UserID = -1 THEN
            p_Message := 'UserIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        IF v_RegisterID = -1 THEN
            p_Message := 'RegisterIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;


        IF p_Message = '-1' THEN
            p_Message := 'CommentIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
        IF v_temp < 1 THEN
            p_Message := 'UserIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        BEGIN
            SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
        EXCEPTION
            WHEN OTHERS THEN
                p_Message := 'UserNotConfig';
                p_ResponseStatus := -600;
                RETURN;
        END;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg WHERE Id = v_RegisterID;
        IF v_temp < 1 THEN
            p_Message := 'RegisterIDIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg r --JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP = r.ID_REGGROUP
        WHERE r.employee_id = v_EmployeeID ;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependent:' || v_EmployeeID;
            p_ResponseStatus := -600;
            RETURN;
        END IF;--infomation approve employee??;

        SELECT r.employee_id , r.status INTO v_UserRegisterID, v_StatusNow
        FROM at_portal_reg r
        WHERE Id = v_RegisterID;

       /* -- c?n check l?i
        SELECT COUNT(*) INTO v_temp FROM HU_Employee  e
        WHERE e.direct_manager = v_EmployeeID
            AND Id = v_UserRegisterID;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependentEmployee';
            p_ResponseStatus := -600;
            RETURN;
        END IF;
    */

        IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
            BEGIN
                UPDATE at_portal_reg r SET r.status = 3, r.Note = v_Comment
                WHERE Id = v_RegisterID;

                 UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 3--, ManagerComment = v_Comment
              WHERE ID_EMPLOYEE  = v_EmployeeID AND ID_REGGROUP in
              (select ID_REGGROUP from AT_PORTAL_REG where Id = v_RegisterID);

                SELECT   r.employee_id , r.Id INTO v_ManagerID, v_I
                FROM   at_portal_reg r
                --JOIN   AT_PORTAL_APP apa ON apa.ID_REGGROUP  = r.ID_REGGROUP
                WHERE   r.Id = v_RegisterID
                AND   r.employee_id  = v_EmployeeID
                AND   rownum = 1
                ;

               /*??y luu notify*/
                /*API_SaveNotification('',v_UserRegisterID,v_ManagerID,  3, v_I, 'Cancel Request Register WLEO',0, 0,p_Message, p_ResponseStatus);
                COMMIT;*/
                p_Message := 'IsSuccess';

                OPEN p_cur FOR
                    SELECT
                        1 STT,
                        R.Id ID,
                        TO_CHAR(r.from_hour , 'DD/MM/YYYY') LeaveFrom,
                        TO_CHAR(r.to_hour, 'DD/MM/YYYY') LeaveTo,
                        r.from_hour FromHour,
                        r.to_hour ToHour,
                        '' SymbolName,
                        NVL(R.To_Hour-r.from_hour, 0)*24 TotalHour,
                        NVL(R.Note, ' ') Remark,
                        R.Status Status,
                        E.Fullname_Vn EmployeeName,
                         TO_CHAR(r.created_date, 'DD/MM/YYYY HH24:MI:SS') CreateTime,
                        NVL(R.Note, ' ') Note,
                        NVL(apiType.NAME, ' ') TypeName
                    FROM at_portal_reg R
                         --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
                         LEFT JOIN HU_Employee E   ON r.employee_id = E.Id LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME
                                    FROM   AT_TIME_MANUAL atm
                                    WHERE   ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.sign_id = apiType.Id
                    WHERE R.Id = v_RegisterID;

               -- DBMS_SQL.RETURN_RESULT(v_CURSOR);
            EXCEPTION
                WHEN OTHERS THEN
                    p_Message := 'DatabaseError';
                    p_ResponseStatus := -99;
                    RETURN;
            END;
        ELSE
            p_Message := 'RegisterIsCancel';
            p_ResponseStatus := -600;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE || ', SQLERRM: ' || SQLERRM);
            p_Message := 'IsError-DatabaseError';
            p_ResponseStatus := -99;
    END;

     PROCEDURE API_Type_WLEO(p_Language       IN nvarchar2,
                           P_CUR            OUT CURSOR_TYPE,
                           p_Message        OUT NVARCHAR2,
                           p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR
        SELECT  ID, atm.CODE , atm.NAME
        FROM   AT_TIME_MANUAL atm
        WHERE   ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' );

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'IsError';
            p_ResponseStatus := 0;
    END;
  EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;


     PROCEDURE API_Type_Leave(p_Language       IN nvarchar2,
                               P_CUR            OUT CURSOR_TYPE,
                               p_Message        OUT NVARCHAR2,
                               p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR
        SELECT S.CODE ID, S.CODE , S.NAME,G.CODE GCODE
        FROM AT_SIGN S
        INNER JOIN AT_GSIGN G ON G.ID=S.AT_GSIGNID
       WHERE G.CODE='LEAVE'
       AND NVL(S.IS_DELETED,0)=0 AND NVL(S.STATUS,0) <>0
       ORDER BY S.ORDNO;
        /*SELECT
            p.ID ID,
            p.CODE CODE,
            p.MORNING_ID MORNING_ID,
            p.AFTERNOON_ID AFTERNOON_ID,
            '[' || p.CODE || '] ' || p.NAME MANUALLEAVE
        FROM AT_TIME_MANUAL p
        LEFT JOIN AT_FML F
            ON F.ID = p.MORNING_ID
        LEFT JOIN AT_FML F2
            ON F2.ID = p.AFTERNOON_ID
        WHERE p.ACTFLG = 'A'
        --AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
        AND (p.MORNING_ID = p.AFTERNOON_ID)
        ORDER BY p.NAME DESC;*/

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'IsError';
            p_ResponseStatus := 0;
    END;
  EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;


    PROCEDURE API_Time_Leave(p_Language       IN nvarchar2,
                               P_CUR            OUT CURSOR_TYPE,
                               p_Message        OUT NVARCHAR2,
                               p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR

       select
       o.code id,
       case when p_Language = 'vi-VN' then o.name_vn else o.name_en end as NAME
       /*o.code value,
       o.name_vn label*/
       from ot_other_list o where o.type_code = 'TYPE_LEAVE' AND O.CODE <> 'TYPE_LEAVE3';

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'IsError';
            p_ResponseStatus := 0;
    END;
  EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;

     PROCEDURE API_Type_OT(p_Language       IN nvarchar2,
                               P_CUR            OUT CURSOR_TYPE,
                               p_Message        OUT NVARCHAR2,
                               p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR
        select a.code,a.name
        from at_sign a
        inner join at_gsign g on g.id=a.at_gsignid
        where g.code='OVERTIME' And A.Status=1;

    /*SELECT  ID,  NAME_VN  AS NAME
    FROM   OT_OTHER_LIST ool
    WHERE   TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
    AND   ool.status  = '1' ;*/

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'IsError';
            p_ResponseStatus := 0;
    END;
  EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;


     PROCEDURE API_GET_TIMESHEET(p_Language       IN nvarchar2,p_UserID IN NUMBER,
                                                    p_Period IN NUMBER,
                                                    P_CUR            OUT CURSOR_TYPE,
                                                    p_DayWork OUT NUMBER,
                                                    p_DayNotWork OUT NUMBER,
                                                    p_RowCount OUT NUMBER,
                                                    p_Message OUT NVARCHAR2,
                                                    p_ResponseStatus OUT  NUMBER)as
  v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
    v_Period NUMBER(19, 0) := NVL(p_Period, -1);
    v_EmployeeID NUMBER(19,0);
    v_DayWork NUMBER(19,0) := 0;
    v_DayNotWork NUMBER(10,0) := 0;
    v_STARTDATE date;
    v_temp NUMBER(19, 0) := 0;
  begin
    p_ResponseStatus := 1;
    p_RowCount := 0;

    IF v_UserID  = -1 THEN
        p_Message := 'UserIDIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    IF v_Period = -1 THEN
        p_Message := 'PeriodIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
    IF v_temp < 1 THEN
        p_Message := 'UserIsNotFound';
        p_ResponseStatus := -600;
        RETURN;
    END IF;

   BEGIN
     SELECT Emp.id
       INTO v_EmployeeID
       FROM se_user e
       left join hu_employee emp
         on emp.employee_code = e.employee_code
      WHERE e.id = v_UserID;
   EXCEPTION
     WHEN OTHERS THEN
       p_Message        := 'UserNotConfig';
       p_ResponseStatus := -600;
       RETURN;
   END;

    BEGIN
        SELECT p.start_date INTO v_STARTDATE FROM AT_PERIOD p WHERE Id = p_Period;
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'PeriodIDNotConfig';
            p_ResponseStatus := -600;
            RETURN;
    END;
    SELECT COUNT(*) INTO p_DayWork
    FROM at_time_timesheet_daily AT
    WHERE SUBSTR(AT.WORKINGDAY, 0, 6) = SUBSTR(v_STARTDATE, 0, 6)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE NOT IN ('OFF');
    SELECT COUNT(*) INTO p_DayNotWork
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE IN ('OFF');

    SELECT COUNT(*) INTO p_RowCount
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID;
    OPEN P_CUR FOR
        SELECT
            AT.Id ID,
            at.workingday DATES,
            CASE to_char(at.workingday,'d')
                WHEN '1' THEN u'Ch\1ee7 nh\1eadt'
                WHEN '2' THEN u'Th\1ee9 2'
                WHEN '3' THEN u'Th\1ee9 3'
                WHEN '4' THEN u'Th\1ee9 4'
                WHEN '5' THEN u'Th\1ee9 5'
                WHEN '6' THEN u'Th\1ee9 6'
                ELSE u'Th\1ee9 7' END DAY,
            AT.Shift_Code WORKINGCODE
        FROM at_time_timesheet_daily AT
        WHERE --trunc(at.workingday) = trunc(v_STARTDATE)
          TO_CHAR(AT.WORKINGDAY, 'YYYYMM' )  =   TO_CHAR(v_STARTDATE, 'YYYYMM' )
        AND AT.Employee_Id = v_EmployeeID;

    p_Message := 'IsSuccess';
    p_ResponseStatus := 1;
   -- DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
        p_Message := 'Database Error';
        p_ResponseStatus := -99;
  end;


   PROCEDURE API_GET_TIMESHEET_TOTAL(p_Language       IN nvarchar2,p_UserID IN NUMBER,
                                                    p_Period IN NUMBER,
                                                    P_CUR            OUT CURSOR_TYPE,
                                                    p_DayWork OUT NUMBER,
                                                    p_DayNotWork OUT NUMBER,
                                                    p_RowCount OUT NUMBER,
                                                    p_Message OUT NVARCHAR2,
                                                    p_ResponseStatus OUT  NUMBER
                                                    )
      as
  v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
    v_Period NUMBER(19, 0) := NVL(p_Period, -1);
    v_EmployeeID NUMBER(19,0);
    v_DayWork NUMBER(19,0) := 0;
    v_DayNotWork NUMBER(10,0) := 0;
    v_STARTDATE date;
    v_temp NUMBER(19, 0) := 0;
  begin
    p_ResponseStatus := 1;
    p_RowCount := 0;

    IF v_UserID  = -1 THEN
        p_Message := 'UserIDIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    IF v_Period = -1 THEN
        p_Message := 'PeriodIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
    IF v_temp < 1 THEN
        p_Message := 'UserIsNotFound';
        p_ResponseStatus := -600;
        RETURN;
    END IF;

   BEGIN
     SELECT Emp.id
       INTO v_EmployeeID
       FROM se_user e
       left join hu_employee emp
         on emp.employee_code = e.employee_code
      WHERE e.id = v_UserID;
   EXCEPTION
     WHEN OTHERS THEN
       p_Message        := 'UserNotConfig';
       p_ResponseStatus := -600;
       RETURN;
   END;

    BEGIN
        SELECT p.start_date INTO v_STARTDATE FROM AT_PERIOD p WHERE Id = p_Period;
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'PeriodIDNotConfig';
            p_ResponseStatus := -600;
            RETURN;
    END;
    SELECT COUNT(*) INTO p_DayWork
    FROM at_time_timesheet_daily AT
    WHERE SUBSTR(AT.WORKINGDAY, 0, 6) = SUBSTR(v_STARTDATE, 0, 6)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE NOT IN ('OFF');
    SELECT COUNT(*) INTO p_DayNotWork
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE IN ('OFF');

    SELECT COUNT(*) INTO p_RowCount
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID;
    OPEN P_CUR FOR
        SELECT
               AT.ID,
               he.EMPLOYEE_CODE ,
               he.FULLNAME_VN ,
               AT.EMPLOYEE_ID ,
               ht.NAME_VN  TITLE_NAME,
               ho.NAME_VN  ORG_NAME,
               ho.ID  ORG_ID,
               ap.ID  PERIOD_ID ,
               NVL(ap.PERIOD_STANDARD,0) PERIOD_STANDARD ,
               hsr.NAME  STAFF_RANK_NAME,
               NVL(at.WORKING_X,0) WORKING_X ,
                NVL(at.WORKING_F,0) WORKING_F,
                NVL(at.WORKING_E,0) WORKING_E,
                NVL(at.WORKING_A,0) WORKING_A ,
                NVL(at.WORKING_H,0) WORKING_H,
                NVL(at.WORKING_D,0) WORKING_D,
                NVL(at.WORKING_C,0) WORKING_C,
                NVL(at.WORKING_T,0) WORKING_T,
                NVL(at.WORKING_Q,0) WORKING_Q,
                NVL(at.WORKING_N,0) WORKING_N,
                NVL(at.WORKING_P,0) WORKING_P,
                NVL(at.WORKING_L,0) WORKING_L,
                NVL(at.WORKING_R,0) WORKING_R,
                NVL(at.WORKING_S,0) WORKING_S,
                NVL(at.WORKING_B,0) WORKING_B,
                NVL(at.WORKING_K,0) WORKING_K,
                NVL(at.WORKING_J,0) WORKING_J,
                NVL(at.TOTAL_WORKING_XJ,0) TOTAL_WORKING_XJ,
                NVL(at.WORKING_TS,0) WORKING_TS,
                NVL(at.WORKING_O,0) WORKING_O,
                NVL(at.WORKING_V,0) WORKING_V,
                NVL(at.TOTAL_TS_V,0) TOTAL_TS_V,
                NVL(at.TOTAL_WORKING,0) TOTAL_WORKING,
                at.CREATED_BY ,
                at.CREATED_DATE ,
                at.CREATED_LOG,
                at.MODIFIED_BY ,
                at.MODIFIED_DATE ,
                at.MODIFIED_LOG
        FROM AT_TIME_TIMESHEET_MONTHLY AT
        JOIN HU_EMPLOYEE he ON he.ID  = AT.EMPLOYEE_ID
        LEFT JOIN HU_TITLE ht  ON ht.id = AT.TITLE_ID
        LEFT JOIN HU_STAFF_RANK hsr  ON hsr.ID  = AT.STAFF_RANK_ID
        LEFT JOIN HU_ORGANIZATION ho ON ho.ID  = AT.ORG_ID
        JOIN AT_PERIOD ap  ON ap.ID  = AT.PERIOD_ID
        WHERE  AT.PERIOD_ID  =  v_Period
        AND AT.Employee_Id = v_EmployeeID;

    p_Message := 'IsSuccess';
    p_ResponseStatus := 1;
   -- DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
        p_Message := 'Database Error';
        p_ResponseStatus := -99;
  end;

  PROCEDURE API_AT_SwipeMachine_List(p_Language       IN nvarchar2,p_Rowcount       OUT NUMERIC,
                                        P_CUR            OUT CURSOR_TYPE,
                                        p_Message        OUT nvarchar2,
                                        p_ResponseStatus OUT NUMERIC) as
   begin
     OPEN P_CUR FOR
       SELECT id ID,
              t.terminal_code TERMINAL_CODE,
              t.terminal_name TERMINAL_NAME,
              t.address_place ADDRESS_PLACE,
              t.terminal_ip TERMINAL_IP,
              t.port PORT,
              t.pass PASS,
              t.note NOTE,
              t.actflg TERMINAL_STATUS,
              t.modified_date LAST_TIME_UPDATE
         FROM at_terminals t;
     --DBMS_SQL.RETURN_RESULT(v_cursor);
     p_Message        := u'Susscess';
     p_ResponseStatus := 1;
   EXCEPTION
     WHEN OTHERS THEN
       p_Rowcount       := 0;
       p_Message        := u'Error';
       p_ResponseStatus := -1;
   end;


  PROCEDURE API_Get_Profile
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_FullName OUT NVARCHAR2,
      p_UserName OUT NVARCHAR2,
      p_Mobile OUT NVARCHAR2,
      p_Address OUT NVARCHAR2,
      p_Email OUT NVARCHAR2,
      p_Avatar OUT NVARCHAR2,
      p_DofB OUT NVARCHAR2,
      p_Nationality OUT NVARCHAR2,
      p_Nation OUT NVARCHAR2,
      p_Title OUT NVARCHAR2,
      p_IDCard OUT NVARCHAR2,
      p_Gender OUT NVARCHAR2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_EmpID NUMBER(19,0);
      v_ImageID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(1, 0) := 0;
  BEGIN
      p_FullName := ' ' ;
      p_UserName := ' ' ;
      p_Mobile := ' ' ;
      p_Address := ' ' ;
      p_Email := ' ' ;
      p_Avatar := ' ' ;
      p_DofB := 0 ;
      p_Nationality := ' ' ;
      p_Nation := ' ' ;
      p_Title := ' ' ;
      p_IDCard := ' ' ;
      p_Gender := ' ' ;

      IF ( v_UserID = -1 ) THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      SELECT COUNT(ID) INTO v_temp FROM SE_USER su WHERE  ID = v_UserID AND su.ACTFLG = 'A';
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound' ;
          p_ResponseStatus := -600 ;
          RETURN;
      END IF;

      SELECT he.ID INTO v_EmpID FROM HU_EMPLOYEE he  JOIN SE_USER su ON su.EMPLOYEE_CODE = he.EMPLOYEE_CODE
     WHERE su.ID = v_UserID AND rownum = 1 ORDER BY he.employee_code desc;

      IF v_EmployeeID != -1 THEN
          SELECT COUNT(ID) INTO v_EpmViewID FROM HU_Employee WHERE ID = v_EmployeeID;
          IF v_EpmViewID < 1 THEN
              p_Message := 'EmployeeNotFound';
              p_ResponseStatus := -600;
              RETURN;
          END IF;

          v_temp := 0;
          --SELECT COUNT(ID) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
          --IF v_temp < 1 THEN
          --    p_Message := 'YouNotManagerEmployee';
          --    p_ResponseStatus := -600;
          --    RETURN;
         -- END IF;
      END IF;

      BEGIN
          v_EmpID := NVL(v_EmpID, -1);
          v_temp := 0;

          SELECT COUNT(1) INTO v_temp FROM DUAL
          WHERE ( NOT EXISTS ( SELECT ID
                              FROM HU_Employee
                               WHERE  ID = v_EmpID )
                  OR NOT EXISTS ( SELECT  EMPLOYEE_ID
                       FROM HU_Employee_CV
                        WHERE  EMPLOYEE_ID = v_EmpID ) );
          IF v_temp = 1 THEN
              p_Message := 'NotFindEmployeeCV';
              p_ResponseStatus := -600;
              RETURN;
          END IF;

         begin
              SELECT
--                  TO_CHAR(NVL(E.BIRTH_DATE ,' ' ) , 'DD/MM/YYYY'),
                        nvl(to_char(E.BIRTH_DATE, 'DD/MM/YYYY'), ' '),
                        nvl(E.IMAGE,'NoImage.jpg') ,
                  E.Local_Mail ,
                  NVL(e.contact_mobile, ' ') ,
                  E.PER_ADDRESS ,
                  E.ID_NO ,
                  E.PER_ADDRESS ,
                   C.NAME_VN  ,
                  O.CODE ,
                   OL.NAME_VN
              INTO
                  p_DofB,
                  --v_ImageID,
                        P_Avatar,
                  p_Email,
                  p_Mobile,
                  p_Address,
                  p_IDCard,
                  p_Address,
                  p_Nationality,
                  p_Gender,
                  p_Nation -- native
              FROM HU_EMPLOYEE he
                LEFT JOIN HU_EMPLOYEE_CV  E ON e.EMPLOYEE_ID  = he.id
                  LEFT JOIN HU_NATION C   ON E.Nav_Nation = C.ID
                  LEFT JOIN OT_OTHER_LIST O   ON E.GENDER = O.ID
                  LEFT JOIN OT_OTHER_LIST OL   ON E.Nav_Nation  = OL.ID
              WHERE
                  he.ID = CASE WHEN ( v_EmployeeID != -1 ) THEN v_EmployeeID ELSE v_EmpID END
                 AND rownum = 1;
               EXCEPTION
            WHEN OTHERS THEN
              --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
                  p_Message := 'ServerError GetInfo HU_EMPLOYEE_CV';
                  p_ResponseStatus := -600;

            END ;

          SELECT
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN else e.fullname_en end ,  
               CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then T.NAME_VN else t.name_en end
          INTO
              p_FullName,  p_Title
          FROM HU_Employee E
          LEFT JOIN HU_Title T   ON E.TITLE_ID = T.ID
          WHERE  E.ID = CASE WHEN ( v_EmployeeID != -1 ) THEN v_EmployeeID ELSE v_EmpID END
          AND rownum = 1
          ;

          SELECT su.USERNAME INTO p_UserName
          FROM SE_USER su WHERE su.ID = v_UserID AND rownum = 1;

          IF ( v_ImageID = 0 ) THEN
              v_ImageID := 828432 ;
          END IF;

          --p_Avatar := BOS.FN_GetParamValue('URLIPORTAL') || '/Media/RenderFile?ImageId=' || TO_NCHAR(v_ImageID) || 'dd=';
            --P_Avatar := case when v_ImageID =0 then '/services/EmployeeImage/NoImage.jpg' else ('/services/EmployeeImage/' || cast(v_ImageID as varchar2(255))) end as PATH,
          --P_Avatar := 'https://previews.123rf.com/images/solargaria/solargaria1709/solargaria170900007/85362512-user-icon-male-avatar-in-business-suit-businessman-flat-icon-man-in-business-suit-avatar-of-business.jpg';
            --P_Avatar := '/services/EmployeeImage/' || cast(v_ImageID as varchar2(255));
          --p_DofB := BOS.FN_ConvertNumberToDate(NVL(p_DofB, 19000101000000));
          p_Message := 'IsSuccess';
          p_ResponseStatus := 1;

         EXCEPTION
        WHEN OTHERS THEN
          --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError GetInfo';
              p_ResponseStatus := -600;
      END;

     p_FullName := NVL(p_FullName, ' ') ;
     p_UserName := NVL(p_UserName, ' ') ;
     p_Mobile := NVL(p_Mobile, '0987606112 ') ;
     p_Address := NVL(p_Address, ' ') ;
     p_Email := NVL(p_Email, ' ') ;
     p_Avatar := NVL(p_Avatar, ' ') ;
     p_DofB := NVL(p_DofB, ' ') ;
     p_Nationality := NVL(p_Nationality, ' ') ;
     p_Nation := NVL(p_Nation, ' ') ;
     p_Title := NVL(p_Title, ' ') ;
     p_IDCard := NVL(p_IDCard, ' ') ;
     p_Gender := NVL(p_Gender, ' ') ;
    EXCEPTION
      WHEN OTHERS THEN
          --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError';
              p_ResponseStatus := -600;
  END;

  PROCEDURE API_GetNotification(p_Language       IN nvarchar2,
                              p_UserID         IN NUMBER,
                              p_Page           IN NUMBER,
                              p_PageSize       IN NUMBER,
                              p_Cur            OUT CURSOR_TYPE,
                              p_Rowcount       OUT NUMBER,
                              p_Message        OUT NVARCHAR2,
                              p_ResponseStatus OUT NUMBER) AS
  v_UserID     NUMBER(19, 0) := p_UserID;
  v_Page       NUMBER(10, 0) := p_Page;
  v_PageSize   NUMBER(10, 0) := p_PageSize;
  v_temp       NUMBER(19, 0) := 0;
  v_EmployeeID NUMBER(19, 0);

BEGIN
  v_UserID   := NVL(v_UserID, -1);
  v_Page     := NVL(v_Page, 1);
  v_PageSize := NVL(v_PageSize, 10);
  p_Rowcount := 0;
  If v_UserId = -1 Then
    p_Message        := 'ISUSERIDNULL';
    p_Responsestatus := -600;
    Return;
  End If;
  Select Id Into v_Temp From Se_user Where Id = v_UserId;
  If V_temp < 1 Then
    p_Message        := 'USERISNOTFOUND';
    p_Responsestatus := -600;
    Return;
  End If;
  Begin
    Select He.id
      Into v_EmployeeId
      From Se_user Su
     Inner Join Hu_employee He
        On He.Employee_code = Su.Employee_code
     Where Su.Id = v_Userid;
  Exception
    When Others Then
      p_Message        := 'EMPLOYEENOTFOUND';
      p_Responsestatus := -600;
      Return;
  End;

  BEGIN
    WITH screen_list AS
     (SELECT 'DASHBOARD' AS Code,
             'Dashboard' AS Name,
             'REGISTER_LEAVE',
             'RegisterLeave',
             'REGISTER_OT',
             'RegisterOt',
             'APPROVE_LEAVE',
             'ApproveLeave',
             'APPROVE_OT',
             'ApproveOT',
             'STAFF',
             'Staff',
             'TIMESHEETS',
             'TimeSheets',
             'SALARY',
             'Salary',
             'REVIEW',
             'Review',
             'ADD_REGISTER_LEAVE',
             'AddRegisterLeave',
             'ADD_REGISTER_OT',
             'AddRegisterOT',
             'REGISTER_LATEINEARLYOUT',
             'RegisterLateInEarlyOut',
             'APPROVE_LATEINEARLYOUT',
             'ApproveLateInEarlyOut',
             'ADD_REGISTER_LATEINEARLYOUT',
             'AddRegisterLateInEarlyOut',
             'ADVANCED_FILTER_REGISTER',
             'AdvancedFilterRegister',
             'SALARY_WEBVIEW',
             'SalaryWebview',
             'TIME_SHEETS_WEBVIEW',
             'TimeSheetWebview',
             'PHONEBOOK',
             'Phonebook',
             'PHONEBOOK_DETAIL',
             'PhonebookDetail',
             'PHONEBOOK_SEARCH',
             'PhonebookSearch',
             'ORG_LIST',
             'OrgList',
             'NOTIFICATION',
             'Notification',
             'RECORDHR',
             'RecordHr',
             'RECORDHR_DETAIL',
             'RecordHrDetail',
             'PERSONAL_RELATIONS',
             'PersonalRelations',
             'WORKING_BEFORE',
             'WorkingBefore',
             'WORKING_NOW',
             'WorkingNow',
             'CONTRACT',
             'Contract',
             'TRAIN_OUT',
             'TrainOut'
        FROM dual)
    
    SELECT COUNT(*)
      INTO p_Rowcount
      FROM (SELECT C.ID
              FROM SE_NOTIFICATION C
             WHERE C.TO_EMPLOYEE_ID = v_EmployeeID);
    OPEN p_Cur FOR
      select ROWNUM STT, K.*
        from ((select distinct s.TO_EMPLOYEE_ID emp_id,
                               s.id,
                               K.FULLNAME_VN,
                               TO_CHAR(K.DATE_FROM, 'DD/MM/YYYY') DATE_FROM,
                               TO_CHAR(k.DATE_TO, 'DD/MM/YYYY') DATE_TO,
                               case
                                 when k.code = 'OVERTIME' then
                                  (case when NVL(p_Language,'vi-VN') ='vi-VN' then TO_CHAR(UNISTR('\0110\0103ng ky\0301 la\0300m th\00EAm')) else TO_CHAR(UNISTR('Overtime register')) end )
                               --TO_CHAR(UNISTR('\0110\0103ng ky\0301 la\0300m th\00EAm'))
                                 when k.code = 'LEAVE' then 
                                  (case when NVL(p_Language,'vi-VN') ='vi-VN' then TO_CHAR(UNISTR('\0110\0103ng ky\0301 nghi\0309 - ') || k.name) else TO_CHAR(UNISTR('Leave register - ')|| k.name) end )
                               --TO_CHAR(UNISTR('\0110\0103ng ky\0301 nghi\0309 - ') || k.name)
                                 when k.code = 'WLEO' then TO_CHAR(UNISTR('\0110\0103ng ky\0301 \0111i tr\00EA\0303 v\00EA\0300 s\01A1\0301m - ')) 
                                  
                                 end REG_TYPE,
                               -1 status,
                               null man_info,
                               nvl(to_char(S.CREATED_DATE,
                                           'YYYY-MM-DD HH24:MI:SS'),
                                   ' ') TIME_CREATED,
                               CASE
                                 WHEN S.SEND_STATUS = '03' THEN
                                  1
                                 ELSE
                                  0
                               END IS_READ,
                               s.send_log NAV_SCREEN,
                               case
                                 when k.code = 'OVERTIME' then
                                  1
                                 when k.code = 'LEAVE' then
                                  2
                                 when k.code = 'WLEO' then
                                  3
                               end REG_TYPE_STATUS
               
                 from SE_NOTIFICATION s
                inner JOIN (select distinct (p.employee_id) employee_id,
                                           min(p.working_day) DATE_FROM,
                                           max(p.working_day) DATE_TO,
                                           p.id_reggroup,
                                           
                                           E.FULLNAME_VN,
                                           g.code,
                                           s.name
                             from at_portal_reg p
                            inner join hu_employee e
                               on p.employee_id = e.id
                             left join at_sign s
                               on p.sign_id = s.id
                             left join at_gsign g
                               on s.at_gsignid = g.id
                            group by p.id_reggroup,
                                     p.employee_id,
                                     E.FULLNAME_VN,
                                     g.code,
                                     s.name) K
                   ON S.ID_REGGROUP = K.ID_REGGROUP
                where s.send_status = 0
                  and s.TO_EMPLOYEE_ID = v_EmployeeID)
             
              UNION ALL
             
              (select s.FROM_EMPLOYEE_ID emp_id,
                      s.id,
                      K.FULLNAME_VN,
                      TO_CHAR(K.DATE_FROM, 'DD/MM/YYYY') DATE_FROM,
                      TO_CHAR(k.DATE_TO, 'DD/MM/YYYY') DATE_TO,
                      
                      case
                        when k.code = 'OVERTIME' then
                         (case when NVL(p_Language,'vi-VN') ='vi-VN' then TO_CHAR(UNISTR('\0110\0103ng ky\0301 la\0300m th\00EAm')) else TO_CHAR(UNISTR('Overtime register')) end )
                               --TO_CHAR(UNISTR('\0110\0103ng ky\0301 la\0300m th\00EAm'))
                        when k.code = 'LEAVE' then
                         (case when NVL(p_Language,'vi-VN') ='vi-VN' then TO_CHAR(UNISTR('\0110\0103ng ky\0301 nghi\0309 - ') || k.name) else TO_CHAR(UNISTR('Leave register - ')|| k.name) end )
                               -- TO_CHAR(UNISTR('\0110\0103ng ky\0301 nghi\0309 - ') || k.name)
                        when k.code = 'WLEO' then
                         TO_CHAR(UNISTR('\0110\0103ng ky\0301 \0111i tr\00EA\0303 v\00EA\0300 s\01A1\0301m - ') ||
                                 k.name)
                      end REG_TYPE,
                      k.status,
                      case
                        when s.send_status = 1 then
                         (case when NVL(p_Language,'vi-VN') ='vi-VN' then TO_CHAR(UNISTR('\0111a\0303 duy\00EA\0323t b\01A1\0309i ') ||  e.fullname_vn) else TO_CHAR(UNISTR('Approve by ') ||  e.fullname_vn) end )
                               --TO_CHAR(UNISTR('\0111a\0303 duy\00EA\0323t b\01A1\0309i ')) || e.fullname_vn
                        when s.send_status = 2 then
                         (case when NVL(p_Language,'vi-VN') ='vi-VN' then TO_CHAR(UNISTR('\0111a\0303 t\01B0\0300 ch\00F4\0301i b\01A1\0309i ') ||  e.fullname_vn) else TO_CHAR(UNISTR('Reject by ') ||  e.fullname_vn) end )
                         --TO_CHAR(UNISTR('\0111a\0303 t\01B0\0300 ch\00F4\0301i b\01A1\0309i ')) || e.fullname_vn
                      end MAN_INFO,
                      
                      nvl(to_char(S.CREATED_DATE, 'YYYY-MM-DD HH24:MI:SS'),
                          ' ') TIME_CREATED,
                      CASE
                        WHEN S.SEND_STATUS = '03' THEN
                         1
                        ELSE
                         0
                      END IS_READ,
                      s.send_log NAV_SCREEN,
                      0 REG_TYPE_STATUS
               
                 from SE_NOTIFICATION s
                inner JOIN (select min(p.working_day) DATE_FROM,
                                  max(p.working_day) DATE_TO,
                                  p.id_reggroup,
                                  p.employee_id,
                                  E.FULLNAME_VN,
                                  g.code,
                                  p.status,
                                  s.name
                             from at_portal_reg p
                            inner join hu_employee e
                               on p.employee_id = e.id
                             left join at_sign s
                               on p.sign_id = s.id
                             left join at_gsign g
                               on s.at_gsignid = g.id
                            group by p.id_reggroup,
                                     p.employee_id,
                                     E.FULLNAME_VN,
                                     g.code,
                                     p.status,
                                     s.name) K
                   ON S.ID_REGGROUP = K.ID_REGGROUP
                inner join hu_employee e
                   on s.to_employee_id = e.id --s.FROM_EMPLOYEE_ID = e.id
                where s.send_status in (1, 2)
                  and s.FROM_EMPLOYEE_ID = v_EmployeeID --3079
               )) K;
    /*SELECT *
    FROM
    (
        SELECT   ROWNUM AS STT,
            ID,
            Message Message_Body,
            Message Message_Body_Style,
            TIME_CREATED,
            IS_READ,
            URL_IMAGE_URI,
            TypeNotification,
            FROM_EMPLOYEE_ID,
            Status,
            From_Employee_Name ,
            SCREEN_CODE AS NAV_SCREEN -- c?n l?y name th? left join screen_list
        FROM
        (
            SELECT     C.ID ID  ,
                        C.Message   ,
                        nvl(to_char(C.CREATED_DATE, 'YYYY-MM-DD HH24:MI:SS'), ' ') TIME_CREATED ,
                        'Receive' TypeNotification  ,
                        H.ID FROM_EMPLOYEE_ID  ,
                        CASE WHEN c.SEND_STATUS  = '03' THEN 1 ELSE 0 END IS_READ,
                        C.SEND_Status Status ,
                        H.FULLNAME_VN From_Employee_Name  ,
                         NVL(hec.Image,'NoImage.jpg') URL_IMAGE_URI ,
                        C.SEND_LOG AS SCREEN_CODE
              FROM     SE_NOTIFICATION C
              LEFT JOIN   HU_Employee H   ON H.ID =C.FROM_EMPLOYEE_ID
              LEFT JOIN   HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = h.id
              WHERE      (C.TO_EMPLOYEE_ID = v_EmployeeID or C.FROM_EMPLOYEE_ID = v_EmployeeID )
              --AND      C.CREATED_DATE > (C.CREATED_DATE - 30)
            ORDER BY TIME_CREATED DESC
        )
    )
        WHERE
            STT > (V_PAGE - 1)* V_PAGESIZE AND STT < (V_PAGE * V_PAGESIZE + 1); */
    p_Message        := 'IsSuccess';
    p_ResponseStatus := 1;
  END;
END;


  /*L?y th?ng tin dang k? ngh?*/
  PROCEDURE API_Get_RegisterLeaveInfo
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Register OUT NUMBER,
      p_Used OUT NUMBER,
        p_Reject OUT NUMBER,
      p_AllRegister OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0);
  BEGIN
      p_Register := 0;
      p_Used := 0;
        p_Reject :=0;
      p_AllRegister := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IncorectUserID';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_EmployeeID := -1;
      END;

      IF v_EmployeeID = -1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) AS Register INTO p_Register
      FROM   AT_PORTAL_REG apr
      inner join at_sign s on s.id=apr.sign_id
      inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   apr.employee_id = v_EmployeeID
      AND   apr.STATUS IN ( 0, 1) -- ?ang k?
    AND    a.code = 'LEAVE';

      SELECT COUNT(*) AS Used INTO p_Used
      FROM   AT_PORTAL_REG apr  --portal_register_leave
      inner join at_sign s on s.id=apr.sign_id
      inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   apr.employee_id = v_EmployeeID
      AND   a.code = 'LEAVE'
      AND   apr.Status = 2; -- ?? d?ng (d? ph? duy?t)

        SELECT COUNT(*) AS Reject INTO p_Reject
      FROM   AT_PORTAL_REG apr
      inner join at_sign s on s.id=apr.sign_id
      inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   apr.employee_id = v_EmployeeID
      AND   a.code = 'LEAVE'
      AND   apr.Status = 3; -- T? ch?i

      SELECT COUNT(*) AS All_Register INTO p_AllRegister
      FROM   AT_PORTAL_REG apr
      inner join at_sign s on s.id=apr.sign_id
      inner join at_gsign           a on a.id =s.at_gsignid
      WHERE apr.employee_id = v_EmployeeID -- T?t c?
    AND    a.code = 'LEAVE';

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

  EXCEPTION
      WHEN OTHERS THEN
          --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError';
              p_ResponseStatus := -600;
  END;



  /*API_Get_Working*/
  PROCEDURE API_Get_Working
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      p_CUR OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, -1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
      v_EmpID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(19, 0) := 0;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;


      SELECT ID INTO v_temp FROM SE_User WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT he.ID INTO v_EmpID FROM SE_USER su JOIN HU_EMPLOYEE he  ON he.EMPLOYEE_CODE  = su.EMPLOYEE_CODE WHERE su.ID = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      IF v_EmployeeID != -1 THEN
          BEGIN
              SELECT ID INTO v_EpmViewID FROM HU_Employee WHERE ID = p_EmployeeID;
          EXCEPTION
              WHEN OTHERS THEN
                  p_Message := 'EmployeeNotFound';
                  p_ResponseStatus := -600;
                  RETURN;
          END;

         -- SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
         -- IF v_temp < 1 THEN
         --     p_Message := 'YouNotManagerEmployee';
         --     p_ResponseStatus := -600;
         --     RETURN;
        --  END IF;
      END IF;

      SELECT COUNT(*) INTO p_Rowcount
      FROM HU_WORKING W
      WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

      OPEN p_CUR FOR
      SELECT *
      FROM
      (
          SELECT ROWNUM STT, ID, DECISIONTYPENAME, TITLE,
           --TO_CHAR(SIGNDATE, 'DD/MM/YYYY')  SIGNDATE,
           TO_CHAR(EFFECTDATE,'YYYY-MM-DD') EFFECTDATE,
            TO_CHAR( START_DATE_CHALLENGE,'YYYY-MM-DD') START_DATE_CHALLENGE,
            TO_CHAR( END_DATE_CHALLENGE,'YYYY-MM-DD') END_DATE_CHALLENGE,
            --SIGNNAME, SIGNTITLENAME,
            TITLENAMEROOT,
            ORGNAMEROOT,   ORGNAME, TYPE_NAME
          FROM
          (
              SELECT
                  W.ID ID,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then Dt.Type_Name Else Dt.Type_Name End As   DecisionTypeName  ,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then TitleRoot.Name_Vn Else TitleRoot.Name_En End As   TitleNameRoot  ,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then OrgRoot.Name_Vn Else OrgRoot.Name_En End As   OrgNameRoot  ,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then T.Name_Vn Else T.Name_En End As Title,
                  Case When Nvl(p_Language,'vi-VN')='vi-VN' Then O.Name_Vn Else O.Name_En End As OrgName,
                  W.Start_Date_Challenge ,
                  W.End_Date_Challenge,
                  W.SIGN_DATE SignDate,
                  W.EFFECT_DATE  EffectDate,
                  W.End_Date  ExpireDate,
                  NVL(sgn.fullname_vn , ' ') SignName,
                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NVL(sgnTitle.Name_Vn, ' ') else NVL(sgnTitle.Name_En, ' ') end SignTitleName,
                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then  NVL(O.NAME_VN , ' ') else NVL(O.Name_En , ' ') end CompanyName,
                  de.type_name

              FROM HU_Working W
              left join hu_decision_type de on w.decision_type_id = de.id
                   Left Join Hu_Title TitleRoot On TitleRoot.Id=W.Title_Id
                   Left Join Hu_Organization OrgRoot On OrgRoot.Id=W.Org_Goc_Id
                  Left Join HU_Title T ON W.TITLE_ID = T.ID
                  left join hu_title sgnTitle on sgnTitle.id=w.sign_title_id
                  left join hu_employee sgn on sgn.id=w.sign_id
                  Left Join Hu_Decision_Type Dt   ON W.Decision_Type_Id  = Dt.Id
                  LEFT JOIN HU_Organization O   ON W.ORG_ID = O.ID
              WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
              and nvl(w.is_deleted,0) <> 1
              ORDER BY W.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
      --DBMS_SQL.RETURN_RESULT(v_cursor);

  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_Get_WorkingOld
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
    p_CUR OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, 1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, 10);
      v_EmpID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(1, 0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(1) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT he.ID INTO v_EmpID FROM SE_USER su JOIN HU_EMPLOYEE he ON he.EMPLOYEE_CODE  = su.EMPLOYEE_CODE WHERE su.ID = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      IF p_EmployeeID != -1 THEN
          BEGIN
              SELECT ID INTO v_EpmViewID FROM HU_Employee WHERE ID = p_EmployeeID;
          EXCEPTION
              WHEN OTHERS THEN
                  p_Message := 'EmployeeNotFound';
                  p_ResponseStatus := -600;
                  RETURN;
          END;

--          SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
--          IF v_temp < 1 THEN
--              p_Message := 'YouNotManagerEmployee';
--              p_ResponseStatus := -600;
--              RETURN;
--          END IF;
      END IF;

      SELECT COUNT(*) INTO p_Rowcount
      FROM HU_WORKING_BEFORE W JOIN HU_EMPLOYEE he ON he.ID  = w.EMPLOYEE_ID
      WHERE  he.ID =  CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

      OPEN p_CUR FOR
      SELECT *
      FROM
      (
          SELECT ROWNUM STT, ID, COMPANY_NAME, Telephone, Address,
            TO_CHAR(JoinDate,'YYYY-MM-DD') JoinDate,
            TO_CHAR(EndDate,'YYYY-MM-DD') EndDate,
            Salary, TitleName, TerReason
          FROM
          (
              SELECT
                  W.ID ID,
                  W.COMPANY_NAME ,
                    W.TELEPHONE Telephone,
                  W.COMPANY_ADDRESS Address,
                  W.JOIN_DATE JoinDate,
                  W.END_DATE  EndDate,
                  0 Salary,
                  NVL(W.Title_Name , ' ') TitleName,
                  NVL(W.TER_REASON , ' ') TerReason
              FROM HU_WORKING_BEFORE  W JOIN HU_EMPLOYEE he ON he.ID  = W.EMPLOYEE_ID
              WHERE  he.ID =  CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
              and nvl(w.is_deleted,0) <> 1
              ORDER BY W.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1)
      order by JoinDate desc;

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;
  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;




  /*END GET PROCEDURE*/
  /*=================================================================================================================*/

  PROCEDURE API_LOGGER_ERROR(p_ErrorCode      IN NVARCHAR2,
                                                 P_ErrorTitle     IN NVARCHAR2,
                                                 P_ErrorDetail    IN NVARCHAR2,
                                                 p_UserInfo       IN NVARCHAR2,
                                                 p_UserID         IN NUMBER,
                                                 p_Message        OUT NVARCHAR2,
                                                 p_ResponseStatus OUT NUMBER) AS
    v_ErrorCode   NVARCHAR2(10) := NVL(p_ErrorCode, -1);
    v_ErrorTitle  NVARCHAR2(50) := NVL(P_ErrorTitle, '-1');
    v_ErrorDetail NVARCHAR2(1500) := NVL(P_ErrorDetail, '-1');
    v_UserInfo    NVARCHAR2(500) := NVL(p_UserInfo, '-1');
    v_UserID      NUMBER(19, 0) := NVL(p_UserID, -1);
  BEGIN
    IF v_ErrorCode = -1 THEN
      p_Message        := 'ErrorCodeIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_ErrorTitle = '-1' THEN
      p_Message        := 'ErrorTitleIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_ErrorDetail = '-1' THEN
      p_Message        := 'ErrorDetailIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_UserInfo = '-1' THEN
      p_Message        := 'UserInfoIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_UserID = -1 THEN
      p_Message        := 'UserIDIsNull';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    BEGIN
      INSERT INTO LOGGER_ERROR_MOBILE
        (I, C, N, DETAIL, USER_ID, USER_INFO)
      SELECT
         NVL((SELECT max(I) FROM LOGGER_ERROR_MOBILE),0) + 1 ,
         v_ErrorCode,
         v_ErrorTitle,
         v_ErrorDetail,
         v_UserID,
         v_UserInfo
      FROM dual ;
      COMMIT;

      p_Message        := 'IsSuccess';
      p_ResponseStatus := 1;
      RETURN;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'DatabaseError';
        p_ResponseStatus := -99;
        ROLLBACK;
        RETURN;
    END;

  EXCEPTION
    WHEN OTHERS THEN
      p_Message        := 'DatabaseError';
      p_ResponseStatus := -99;
  END;

  /* Save notification - c?n test v? view l?i m?c d?ch */
 PROCEDURE API_SaveNotification
  (
    p_ScreenCode IN nvarchar2,
    p_ViewerUserID IN NUMBER,
    p_ActorUserID IN NUMBER,
    p_EntityTypeID IN NUMBER,
    p_EntityID IN NUMBER,
    p_MessageNotification IN NVARCHAR2,
    p_IdGroup In Number,
    p_Status In Number,
    p_Action_Text In NVarchar2,
    p_App_Level In Number,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  )
  AS
     v_DateNow DATE := SYSDATE;
     v_ID NUMBER(19,0);
  BEGIN
      BEGIN
            INSERT INTO SE_NOTIFICATION(ID,
                                      SVALUE,
                                      NVALUE,
                                      MESSAGE,
                                      SENT_DATE,
                                      CREATED_DATE,
                                      FROM_EMPLOYEE_ID,
                                      TO_EMPLOYEE_ID,
                                      SEND_STATUS,
                                      SEND_LOG ,
                                      Id_Reggroup,
                                      Action_Text,
                                      LEVEL_APPROVED
                                      )
          SELECT
              NVL((SELECT max(id) FROM SE_NOTIFICATION),0)+1  ID,
                  p_EntityTypeID P_SVALUE,
                  p_EntityID P_NVALUE,
                  p_MessageNotification,
                  SYSDATE,
                  SYSDATE,
                  p_ActorUserID P_FROM_EMPLOYEE_ID,
                  p_ViewerUserID P_TO_EMPLOYEE_ID,
                  p_Status,
                  p_ScreenCode,
                  p_IdGroup,
                  p_Action_Text,
                  p_App_Level
          FROM dual;
          p_Message := 'IsSuccess';
          p_ResponseStatus := 1;
      EXCEPTION
          WHEN OTHERS THEN
              ROLLBACK;
              p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
              p_ResponseStatus := -99;
              RETURN;
      END;
  END;

  PROCEDURE API_SUB_RegisterLeaveDetail
  (
      p_UserID IN NUMBER,
      p_LeaveFrom IN DATE,
      p_LeaveTo IN DATE,
      p_Remark IN NVARCHAR2,
      p_SymbolId IN NUMBER,
      p_RegDate IN NUMBER,
      p_FromHour IN NUMBER,
      p_ToHour IN NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_EmployeeID NUMBER(19, 0) := 0;
      v_DateDiff NUMBER(3, 0) := 0;
      v_CounterDate NUMBER(19, 0) := 0;
      V_TotalHourBreak NUMBER(19,3) := 0;
      v_WDCountWS NUMBER(19,0) := 0;
      v_LF NUMBER(19,0);
      v_LT NUMBER(19,0);
      v_FH NUMBER(19,0);
      v_TH NUMBER(19,0);
      v_ManagerID NUMBER(19,0);
      v_WorkingDay NUMBER(19, 0);
      v_WorkingDayD DATE;
      v_WF NUMBER(19,0);
      v_WT NUMBER(19,0);
      v_BF NUMBER(19,0);
      v_BT NUMBER(19, 0);
      v_WDExistedCount NUMBER(1,0);
      v_WDExistedCountTime NUMBER(1, 0);
      v_WDExistedCountDay NUMBER(1,0);
      v_TotalHourLeave NUMBER(19, 5);
      v_JoinDate DATE;
      v_EmployeeCode VARCHAR2(30);
      v_TerLastDate Date;
      v_Temp NUMBER(1,0) := 0;
  BEGIN
      p_Message := '';
      p_ResponseStatus := 1;

      SELECT COUNT(ID) INTO v_Temp FROM SE_USER su WHERE ID = p_UserID;
      IF v_Temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

     SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = p_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      IF v_EmployeeID < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      v_DateDiff := p_LeaveTo - p_LeaveFrom;
      SELECT   JOIN_DATE , EMPLOYEE_CODE , he.TER_LAST_DATE  INTO v_JoinDate, v_EmployeeCode, v_TerLastDate
      FROM   HU_EMPLOYEE he
      WHERE    ID = v_EmployeeID;

      --v_LF := BOS.FN_ConvertDateToNumber(p_LeaveFrom) ;
      --v_LT := BOS.FN_ConvertDateToNumber(p_LeaveTo) ;
       SELECT   TO_NUMBER(TO_CHAR(p_LeaveFrom, 'YYYYMMDDHH24MISS')),
           TO_NUMBER(TO_CHAR(p_LeaveTo, 'YYYYMMDDHH24MISS'))
           INTO v_LF, v_LT
       FROM   dual;

      v_FH := p_FromHour;
      v_TH := p_ToHour;

      SELECT he.dm_id  INTO v_ManagerID FROM HU_EMPLOYEE he WHERE ID = v_EmployeeID;

      WHILE v_CounterDate <= v_DateDiff
      LOOP
          DECLARE
               v_ShiftCount NUMBER(10,0);
               v_ShiftHourStart NUMBER(19,0);
               v_ShiftHourEnd NUMBER(19,0);
               v_ShiftBreakStart NUMBER(19,0);
               v_ShiftBreakEnd NUMBER(19,0);
               v_CountSymbol NUMBER(19,0);
               v_Holiday NUMBER(10,0);
               v_HourLeaveInDay NUMBER(10,2);
               v_TotalShiftTime FLOAT(53);
               v_TypeStatus NUMBER(19,0);
          BEGIN
              --v_WorkingDay := BOS.FN_ConvertDateToNumber(p_LeaveFrom + v_CounterDate);
        SELECT   TO_NUMBER(TO_CHAR(p_LeaveFrom + v_CounterDate, 'YYYYMMDDHH24MISS'))
            ,API_FN_ConvertNumberToDate(TO_NUMBER(TO_CHAR(p_LeaveFrom + v_CounterDate, 'YYYYMMDDHH24MISS')))
        INTO   v_WorkingDay, v_WorkingDayD
           FROM   dual;
              BEGIN
                  SELECT
                      --BOS.FN_ConvertNumberToDate(P.WorkingFrom) ,
                      --BOS.FN_ConvertNumberToDate(P.WorkingTo) ,
                      TO_NUMBER(TO_CHAR(SH.Work_Start , 'YYYYMMDDHH24MISS')),
                      TO_NUMBER(TO_CHAR(SH.Work_End , 'YYYYMMDDHH24MISS')),
                      TO_NUMBER(TO_CHAR(SH.Break_Start , 'YYYYMMDDHH24MISS')) ,
                      TO_NUMBER(TO_CHAR(SH.Break_End , 'YYYYMMDDHH24MISS'))
                  INTO
                      v_WF,
                      v_WT,
                      v_BF,
                      v_BT
                  FROM AT_WORKSIGN P
                      JOIN AT_SHIFT SH   ON P.SHIFT_ID = SH.ID
                      --JOIN AT_TIME_MANUAL S   ON SH.MANUAL_ID = S.ID
                  WHERE  P.EMPLOYEE_ID = v_EmployeeID
                         AND SUBSTR(P.WORKINGDAY , 0, 8) = SUBSTR(v_WorkingDay, 0, 8);
              EXCEPTION
                  WHEN OTHERS THEN
                      v_WF := NULL;
                      v_WT := NULL;
                      v_BF := NULL;
                      v_BT := NULL;
                      v_CounterDate := v_CounterDate + 1;
                      CONTINUE;
              END;

              -- Check ca neu la ca nghi thi bo qua
              SELECT   COUNT(*) INTO v_ShiftCount
              FROM   AT_WORKSIGN P
                    JOIN AT_SHIFT SH   ON P.SHIFT_ID = SH.ID
                    --JOIN AT_TIME_MANUAL atm ON atm.id = p.
                   --left JOIN AT_FML S   ON atm.AFTERNOON_ID = S.ID OR atm.MORNING_ID  = S.ID
              WHERE  P.EMPLOYEE_ID = v_EmployeeID
                     AND SUBSTR(P.WorkingDay, 0, 8) = SUBSTR(v_WorkingDay, 0, 8)   ;
                    -- AND S.IS_LEAVE = -1;

              IF v_ShiftCount > 0 THEN
                  v_CounterDate := v_CounterDate + 1;
                  CONTINUE;
              END IF;

              SELECT COUNT(*) INTO v_WDCountWS
              FROM AT_WORKSIGN
              WHERE EMPLOYEE_ID = v_EmployeeID
              AND TO_NUMBER(TO_CHAR(WorkingDay , 'YYYYMMDDHH24MISS'))  = v_WorkingDay;

              IF v_WDCountWS < 1 THEN
                  p_Message := 'WorkingSignNull';
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Check neu la ngay nghi thi bo qua
              SELECT COUNT(*) INTO v_Holiday
              FROM AT_Holiday
              WHERE SUBSTR(WorkingDay, 0, 8) = SUBSTR(v_WorkingDay, 0, 8);

              IF v_Holiday > 0 THEN
                  v_CounterDate := v_CounterDate + 1;
                  CONTINUE;
              END IF;

              -- Check ngay vao cong ty sau ngay dang ky nghi
              IF v_JoinDate = NULL OR SUBSTR(v_JoinDate, 0, 8) > SUBSTR(v_WorkingDay, 0, 8)  THEN
                  p_Message := p_Message || ' {EmployeeCodeError} ' || v_EmployeeCode || ' {JoinDateError} ?br/?' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Check ngay lam viec cuoi cung truoc ngay dang ky nghi
              IF v_TerLastDate = NULL OR SUBSTR(v_TerLastDate, 0, 8) > SUBSTR(v_WorkingDay, 0, 8)  THEN
                  p_Message := p_Message || ' {EmployeeCodeError} ' || v_EmployeeCode || ' {TerlastDateError} ?br/?' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Chuyen ngay trong gio nghi tu Today sang WorkingDay
              API_Shift_Calculate(v_WorkingDayD, v_FH, v_TH, v_FH, v_TH);

              -- Check dang ky trung gio da dang ky
              SELECT COUNT(*) INTO v_WDExistedCount
              FROM AT_PORTAL_REG P
              inner join at_sign s on s.id=p.sign_id
              inner join at_gsign           a on a.id =s.at_gsignid
              WHERE
              a.code IN ('LEAVE')
              AND P.Employee_Id = v_EmployeeID
                  AND P.Working_Day = p_LeaveFrom
                  AND P.Working_Day = p_LeaveTo
                  AND TO_NUMBER(TO_CHAR(P.From_Hour, 'YYYYMMDDHH24MISS')) = v_FH
                  AND TO_NUMBER(TO_CHAR(P.To_Hour, 'YYYYMMDDHH24MISS')) = v_TH;
              IF v_WDExistedCount > 0 THEN
                  p_Message := 'DatetimeIsRegisted' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Check dang ky trong khoang thoi gian da dang ky
              SELECT COUNT(*) INTO v_WDExistedCountTime
              FROM AT_PORTAL_REG P
              inner join at_sign s on s.id=p.sign_id
             inner join at_gsign           a on a.id =s.at_gsignid
              WHERE   A.Code IN ('LEAVE')
              AND P.Employee_Id = v_EmployeeID
                     AND ( SUBSTR(P.From_Hour , 0, 8) = SUBSTR(v_LF, 0, 8) AND SUBSTR(P.To_Hour , 0, 8) = SUBSTR(v_LT, 0, 8))
                     AND ( TO_NUMBER(TO_CHAR(P.FROM_HOUR, 'YYYYMMDDHH24MISS')) < v_FH AND v_FH < TO_NUMBER(TO_CHAR(P.TO_HOUR, 'YYYYMMDDHH24MISS')) ) OR (TO_NUMBER(TO_CHAR(P.FROM_HOUR, 'YYYYMMDDHH24MISS')) < v_TH AND v_TH < TO_NUMBER(TO_CHAR(P.TO_HOUR, 'YYYYMMDDHH24MISS')));
              IF v_WDExistedCountTime > 0 THEN
                  p_Message := 'TimeIsBetweenTimeRegister' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              -- Check dang ky trung ngay da dang ky
              SELECT COUNT(*) INTO v_WDExistedCountDay
              FROM AT_PORTAL_REG P
               inner join at_sign s on s.id=p.sign_id
             inner join at_gsign           a on a.id =s.at_gsignid
              WHERE   a.code IN ('LEAVE')
              AND P.Employee_Id = v_EmployeeID
                     AND (( SUBSTR(P.From_Hour , 0, 8) < SUBSTR(v_LF, 0, 8)) AND (SUBSTR(v_LF, 0, 8) < SUBSTR(P.To_Hour , 0, 8)))
                     OR (( SUBSTR(P.From_Hour , 0, 8) < SUBSTR(v_LT, 0, 8)) AND (SUBSTR(v_LT, 0, 8) < SUBSTR(P.To_Hour , 0, 8)));

              IF v_WDExistedCountDay > 0 THEN
                  p_Message := 'DayIsBetweenDayRegister' ;
                  p_ResponseStatus := -600;
                  RETURN;
              END IF;

              IF v_BF IS NOT NULL AND v_BT IS NOT NULL THEN
                  IF v_FH = v_BT AND v_TH = v_BF THEN
                      p_Message := p_Message || ' {EmployeeCodeError} ' || v_EmployeeCode || ' {TotalHourLeaveIsZero} ?br/?' ;
                      p_ResponseStatus := -600;
                  END IF;

                  IF ( ( v_FH > v_BT ) OR ( v_TH < v_BF ) ) THEN
                    v_TotalHourLeave := (API_FN_ConvertNumberToDate(v_TH) - API_FN_ConvertNumberToDate(v_FH)) * 24 ;
                  END IF;

                  IF ( ( v_FH < v_bf AND v_TH > v_bf AND v_TH < v_bt ) ) THEN
                      v_TotalHourLeave := (API_FN_ConvertNumberToDate(v_bf) - API_FN_ConvertNumberToDate(v_FH)) * 24 ;
                 END IF;

                 IF ( ( v_FH > v_bf AND v_FH < v_bf AND v_TH > v_bt ) ) THEN
                      v_TotalHourLeave := (API_FN_ConvertNumberToDate(v_TH) - API_FN_ConvertNumberToDate(v_bt)) * 24 ;
                  END IF;

                  IF ( v_FH < v_bf AND v_TH > v_bt ) THEN
                      v_TotalHourBreak := (API_FN_ConvertNumberToDate(v_bt) - API_FN_ConvertNumberToDate(v_bf)) * 24 ;
                      v_TotalHourLeave := (API_FN_ConvertNumberToDate(v_TH) - API_FN_ConvertNumberToDate(v_FH)) * 24 - v_TotalHourBreak ;
                  END IF;
              END IF;

              IF p_ResponseStatus > 0 AND v_CounterDate = v_DateDiff THEN
                  -- [SP_SUB__GetID]
                  INSERT INTO AT_PORTAL_REG (
                          ID,EMPLOYEE_ID , SIGN_ID , Working_Day ,
                          TO_HOUR ,From_HOUR  ,
                            NOTE , Status,TYPE_LEAVE ,
                          CREATED_BY , CREATED_DATE)
                  SELECT
                          NVL((SELECT max(ID) FROM AT_PORTAL_REG ),0)+1, v_EmployeeID, p_SymbolId,
                          p_LeaveFrom, p_LeaveTo, API_FN_ConvertNumberToDate(v_FH),
                           p_Remark, 1,'LEAVE',
                          p_UserID, SYSDATE
                  FROM   dual;
                  p_Message := 'IsSuccess' ;
                  p_ResponseStatus := 1;
                  v_CounterDate := v_CounterDate + 1;
  --                DBMS_OUTPUT.PUT_LINE('SUCCESS');
  --                EXIT;
              ELSE
                  v_CounterDate := v_CounterDate + 1;
              END IF;
          END;
      END LOOP;

  EXCEPTION
      WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
  END;


  PROCEDURE   API_RegisterLeave
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_LeaveFrom IN NVARCHAR2,
      p_LeaveTo IN NVARCHAR2,
      p_FromHour IN NVARCHAR2,
      p_ToHour IN NVARCHAR2,
      p_Remark IN NVARCHAR2,
      p_SymbolId IN NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0);
      v_LeaveFrom  DATE;
      v_LeaveTo  DATE;
      v_FromHour  NVARCHAR2(20);
      v_ToHour  NVARCHAR2(20);
      v_Remark  NVARCHAR2(200);
      v_SymbolId  NUMBER(19,0);
      -----------
      v_Today DATE := SYSDATE;
      v_WDExistedCount NUMBER(19,0);
      v_EmployeeID NUMBER(19,0);
      v_RegDate Date;
      v_RegDateN NUMBER(19,0);
      v_DefaultDate DATE;
      v_WorkingDay Date;
      v_Holiday NUMBER(10,0);
      v_HourStart NUMBER(19, 0);
      v_HourEnd NUMBER(19, 0);
      v_Temp NUMBER(1, 0) := 0;
  BEGIN
      p_Message := '';
      p_ResponseStatus := 1;
      v_UserID := NVL(p_UserID, -1);
      v_DefaultDate := SYSDATE;
      v_LeaveFrom := TO_DATE(p_LeaveFrom, 'MM/DD/YYYY');
      v_LeaveTo := TO_DATE(p_LeaveTo, 'MM/DD/YYYY');
      v_FromHour := TRIM(NVL(p_FromHour, '-1'));
      v_ToHour := TRIM(NVL(p_ToHour, '-1'));
      v_Remark := TRIM(NVL(p_Remark, '-1'));
      v_SymbolId := NVL(p_SymbolId, -1);
    v_RegDate := SYSDATE;
    SELECT TO_NUMBER(TO_CHAR(v_RegDate, 'YYYYMMDDHH24MISS')) INTO v_RegDateN FROM dual;


      IF v_LeaveFrom = v_LeaveTo THEN
          v_WorkingDay := (v_LeaveFrom);
          SELECT COUNT(*) INTO v_Holiday FROM AT_HOLIDAY WHERE SUBSTR(WORKINGDAY , 0, 8) = SUBSTR(v_WorkingDay, 0, 8);
          IF v_Holiday > 0 THEN
              p_Message := 'IsHoliday';
              p_ResponseStatus := -600;
              RETURN;
          END IF;
      END IF;

      IF v_LeaveFrom < v_Today OR v_LeaveTo < v_Today THEN
          p_Message := 'TimeRegisterLargeTimeNow';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_SymbolId = -1 THEN
          p_Message := 'SysbolIdIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

       -- AT_SYMBOL x?t th?y tuong ?ng AT_TIME_MANUAL
      SELECT COUNT(*) INTO v_Temp FROM AT_TIME_MANUAL WHERE ID = v_SymbolId;
      IF v_Temp < 1 THEN
          p_Message := 'SymbolIdIsNotExists';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_LeaveFrom = v_DefaultDate THEN
          p_Message := 'DayFromIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_LeaveTo = v_DefaultDate THEN
          p_Message := 'DayToIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_FromHour = '-1' THEN
          p_Message := 'FromHourIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_ToHour = '-1' THEN
          p_Message := 'ToHourIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_FromHour != '-1' AND v_ToHour != '-1' THEN
          --v_HourStart := BOS.FN_ConvertDateToNumber(v_LeaveFrom) / 1000000 * 100 + TO_NUMBER(v_FromHour, 99);
          --v_HourEnd := BOS.FN_ConvertDateToNumber(v_LeaveFrom) / 1000000 * 100 + TO_NUMBER(v_ToHour, 99);
      SELECT   TO_NUMBER(TO_CHAR(v_LeaveFrom, 'YYYYMMDDHH24MISS')) / 1000000 * 100 + TO_NUMBER(v_FromHour, 99),
          TO_NUMBER(TO_CHAR(v_LeaveFrom, 'YYYYMMDDHH24MISS')) / 1000000 * 100 + TO_NUMBER(v_ToHour, 99)
          INTO v_HourStart,v_HourEnd
      FROM dual;


          IF v_LeaveFrom = v_LeaveTo AND v_HourStart > v_HourEnd THEN
              p_Message := 'FromHourGreaterToHour';
              p_ResponseStatus := -600;
              RETURN;
          END IF;

          IF v_LeaveFrom = v_LeaveTo AND v_HourStart = v_HourEnd THEN
              p_Message := 'FromHourEqualToHour';
              p_ResponseStatus := -600;
              RETURN;
          END IF;
      END IF;

      BEGIN
          API_SUB_RegisterLeaveDetail(v_UserID, v_LeaveFrom, v_LeaveTo, v_Remark, v_SymbolId, v_RegDateN, v_HourStart, v_HourEnd, p_Message, p_ResponseStatus);

          COMMIT;
          DBMS_OUTPUT.PUT_LINE('API_SUB_RegisterLeaveDetail' || p_Message);
      EXCEPTION
          WHEN OTHERS THEN
              ROLLBACK;
              p_Message := 'DatabaseError';
              p_ResponseStatus := -99;
              RETURN;
      END;

      IF p_Message IS NULL AND p_ResponseStatus = 1 THEN
          p_Message := 'WorkingDay Of Employee Dose Not Exist';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

  EXCEPTION
      WHEN OTHERS
          THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || SQLERRM);
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_APPROVEREGISTEROT
  (p_Language       IN nvarchar2,
    p_UserID IN NUMBER,
    p_RegisterID IN NUMBER,
    p_Comment IN NVARCHAR2,
    P_CUR       OUT CURSOR_TYPE,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  )
  AS
     v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
     v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
     v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
     v_EmployeeID NUMBER(19,0);
     v_UserRegisterID NUMBER(19,0);
     v_StatusNow NUMBER(19,0);
     v_ManagerID NUMBER(19,0);
     v_I NUMBER(19,0);
      v_cursor SYS_REFCURSOR;
     v_temp NUMBER(19, 0) := 0;
  BEGIN
      p_ResponseStatus := 1;

      IF v_UserID = -1 THEN
          p_Message := 'UserIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_RegisterID = -1 THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Comment = '-1' THEN
          p_Message := 'CommentIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER U
      left join HU_EMPLOYEE HU on u.EMPLOYEE_CODE= hu.employee_code
      WHERE U.id = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_REG WHERE ID = v_RegisterID;
      IF v_temp < 1 THEN
          p_Message := 'RegisterIDIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
      ;

      SELECT re.employee_id, Status INTO v_UserRegisterID, v_StatusNow
      FROM AT_PORTAL_REG re
      --left join AT_PORTAL_APP ap on ap.id_reggroup= re.ID_REGGROUP
      WHERE re.ID = v_RegisterID and re.employee_id = v_EmployeeID;
      SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_REG R
      --left join AT_PORTAL_APP AP on AP.ID_REGGROUP= R.ID_REGGROUP
      WHERE r.employee_id = v_EmployeeID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependent';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE dm_id = v_EmployeeID
      AND ID = v_UserRegisterID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependentEmployee';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_StatusNow >= 0 THEN
          BEGIN
            /* -- chuy?n g?i service
              UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 2--, ManagerComment = v_Comment
              WHERE  ID_EMPLOYEE  =  v_EmployeeID AND  ID_REGGROUP in
              (select ID_REGGROUP from AT_PORTAL_REG where Id = v_RegisterID);

              update AT_PORTAL_REG set NOTE= v_Comment, Status = 2
              WHERE Id = v_RegisterID;
              */
              SELECT Employee_Id, ID INTO v_ManagerID, v_I FROM AT_PORTAL_REG
              --left join AT_PORTAL_APP ap on ap.ID_reggroup= AT_PORTAL_REG.id_reggroup
              WHERE AT_PORTAL_REG.ID = v_RegisterID
              AND AT_PORTAL_REG.Employee_Id = v_employeeID
              AND rownum = 1
               ;
              p_Message := 'IsSuccess';

              /*API_SaveNotification('',v_UserRegisterID,v_ManagerID, 4, v_I, 'Approve Request Register Overtime',0,0, p_Message, p_ResponseStatus);
              COMMIT;*/

               IF p_ResponseStatus = -99 THEN

                 p_Message := 'IsSuccess|NotifyException';
               END IF;

              OPEN  P_CUR FOR
                  SELECT
                      R.ID ID,
                      R.ID_REGGROUP  ,
                      v_Comment AS Remark,
                        apiType.Name TypeName
                  FROM AT_PORTAL_REG R
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                          Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM   OT_OTHER_LIST ool
                                    WHERE   TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND   ool.status  = 1) apiType on R.Sign_Id = apiType.ID
                  WHERE R.ID = v_RegisterID;

            -- DBMS_SQL.RETURN_RESULT(v_CURSOR);
          EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
          END;
      ELSE
          OPEN  P_CUR FOR
                  SELECT
                      R.ID ID,
                      R.ID_REGGROUP    ,
                      v_Comment AS Remark,
                        apiType.Name TypeName
                  FROM AT_PORTAL_REG R
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                          Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM   OT_OTHER_LIST ool
                                    WHERE   TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND   ool.status  = 1) apiType on R.Sign_Id = apiType.ID
                  WHERE R.ID = v_RegisterID;
       p_Message := 'RegisterIdIsApproved';
           p_ResponseStatus := -99;
      END IF;
  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
          p_Message := 'Database Error';
          p_ResponseStatus := -99;
  END;

  PROCEDURE API_CancelRegisterOT
  (p_Language       IN nvarchar2,
    p_UserID IN NUMBER,
    p_RegisterID IN NUMBER,
    p_Comment IN NVARCHAR2,
    P_CUR       OUT CURSOR_TYPE,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  )
  AS
     v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
     v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
     v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
     v_EmployeeID NUMBER(19,0);
     v_UserRegisterID NUMBER(19,0);
     v_StatusNow NUMBER(19,0);
     v_ManagerID NUMBER(19,0);
     v_I NUMBER(19,0);
     v_temp NUMBER(19, 0) := 0;
  BEGIN
      p_ResponseStatus := 1;

      IF v_UserID = -1 THEN
          p_Message := 'UserIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_RegisterID = -1 THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Comment = '-1' THEN
          p_Message := 'CommentIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER U
      left join HU_EMPLOYEE HU on u.EMPLOYEE_CODE= hu.employee_code
      WHERE U.id = v_UserID
         AND     (( hu.WORK_STATUS  = 257  AND SYSDATE  < hu.TER_EFFECT_DATE )  OR (hu.WORK_STATUS <> 257)  )
      AND rownum = 1
      ;

      IF v_temp < 1 THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

     SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_REG WHERE ID = v_RegisterID;
      IF v_temp < 1 THEN
          p_Message := 'RegisterIDIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

     SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
      ;

      SELECT AT_PORTAL_REG.Employee_Id, Status INTO v_UserRegisterID, v_StatusNow
      FROM AT_PORTAL_REG
      --left join AT_PORTAL_APP ap on ap.id_reggroup= AT_PORTAL_REG.ID_REGGROUP
      WHERE AT_PORTAL_REG.ID = v_RegisterID
      AND AT_PORTAL_REG.Employee_Id  = v_EmployeeID
      ;

      SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_REG R
      --left join AT_PORTAL_APP AP on AP.ID_REGGROUP= R.ID_REGGROUP
      WHERE r.Employee_Id = v_EmployeeID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependent';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

    /* C?n check l?i -> qu?n l? d? du?c g?n theo quy tr?nh ph? duy?t
     SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmployeeID
      AND ID = v_UserRegisterID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependentEmployee';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
      */

      IF v_StatusNow >= 0 THEN
          BEGIN
              UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 3--, ManagerComment = v_Comment
              WHERE ID_EMPLOYEE  = v_EmployeeID AND ID_REGGROUP in
              (select ID_REGGROUP from AT_PORTAL_REG where Id = v_RegisterID);

              update AT_PORTAL_REG set NOTE= v_Comment, status = 3
              WHERE Id = v_RegisterID;

             SELECT employee_id, ID INTO v_ManagerID, v_I FROM AT_PORTAL_REG
              --left join AT_PORTAL_APP ap on ap.ID_reggroup= AT_PORTAL_REG.id_reggroup
              WHERE AT_PORTAL_REG.ID = v_RegisterID
             AND  AT_PORTAL_REG.Employee_Id  = v_EmployeeID
             AND rownum = 1
              ;
              /*API_SaveNotification('',v_UserRegisterID, v_ManagerID , 4, v_I, 'Cancel Request Register Overtime',0,0, p_Message, p_ResponseStatus);
              COMMIT;*/

               OPEN p_cur FOR
                    SELECT
                        1 STT,
                        R.Id ID,
                        TO_CHAR(r.from_hour , 'DD/MM/YYYY') LeaveFrom,
                        TO_CHAR(r.to_hour
                        , 'DD/MM/YYYY') LeaveTo,
                        r.from_hour FromHour,
                        r.to_hour ToHour,
                        '' SymbolName,
                        NVL(R.To_Hour-r.from_hour, 0)*24 TotalHour,
                        NVL(R.Note, ' ') Remark,
                        R.Status Status,
                        E.Fullname_Vn EmployeeName,
                         TO_CHAR(r.created_date, 'DD/MM/YYYY HH24:MI:SS') CreateTime,
                         R.Note Note,
                         apiType.Name TypeName
                    FROM at_portal_reg R
                         --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
                         LEFT JOIN HU_Employee E   ON r.employee_id = E.Id
                          Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM   OT_OTHER_LIST ool
                                    WHERE   TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND   ool.status  = 1) apiType on R.Sign_Id = apiType.ID
                    WHERE R.Id = v_RegisterID;
          EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
          END;
      ELSE
           p_Message := 'RegisterIsCancel';
          p_ResponseStatus := -600;
      END IF;

  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
          p_Message := 'Database Error';
          p_ResponseStatus := -99;
  END;
  PROCEDURE API_Get_RegisterOtInfo
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Register OUT NUMBER,
      p_Used OUT NUMBER,
        p_Reject OUT NUMBER,
      p_AllRegister OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0);
  BEGIN
      p_Register := 0;
      p_Used := 0;
      p_Reject := 0;
      p_AllRegister := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IncorectUserID';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
          ;
      EXCEPTION WHEN NO_DATA_FOUND THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END;

      SELECT COUNT(*) AS Register INTO p_Register
      FROM AT_PORTAL_REG      r
       inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'OVERTIME'
      AND   r.status IN (0, 1); -- ?ang k?

      SELECT COUNT(*) AS Used INTO p_Used
      FROM AT_PORTAL_REG  r
       inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE r.employee_id = v_EmployeeID
      AND   a.code  = 'OVERTIME' AND r.Status = 2; -- ?? d?ng (d? ph? duy?t)

        SELECT COUNT(*) AS Reject INTO p_Reject
      FROM AT_PORTAL_REG r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE r.employee_id = v_EmployeeID
      AND   a.code  = 'OVERTIME' AND r.Status = 3; -- ?? d?ng (d? ph? duy?t)

      SELECT COUNT(*) AS All_Register INTO p_AllRegister
      FROM AT_PORTAL_REG  r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE r.employee_id = v_EmployeeID
      AND   a.code  = 'OVERTIME'; -- T?t c?

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError';
              p_ResponseStatus := -600;
  END;


  PROCEDURE API_Get_RegisterWLEOInfo
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_Register OUT NUMBER,
      p_Used OUT NUMBER,
        p_Reject OUT NUMBER,
      p_AllRegister OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0);
  BEGIN
      p_Register := 0;
      p_Used := 0;
        p_Reject :=0;
      p_AllRegister := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IncorectUserID';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1
          ;
      EXCEPTION WHEN NO_DATA_FOUND THEN
          p_Message := 'UserNotConfig';
          p_ResponseStatus := -600;
          RETURN;
      END;

      SELECT   COUNT(*) AS Register INTO p_Register
      FROM   AT_PORTAL_REG r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'WLEO'
      AND  r. Status IN (0, 1); -- ?ang k?

      SELECT   COUNT(*) AS Used INTO p_Used
      FROM   AT_PORTAL_REG   r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'WLEO' AND r.Status = 2; -- ?? d?ng (d? ph? duy?t)

        SELECT   COUNT(*) AS Reject INTO p_Reject
      FROM   AT_PORTAL_REG  r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'WLEO' AND r.Status = 3; -- ?? d?ng (d? ph? duy?t)

      SELECT   COUNT(*) AS All_Register INTO p_AllRegister
      FROM   AT_PORTAL_REG   r
      inner join at_sign s on s.id=r.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
      WHERE   r.employee_id = v_EmployeeID
      AND   a.code  = 'WLEO'; -- T?t c?

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
              p_Message := 'ServerError';
              p_ResponseStatus := -600;
  END;

  PROCEDURE API_Get_TrainOut
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_EmployeeID IN NUMBER,
      p_Page IN NUMBER,
      p_PageSize IN NUMBER,
      P_CUR       OUT CURSOR_TYPE,
      p_Rowcount OUT NUMBER,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
      v_Page NUMBER(10,0) := NVL(p_Page, -1);
      v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
      v_EmpID NUMBER(19,0);
      v_EpmViewID NUMBER(19,0);
      v_temp NUMBER(19, 0) := 0;
      v_cursor SYS_REFCURSOR;
  BEGIN
      p_Rowcount := 0;

      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_EmployeeID = -1 THEN
         Begin
        Select Employee_Id
        Into v_EmployeeID
        From Se_User U
        Where U.Id=v_UserID;
        EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotEmployeeId';
              p_ResponseStatus := -600;
              RETURN;
        End;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      /*BEGIN
          SELECT E.id INTO v_EmpID FROM SE_USER U
          left join HU_EMPLOYEE e on e.employee_code= u.employee_code
          WHERE U.id = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;*/

      IF v_EmployeeID != -1 THEN
          BEGIN
              SELECT dm_id INTO v_EmpID FROM HU_Employee WHERE ID = v_EmployeeID;
          EXCEPTION
              WHEN OTHERS THEN
                  p_Message := 'YouNotManagerEmployee';
                  p_ResponseStatus := -600;
                  RETURN;
          END;

          /*SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE ID = v_EmpID
          AND ID = v_EmployeeID;
          IF v_temp < 1 THEN
              p_Message := 'YouNotManagerEmployee';
              p_ResponseStatus := -600;
              RETURN;
          END IF;      */
      END IF;

      SELECT COUNT(*) INTO p_Rowcount
      FROM Hu_Employee_Train W
      WHERE  W.EMPLOYEE_ID =  CASE WHEN v_EmployeeID != -1 THEN v_EmployeeID ELSE p_EmployeeID END;

      OPEN P_CUR FOR
      SELECT *
      FROM
      (
          SELECT   ROWNUM STT, ID, Employee_Code, Fullname_Vn,   School_Name  ,Specialize_Name ,Degree_Name ,Training_Content ,
              TO_CHAR(From_Date, 'YYYY-MM-DD') EffectiveDateFrom,
              TO_CHAR(To_Date, 'YYYY-MM-DD') EffectiveDateTo
          FROM
          (
                  Select
                  S.ID,
                   E.Employee_Code,
                   E.Fullname_Vn ,
                   S.School_Name,
                   S.Specialize,
                   Case When Nvl(p_Language,'vi-VN')='vi-VN' Then T.Name_Vn Else T.NAME_EN End As Specialize_Name ,
                   S.Degree,
                   Case When Nvl(p_Language,'vi-VN')='vi-VN' Then Deg.Name_Vn Else Deg.NAME_EN End As Degree_Name ,
                   S.Training_Content,
                   S.From_Date,
                   S.To_Date
                From Hu_Employee_Train S
                Inner Join Hu_Employee E On E.Id=S.Employee_Id
                Left Join Ot_Other_List T On T.CODE=S.specialize
                Left Join Ot_Other_List Deg On Deg.Code=S.Degree
                Where S.Employee_Id=CASE WHEN v_EmployeeID != -1 THEN v_EmployeeID ELSE p_EmployeeID END
                and nvl(s.is_deleted,0) <> 1
              ORDER BY S.ID DESC
          )
      )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

      p_Message := 'IsSuccess';
      p_ResponseStatus := 1;

  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_RegisterOT
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_WorkingDay IN NVARCHAR2,
      p_FromHour IN NVARCHAR2,
      p_ToHour IN NVARCHAR2,
      p_TotalHour IN NUMBER,
      p_Remark IN NVARCHAR2,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
      v_FromHour NVARCHAR2(10) := NVL(p_FromHour, '-1');
      v_ToHour NVARCHAR2(10) := NVL(p_ToHour, '-1');
      v_TotalHour NUMBER(5) := NVL(p_TotalHour, -1);
      v_Remark NVARCHAR2(300) := NVL(p_Remark, '-1');
      v_EmployeeID NUMBER(19,0);
      v_WorkingDay DATE;
      v_Today DATE;
      v_RegDate NUMBER(19,0);
      v_DefaultDate DATE;
      v_C NVARCHAR2(30);
      v_W NUMBER(19,0);
      v_FH NUMBER(19,0);
      v_TH NUMBER(19,0);
      v_APD NUMBER(19,0);
      v_maxCounter NUMBER(10,0);
      v_DateFrom NUMBER(19,0);
      v_DateTo NUMBER(19,0);
      v_EmployeeExists NUMBER(10,0);
      v_WD NUMBER(19,0);
      v_ManagerID NUMBER(19,0);
      v_DefaultDateNumber NUMBER(19,0);
      v_temp NUMBER(10,0) := 0;
  BEGIN
      v_DefaultDate := TO_DATE('01/01/1900', 'DD/MM/YYYY');
      v_Today := SYSDATE;
      p_Message := '';
      p_ResponseStatus := 1;
      --v_RegDate := BOS.FN_ConvertDateToNumber(v_Today);
      v_WorkingDay := TO_DATE(p_WorkingDay, 'MM/DD/YYYY');
      --v_DefaultDateNumber := BOS.FN_ConvertDateToNumber(v_DefaultDate);
    SELECT   TO_NUMBER(TO_CHAR(v_Today, 'YYYYMMDDHH24MISS')),
        TO_NUMBER(TO_CHAR(v_DefaultDate, 'YYYYMMDDHH24MISS'))
        INTO v_RegDate,v_DefaultDateNumber
       FROM   dual;

      IF v_UserID < 0 THEN
          p_Message := 'UserIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_WorkingDay = v_DefaultDate THEN
          p_Message := 'WorkingDayIsNotNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_FromHour = '-1' THEN
          p_Message := 'FromHourIsNotNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_ToHour = '-1' THEN
          p_Message := 'ToHourIsNotNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_TotalHour < 0 THEN
          p_Message := 'TotalHourIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Remark = '-1' THEN
          p_Message := 'RemarkIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1 ;
      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      -- Nh? v_DateFrom, v_DateTo ki?u d? li?u DATE t? n?a ph?i ??i
      --v_DateFrom := SUBSTR(BOS.FN_ConvertDateToNumber(v_WorkingDay), 0, 8) || v_FromHour || '00';
      --v_DateTo := SUBSTR(BOS.FN_ConvertDateToNumber(v_WorkingDay), 0, 8) || v_ToHour || '00';
    SELECT   SUBSTR(TO_NUMBER(TO_CHAR(v_WorkingDay, 'YYYYMMDDHH24MISS')), 0, 8) || v_FromHour || '00',
        SUBSTR(TO_NUMBER(TO_CHAR(v_WorkingDay, 'YYYYMMDDHH24MISS')), 0, 8) || v_ToHour || '00'
        INTO v_DateFrom,v_DateTo
       FROM   dual;


      IF v_DateFrom = v_DateTo THEN
          p_Message := 'FromHourEqualToHour';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      --v_WD := BOS.FN_ConvertDateToNumber(v_WorkingDay);
    SELECT   TO_NUMBER(TO_CHAR(v_WorkingDay, 'YYYYMMDDHH24MISS'))
        INTO v_WD
       FROM   dual;

      DECLARE
          v_EmployeeCode NVARCHAR2(30);
          v_Holiday NUMBER(19,0);
          v_ShiftID NUMBER(19,0);
          v_ShiftStart NUMBER(19,0);
          v_ShiftEnd NUMBER(19,0);
          v_ShiftBearkStart NUMBER(19,0);
          v_ShiftBearkEnd NUMBER(19,0);
          v_WorkingdayCheck NUMBER(19,0);
          v_ToHourCheck NUMBER(19,0);
          v_CountRegisted NUMBER(19,0);
          v_FromHourCheck NUMBER(19,0);
      BEGIN
          SELECT EMPLOYEE_CODE INTO v_EmployeeCode FROM HU_Employee WHERE ID = v_EmployeeID;

         -- Check d? dang k?
          SELECT count(*)
          INTO  v_CountRegisted
          FROM AT_PORTAL_REG apr
          inner join at_sign s on s.id=apr.sign_id
       inner join at_gsign           a on a.id =s.at_gsignid
          WHERE    a.code  = 'OVERTIME'
       --AND   SUBSTR(WorkingDay, 0, 8) = SUBSTR(v_WD, 0, 8)
       AND   TO_CHAR(apr.working_day , 'YYYYMMDD') <= SUBSTR(v_WD, 0, 8)
       AND   TO_CHAR(apr.to_hour , 'YYYYMMDD') <= SUBSTR(v_WD, 0, 8)
       AND   (( TO_CHAR(apr.from_hour,'HH24MISS') < v_FromHour  AND  TO_CHAR(apr.TO_HOUR ,'HH24MISS') < v_FromHour)
           OR ( TO_CHAR(apr.FROM_HOUR,'HH24MISS') < v_ToHour  AND  TO_CHAR(apr.TO_HOUR ,'HH24MISS') < v_ToHour)
       )
          AND   apr.employee_id = v_EmployeeID;

          IF v_CountRegisted > 0
          THEN
              p_Message := 'HourRegisted';
              p_ResponseStatus := -600;
          END IF;

           SELECT COUNT(*) INTO v_Holiday
            FROM AT_Holiday
            WHERE SUBSTR(WorkingDay, 0, 8) = SUBSTR(v_WorkingDay, 0, 8);

          IF v_Holiday > 0 THEN
              p_Message := 'DayIsHoliday';
              p_ResponseStatus := -600;
          END IF;
      EXCEPTION
          WHEN OTHERS THEN NULL;

      END;

      IF p_ResponseStatus > 0 THEN
          DECLARE
              v_ID NUMBER(19,0);
          BEGIN
              SELECT he.dm_id INTO v_ManagerID FROM HU_EMPLOYEE he WHERE ID = v_EmployeeID;

              --v_ID := SEQ_Portal_Register_OT.NEXTVAL;

             /* INSERT INTO AT_PORTAL_REG (
                  ID, ID_EMPLOYEE , FROM_DATE ,TO_DATE ,FROM_HOUR , TO_HOUR ,
                  HOURCOUNT ,   NOTE , SVALUE ,
                  Status, CREATED_BY , CREATED_DATE
              ) SELECT
                  NVL((SELECT max(ID) FROM AT_PORTAL_REG apr ),0)+1 , v_EmployeeID,
                  API_FN_CONVERTNUMBERTODATE(v_DateFrom), API_FN_CONVERTNUMBERTODATE(v_DateTo),
                  v_FromHour, v_ToHour,
                  v_TotalHour,  v_Remark, 'OVERTIME',
                  1, v_UserID,  API_FN_CONVERTNUMBERTODATE(v_RegDate )
              FROM dual;*/

              /*API_SaveNotification('',v_ManagerID, v_EmployeeID, 2, v_ID, 'SendRequestRegisterOT',0,0, p_Message, p_ResponseStatus);

              COMMIT;*/
          EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
                  DBMS_OUTPUT.PUT_LINE('ROLLBACK' || SQLCODE || ', ' || SQLERRM);
                  p_Message := 'DatabaseError';
                  p_ResponseStatus := -99;
                  RETURN;
          END;
      END IF;

      IF p_ResponseStatus > 0 THEN
          p_Message := 'IsSuccess';
      END IF;

  EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE || ', ' || SQLERRM);
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;



  PROCEDURE API_ApproveRegisterLeave
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_RegisterID IN NUMBER,
      p_Comment IN NVARCHAR2,
      p_Cur OUT CURSOR_TYPE,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
      v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
      v_EmployeeID NUMBER(19,0);
      v_UserRegisterID NUMBER(19,0);
      v_StatusNow NUMBER(19,0);
      v_ManagerID NUMBER(19,0);
      v_I NUMBER(19,0);
      v_temp NUMBER(19,0) := 0;
  BEGIN
      p_ResponseStatus := 1;

      IF v_UserID = -1 THEN
          p_Message := 'UserIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_RegisterID = -1 THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Comment = '-1' THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'serIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
         SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      BEGIN
          SELECT apr.employee_id , Status INTO v_UserRegisterID, v_StatusNow FROM AT_PORTAL_REG apr WHERE ID = v_RegisterID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'RegisterIDIsNotFound';
              p_ResponseStatus := -600;
              RETURN;
      END;

      SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_APP apa WHERE ID_EMPLOYEE = v_EmployeeID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependent';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE dm_id = v_EmployeeID AND ID = v_UserRegisterID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependentEmployee';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
          BEGIN
            /*
            UPDATE AT_PORTAL_APP SET APPROVE_DATE  = SYSDATE , APPROVE_STATUS = 2
            WHERE ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_PORTAL_REG apr2 WHERE id = v_RegisterID)
            AND ID_EMPLOYEE  = v_EmployeeID; -- user c? quy?n duy?t

              UPDATE AT_PORTAL_REG SET Status = 2, NOTE_AT = v_Comment
              WHERE ID = v_RegisterID;

  */
              SELECT   ID_EMPLOYEE, ID INTO v_ManagerID, v_I FROM AT_PORTAL_APP apa
               WHERE   ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_PORTAL_REG apr2 WHERE id = v_RegisterID)
              AND   ID_EMPLOYEE  = v_EmployeeID
              AND   rownum = 1
              ; -- user c? quy?n duy?t


              /*API_SaveNotification('',v_UserRegisterID,v_ManagerID, 3, v_I, 'Apporve Request Register Leave', 0,0,p_Message, p_ResponseStatus);
              COMMIT;*/

              OPEN p_Cur FOR


                SELECT
                      1 STT,
                      R.ID ID,
                      TO_CHAR(R.From_Hour, 'DD/MM/YYYY' )  LeaveFrom,
                      TO_CHAR(R.Working_Day , 'DD/MM/YYYY' ) LeaveTo,
                      R.FROM_HOUR FromHour,
                      R.TO_HOUR ToHour,
                      '{' || S.NAME || '}' SymbolName,
                      NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour ,
                      v_Comment AS Remark ,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE , 'DD/MM/YYYY HH24:MI:SS' ) CreateTime,
                      R.ID_REGGROUP ID_REGGROUP,
                        ApiType.Name TypeName,
                        R.Note Note
                  FROM AT_PORTAL_REG R
                       LEFT JOIN AT_TIME_MANUAL S   ON R.Sign_Id = S.ID
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                         LEFT JOIN (SELECT
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Sign_Id = ApiType.Id
                  WHERE R.ID = v_RegisterID
        ;
              --DBMS_SQL.RETURN_RESULT(v_CURSOR);
          EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
                  p_Message := 'DatabaseError';
                  p_ResponseStatus := -99;
                  RETURN;
          END;
      ELSE
         OPEN p_Cur FOR
                  SELECT
                      1 STT,
                      R.ID ID,
                      TO_CHAR(R.Working_Day, 'DD/MM/YYYY' )  LeaveFrom,
                      TO_CHAR(R.Working_Day , 'DD/MM/YYYY' ) LeaveTo,
                      R.FROM_HOUR FromHour,
                      R.TO_HOUR ToHour,
                      '{' || S.NAME || '}' SymbolName,
                      NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour  ,
                      v_Comment AS Remark ,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE , 'DD/MM/YYYY HH24:MI:SS' ) CreateTime,
                      R.ID_REGGROUP ID_REGGROUP,
                        ApiType.Name TypeName,
                        R.Note Note
                  FROM AT_PORTAL_REG R
                       LEFT JOIN AT_TIME_MANUAL S   ON R.Sign_Id = S.ID
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                         LEFT JOIN (SELECT
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Sign_Id = ApiType.Id
                  WHERE R.ID = v_RegisterID;

         p_Message := 'RegisterIdIsApproved';
           p_ResponseStatus := -99;
      END IF;

  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;


  PROCEDURE API_ApproveRegisterWLEO
  (p_Language       IN nvarchar2,
      p_UserID IN NUMBER,
      p_RegisterID IN NUMBER,
      p_Comment IN NVARCHAR2,
      p_Cur OUT CURSOR_TYPE,
      p_Message OUT NVARCHAR2,
      p_ResponseStatus OUT NUMBER
  )
  AS
      v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
      v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
      v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
      v_EmployeeID NUMBER(19,0);
      v_UserRegisterID NUMBER(19,0);
      v_StatusNow NUMBER(19,0);
      v_ManagerID NUMBER(19,0);
      v_I NUMBER(19,0);
      v_temp NUMBER(19,0) := 0;
  BEGIN
      p_ResponseStatus := 1;

      IF v_UserID = -1 THEN
          p_Message := 'UserIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_RegisterID = -1 THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF v_Comment = '-1' THEN
          p_Message := 'RegisterIDIsNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      BEGIN
          SELECT   he.ID INTO v_EmployeeID
           FROM   HU_EMPLOYEE he
           JOIN   SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE
         WHERE   su.ID = v_UserID
         AND     (( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
         AND rownum = 1  ;
      EXCEPTION
          WHEN NO_DATA_FOUND THEN
              p_Message := 'UserNotConfig';
              p_ResponseStatus := -600;
              RETURN;
      END;

      BEGIN
          SELECT apr.employee_id , Status INTO v_UserRegisterID, v_StatusNow FROM AT_PORTAL_REG apr WHERE ID = v_RegisterID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'RegisterIDIsNotFound';
              p_ResponseStatus := -600;
              RETURN;
      END;

      SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_APP apa WHERE ID_EMPLOYEE = v_EmployeeID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependent';
          p_ResponseStatus := v_EmployeeID;---600;
          RETURN;
      END IF;

      SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE dm_id = v_EmployeeID AND ID = v_UserRegisterID;
      IF v_temp < 1 THEN
          p_Message := 'ManagerNotDependentEmployee';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
          BEGIN
           /* -- chuy?n g?i service
            UPDATE AT_PORTAL_APP SET APPROVE_DATE  = SYSDATE , APPROVE_STATUS = 2
            WHERE ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_PORTAL_REG apr2 WHERE apr2.id = v_RegisterID)
            AND ID_EMPLOYEE  = v_EmployeeID; -- user c? quy?n duy?t

              UPDATE   AT_PORTAL_REG SET Status = 2, NOTE_AT = v_Comment
              WHERE   ID = v_RegisterID;
      */
              SELECT   ID_EMPLOYEE, ID INTO v_ManagerID, v_I
              FROM   AT_PORTAL_APP apa
               WHERE   ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_PORTAL_REG apr2 WHERE apr2.id = v_RegisterID)
              AND   ID_EMPLOYEE  = v_EmployeeID -- user c? quy?n duy?t
        AND   rownum = 1
        ORDER BY apa.ID  DESC
              ;
               COMMIT;

              --API_SaveNotification('',v_UserRegisterID,v_ManagerID , 3, v_I, 'Apporve Request Register WLEO',0,0, p_Message, p_ResponseStatus);

               IF p_ResponseStatus = -99 THEN

                 p_Message := 'IsSuccess|NotifyException';
               END IF;

              OPEN p_Cur FOR
                  SELECT
                      1 STT,
                      R.ID ID,
                      TO_CHAR(R.Working_Day, 'DD/MM/YYYY' )  LeaveFrom,
                      TO_CHAR(R.Working_Day , 'DD/MM/YYYY' ) LeaveTo,
                      R.FROM_HOUR FromHour,
                      R.TO_HOUR ToHour,
                      '{' || S.NAME || '}' SymbolName,
                      NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour ,
                      v_Comment AS Remark ,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE , 'DD/MM/YYYY HH24:MI:SS' ) CreateTime,
                        R.ID_REGGROUP,
                        R.Note Note,
                        apiType.NAME TypeName
                  FROM AT_PORTAL_REG R
                       LEFT JOIN AT_TIME_MANUAL S   ON R.Sign_Id = S.ID
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                         LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME
                                    FROM   AT_TIME_MANUAL atm
                                    WHERE   ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.sign_id = apiType.Id
                  WHERE R.ID = v_RegisterID;

              --DBMS_SQL.RETURN_RESULT(v_CURSOR);
          EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
                  p_Message := 'DatabaseErrorExc';
                  p_ResponseStatus := -99;
                  RETURN;
          END;
      ELSE
         OPEN p_Cur FOR
                  SELECT
                      1 STT,
                      R.ID ID,
                      TO_CHAR(R.Working_Day, 'DD/MM/YYYY' )  LeaveFrom,
                      TO_CHAR(R.Working_Day , 'DD/MM/YYYY' ) LeaveTo,
                      R.FROM_HOUR FromHour,
                      R.TO_HOUR ToHour,
                      '{' || S.NAME || '}' SymbolName,
                      NVL(R.To_Hour-r.from_hour , 0)*24 TotalHour ,
                      v_Comment AS Remark ,
                      R.Status Status,
                      E.FULLNAME_VN EmployeeName,
                      TO_CHAR(R.CREATED_DATE , 'DD/MM/YYYY HH24:MI:SS' ) CreateTime,
                      R.ID_REGGROUP ID_REGGROUP,
                        NVL(R.Note, ' ') Note,
                        NVL(apiType.NAME, ' ') TypeName
                  FROM AT_PORTAL_REG R
                       LEFT JOIN AT_TIME_MANUAL S   ON R.Sign_Id = S.ID
                       LEFT JOIN HU_Employee E   ON r.employee_id = E.ID
                         LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME
                                    FROM   AT_TIME_MANUAL atm
                                    WHERE   ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.sign_id = apiType.Id
                  WHERE R.ID = v_RegisterID;


         p_Message := 'RegisterIdIsApproved';
           p_ResponseStatus := -99;
      END IF;

  EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
  END;

  PROCEDURE API_GET_LIST_ORG(p_Language       IN nvarchar2,
      P_KEYWORD IN NVARCHAR2,
      P_ORG_ID_ROOT OUT NUMBER,
      P_CUR OUT CURSOR_TYPE, P_MESSAGE OUT NVARCHAR2, P_RESPONSESTATUS OUT NUMBER
      ) AS
      v_KEYWORD NVARCHAR2(100) := (NVL(P_KEYWORD, ' '));
    BEGIN

       P_RESPONSESTATUS:= 1;
       P_MESSAGE := 'IsSuccess';
       --SELECT REPLACE (P_KEYWORD ,'--', '') INTO P_KEYWORD FROM dual;

        -- L?y ORG ID root
        SELECT   ID  INTO P_ORG_ID_ROOT
        FROM   HU_ORGANIZATION o
        WHERE   o.status = 1
        AND    NVL(PARENT_ID, 0 ) = 0
        ;

        OPEN P_CUR FOR
          SELECT *
          FROM (
            SELECT
                t.ID,
                t.CODE,
                t.NAME_VN,
                NVL(t.PARENT_ID,0) AS PARENT_ID

            FROM HU_ORGANIZATION t
             JOIN (
              SELECT   0 AS id , u'' NAME_VN
              FROM   dual
              UNION all
              SELECT   id , REPLACE(Name_vn ,'"','') Name_vn
              FROM   HU_ORGANIZATION  o
              WHERE   o.status = 1
            ) org2 ON org2.id = NVL(t.PARENT_ID,0)
           )  t

            START WITH NVL(t.PARENT_ID,0) = 0
            CONNECT BY PRIOR t.ID = PARENT_ID AND t.NAME_VN LIKE '%' || v_KEYWORD  || '%';

      EXCEPTION WHEN OTHERS THEN
      BEGIN
         P_RESPONSESTATUS:= -600;
         P_MESSAGE := 'Error';
      END;
    END;

   PROCEDURE API_GET_LIST_POSITION(p_Language       IN nvarchar2,
                       P_KEYWORD IN NVARCHAR2,
                                        P_LANG IN NVARCHAR2,
                                        P_ORG_ID IN NUMBER,
                                        P_PAGE IN NUMBER,
                                        P_PAGE_SIZE IN NUMBER,
                                        P_ROWCOUNT OUT NUMBER,
                                        P_CUR  OUT CURSOR_TYPE,
                                        P_MESSAGE OUT NVARCHAR2,
                                        P_RESPONSESTATUS OUT NUMBER
   )
   AS
       --v_UserName
       P_TODAY DATE := TRUNC(SYSDATE);
        v_Text NVARCHAR2(100) := ' ';
        v_KEYWORD NVARCHAR2(100) := UPPER(NVL(P_KEYWORD, v_Text));
        V_PAGE NUMBER(10) := NVL(P_PAGE, 1);
        V_PAGE_SIZE NUMBER(10) := NVL(P_PAGE_SIZE, 20);
        v_OrgTempId NUMBER(19,0) := NVL(P_ORG_ID, -1);
        v_RootParentId NUMBER(19,0):= NVL(P_ORG_ID, 0);
   begin
   /*
    SELECT STT, ID, CODE, Concurrent, Employee_Code, Employee_ID,
                    Employee_Right, Fullname_Vn, Hiring_Status, INTERIM_CODE,
                    Is_owner, JOB_CODE, JOB_POSITION_NAME, mobile_phone, ORG_CODE, ORG_ID, description_path,ORG_NAME
*/
        SELECT   ID  INTO v_RootParentId
        FROM   HU_ORGANIZATION   o
        WHERE   o.status = 1
        AND    NVL(PARENT_ID, 0 ) = 0
        ;
     if v_OrgTempId=-1 or v_OrgTempId = v_RootParentId then
   OPEN P_CUR
     FOR

     SELECT   *
     FROM (
     SELECT    ROWNUM AS STT,
        ht.ID ,
        ht.CODE ,
        NULL AS Concurrent,
        he.EMPLOYEE_CODE,
        he.ID AS EMPLOYEE_ID,
        -1 AS Employee_Right,
        he.FULLNAME_VN,
        NULL AS Hiring_Status,
        NULL AS INTERIM_CODE,
        NULL AS Is_owner,
        NULL AS JOB_CODE,
        ht.NAME_VN AS JOB_POSITION_NAME,
        hec.contact_phone HOME_PHONE ,
        hec.contact_mobile MOBILE_PHONE ,
        ho.CODE  AS ORG_CODE,
        ho.ID  AS ORG_ID ,
        ho.DESCRIPTION_PATH ,
        CASE WHEN P_LANG = 'vi-VN' then ho.NAME_VN ELSE ho.NAME_EN end AS ORG_NAME

  FROM     HU_EMPLOYEE he
  LEFT JOIN   HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID
  LEFT JOIN   HU_ORGANIZATION ho ON ho.id = he.ORG_ID
  LEFT JOIN   HU_TITLE ht ON ht.id = he.TITLE_ID
  LEFT JOIN   OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
  LEFT JOIN   OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
  --LEFT JOIN   SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName
  LEFT JOIN   HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id
  WHERE
        UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(hec.contact_mobile) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(hec.per_mail) LIKE '%' || v_KEYWORD || '%'
    )
  WHERE STT > ((V_PAGE - 1)* V_PAGE_SIZE) AND STT < (V_PAGE * V_PAGE_SIZE + 1)
  ;

  SELECT COUNT(*) INTO P_ROWCOUNT
  FROM     HU_EMPLOYEE he
  LEFT JOIN   HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID
  LEFT JOIN   HU_ORGANIZATION ho ON ho.id = he.ORG_ID
  LEFT JOIN   HU_TITLE ht ON ht.id = he.TITLE_ID
  LEFT JOIN   OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
  LEFT JOIN   OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
  --LEFT JOIN   SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName
  LEFT JOIN   HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id
  WHERE
        UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(hec.contact_mobile) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(hec.per_mail) LIKE '%' || v_KEYWORD || '%'

   ;
else
  OPEN P_CUR
     FOR

 SELECT   *
     FROM (
     SELECT    ROWNUM AS STT,
        ht.ID ,
        ht.CODE ,
        NULL AS Concurrent,
        he.EMPLOYEE_CODE,
        he.ID AS EMPLOYEE_ID,
        -1 AS Employee_Right,
        he.FULLNAME_VN,
        NULL AS Hiring_Status,
        NULL AS INTERIM_CODE,
        NULL AS Is_owner,
        NULL AS JOB_CODE,
        ht.NAME_VN AS JOB_POSITION_NAME,
        hec.contact_phone HOME_PHONE ,
        hec.contact_mobile MOBILE_PHONE ,
        ho.CODE  AS ORG_CODE,
        ho.ID  AS ORG_ID ,
        ho.DESCRIPTION_PATH ,
        CASE WHEN P_LANG = 'vi-VN' then ho.NAME_VN ELSE ho.NAME_EN end AS ORG_NAME

  FROM     HU_EMPLOYEE he
  LEFT JOIN   HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID
  LEFT JOIN   HU_ORGANIZATION ho ON ho.id = he.ORG_ID
  LEFT JOIN   HU_TITLE ht ON ht.id = he.TITLE_ID
  LEFT JOIN   OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
  LEFT JOIN   OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
  --LEFT JOIN   SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName
  LEFT JOIN   HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id
  WHERE
        UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(hec.contact_phone) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(hec.per_mail) LIKE '%' || v_KEYWORD || '%'
            START WITH ho.PARENT_ID = P_ORG_ID --NVL(PARENT_ID,0) = 0
            CONNECT BY PRIOR ho.ID = ho.PARENT_ID
            ORDER BY NLSSORT(he.Fullname_Vn, 'nls_sort = Vietnamese')
    )
  WHERE STT > ((V_PAGE - 1)* V_PAGE_SIZE) AND STT < (V_PAGE * V_PAGE_SIZE + 1)
  ;

  SELECT COUNT(*) INTO P_ROWCOUNT
  FROM     HU_EMPLOYEE he
  LEFT JOIN   HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID
  LEFT JOIN   HU_ORGANIZATION ho ON ho.id = he.ORG_ID
  LEFT JOIN   HU_TITLE ht ON ht.id = he.TITLE_ID
  LEFT JOIN   OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
  LEFT JOIN   OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
  --LEFT JOIN   SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName
  LEFT JOIN   HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id
  WHERE
        UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(hec.contact_mobile) LIKE '%' || v_KEYWORD || '%' OR
          UPPER(hec.per_mail) LIKE '%' || v_KEYWORD || '%'
    START WITH ho.PARENT_ID = P_ORG_ID --NVL(PARENT_ID,0) = 0
            CONNECT BY PRIOR ho.ID = ho.PARENT_ID

   ;
    end if;
  P_MESSAGE := 'IsSucess';
    P_RESPONSESTATUS := 1;



   END;


  PROCEDURE API_GET_EMPLOYEE_INFO(p_Language       IN nvarchar2,P_EMPLOYEE_ID IN NUMBER,
                                        P_CUR OUT CURSOR_TYPE,
                                        P_MESSAGE OUT NVARCHAR2,
                                        P_RESPONSESTATUS OUT NUMBER)
    AS
        V_EMPLOYEE_ID NUMBER(10) := NVL(P_EMPLOYEE_ID, 0);
    BEGIN
        --SP_API_GET_MESSAGE('SUCCESSS', P_RESPONSESTATUS, P_MESSAGE);
        P_MESSAGE := 'IsSucess';
      P_RESPONSESTATUS := 1;

        IF V_EMPLOYEE_ID = 0 THEN
            P_RESPONSESTATUS := 400;
            P_MESSAGE := 'EmployeeID is required.';
            RETURN;
        END IF;

        OPEN P_CUR FOR
        SELECT
            e.ID,
            e.FULLNAME_VN FULLNAME_VN,
            case when cv.Image is null then '/services/EmployeeImage/NoImage.jpg' else ('/services/EmployeeImage/' || cast(cv.IMAGE as varchar2(255))) end as PATH,
            se.USERNAME USERNAME,
            j.NAME_VN JOB_POSITION_NAME,
            CASE WHEN cv.GENDER = 565 THEN 'F' ELSE 'M' END GENDER,
            cv.contact_mobile MOBILE_PHONE,
            cv.contact_phone MOBILE_PHONE2,
            cv.BIRTH_DATE BIRTH_DATE,
            na.NAME_VN NATIONALITY_NAME,
            cv.PER_ADDRESS PER_ADDRESS,
            cv.ID_NO ID_NO,
            cv.per_mail PER_EMAIL
        FROM HU_EMPLOYEE e INNER JOIN SE_USER se
            ON e.EMPLOYEE_CODE = se.EMPLOYEE_CODE
            INNER JOIN HU_TITLE j
            ON e.TITLE_ID = j.ID
            INNER JOIN HU_EMPLOYEE_CV cv
            ON e.ID = cv.EMPLOYEE_ID
            LEFT JOIN HU_NATION na
            ON cv.nav_nation = na.ID
        WHERE e.ID = V_EMPLOYEE_ID
        AND rownum = 1
        ORDER BY e.employee_code  DESC ;

    EXCEPTION WHEN OTHERS THEN
        BEGIN
            --SP_API_GET_MESSAGE('ERROR', P_RESPONSESTATUS, P_MESSAGE);
             P_MESSAGE := 'DBError';
      P_RESPONSESTATUS := -600;

        END;
    END;

    -- demo
--====================================================================================================================================================
-- Lay thong tin user hien tai
-- Thay doi: Truyen them Param in: UserId lay tu token va chi su dung tham so nay
PROCEDURE API_GET_USER_INFO( p_Language IN nvarchar2,
                             P_USER_ID IN NUMBER,
                             P_USERID IN NUMBER ,
                              P_CUR OUT CURSOR_TYPE,
                              P_MESSAGE OUT NVARCHAR2,
                              P_RESPONSESTATUS OUT NUMBER)
    AS
        V_USER_ID NUMBER(10) := NVL(P_USERID, 0);
    BEGIN
        P_MESSAGE := 'IsSucess';
      P_RESPONSESTATUS := 1;

Insert Into At_strsql Values (Seq_at_strsql.nextval, p_Language);
      Commit;
      
        IF V_USER_ID = 0 THEN
            P_RESPONSESTATUS := 400;
            P_MESSAGE := 'EmployeeID is required.';
            RETURN;
        END IF;

        OPEN P_CUR FOR
        SELECT
              e.ID,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then e.FULLNAME_VN ELSE e.fullname_vn END FULLNAME_VN,
              case when cv.Image is null then '/services/EmployeeImage/NoImage.jpg' else ('/services/EmployeeImage/' || cast(cv.IMAGE as varchar2(255))) end as PATH,
              se.USERNAME USERNAME,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then j.NAME_VN ELSE j.NAME_EN END JOB_POSITION_NAME,
              CASE WHEN cv.GENDER = 0 THEN 'M' ELSE 'F' END GENDER,
              cv.contact_mobile MOBILE_PHONE,
              cv.contact_phone MOBILE_PHONE2,
              TO_CHAR(cv.BIRTH_DATE,'YYYY-MM-DD') BIRTH_DATE,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then na.NAME_VN ELSE na.NAME_EN END NATIONALITY_NAME,
              NVL(cv.PER_ADDRESS,' ') PER_ADDRESS,
              cv.ID_NO ID_NO,
              --NVL(cv.per_mail,cv.local_mail ) PER_EMAIL,
              NVL(cv.contact_address,' ') CON_ADDRESS ,
              NVL(cv.NAV_ADDRESS,' ') NAV_ADDRESS,

              E.EMPLOYEE_CODE,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then O.NAME_VN else o.name_en end ORG_GOC,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then t1.name_vn else t1.name_en end TITLE_GOC,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then O1.NAME_VN else o1.name_en end RANK_GOC,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then O2.NAME_VN else o2.name_en end ORG_NOW,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then J.NAME_VN else j.name_en end TITLE_NOW,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then OT.NAME_VN else ot.name_en end RANK_NOW,
              TO_CHAR(E.JOIN_DATE,'YYYY-MM-DD') JOIN_DATE,
              TO_CHAR(E.JOIN_BANK_DATE,'YYYY-MM-DD') JOIN_BANK_DATE,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then PR.NAME_VN else pr.name_en end BIRTH_PLACE,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NA1.NAME_VN else na1.name_en end QUOC_TICH,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then OT1.NAME_VN else ot1.name_en end NATIVE,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then OT2.NAME_VN else ot2.name_en end RELIGION,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then OT3.NAME_VN else ot3.name_en end MARITAL,
              TO_CHAR(CV.ID_DATE,'YYYY-MM-DD') ID_DATE,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then OT4.NAME_VN else ot4.name_en end ID_PLACE,
              INF.SOCIAL_NUMBER,

              CV.TEMP_ADDRESS,
              CV.CONTACT_ADDRESS,
              CV.PER_MAIL,
              CV.LOCAL_MAIL,
              CV.FAMILY_NAME,
              CV.ANSWERABLE_RELATION,
              CV.FAMILY_PHONE,
              CV.ANSWERABLE_NAME,
              CV.PITCODE,
              CV.BANK_TRANSFER_NO,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then OT5.NAME_VN else ot5.name_en end TT_VANHOA,
              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then OT6.NAME_VN else ot6.name_en end TT_HOCVAN


        FROM HU_EMPLOYEE e
        INNER JOIN SE_USER se ON e.EMPLOYEE_CODE = se.EMPLOYEE_CODE

        left join hu_organization o on e.org_goc = o.id
        left join hu_title t1 on e.title_goc = t1.id
        left join ot_other_list o1 on t1.rank_id = o1.code and o1.type_code = 'TITLE_LEVEL'
        left join hu_organization o2 on e.org_id = o2.id
        LEFT JOIN HU_TITLE j ON e.TITLE_ID = j.ID
        left join ot_other_list ot on j.rank_id = o1.code and o1.type_code = 'TITLE_LEVEL'

        LEFT JOIN HU_EMPLOYEE_CV cv ON e.ID = cv.EMPLOYEE_ID
        left join hu_province pr on cv.birth_place = pr.id
        left join hu_nation na1 on na1.id = cv.nationality_code
        left join ot_other_list ot1 on cv.native_code  = to_char(ot1.CODE) and ot1.type_code = 'NATIVE'
        left join ot_other_list ot2 on cv.religion_code  = to_char(ot2.CODE) and ot2.type_code = 'RELIGION'
        left join ot_other_list ot3 on cv.marital_code  = to_char(ot3.CODE) and ot3.type_code = 'MARITAL_STATUS'
        left join ot_other_list ot4 on cv.id_place_code  = to_char(ot4.CODE) and ot4.type_code = 'ID_PLACE'
        left join ins_information inf on inf.employee_id = e.id

        left join hu_employee_education edu on edu.employee_id = e.id
        left join ot_other_list ot5 on edu.academy_code  = to_char(ot5.CODE) and ot5.type_code = 'ACADEMY'
        left join ot_other_list ot6 on edu.learning_level_code = to_char(ot6.CODE) and ot6.type_code = 'LEARNING_LEVEL'


        LEFT JOIN HU_NATION na  ON cv.nav_nation = na.ID
        WHERE se.ID = V_USER_ID AND
        rownum = 1
        ORDER BY e.is_deleted  DESC ;

    EXCEPTION WHEN OTHERS THEN
        BEGIN
             P_MESSAGE :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
      P_RESPONSESTATUS := -600;

        END;
    END;
    -- L?y ds cho ph?p ch?m GPS
PROCEDURE API_GetAllowGPSLocation
        (
    p_Language IN nvarchar2,
            p_UserID IN NUMBER,
            p_WorkDay IN nvarchar2,
            p_Shift_Info OUT NVARCHAR2,
            p_Cur OUT CURSOR_TYPE,
            p_Message OUT NVARCHAR2,
            p_ResponseStatus OUT NUMBER
        )
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_WorkDay nvarchar2(20) := p_WorkDay;
        v_WorkDayDate DATE ;
        v_EmpId number(19,0);
    BEGIN

      -- Chuy?n d?i th?i gian
      BEGIN
        SELECT TO_DATE(v_WorkDay,'YYYY-MM-DD') INTO v_WorkDayDate FROM dual;
    EXCEPTION WHEN OTHERS THEN
      p_Message := 'WorkDay format is not in YYYY-MM-DD';
      p_ResponseStatus := -600;
      RETURN;
    END;
      -- L?y ID nh?n vi?n
      BEGIN
        SELECT  ID
        INTO   v_EmpId
        FROM   HU_EMPLOYEE he
        WHERE   he.EMPLOYEE_CODE  IN (SELECT EMPLOYEE_CODE FROM se_user WHERE id = v_UserId)
        AND   rownum = 1
        ORDER BY id DESC ;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      p_Message := 'Employee is not found';
      p_ResponseStatus := -600;
      RETURN;
    END;

    -- l?y th?ng tin ca
    BEGIN
        SELECT  as2.at_sign_code || u' - ' || CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then as2.Name  ELSE as2.Name END
        INTO   p_Shift_Info
        FROM   AT_WORKSIGN aw
        LEFT JOIN
            AT_SHIFT as2 ON as2.id = aw.SHIFT_ID
        WHERE   aw.EMPLOYEE_ID  = v_EmpId
         AND   TO_CHAR(aw.WORKINGDAY ,'YYYY-MM-DD' )= p_WorkDay
        ORDER BY aw.id DESC ;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      p_Message := 'Shift and work sign are not found ' || p_WorkDay || '+' || to_char(v_EmpId);
      p_ResponseStatus := -600;
      RETURN;
    END;

    --p_Rowcount:= 0;
    -- tr? v? gi? tr?
    OPEN p_Cur FOR
    select   code,
        CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NAME_VN ELSE NAME_EN END   AS Name,
        ATTRIBUTE1  AS Longitude,
        ATTRIBUTE2  AS Latitude,
        ATTRIBUTE3  AS Radius
    from   ot_other_list
    where   type_id in (select id from ot_other_list_type where code = 'GPS_LOCATION')
    ;
     p_Message := u'Success';
     p_ResponseStatus := 1;

   EXCEPTION
      WHEN OTHERS THEN
          p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
          p_ResponseStatus := -99;
  END;
  Procedure API_Get_Process_Salary(
            p_CompanyCode IN NVARCHAR2,
            p_Language In Nvarchar2,
            p_UserID     In Number,
            --p_Password          In Nvarchar2,
            --p_DeviceID  In Nvarchar2,
            --p_Firebase_Client_Id In Nvarchar2,
            p_Cur            Out CURSOR_TYPE,
            p_RowCount       OUT NUMBER,
            p_Message     Out Nvarchar2,
            p_ResponseStatus OUT Number
    )As
     v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
     v_EMPID NUMBER(10);
      v_temp NUMBER(19, 0) := 0;
      v_Pwd Nvarchar2(50):='';
    Begin
      IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
     /* SELECT ID,PASSWORD INTO v_temp,v_Pwd FROM SE_User WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
      IF p_Password<> trim(v_Pwd) THEN
          p_Message := 'PassWordIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF; */
      BEGIN
          SELECT su.employee_id INTO v_EmpID
          FROM SE_USER su
          WHERE su.ID = v_UserID;
      EXCEPTION
          WHEN OTHERS THEN
              p_Message := 'EmployeeNotFound';
              p_ResponseStatus := -600;
              RETURN;
      END;
      --Check Pw hop le khong?
       SELECT COUNT(*) INTO p_Rowcount
      FROM Hu_Salary S
      Inner Join Hu_Employee E On E.Id=S.Employee_Id
      WHERE S.EMPLOYEE_ID = v_EMPID ;
      Open p_Cur For
      Select ROWNUM STT,
             E.Employee_Code,
             E.Fullname_Vn ,
             Nvl(to_char(S.Effect_Date, 'YYYY-MM-DD'), ' ') Effect_Date,
             to_char(S.Standard_Salary,'fm99G999G999G999G999') Standard_Salary,
             to_char(S.Rate_Salary,'fm99G999G999G999G999') Rate_Salary,
             to_char(S.Ins_Salary,'fm99G999G999G999G999') Ins_Salary,
             to_char(S.Sumallow,'fm99G999G999G999G999') Sumallow,
             to_char(S.Luong_Bh,'fm99G999G999G999G999') Luong_Bh
      From Hu_Salary S
      Inner Join Hu_Employee E On E.Id=S.Employee_Id
      Where S.Employee_Id=v_EMPID
      and nvl(s.is_deleted,0) <> 1
      ;
      p_Message := u'Success';
       p_ResponseStatus := 1;
      EXCEPTION
      WHEN OTHERS THEN
          p_Message := 'DatabaseError';
          p_ResponseStatus := -99;
    End;
  Procedure API_Get_Process_TrainOutBank(
      p_CompanyCode IN NVARCHAR2,
      p_Language In Nvarchar2,
      p_UserID     In Number,
      p_Cur            Out CURSOR_TYPE,
      p_Message     Out Nvarchar2,
      p_ResponseStatus OUT Number
   )As
   v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
   v_EMPID NUMBER(10);
   v_temp NUMBER(19, 0) := 0;
   Begin
     IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
     SELECT ID INTO v_temp FROM SE_User WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;
    Open p_Cur For
    Select E.Employee_Code,
             E.Fullname_Vn ,
             S.School_Name,
             S.Specialize,
             Case When Nvl(p_Language,'vi-VN')='vi-VN' Then T.Name_Vn Else T.NAME_EN End As Specialize_Name ,
             S.Degree,
             Case When Nvl(p_Language,'vi-VN')='vi-VN' Then Deg.Name_Vn Else Deg.NAME_EN End As Degree_Name ,
             S.Training_Content,
             --S.From_Date,
             Nvl(to_char(S.From_Date, 'DD/MM/YYYY'), ' ')      From_Date,
             --S.To_Date
             Nvl(to_char(S.To_Date, 'DD/MM/YYYY'), ' ')      To_Date
      From Hu_Employee_Train S
      Inner Join Hu_Employee E On E.Id=S.Employee_Id
      Left Join Ot_Other_List T On T.CODE=S.specialize
      Left Join Ot_Other_List Deg On Deg.Code=S.Degree
      Where S.Employee_Id=v_EMPID;
    p_Message := u'Success';
     p_ResponseStatus := 1;
     EXCEPTION
      WHEN OTHERS THEN
          p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
          p_ResponseStatus := -99;
   End;
   Procedure API_Process_TrainInCompany(
                                         p_CompanyCode IN NVARCHAR2,
                                         p_Language IN NVARCHAR2,
                                         p_UserID IN NUMBER,
                                         p_Cur   OUT CURSOR_TYPE,
                                         --p_RowCount       OUT NUMBER,
                                         p_Message OUT NVARCHAR2,
                                         p_ResponseStatus OUT NUMBER)
  As
  v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
  v_EMPID NUMBER(10);
  v_temp NUMBER(19, 0) := 0;
  Begin
    IF v_UserID = -1 THEN
          p_Message := 'IsUserIDNull';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      SELECT ID INTO v_temp FROM SE_User WHERE ID = v_UserID;
      IF v_temp < 1 THEN
          p_Message := 'UserIsNotFound';
          p_ResponseStatus := -600;
          RETURN;
      END IF;

      Begin
          Select He.id Into V_empid
          From Se_user Su
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = V_userid;
      Exception
          When Others Then
              P_message := 'EMPLOYEENOTFOUND';
              P_responsestatus := -600;
              Return;
      End;
    Open P_cur For
    select rownum STT, A.* from(
      Select A.*
        From (
              Select Tp.id,
                      E.employee_code,
                      E.fullname_vn As Fullname_vn,
                      T.name As Topic_name,
                      C.code As Course_code,
                      C.name As Course_name,
                      Nvl(to_char(Tp.from_date, 'YYYY-MM-DD'), ' ')  from_date,
                      Nvl(to_char(Tp.to_date, 'YYYY-MM-DD'), ' ')to_date,
                      Case Tp.result
                        When 0 Then
                              DeCode(NVL(p_Language,'vi-VN'),'vi-VN',To_char(Unistr('kh\00f4ng \0111\1ea1t')),To_Char('Unsatisfactory'))
                        Else 
                          DeCode(NVL(p_Language,'vi-VN'),'vi-VN',To_char(Unistr('\0110\1ea1t')),To_Char('qualified'))
                      End Is_result
                From Tr_employee_course Tp
                Left Join Tr_course C
                  On Tp.tr_course_id = C.id
               Inner Join Tr_topic T
                  On Tp.tr_topic_id = T.id
               Inner Join Hu_employee E
                  On Tp.employee_id = E.id
               Inner Join Hu_organization O
                  On E.org_id = O.id
               Where nvl(Tp.is_deleted,0) <>1
                 And Tp.status = 1
                 And E.id = V_empid
                 And Nvl(Tp.result, 0) <> 0
              Union
              Select Tp1.id,
                      E1.employee_code,
                      E1.fullname_vn   As Fullname_vn,
                      T1.name          As Topic_name,
                      T1.code          As Course_code,
                      C1.name As Course_name,
                       Nvl(to_char(C1.from_date, 'DD/MM/YYYY'), ' ')  from_date,
                      Nvl(to_char(C1.to_date, 'DD/MM/YYYY'), ' ')to_date,
                      To_char(Unistr('\0110\1ea1t')) Is_result
                From Tr_empl_course_reg Tp1
               Inner Join Tr_course_reg C1
                  On C1.id = Tp1.tr_course_reg_id
               Inner Join Tr_topic T1
                  On T1.id = C1.tr_topic_id
               Inner Join Hu_employee E1
                  On Tp1.employee_id = E1.id
               Inner Join Hu_organization O1
                  On E1.org_id = O1.id
               Where nvl(Tp1.is_deleted,0) <> 1
                 And Tp1.status = 1
                 And C1.approved_status = 2
                 And E1.id = V_empid) A
       Order By A.from_date Desc)A;

   P_message := 'issuccess';
   P_responsestatus := 1;
   Exception
    When Others Then

     p_Message := 'DatabaseError';
     p_ResponseStatus := -99;
      SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE_SCB.API_PROCESS_TRAIN_IN_COMPANY',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL);
  End;
  Procedure API_At_SummaryByEmployee(p_Companycode    In Nvarchar2,
                              p_UserId         In Number,
                              p_Language       In Nvarchar2,
                              p_Period         In Number,
                              --p_EmployeeCode      In Nvarchar2,
                              p_Cur            Out Cursor_type,
                              p_Message        Out Nvarchar2,
                              p_Responsestatus Out Number) As

  v_Userid Number(19,0) := Nvl(P_userid, -1);
  v_Empid Number(10);
  v_Temp Number(19, 0) := 0;
  v_Sql       Clob;
  v_Remark    Clob;
  v_Listemp   Clob;
  v_EmployeeCode  Nvarchar2(50):='';
  Begin
    If V_userid = -1 Then
          P_message := 'ISUSERIDNULL';
          P_responsestatus := -600;
          Return;
      End If;

      Select Id Into V_temp From Se_user Where Id = V_userid;
      If V_temp < 1 Then
          P_message := 'USERISNOTFOUND';
          P_responsestatus := -600;
          Return;
      End If;

      Begin
          Select He.id, he.employee_code Into V_empid  ,v_EmployeeCode
          From Se_user Su
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = V_userid;
      Exception
          When Others Then
              P_message := 'EMPLOYEENOTFOUND';
              P_responsestatus := -600;
              Return;
      End;

  Select Listagg(To_char(E.id), ',') Within Group(Order By Rownum)
       Into v_Listemp
    From Hu_employee E
    Where E.dm_id = V_empid
       Or E.id = V_empid;

      For Data in (
         Select A.Code ,
         case when p_Language = 'vi-VN' then A.Name else a.name_en end name
         From at_sign A 
         Inner Join At_Gsign G On G.Id=A.At_Gsignid
         Where G.Code='LEAVE'
         And A.Status=1    And A.Code<>'OFF'         
    ) Loop       
            v_Remark:=v_Remark||
            ' 
            Case When Nvl('||Data.Code||',0) > 0 And   Nvl('||Data.Code||',0) < 1 Then     
              ''0'' || To_Char('||Data.Code||')||'||''''||' '||Data.Name||';'''||' 
              --Replace('||Data.Code||',''.'','','') 
            When Nvl('||Data.Code||',0) >= 1 Then 
              To_Char('||Data.Code||')||'||''''||' '||Data.Name||';'''||'
            End ||
            '; 
    End Loop;     
    --v_Remark:=RTrim(v_Remark,'||;')   ;
   v_Remark := v_Remark||'''''';        
   v_Sql := '
      Select 
                             ROWNUM STT,
                             E.id Employee_id,
                             E.employee_code,
                             E.fullname_vn,
                             case when ncc < 1 and ncc > 0 then ''0''||to_char(Z.ncc) else '''' || to_char(Z.ncc) end ncc,
                             case when nctt < 1 and nctt > 0 then ''0''||to_char(Z.nctt) else '''' || to_char(Z.nctt) end nctt,
                             case when nctl < 1 and nctl >0 then ''0''||to_char(Z.nctl) else '''' || to_char(Z.nctl) end nctl,
                             case when nncl < 1 and nncl > 0 then ''0''||to_char(Z.nncl) else '''' || to_char(Z.nncl) end nncl,
                             case when nnkl < 1 and nnkl > 0 then ''0''||to_char(Z.nnkl) else '''' || to_char(Z.nnkl) end nnkl,
                             rtrim( TRIM(' || v_Remark || '
                             || CASE WHEN NVL(TTNC,0) >0 or NVL(TTNC,0) <0 THEN
                              DECODE(NVL(TTNC,0),''.5'',''0.5'',''-.5'',''-0.5'',NVL(TTNC,0)) || '' Truy thu/ truy linh, ''
                              END
                            ),'';'') NOTE                        From At_aldata_summary Z
                       Inner Join Hu_employee E
                          On Z.employee_id = E.id
                        Left Join Hu_working W
                          On W.id = Z.working_id
                        Left Join Hu_decision_type Dt
                          On Dt.id = W.decision_type_id
                       Inner Join Hu_organization O
                          On O.id = Z.orgid
                        Left Join Hu_title T
                          On T.id = Z.title_id
                       Where Z.period= ' || P_period || '
                       And ((Upper(E.fullname_vn) Like ''%'' || Upper('''|| v_EmployeeCode ||''') || ''%'' Or
                E.employee_code Like ''%'' || '''|| v_EmployeeCode ||''' || ''%'') Or
                '''|| v_EmployeeCode ||''' Is Null)
                       And Instr('','' || '''|| v_Listemp ||''' || '','', '','' || E.id || '','') > 0';
    Insert Into At_strsql Values (Seq_at_strsql.nextval, v_Sql);
    Commit;
    Execute Immediate v_Sql;
    Open P_cur For To_char(v_Sql);

   P_message := 'ISSUCCESS';
   P_responsestatus := 1;

  Exception
    When Others Then
     P_message := 'DATABASEERROR';
     P_responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_At_SummaryByEmployee',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End;

   Procedure API_At_SummaryByEmployeeMng(
                              p_Companycode    In Nvarchar2,
                              p_UserId         In Number,
                              p_Language       In Nvarchar2,
                              p_Period         In Number,
                              p_KeyEmployeeCode      In Nvarchar2 default '',
                              p_Cur            Out Cursor_type,
                              p_Message        Out Nvarchar2,
                              p_Responsestatus Out Number) As

  v_Userid Number(19,0) := Nvl(P_userid, -1);
  v_Empid Number(10);
  v_Temp Number(19, 0) := 0;
  v_Sql       Clob;
  v_Remark    Clob;
  v_Listemp   Clob;
  v_EmployeeIds Clob;
  v_EmployeeCode  Nvarchar2(50):='';
  v_KeyEmployeeCode    Nvarchar2(100):=  Nvl(p_KeyEmployeeCode,'');
  Begin
    If V_userid = -1 Then
          P_message := 'ISUSERIDNULL';
          P_responsestatus := -600;
          Return;
      End If;

      Select Id Into V_temp From Se_user Where Id = V_userid;
      If V_temp < 1 Then
          P_message := 'USERISNOTFOUND';
          P_responsestatus := -600;
          Return;
      End If;

      Begin
          Select He.id, he.employee_code Into V_empid  ,v_EmployeeCode
          From Se_user Su
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = V_userid;
      Exception
          When Others Then
              P_message := 'EMPLOYEENOTFOUND';
              P_responsestatus := -600;
              Return;
      End;

  Select Listagg(To_char(E.Employee_Id), ',') Within Group(Order By Rownum)
       Into v_Listemp
    From Hu_Direct_Manager E
    Where E.dm_id = V_empid   ;

    For Data in (
         Select A.Code ,
         case when p_Language = 'vi-VN' then A.Name else a.name_en end name
         From at_sign A 
         Inner Join At_Gsign G On G.Id=A.At_Gsignid
         Where G.Code='LEAVE'
         And A.Status=1    And A.Code<>'OFF'         
    ) Loop       
            v_Remark:=v_Remark||
            ' 
            Case When Nvl('||Data.Code||',0) > 0 And   Nvl('||Data.Code||',0) < 1 Then     
              ''0'' || To_Char('||Data.Code||')||'||''''||' '||Data.Name||';'''||' 
              --Replace('||Data.Code||',''.'','','') 
            When Nvl('||Data.Code||',0) >= 1 Then 
              To_Char('||Data.Code||')||'||''''||' '||Data.Name||';'''||'
            End ||
            ';   
    End Loop;     
    --v_Remark:=RTrim(v_Remark,'||;')   ;
   v_Remark := v_Remark||'''''';  
  
   v_Sql := '
      Select 
                             ROWNUM STT,
                             E.id Employee_id,
                             E.employee_code,
                             E.fullname_vn,  
                             case when ncc < 1 and ncc > 0 then ''0''||to_char(Z.ncc) else '''' || to_char(Z.ncc) end ncc,
                             case when nctt < 1 and nctt > 0 then ''0''||to_char(Z.nctt) else '''' || to_char(Z.nctt) end nctt,
                             case when nctl < 1 and nctl >0 then ''0''||to_char(Z.nctl) else '''' || to_char(Z.nctl) end nctl,
                             case when nncl < 1 and nncl > 0 then ''0''||to_char(Z.nncl) else '''' || to_char(Z.nncl) end nncl,
                             case when nnkl < 1 and nnkl > 0 then ''0''||to_char(Z.nnkl) else '''' || to_char(Z.nnkl) end nnkl,
                            Rtrim( TRIM(' || v_Remark || '
                             || CASE WHEN NVL(TTNC,0) >0 or NVL(TTNC,0) <0 THEN 
                             DECODE(NVL(TTNC,0),''.5'',''0.5'',''-.5'',''-0.5'',NVL(TTNC,0)) || '' Truy thu/ truy linh, ''
                              END
                            ),'';'') NOTE
                        From At_aldata_summary Z
                       Inner Join Hu_employee E
                          On Z.employee_id = E.id
                        Left Join Hu_working W
                          On W.id = Z.working_id
                        Left Join Hu_decision_type Dt
                          On Dt.id = W.decision_type_id
                       Inner Join Hu_organization O
                          On O.id = Z.orgid
                        Left Join Hu_title T
                          On T.id = Z.title_id
                       Where Z.period= ' || P_period || '
                       And ((Upper(E.fullname_vn) Like ''%'' || Upper('''|| v_KeyEmployeeCode ||''') || ''%'' Or
                E.employee_code Like ''%'' || '''|| v_KeyEmployeeCode ||''' || ''%'') Or
                '''|| v_KeyEmployeeCode ||''' Is Null)
                       And Instr('','' || '''|| v_Listemp ||''' || '','', '','' || E.id || '','') > 0';
   /* Insert Into At_strsql Values (Seq_at_strsql.nextval, v_Sql);
    Commit;*/
    Execute Immediate v_Sql;
    Open P_cur For (v_Sql);

   P_message := 'ISSUCCESS';
   P_responsestatus := 1;

  Exception
    When Others Then
     P_message := 'DATABASEERROR';
     P_responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_At_SummaryByEmployeeMng',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End;

 Procedure API_At_InOutByEmployee(
  p_Companycode    In Nvarchar2,
  p_UserId         In Number,
  p_Language       In Nvarchar2,
  p_FromDate      In Nvarchar2,
  p_ToDate         In  Nvarchar2,
  p_Cur            Out Cursor_type,
  p_Message        Out Nvarchar2,
  p_Responsestatus Out Number
 )As
 v_Userid Number(19,0) := Nvl(P_userid, -1);
  v_Empid Number(10);
  v_Temp Number(19, 0) := 0;
  --v_Sql       Clob;
  v_Remark    Clob;
  v_Listemp   Clob;
  v_EmployeeCode  Nvarchar2(50):='';
  v_ListSignCode Clob:='';
  v_StrSqlQuery Clob:='';
  v_FromDate       Date;
  v_ToDate           Date;
 Begin
  v_FromDate      := To_Date(p_FromDate,'YYYY-MM-DD');
  v_ToDate       := To_Date(p_ToDate,'YYYY-MM-DD');
   If V_userid = -1 Then
          P_message := 'ISUSERIDNULL';
          P_responsestatus := -600;
          Return;
    End If;

      Select Id Into V_temp From Se_user Where Id = v_Userid;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If;

      Begin
          Select He.id, he.employee_code Into V_empid  ,v_EmployeeCode
          From Se_user Su
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      Begin
        With tbl_at_sign as (
             select
             to_char(s.code) as sign_code           ,
             s.status
             From at_sign s
             Inner Join At_Gsign G On G.Id=S.At_Gsignid
             Where nvl(s.status,0)<>0
             And G.Code='LEAVE'
        )
        Select Listagg(
                sign_code || ' As '''||sign_code||'''' ,','
                )Within Group (Order By Rownum Desc) list_code
        Into v_ListSignCode
        From tbl_at_sign a where Nvl( a.status,0)<>0    ;
        Exception
          When Others Then
              p_Message := 'SIGNCODENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      v_StrSqlQuery:='
      Select Temp.*,Rownum As STT
      From(
      Select
       EmployeeId,
       Min(Employee_Code) Employee_Code,
       Min(Fullname_Vn) Fullname_Vn,
       To_Char(WorkingDay, ''dd/mm/yyyy'') Working_Day,
      -- Min(Code) At_Sign_Code,
      Replace(Min(Code),''(-)'','''') At_Sign_Code,
       Min(In_Sys_1) In_Sys_1,
       Min(Out_Sys_1) Out_Sys_1,
       Min(DiTre) DiTre,
       Min(VeSom) VeSom,
       Listagg(CodeValue, ''; '') Within Group(Order By Rownum Desc) list_code
        From (Select
                     T.Employee_Id EmployeeId,
                     Employee_Code,
                     Fullname_Vn,
                     T.Working_Day WorkingDay,
                     --Code,
                      Case When Shift.code is not null Then
                         Shift.Code || ''('' ||
                              TO_CHAR(S.WORK_START, ''HH24:MI'') || ''-'' ||
                              TO_CHAR(S.WORK_END, ''HH24:MI'') || '')''
                      Else
                           k.Code || ''('' ||
                              TO_CHAR(k.WORK_START, ''HH24:MI'') || ''-'' ||
                              TO_CHAR(k.WORK_END, ''HH24:MI'') || '')''
                      End code,
                     In_Sys_1,
                     Out_Sys_1,
                      case WHEN NVL(A.RDT, 0) <> 0 AND A.IO_IN IS NOT NULL AND
                             A.TOTAL_N = 0 THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 *
                                              (A.IO_IN -
                                              PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                SH.WORK_START)) -
                                              A.RDT),
                                              0))
                        WHEN A.TOTAL_N = 0.5 AND
                             (A.IO_IN -
                             PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                         SH.WORK_START)) > 0 AND
                             NVL(A.RDT, 0) <> 0 AND A.IO_IN IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 *
                                              (A.IO_IN -
                                              PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                SH.WORK_START)) -
                                              A.RDT - 4),
                                              0))
                        WHEN A.TOTAL_N = 0.5 AND
                             (A.IO_IN -
                             PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                         SH.WORK_START)) > 0 AND
                             NVL(A.RDT, 0) = 0 AND A.IO_IN IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 *
                                              (24 *
                                              (A.IO_IN -
                                              PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                           SH.WORK_START)) - 5),
                                              0))
                        WHEN NVL(A.RDT, 0) = 0 AND A.IO_IN IS NOT NULL AND
                             A.TOTAL_N = 0 AND A.IO_IN IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * 24 *
                                              (A.IO_IN -
                                              PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                          SH.WORK_START)),
                                              0))
                        WHEN A.TOTAL_N = 1 THEN
                         PKG_AT.NUMBER_TO_TIME(0)
                      END ditre,
                       CASE
                        WHEN NVL(A.RVS, 0) <> 0 AND A.IO_OUT IS NOT NULL AND
                             A.TOTAL_N = 0 THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 * (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                     SH.WORK_END) -
                                              A.IO_OUT) - A.RVS),
                                              0))
                        WHEN A.TOTAL_N = 0.5 AND (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                             SH.WORK_END) -
                             A.IO_OUT) > 0 AND NVL(A.RVS, 0) <> 0 AND
                             A.IO_OUT IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 * (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                     SH.WORK_END) -
                                              A.IO_OUT) - A.RVS - 4),
                                              0))
                        WHEN A.TOTAL_N = 0.5 AND (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                             SH.WORK_END) -
                             A.IO_OUT) > 0 AND NVL(A.RVS, 0) = 0 AND
                             A.IO_OUT IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 * (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                     SH.WORK_END) -
                                              A.IO_OUT) - 4),
                                              0))
                        WHEN NVL(A.RVS, 0) = 0 AND A.IO_OUT IS NOT NULL AND
                             A.TOTAL_N = 0 AND
                             (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                         SH.WORK_END) -
                              A.IO_OUT) > 0 THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * 24 * (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                    SH.WORK_END) -
                                              A.IO_OUT),
                                              2))
                        WHEN A.TOTAL_N = 1 THEN
                         PKG_AT.NUMBER_TO_TIME(0)
                      END vesom,
                     Al.*,
                     Case
                       When valuesWithCode > 0 and signCode <> ''OFF'' then
                        --To_Char(valuesWithCode) || signCode
                        (case
                            when valuesWithCode < 1 then
                              ''0'' || To_Char(valuesWithCode) || signCode
                            else
                              '''' || To_Char(valuesWithCode) || signCode
                          end)
                       Else 
                        ''''
                     End As CodeValue
                From (Select E.Employee_Code,
                             E.Id As Employee_Id,
                             Io.Working_Day,
                             E.Fullname_Vn,
                             To_Char(Io.In_Sys_1, ''HH24:MI'') as In_Sys_1,
                             To_Char(Io.Out_Sys_1, ''HH24:MI'') as Out_Sys_1,
                             R.code scode
                        From Table (table_listdate(:v_FromDate,:v_ToDate)) C
                        Left Join  At_Io io On  C.Cdate=Io.Working_Day
                        Left Join Hu_Employee E
                          On E.Employee_Code = Io.Employee_Code
                        Left Join (
                             Select R.Employee_Id,R.Working_Day,Sign.Code,Max(R.Id) As Id
                             From At_Rgt R
                             Inner Join At_Sign Sign On Sign.Id=R.Sign_Id
                             And Sign.Code=''CT'' 
                             Group By  R.Employee_Id,R.Working_Day,Sign.Code
                        )R On R.Employee_Id = E.Id
                         And Trunc(R.Working_Day) = Trunc(Io.Working_Day)
                       where (E.Id = '||v_Empid||')
                       And (R.Id Is Not Null Or Io.Id Is not Null)
                       And Io.Working_Day Between :v_FromDate And :v_ToDate ) T
                Left Join (Select *
                            From At_Aldata a UNPIVOT(valuesWithCode -- unpivot_clause
                                 For signCode --  unpivot_for_clause
                                 In( -- unpivot_in_clause
                                  '||v_ListSignCode||'
                                   )
                            )
                           Where Employee_Id = '||v_Empid||'
                             And Working_Day Between :v_FromDate And :v_ToDate ) Al
                  On Al.Employee_Id = T.Employee_Id
                 And Al.Working_Day = T.Working_Day
                  --and t.scode =  al.signcode
                Left Join At_Sign Shift
                  On Shift.Id = Al.Shift_Id
                Left Join At_Shift S
                  On S.At_Sign_Id = Shift.Id 
                Left Join  ( select si.code,ats.work_start,ats.work_end,si.id,rgt.employee_id,rgt.working_day
                              from at_rgt rgt
                              left join  at_sign si on rgt.sign_id = si.id
                              left join at_gsign gsi on si.at_gsignid = gsi.id 
                              left join at_shift ats on si.id = ats.at_sign_id
                              where  gsi.code = ''SHIFT''                
                             ) k on k.employee_id = T.Employee_Id and k.working_day = T.Working_Day 
                Left Join  (SELECT AL.EMPLOYEE_ID,
                          AL.DTTT,
                          AL.VSTT,
                          AL.WORKING_DAY,
                          AL.SHIFT_ID,
                          (NVL(AL.CT, 0) + NVL(AL.NB, 0) + NVL(AL.TL, 0) +
                          NVL(AL.CH, 0) + NVL(AL.TS, 0) + NVL(AL.N, 0) +
                          NVL(AL.TN, 0) + NVL(AL.N7, 0) + NVL(AL.VS, 0) +
                          NVL(AL.VSBH, 0) + NVL(AL.CO, 0) + NVL(AL.TNLD, 0) +
                          NVL(AL.DS, 0) + NVL(AL.KHHGD, 0) + NVL(AL.KT, 0) +
                          NVL(AL.KLD, 0) + NVL(AL.ST, 0) + NVL(AL.ONN, 0) +
                          NVL(AL.ODN, 0) + NVL(AL.P, 0) + NVL(AL.L, 0)) TOTAL_N,
                          AL.IO_IN,
                          AL.IO_OUT,
                          AL.RDT,
                          AL.RVS
                     FROM AT_ALDATA AL
                     where --al.EMPLOYEE_ID=3468 and 
                     al.working_day Between :v_FromDate And :v_ToDate) A on a.EMPLOYEE_ID= t.EMPLOYEE_ID and a.working_day = t.working_day
                      LEFT JOIN AT_SHIFT SH
                            ON A.SHIFT_ID = SH.AT_SIGN_ID 
                  
                  ) Temp
       Group By Temp.EmployeeId, Temp. WorkingDay
      )Temp
      ';
      insert into at_strsql values (seq_at_strsql.nextval, v_strsqlquery);
      --commit;
      Open p_Cur For v_StrSqlQuery Using v_FromDate, v_ToDate, v_FromDate, v_ToDate,v_FromDate, v_ToDate,v_FromDate, v_ToDate;
      p_Message := 'ISSUCCESS';
      p_Responsestatus := 1;
   Exception
    When Others Then
      p_Message := 'DATABASEERROR';
      p_Responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_At_InOutByEmployee',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End;

PROCEDURE API_SearchRegisterLeave(p_Language       iN nvarchar2,
                                  p_UserID         IN NUMBER,
                                  p_FromDate       IN NVARCHAR2,
                                  p_ToDate         IN NVARCHAR2,
                                  p_Status         IN NVARCHAR2,
                                  p_Page           IN NUMBER,
                                  p_PageSize       IN NUMBER,
                                  p_Cur            OUT CURSOR_TYPE,
                                  p_InitCount      OUT NUMBER,
                                  p_PendingCount   OUT NUMBER,
                                  p_ApprovedCount  OUT NUMBER,
                                  p_RejectedCount  OUT NUMBER,
                                  p_Rowcount       OUT NUMBER,
                                  p_Message        OUT NVARCHAR2,
                                  p_ResponseStatus OUT NUMBER) AS
  v_UserId        NUMBER(19, 0) := NVL(p_UserId, -1);
  v_Page          NUMBER(10, 0) := NVL(p_Page, 1);
  v_PageSize      NUMBER(2, 0) := NVL(p_PageSize, 10);
  v_Status        NVARCHAR2(20) := NVL(p_Status, '-2');
  v_EmployeeID    NUMBER(19, 0);
  v_TD            NUMBER(19, 0) := 0;
  v_FromDate      DATE;
  v_ToDate        DATE;
  v_temp          NUMBER(10, 0) := 0;
BEGIN
  p_Rowcount := 0;
  IF v_UserID = -1 THEN
    p_Message        := 'IsUserIDNull';
    p_ResponseStatus := -600;
    RETURN;
  END IF;
  BEGIN
    SELECT he.ID
      INTO v_EmployeeID
      FROM HU_EMPLOYEE he
      JOIN SE_USER su
        ON su.EMPLOYEE_CODE = he.EMPLOYEE_CODE
     WHERE su.ID = v_UserID
       AND ((he.WORK_STATUS = 257 AND SYSDATE < he.TER_EFFECT_DATE) OR
           (he.WORK_STATUS <> 257))
       AND rownum = 1;
  EXCEPTION
    WHEN OTHERS THEN
      p_Message        := 'UserNotConfig';
      p_ResponseStatus := -600;
      RETURN;
  END;
  SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
  IF v_temp < 1 THEN
    p_Message        := 'UserIsNotFound';
    p_ResponseStatus := -600;
    RETURN;
  END IF;

  --IF v_FromDateInput != '-1' THEN
    begin
      v_FromDate := TO_DATE(p_FromDate, 'YYYY-MM-DD');
      v_ToDate := TO_DATE(p_ToDate, 'YYYY-MM-DD');
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'v_FromDate fail' || p_FromDate;
        p_ResponseStatus := -601;
        RETURN;
    END;
    SELECT COUNT(*)
      INTO p_Rowcount
        FROM (select rownum stt, a.*
                from ((SELECT R.ID_REGGROUP,
                              Max(E.EMPLOYEE_CODE) EMPLOYEE_CODE,
                              Max(E.ID) EMPLOYEE_ID,
                              Max(E.FULLNAME_VN) EMPLOYEE_NAME,
                              Max(S.ID) SIGN_ID,
                              Max(S.NAME) SIGN_NAME,
                              Max(O.CODE) SIGN_CODE,
                              case when Sum(NVL(R.NVALUE, 0)) < 1 then
                              '0'||To_Char(Sum(NVL(R.NVALUE, 0)))
                              else
                                To_Char(Sum(NVL(R.NVALUE, 0)))
                              end DAYCOUNT,
                              Max(R.NOTE) DISPLAY,
                              Max(R.STATUS) STATUS,
                              Case
                                When Max(R.STATUS) = 2 Then
                                 TO_CHAR(UNISTR('Ch\01B0a duy\1EC7t'))
                                When Max(R.STATUS) = 1 Then
                                 TO_CHAR(UNISTR('\0110\00E3 duy\1EC7t'))
                                When Max(R.STATUS) = 3 Then
                                 TO_CHAR(UNISTR('T\1EEB ch\1ED1i'))
                                Else
                                 TO_CHAR(UNISTR('\0110\0103ng k\00FD'))
                              End STATUS_NAME,
                              Max(ot.name_vn) TYPENAME,
                              to_char(Max(r.Created_Date), 'YYYY-MM-DD') TIMECREATE,
                              Max(r.note) As Note,
                              To_Char(Min(R.WORKING_DAY), 'YYYY-MM-DD') LEAVEFROM,
                              to_char(Max(R.WORKING_DAY), 'YYYY-MM-DD') LEAVETO,
                              --R.ID_REGGROUP,
                              Max(k.APPROVE_NAME) APPROVE_NAME,
                              Max(k.APPROVE_NOTE) APPROVE_NOTE
                         FROM AT_PORTAL_REG R
                         Left Join (Select *
                                     From (Select RANK() OVER(PARTITION BY p.id_reggroup ORDER BY p.app_level) r,
                                                  e1.fullname_vn APPROVE_NAME,
                                                  p.app_notes APPROVE_NOTE,
                                                  P.ID_REGGROUP
                                             from process_approved_status p
                                            inner join hu_employee e1
                                               on p.employee_approved = e1.id
                                            where p.app_status = 0--1
                                           -- where p.id_reggroup= 7861
                                           ) V
                                    WHERE V.R = 1) K
                           on k.ID_REGGROUP = r.ID_REGGROUP
                        INNER JOIN HU_EMPLOYEE E
                           ON E.ID = R.EMPLOYEE_ID
                        INNER JOIN AT_SIGN S
                           ON R.SIGN_ID = S.ID
                        INNER JOIN AT_GSIGN O
                           ON S.AT_GSIGNID = O.ID
                         left join ot_other_list ot
                           on r.type_leave = ot.code
                        WHERE O.CODE = 'LEAVE'
                          AND NVL(R.STATUS, 0) <> 4
                          AND (case
                                when v_Status IN ('-2', '-1') then
                                 1
                                when v_Status NOT IN ('-2', '-1') and
                                     R.STATUS IN
                                     (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                        FROM (SELECT LEVEL AS IAB,
                                                     REGEXP_SUBSTR(v_Status,
                                                                   '[^,]+',
                                                                   1,
                                                                   LEVEL) AS IVALUE
                                                FROM DUAL
                                              CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                       '[^,]+',
                                                                       1,
                                                                       LEVEL) IS NOT NULL)) then
                                 1
                                else
                                 0
                              end) = 1
                          AND r.employee_id = v_EmployeeID
                          AND ((v_ToDate IS NUll and v_FromDate is null and
                              1 = 1) or
                              (v_ToDate is not null and v_FromDate is null and
                              R.WORKING_DAY <= v_ToDate) or
                              (v_ToDate is null and v_FromDate is not null and
                              R.WORKING_DAY >= v_FromDate) or
                              (v_ToDate is not null and
                              v_FromDate is not null and
                              R.WORKING_DAY BETWEEN v_FromDate and v_ToDate))
                        Group By R.ID_REGGROUP
                       )) a);

    -- d?m t?ng theo nh?n vi?n: c?n th?m m?c d?nh th?i gian gi?i h?n
    SELECT sum(CASE
                 WHEN R.STATUS = 0 THEN
                  1
                 ELSE
                  0
               END),
           sum(CASE
                 WHEN R.STATUS = 2 THEN -- waiting
                  1
                 ELSE
                  0
               END),
           sum(CASE
                 WHEN R.STATUS = 1 THEN --approve
                  1
                 ELSE
                  0
               END),
           sum(CASE
                 WHEN R.STATUS = 3 THEN --reject
                  1
                 ELSE
                  0
               END)
      INTO p_InitCount, p_PendingCount, p_ApprovedCount, p_RejectedCount
      FROM (SELECT R.ID_REGGROUP,
                              Max(R.STATUS) STATUS
                         FROM AT_PORTAL_REG R
                         Left Join (Select *
                                     From (Select RANK() OVER(PARTITION BY p.id_reggroup ORDER BY p.app_level) r,
                                                  e1.fullname_vn APPROVE_NAME,
                                                  p.app_notes APPROVE_NOTE,
                                                  P.ID_REGGROUP
                                             from process_approved_status p
                                            inner join hu_employee e1
                                               on p.employee_approved = e1.id
                                            where p.app_status = 0--1
                                           -- where p.id_reggroup= 7861
                                           ) V
                                    WHERE V.R = 1) K
                           on k.ID_REGGROUP = r.ID_REGGROUP
                        INNER JOIN HU_EMPLOYEE E
                           ON E.ID = R.EMPLOYEE_ID
                        INNER JOIN AT_SIGN S
                           ON R.SIGN_ID = S.ID
                        INNER JOIN AT_GSIGN O
                           ON S.AT_GSIGNID = O.ID
                         left join ot_other_list ot
                           on r.type_leave = ot.code
                        WHERE O.CODE = 'LEAVE'
                          AND NVL(R.STATUS, 0) <> 4
                          AND (case
                                when v_Status IN ('-2', '-1') then
                                 1
                                when v_Status NOT IN ('-2', '-1') and
                                     R.STATUS IN
                                     (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                        FROM (SELECT LEVEL AS IAB,
                                                     REGEXP_SUBSTR(v_Status,
                                                                   '[^,]+',
                                                                   1,
                                                                   LEVEL) AS IVALUE
                                                FROM DUAL
                                              CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                       '[^,]+',
                                                                       1,
                                                                       LEVEL) IS NOT NULL)) then
                                 1
                                else
                                 0
                              end) = 1
                          AND r.employee_id = v_EmployeeID
                          AND ((v_ToDate IS NUll and v_FromDate is null and
                              1 = 1) or
                              (v_ToDate is not null and v_FromDate is null and
                              R.WORKING_DAY <= v_ToDate) or
                              (v_ToDate is null and v_FromDate is not null and
                              R.WORKING_DAY >= v_FromDate) or
                              (v_ToDate is not null and
                              v_FromDate is not null and
                              R.WORKING_DAY BETWEEN v_FromDate and v_ToDate))
                        Group By R.ID_REGGROUP) R;

    -- set lai neu null
    SELECT NVL(p_InitCount, 0),
           NVL(p_PendingCount, 0),
           NVL(p_ApprovedCount, 0),
         NVL(p_RejectedCount, 0)
      INTO p_InitCount, p_PendingCount, p_ApprovedCount, p_RejectedCount
      FROM dual;

    p_ApprovedCount := p_ApprovedCount +
                       (p_Rowcount - p_InitCount - p_PendingCount -
                       p_ApprovedCount-p_RejectedCount);
    -- ds tra ve
   -- End;
    OPEN p_Cur FOR
      SELECT *
        FROM (select rownum stt, a.*
                from ((SELECT R.ID_REGGROUP,
                              Max(E.EMPLOYEE_CODE) EMPLOYEE_CODE,
                              Max(E.ID) EMPLOYEE_ID,
                              Max(E.FULLNAME_VN) EMPLOYEE_NAME,
                              Max(S.ID) SIGN_ID,
                              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then Max(S.NAME) else Max(S.Name_En) end SIGN_NAME,
                              Max(O.CODE) SIGN_CODE,
                              --To_Char(Sum(NVL(R.NVALUE, 0))) DAYCOUNT,
                              case when Sum(NVL(R.NVALUE, 0)) < 1 then
                              '0'||To_Char(Sum(NVL(R.NVALUE, 0)))
                              else
                                To_Char(Sum(NVL(R.NVALUE, 0)))
                              end DAYCOUNT,
                              Max(R.NOTE) DISPLAY,
                              Max(R.STATUS) STATUS,
                              Case
                                When Max(R.STATUS) = 2 Then
                                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then
                                 TO_CHAR(UNISTR('Ch\01B0a duy\1EC7t'))
                                 else
                                   TO_CHAR(UNISTR('Waiting'))
                                 end
                                When Max(R.STATUS) = 1 Then
                                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then
                                 TO_CHAR(UNISTR('\0110\00E3 duy\1EC7t'))
                                 else
                                   TO_CHAR(UNISTR('Approved'))
                                 end
                                When Max(R.STATUS) = 3 Then
                                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then
                                 TO_CHAR(UNISTR('T\1EEB ch\1ED1i'))
                                 else
                                   TO_CHAR(UNISTR('Reject'))
                                 end
                                Else
                                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then
                                 TO_CHAR(UNISTR('\0110\0103ng k\00FD'))
                                 else
                                   TO_CHAR(UNISTR('Register'))
                                 end
                                 
                              End STATUS_NAME,
                              CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then Max(ot.name_vn) else Max(ot.name_en) end TYPENAME,
                              to_char(Max(r.Created_Date), 'YYYY-MM-DD') TIMECREATE,
                              Max(r.note) As Note,
                              To_Char(Min(R.WORKING_DAY), 'YYYY-MM-DD') LEAVEFROM,
                              to_char(Max(R.WORKING_DAY), 'YYYY-MM-DD') LEAVETO,
                              Case
                                When Max(R.STATUS) = 2 Then
                                 Max(Nvl(k.APPROVE_NAME,' ')) || ' - ' || MAX(Nvl(K.APPROVE_CODE,' '))
                                When Max(R.STATUS) = 1 Then
                                 Max(Nvl(V.APPROVE_NAME,' ')) || ' - ' || MAX(Nvl(V.APPROVE_CODE,' '))
                                When Max(R.STATUS) = 3 Then
                                 Max(Nvl(V1.APPROVE_NAME,' ')) || ' - ' || MAX(Nvl(V1.APPROVE_CODE,' '))
                              End APPROVE_NAME,
                               Case
                                When Max(R.STATUS) = 2 Then
                                 Max(Nvl(k.APPROVE_NOTE,' '))
                                When Max(R.STATUS) = 1 Then
                                 Max(Nvl(V.APPROVE_NOTE,' '))
                                When Max(R.STATUS) = 3 Then
                                 Max(Nvl(V1.APPROVE_NOTE,' '))
                              End APPROVE_NOTE,
                              
                              Min(R.WORKING_DAY) mindate
                         FROM AT_PORTAL_REG R
                         Left Join (Select *
                                     From (Select RANK() OVER(PARTITION BY p.id_reggroup ORDER BY p.app_level ) r,
                                                  e1.fullname_vn APPROVE_NAME,
                                                  e1.employee_code APPROVE_CODE,
                                                  p.app_notes APPROVE_NOTE,
                                                  P.ID_REGGROUP
                                             from process_approved_status p
                                            inner join hu_employee e1
                                               on p.employee_approved = e1.id
                                            where p.app_status = 0
                                           -- where p.id_reggroup= 7861
                                           ) V
                                  ) K
                           on k.ID_REGGROUP = r.ID_REGGROUP  and k.r=1  
                        left join (   
                           Select *
                                     From (Select RANK() OVER(PARTITION BY p.id_reggroup ORDER BY  p.app_level desc) r,
                                                  e1.fullname_vn APPROVE_NAME,
                                                  e1.employee_code APPROVE_CODE,
                                                  p.app_notes APPROVE_NOTE,     
                                                   p.app_level,
                                                  P.ID_REGGROUP
                                                 
                                             from process_approved_status p
                                            inner join hu_employee e1
                                               on p.employee_approved = e1.id
                                            where      p.app_status=1
                                           ) V
                           )     V on V.ID_REGGROUP=r.id_reggroup And        v.r=1
                           left join (   
                           Select *
                                     From (Select RANK() OVER(PARTITION BY p.id_reggroup ORDER BY  p.app_level ) r,
                                                  e1.fullname_vn APPROVE_NAME,
                                                  e1.employee_code APPROVE_CODE,
                                                  p.note_reject APPROVE_NOTE,     
                                                   p.app_level,
                                                  P.ID_REGGROUP
                                                 
                                             from process_approved_status p
                                            inner join hu_employee e1
                                               on p.Employee_Reject = e1.id
                                            where      p.app_status=2
                                           ) V
                           )     V1 on V1.ID_REGGROUP=r.id_reggroup And        v1.r=1
                        INNER JOIN HU_EMPLOYEE E
                           ON E.ID = R.EMPLOYEE_ID
                        INNER JOIN AT_SIGN S
                           ON R.SIGN_ID = S.ID
                        INNER JOIN AT_GSIGN O
                           ON S.AT_GSIGNID = O.ID
                         left join ot_other_list ot
                           on r.type_leave = ot.code
                        WHERE O.CODE = 'LEAVE'
                          AND NVL(R.STATUS, 0) <> 4
                          AND (case
                                when v_Status IN ('-2', '-1') then
                                 1
                                when v_Status NOT IN ('-2', '-1') and
                                     R.STATUS IN
                                     (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                        FROM (SELECT LEVEL AS IAB,
                                                     REGEXP_SUBSTR(v_Status,
                                                                   '[^,]+',
                                                                   1,
                                                                   LEVEL) AS IVALUE
                                                FROM DUAL
                                              CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                       '[^,]+',
                                                                       1,
                                                                       LEVEL) IS NOT NULL)) then
                                 1
                                else
                                 0
                              end) = 1
                          AND r.employee_id = v_EmployeeID
                          
                        Group By R.ID_REGGROUP
                     )) a)

       WHERE STT > ((v_PAGE - 1) * v_PAGESIZE)
         AND STT < (v_PAGE * v_PAGESIZE + 1)
         
         AND ((v_ToDate IS NUll and v_FromDate is null and
                              1 = 1) or
                              (v_ToDate is not null and v_FromDate is null and
                              mindate <= v_ToDate) or
                              (v_ToDate is null and v_FromDate is not null and
                              mindate >= v_FromDate) or
                              (v_ToDate is not null and
                              v_FromDate is not null and
                              mindate BETWEEN v_FromDate and v_ToDate))
         order by LEAVEFROM desc; 
  p_Message        := 'IsSuccess';
  p_ResponseStatus := 1;

EXCEPTION
  WHEN OTHERS THEN
    p_Message        := TO_CHAR(UNISTR('L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5'));
    p_ResponseStatus := -99;
    Sys_write_exception_log(Sqlcode,
                            'API_SearchRegisterLeave',
                            Sqlerrm || '_' ||
                            Dbms_utility.format_error_backtrace,
                            p_Language,
                            p_UserID,
                            p_FromDate,
                            p_ToDate,
                            p_Status,
                            p_Page,
                            p_PageSize,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null);
END;


  PROCEDURE API_SearchRegisterOT(p_Language       iN nvarchar2,
                                  p_UserID         IN NUMBER,
                                  p_FromDate       IN NVARCHAR2,
                                  p_ToDate         IN NVARCHAR2,
                                  p_Status         IN NVARCHAR2,
                                  p_Page           IN NUMBER,
                                  p_PageSize       IN NUMBER,
                                  p_Cur            OUT CURSOR_TYPE,
                                  p_InitCount      OUT NUMBER,
                                  p_PendingCount   OUT NUMBER,
                                  p_ApprovedCount  OUT NUMBER,
                                  p_RejectedCount  OUT NUMBER,
                                  p_Rowcount       OUT NUMBER,
                                  p_Message        OUT NVARCHAR2,
                                  p_ResponseStatus OUT NUMBER) AS
  v_UserId        NUMBER(19, 0) := NVL(p_UserId, -1);
  v_Page          NUMBER(10, 0) := NVL(p_Page, 1);
  v_PageSize      NUMBER(2, 0) := NVL(p_PageSize, 10);
  v_Status        NVARCHAR2(20) := NVL(p_Status, '-2');
  v_EmployeeID    NUMBER(19, 0);
  v_FD            NUMBER(19, 0) := 0;
  v_TD            NUMBER(19, 0) := 0;
  v_DefaultDate   DATE := TO_DATE('1900-01-01', 'YYYY-MM-DD');
  v_FromDate      DATE;
  v_ToDate        DATE;
  v_FromDateInput NVARCHAR2(20) := NVL(p_FromDate, '-1');
  v_ToDateInput   NVARCHAR2(20) := NVL(p_ToDate, '-1');
  v_temp          NUMBER(10, 0) := 0;
BEGIN
  p_Rowcount := 0;
  IF v_UserID = -1 THEN
    p_Message        := 'IsUserIDNull';
    p_ResponseStatus := -600;
    RETURN;
  END IF;
  BEGIN
    SELECT he.ID
      INTO v_EmployeeID
      FROM HU_EMPLOYEE he
      JOIN SE_USER su
        ON su.EMPLOYEE_CODE = he.EMPLOYEE_CODE
     WHERE su.ID = v_UserID
       AND ((he.WORK_STATUS = 257 AND SYSDATE < he.TER_EFFECT_DATE) OR
           (he.WORK_STATUS <> 257))
       AND rownum = 1;
  EXCEPTION
    WHEN OTHERS THEN
      p_Message        := 'UserNotConfig';
      p_ResponseStatus := -600;
      RETURN;
  END;
  SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
  IF v_temp < 1 THEN
    p_Message        := 'UserIsNotFound';
    p_ResponseStatus := -600;
    RETURN;
  END IF;

  IF v_FromDateInput != '-1' THEN
    begin
      v_FromDate := TO_DATE(p_FromDate, 'YYYY-MM-DD');
      SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDD'))
        INTO v_FD
        FROM dual;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'v_FromDate fail' || p_FromDate;
        p_ResponseStatus := -601;
        RETURN;
    END;
  end if;
  IF v_ToDateInput != '-1' then
    v_ToDate := TO_DATE(p_ToDate, 'YYYY-MM-DD');
    SELECT TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDD')) INTO v_TD FROM dual;
  end if;

  --Count tong so dong tra ve (total -> phan trang)
  BEGIN
    SELECT COUNT(*)
      INTO p_Rowcount
        FROM (Select rownum stt, a.*
                From (((
                Select
                               R.ID_REGGROUP
                          FROM AT_PORTAL_REG R
                          left join (select *
                                      from (select RANK() OVER(PARTITION BY p.id_reggroup ORDER BY p.app_level) r,
                                                   e1.fullname_vn APPROVE_NAME,
                                                   e1.employee_code APPROVE_CODE,
                                                   p.app_notes APPROVE_NOTE,
                                                   P.ID_REGGROUP
                                              from process_approved_status p
                                             inner join hu_employee e1
                                                on p.employee_approved = e1.id
                                             --where p.app_status = 0
                                            ) V
                                     WHERE V.R = 1) K
                            on k.ID_REGGROUP = r.ID_REGGROUP
                         INNER JOIN HU_EMPLOYEE E
                            ON E.ID = R.EMPLOYEE_ID
                         INNER JOIN AT_SIGN S
                            ON R.SIGN_ID = S.ID
                         INNER JOIN AT_GSIGN O
                            ON S.AT_GSIGNID = O.ID
                          Left Join ot_other_list ot
                            On r.type_leave = ot.code
                         WHERE O.CODE = 'OVERTIME'
                           AND NVL(R.STATUS, 0) <> 4
                           AND (case
                                 when v_Status IN ('-2', '-1') then
                                  1
                                 when v_Status NOT IN ('-2', '-1') and
                                      R.STATUS IN
                                      (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                         FROM (SELECT LEVEL AS IAB,
                                                      REGEXP_SUBSTR(v_Status,
                                                                    '[^,]+',
                                                                    1,
                                                                    LEVEL) AS IVALUE
                                                 FROM DUAL
                                               CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                        '[^,]+',
                                                                        1,
                                                                        LEVEL) IS NOT NULL)) then
                                  1
                                 else
                                  0
                               end) = 1
                           AND r.employee_id = v_EmployeeID
                           AND ((v_ToDate IS NUll and v_FromDate is null and
                               1 = 1) or
                               (v_ToDate is not null and v_FromDate is null and
                               R.WORKING_DAY <= v_ToDate) or
                               (v_ToDate is null and v_FromDate is not null and
                               R.WORKING_DAY >= v_FromDate) or
                               (v_ToDate is not null and
                               v_FromDate is not null and
                               R.WORKING_DAY BETWEEN v_FromDate and
                               v_ToDate))
                          Group By  R.ID_REGGROUP
                      )
                      /*union all
                      (Select
                               r.id_group id_reggroup
                          from at_rgt r
                         inner join at_sign s
                            on r.sign_id = s.id
                         inner join at_gsign g
                            on s.at_gsignid = g.id
                         inner join hu_employee e
                            on r.employee_id = e.id
                          left join ot_other_list ot
                            on r.type_leave = ot.code
                         where r.employee_id = v_EmployeeID
                         and r.id_rgt_portal is null
                           and g.code = 'OVERTIME'
                           and s.code <> 'OFF'
                           AND NVL(1, 0) <> 4
                           AND (case
                                 when v_Status IN ('-2', '-1') then
                                  1
                                 when v_Status NOT IN ('-2', '-1') and 1 IN
                                      (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                                                          FROM (SELECT LEVEL AS IAB,
                                                                                       REGEXP_SUBSTR(v_Status,
                                                                                                     '[^,]+',
                                                                                                     1,
                                                                                                     LEVEL) AS IVALUE
                                                                                  FROM DUAL
                                                                                CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                                                         '[^,]+',
                                                                                                         1,
                                                                                                         LEVEL) IS NOT NULL)) then
                                  1
                                 else
                                  0
                               end) = 1
                           AND ((v_ToDate IS NUll and v_FromDate is null and
                               1 = 1) or
                               (v_ToDate is not null and v_FromDate is null and
                               R.WORKING_DAY <= v_ToDate) or
                               (v_ToDate is null and v_FromDate is not null and
                               R.WORKING_DAY >= v_FromDate) or
                               (v_ToDate is not null and
                               v_FromDate is not null and
                               R.WORKING_DAY BETWEEN v_FromDate and v_ToDate))
                               Group By r.id_group
                               )*/ )) a);

    -- d?m t?ng theo nh?n vi?n: c?n th?m m?c d?nh th?i gian gi?i h?n
    SELECT sum(CASE
                 WHEN R.STATUS = 0 THEN
                  1
                 ELSE
                  0
               END),
           sum(CASE
                 WHEN R.STATUS = 2 THEN -- waiting
                  1
                 ELSE
                  0
               END),
           sum(CASE
                 WHEN R.STATUS = 1 THEN --approve
                  1
                 ELSE
                  0
               END),
           sum(CASE
                 WHEN R.STATUS = 3 THEN --reject
                  1
                 ELSE
                  0
               END)
      INTO p_InitCount, p_PendingCount, p_ApprovedCount, p_RejectedCount
      FROM (Select
                               R.ID_REGGROUP  ,
                               Max(R.Status) As Status
                          FROM AT_PORTAL_REG R
                         INNER JOIN HU_EMPLOYEE E
                            ON E.ID = R.EMPLOYEE_ID
                         INNER JOIN AT_SIGN S
                            ON R.SIGN_ID = S.ID
                         INNER JOIN AT_GSIGN O
                            ON S.AT_GSIGNID = O.ID
                         WHERE O.CODE = 'OVERTIME'
                           AND NVL(R.STATUS, 0) <> 4
                           AND (case
                                 when v_Status IN ('-2', '-1') then
                                  1
                                 when v_Status NOT IN ('-2', '-1') and
                                      R.STATUS IN
                                      (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                         FROM (SELECT LEVEL AS IAB,
                                                      REGEXP_SUBSTR(v_Status,
                                                                    '[^,]+',
                                                                    1,
                                                                    LEVEL) AS IVALUE
                                                 FROM DUAL
                                               CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                        '[^,]+',
                                                                        1,
                                                                        LEVEL) IS NOT NULL)) then
                                  1
                                 else
                                  0
                               end) = 1
                           AND r.employee_id = v_EmployeeID
                           AND ((v_ToDate IS NUll and v_FromDate is null and
                               1 = 1) or
                               (v_ToDate is not null and v_FromDate is null and
                               R.WORKING_DAY <= v_ToDate) or
                               (v_ToDate is null and v_FromDate is not null and
                               R.WORKING_DAY >= v_FromDate) or
                               (v_ToDate is not null and
                               v_FromDate is not null and
                               R.WORKING_DAY BETWEEN v_FromDate and
                               v_ToDate))
                          Group By  R.ID_REGGROUP) R;

    -- set lai neu null
    SELECT NVL(p_InitCount, 0),
           NVL(p_PendingCount, 0),
           NVL(p_ApprovedCount, 0),
           NVL(p_RejectedCount, 0)
      INTO p_InitCount, p_PendingCount, p_ApprovedCount, p_RejectedCount
      FROM dual;

    p_ApprovedCount := p_ApprovedCount +
                       (p_Rowcount - p_InitCount - p_PendingCount -
                       p_ApprovedCount - p_RejectedCount);
    -- ds tra ve
    OPEN p_Cur FOR
      SELECT *
        FROM (Select rownum stt, a.*
                From (((
                Select
                               Max(E.EMPLOYEE_CODE) EMPLOYEE_CODE,
                               Max(E.ID) EMPLOYEE_ID,
                               Max(E.FULLNAME_VN) EMPLOYEE_NAME,
                               Max(S.ID) SIGN_ID,
                               --Max(S.NAME) SIGN_NAME,
                               Case
                                 When NVL(p_Language,'vi-VN')= 'vi-VN' and max(s.code) ='OT' then
                                  to_char(Max(S.NAME))
                                 When NVL(p_Language,'vi-VN')= 'en-US' and max(s.code) ='OT' then
                                  to_char('Total overtime hours')
                               End SIGN_NAME,
                               
                               Max(O.CODE) SIGN_CODE,
                               --TO_CHAR(Sum(NVL(R.NVALUE, 0))) DAYCOUNT,
                               To_Char(Round(( Sum( R.TO_HOUR-   R.FROM_HOUR))*24,1) )        as DAYCOUNT,
                               Max(R.NOTE) DISPLAY,
                               Max(R.STATUS) STATUS,
                             Case
                                When Max(R.STATUS) = 2 Then
                                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then
                                 TO_CHAR(UNISTR('Ch\01B0a duy\1EC7t'))
                                 else
                                   TO_CHAR(UNISTR('Waiting'))
                                 end
                                When Max(R.STATUS) = 1 Then
                                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then
                                 TO_CHAR(UNISTR('\0110\00E3 duy\1EC7t'))
                                 else
                                   TO_CHAR(UNISTR('Approved'))
                                 end
                                When Max(R.STATUS) = 3 Then
                                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then
                                 TO_CHAR(UNISTR('T\1EEB ch\1ED1i'))
                                 else
                                   TO_CHAR(UNISTR('Reject'))
                                 end
                                Else
                                  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then
                                 TO_CHAR(UNISTR('\0110\0103ng k\00FD'))
                                 else
                                   TO_CHAR(UNISTR('Register'))
                                 end
                                 
                              End STATUS_NAME,
                                 
                               Max(ot.name_vn) TYPENAME,
                               to_char(Max(r.created_date), 'YYYY-MM-DD') TIMECREATE,
                               Max(r.note) Note,
                               to_char(Min(r.from_hour), 'YYYY-MM-DD') LEAVEFROM,
                               to_char(Max(r.to_hour), 'YYYY-MM-DD') LEAVETO,
                               to_char(Min(r.from_hour), 'HH24:MI') fromhour,
                               to_char(Max(r.to_hour), 'HH24:MI') tohour,
                               R.ID_REGGROUP,
                              Case
                                When Max(R.STATUS) = 2 Then
                                 Max(Nvl(k.APPROVE_NAME,' ')) || ' - ' || MAX(Nvl(K.APPROVE_CODE,' '))
                                When Max(R.STATUS) = 1 Then
                                 Max(Nvl(V.APPROVE_NAME,' ')) || ' - ' || MAX(Nvl(V.APPROVE_CODE,' '))
                                When Max(R.STATUS) = 3 Then
                                 Max(Nvl(V1.APPROVE_NAME,' ')) || ' - ' || MAX(Nvl(V1.APPROVE_CODE,' '))
                              End APPROVE_NAME,
                               Case
                                When Max(R.STATUS) = 2 Then
                                 Max(Nvl(k.APPROVE_NOTE,' '))
                                When Max(R.STATUS) = 1 Then
                                 Max(Nvl(V.APPROVE_NOTE,' '))
                                When Max(R.STATUS) = 3 Then
                                 Max(Nvl(V1.APPROVE_NOTE,' '))
                              End APPROVE_NOTE,
                              
                               max(r.report_no) REPORT_NO,
                               Min(r.from_hour) mindate
                          FROM AT_PORTAL_REG R
                           Left Join (Select *
                                     From (Select RANK() OVER(PARTITION BY p.id_reggroup ORDER BY p.app_level ) r,
                                                  e1.fullname_vn APPROVE_NAME,
                                                  e1.employee_code APPROVE_CODE,
                                                  p.app_notes APPROVE_NOTE,
                                                  P.ID_REGGROUP
                                             from process_approved_status p
                                            inner join hu_employee e1
                                               on p.employee_approved = e1.id
                                            where p.app_status = 0
                                           -- where p.id_reggroup= 7861
                                           ) V
                                  ) K
                           on k.ID_REGGROUP = r.ID_REGGROUP  and k.r=1  
                        left join (   
                           Select *
                                     From (Select RANK() OVER(PARTITION BY p.id_reggroup ORDER BY  p.app_level desc) r,
                                                  e1.fullname_vn APPROVE_NAME,
                                                  e1.employee_code APPROVE_CODE,
                                                  p.app_notes APPROVE_NOTE,     
                                                   p.app_level,
                                                  P.ID_REGGROUP
                                                 
                                             from process_approved_status p
                                            inner join hu_employee e1
                                               on p.employee_approved = e1.id
                                            where      p.app_status=1
                                           ) V
                           )     V on V.ID_REGGROUP=r.id_reggroup And        v.r=1
                           left join (   
                           Select *
                                     From (Select RANK() OVER(PARTITION BY p.id_reggroup ORDER BY  p.app_level ) r,
                                                  e1.fullname_vn APPROVE_NAME,
                                                  e1.employee_code APPROVE_CODE,
                                                  p.note_reject APPROVE_NOTE,     
                                                   p.app_level,
                                                  P.ID_REGGROUP
                                                 
                                             from process_approved_status p
                                            inner join hu_employee e1
                                               on p.Employee_Reject = e1.id
                                            where      p.app_status=2
                                           ) V
                           )     V1 on V1.ID_REGGROUP=r.id_reggroup And        v1.r=1
                         INNER JOIN HU_EMPLOYEE E
                            ON E.ID = R.EMPLOYEE_ID
                         INNER JOIN AT_SIGN S
                            ON R.SIGN_ID = S.ID
                         INNER JOIN AT_GSIGN O
                            ON S.AT_GSIGNID = O.ID
                          Left Join ot_other_list ot
                            On r.type_leave = ot.code
                         WHERE O.CODE = 'OVERTIME'
                           AND NVL(R.STATUS, 0) <> 4
                           AND (case
                                 when v_Status IN ('-2', '-1') then
                                  1
                                 when v_Status NOT IN ('-2', '-1') and
                                      R.STATUS IN
                                      (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                         FROM (SELECT LEVEL AS IAB,
                                                      REGEXP_SUBSTR(v_Status,
                                                                    '[^,]+',
                                                                    1,
                                                                    LEVEL) AS IVALUE
                                                 FROM DUAL
                                               CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                        '[^,]+',
                                                                        1,
                                                                        LEVEL) IS NOT NULL)) then
                                  1
                                 else
                                  0
                               end) = 1
                           AND r.employee_id = v_EmployeeID
                           /*AND ((v_ToDate IS NUll and v_FromDate is null and
                               1 = 1) or
                               (v_ToDate is not null and v_FromDate is null and
                               R.WORKING_DAY <= v_ToDate) or
                               (v_ToDate is null and v_FromDate is not null and
                               R.WORKING_DAY >= v_FromDate) or
                               (v_ToDate is not null and
                               v_FromDate is not null and
                               R.WORKING_DAY BETWEEN v_FromDate and
                               v_ToDate))*/
                          Group By  R.ID_REGGROUP
                      )
                      /*union all
                      (Select
                               Max(e.employee_code),
                               Max(r.employee_id),
                               Max(e.fullname_vn) employee_name,
                               Max(r.sign_id),
                               --Max(s.name) sign_name,
                               Case
                               When NVL(p_Language,'vi-VN')= 'vi-VN' and max(s.code) ='OT' then
                                to_char(Max(S.NAME))
                               When NVL(p_Language,'vi-VN')= 'en-US' and max(s.code) ='OT' then
                                to_char('Total overtime hours')
                               End SIGN_NAME,
                               
                               Max(s.code) sign_code,
                               TO_CHAR(Sum(NVL(R.NVALUE, 0))) DAYCOUNT,
                               Max(R.Remark) DISPLAY,
                               1 STATUS,
                               TO_CHAR(UNISTR('\0110\00E3 duy\1EC7t')) STATUS_NAME,
                               Max(ot.name_vn )TYPENAME,
                               to_char(Max(r.created_date), 'YYYY-MM-DD') TIMECREATE,
                               Max(r.remark) note,
                               to_char(Min(r.WORKING_DAY), 'YYYY-MM-DD') LEAVEFROM,
                               to_char(Max(r.WORKING_DAY), 'YYYY-MM-DD') LEAVETO,
                               to_char(Min(r.from_hour), 'HH24:MI') fromhour,
                               to_char(Min(r.to_hour), 'HH24:MI') tohour,
                               r.id_group id_reggroup,
                               null APPROVE_NAME,
                               null APPROVE_NOTE,
                               null report_no,                               
                               Min(r.from_hour) mindate
                          from at_rgt r
                         inner join at_sign s
                            on r.sign_id = s.id
                         inner join at_gsign g
                            on s.at_gsignid = g.id
                         inner join hu_employee e
                            on r.employee_id = e.id
                          left join ot_other_list ot
                            on r.type_leave = ot.code
                         where r.employee_id = v_EmployeeID
                         and r.id_rgt_portal is null
                           and g.code = 'OVERTIME'
                           and s.code <> 'OFF'
                           AND NVL(1, 0) <> 4
                           AND (case
                                 when v_Status IN ('-2', '-1') then
                                  1
                                 when v_Status NOT IN ('-2', '-1') and 1 IN
                                      (SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                                                                          FROM (SELECT LEVEL AS IAB,
                                                                                       REGEXP_SUBSTR(v_Status,
                                                                                                     '[^,]+',
                                                                                                     1,
                                                                                                     LEVEL) AS IVALUE
                                                                                  FROM DUAL
                                                                                CONNECT BY REGEXP_SUBSTR(v_Status,
                                                                                                         '[^,]+',
                                                                                                         1,
                                                                                                         LEVEL) IS NOT NULL)) then
                                  1
                                 else
                                  0
                               end) = 1
                           \*AND ((v_ToDate IS NUll and v_FromDate is null and
                               1 = 1) or
                               (v_ToDate is not null and v_FromDate is null and
                               R.WORKING_DAY <= v_ToDate) or
                               (v_ToDate is null and v_FromDate is not null and
                               R.WORKING_DAY >= v_FromDate) or
                               (v_ToDate is not null and
                               v_FromDate is not null and
                               R.WORKING_DAY BETWEEN v_FromDate and v_ToDate))*\
                               Group By r.id_group
                               )*/ )) a)

       WHERE STT > ((v_PAGE - 1) * v_PAGESIZE)
         AND STT < (v_PAGE * v_PAGESIZE + 1)
         AND ((v_ToDate IS NUll and v_FromDate is null and
                               1 = 1) or
                               (v_ToDate is not null and v_FromDate is null and
                               mindate <= v_ToDate) or
                               (v_ToDate is null and v_FromDate is not null and
                               mindate >= v_FromDate) or
                               (v_ToDate is not null and
                               v_FromDate is not null and
                               mindate BETWEEN v_FromDate and v_ToDate))
       Order by LEAVEFROM desc;
      END;

  p_Message        := 'IsSuccess';
  p_ResponseStatus := 1;
EXCEPTION
  WHEN OTHERS THEN
    p_Message        := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
    p_ResponseStatus := -99;
END;

  Procedure API_At_InOutByEmployeeMng(
  p_Companycode    In Nvarchar2,
  p_UserId         In Number,
  p_Language       In Nvarchar2,
  p_FromDate      In Nvarchar2,
  p_ToDate         In  Nvarchar2,
  p_EmpName      In Nvarchar2 default '',
  p_Status      In Number default -1,
  p_Cur            Out Cursor_type,
  p_Message        Out Nvarchar2,
  p_Responsestatus Out Number
 )As
 v_Userid Number(19,0) := Nvl(P_userid, -1);
  v_Empid Number(10);
  v_Temp Number(19, 0) := 0;
  --v_Sql       Clob;
  v_Remark    Clob;
  v_Listemp   Clob;
  v_EmployeeCode  Nvarchar2(50):='';
  v_ListSignCode Clob:='';
  v_StrSqlQuery Clob:='';
  v_FromDate       Date;
  v_ToDate           Date;
  v_EmployeeIds Clob;
  v_Where Clob:='';
  v_SubWhere Clob:='';
 Begin
   v_FromDate      := To_Date(p_FromDate,'YYYY-MM-DD');
  v_ToDate       := To_Date(p_ToDate,'YYYY-MM-DD');
   If V_userid = -1 Then
          P_message := 'ISUSERIDNULL';
          P_responsestatus := -600;
          Return;
      End If;

      Select Id Into V_temp From Se_user Where Id = v_Userid;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If;

      Begin
          Select He.id, he.employee_code Into V_empid  ,v_EmployeeCode
          From Se_user Su
          Inner Join Hu_employee He
           On He.employee_code  = Su.employee_code
          Where Su.id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      --lay ds nhan vien thuoc quan ly:
      Begin
        Select Listagg(To_Char(t.employee_code),',') Within Group (Order By E.Id)
        Into v_EmployeeIds
        From hu_direct_manager E
        Inner Join Hu_Employee T On T.Id=E.Employee_Id
        Where E.Dm_Id =V_empid;
        v_EmployeeIds:= ','||v_EmployeeIds ||',';
        Exception
          When Others Then
              p_Message := 'LISTEMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      Begin
        With tbl_at_sign as (
             select
             to_char(s.code) as sign_code           ,
             s.status
             From at_sign s
             Inner Join At_Gsign G On G.Id=S.At_Gsignid
             Where nvl(s.status,0)<>0
             And G.Code='LEAVE'
        )
        Select Listagg(
                sign_code || ' As '''||sign_code||'''' ,','
                )Within Group (Order By Rownum Desc) list_code
        Into v_ListSignCode
        From tbl_at_sign a where Nvl( a.status,0)<>0    ;
        Exception
          When Others Then
              p_Message := 'SIGNCODENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
   --v_Empid:=2136;
   v_Where:='Where T.Dm_Id = '||v_Empid||    '';
  If Nvl(p_EmpName,' ') <> ' ' Then
    v_SubWhere:=v_SubWhere|| '
    Where ((Upper(E.fullname_vn) Like ''%'' || Upper(N'''|| p_EmpName ||''') || ''%'' Or
                E.employee_code Like ''%'' || N'''|| p_EmpName ||''' || ''%'') Or
                N'''|| p_EmpName ||''' Is Null)
    ';
  End If;
  If p_Status=-1 Then  --tat ca
   v_Where :=v_Where ||'
   ';
  Elsif  p_Status=1 Then--co mat
    v_Where:=v_Where|| '
                    And (
                    T.Id Is Not Null  Or
                    (T.Id Is  Null And T.Object_Group=0 And Nvl(T.Ct_Code,'' '')=''CT'' ) Or
                    (T.Id Is  Null And T.Object_Group=0 And Nvl(T.Ct_Code,'' '')<>''CT'' And Nvl(T.SumValue,0) <1) Or
                    (T.Object_Group=1 And T.Ct_Code=''CT'' )  )
    ';
  Elsif p_Status=2 Then --vang mat
    v_Where:=v_Where|| '
                      And  (
                     (T.Id Is Null And T.Object_Group=0 And Nvl(T.Ct_Code,'' '')<>''CT''  And T.SumValue >=1) Or
                     (T.Id Is Null And T.Object_Group=1 And Nvl(T.Ct_Code,'' '')<>''CT'')  )
    ';
  End If;
  v_StrSqlQuery:='
    Select
     EmployeeId,
     Min(Employee_Code) Employee_Code,
     Min(Fullname_Vn) Fullname_Vn,
     To_Char(WorkingDay, ''yyyy/mm/dd'') Working_Day,
     --Min(Code) At_Sign_Code,
     Replace(Min(Code),''(-)'','''') At_Sign_Code,
     Min(In_Sys_1) In_Sys_1,
     Min(Out_Sys_1) Out_Sys_1,
     Min(DiTre) DiTre,
     Min(VeSom) VeSom,
     Listagg(CodeValue, ''; '') Within Group(Order By Rownum Desc) list_code
    From (Select
                 T.Employee_Id EmployeeId,
                 Employee_Code,
                 Fullname_Vn,
                Nvl(T.Working_Day,Al.Working_Day) WorkingDay,
                  Case When Shift.code is not null Then
                     Shift.Code || ''('' ||
                          TO_CHAR(S.WORK_START, ''HH24:MI'') || ''-'' ||
                          TO_CHAR(S.WORK_END, ''HH24:MI'') || '')''
                      Else
                           k.Code || ''('' ||
                              TO_CHAR(k.WORK_START, ''HH24:MI'') || ''-'' ||
                              TO_CHAR(k.WORK_END, ''HH24:MI'') || '')''
                      End code,
                 In_Sys_1,
                 Out_Sys_1,
                 case WHEN NVL(A.RDT, 0) <> 0 AND A.IO_IN IS NOT NULL AND
                             A.TOTAL_N = 0 THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 *
                                              (A.IO_IN -
                                              PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                SH.WORK_START)) -
                                              A.RDT),
                                              0))
                        WHEN A.TOTAL_N = 0.5 AND
                             (A.IO_IN -
                             PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                         SH.WORK_START)) > 0 AND
                             NVL(A.RDT, 0) <> 0 AND A.IO_IN IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 *
                                              (A.IO_IN -
                                              PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                SH.WORK_START)) -
                                              A.RDT - 4),
                                              0))
                        WHEN A.TOTAL_N = 0.5 AND
                             (A.IO_IN -
                             PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                         SH.WORK_START)) > 0 AND
                             NVL(A.RDT, 0) = 0 AND A.IO_IN IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 *
                                              (24 *
                                              (A.IO_IN -
                                              PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                           SH.WORK_START)) - 5),
                                              0))
                        WHEN NVL(A.RDT, 0) = 0 AND A.IO_IN IS NOT NULL AND
                             A.TOTAL_N = 0 AND A.IO_IN IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * 24 *
                                              (A.IO_IN -
                                              PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                          SH.WORK_START)),
                                              0))
                        WHEN A.TOTAL_N = 1 THEN
                         PKG_AT.NUMBER_TO_TIME(0)
                      END ditre,
                      
                    CASE
                        WHEN NVL(A.RVS, 0) <> 0 AND A.IO_OUT IS NOT NULL AND
                             A.TOTAL_N = 0 THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 * (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                     SH.WORK_END) -
                                              A.IO_OUT) - A.RVS),
                                              0))
                        WHEN A.TOTAL_N = 0.5 AND (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                             SH.WORK_END) -
                             A.IO_OUT) > 0 AND NVL(A.RVS, 0) <> 0 AND
                             A.IO_OUT IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 * (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                     SH.WORK_END) -
                                              A.IO_OUT) - A.RVS - 4),
                                              0))
                        WHEN A.TOTAL_N = 0.5 AND (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                             SH.WORK_END) -
                             A.IO_OUT) > 0 AND NVL(A.RVS, 0) = 0 AND
                             A.IO_OUT IS NOT NULL THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * (24 * (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                     SH.WORK_END) -
                                              A.IO_OUT) - 4),
                                              0))
                        WHEN NVL(A.RVS, 0) = 0 AND A.IO_OUT IS NOT NULL AND
                             A.TOTAL_N = 0 AND
                             (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                         SH.WORK_END) -
                              A.IO_OUT) > 0 THEN
                         PKG_AT.NUMBER_TO_TIME(ROUND(60 * 24 * (PKG_ITIME_REPORT.CAST_DATE(A.WORKING_DAY,
                                                                                    SH.WORK_END) -
                                              A.IO_OUT),
                                              2))
                        WHEN A.TOTAL_N = 1 THEN
                         PKG_AT.NUMBER_TO_TIME(0)
                      END vesom,
                 --PKG_AT.NUMBER_TO_TIME(Al.Dttt) as DiTre,
                 --PKG_AT.NUMBER_TO_TIME(Al.Vstt) as VeSom,
                 Al.*,
                 Case
                       When valuesWithCode > 0 then
                        --To_Char(valuesWithCode) || signCode
                        (case
                            when valuesWithCode < 1 then
                              ''0'' || To_Char(valuesWithCode) || signCode
                            else
                              '''' || To_Char(valuesWithCode) || signCode
                          end)
                       Else
                        ''''
                     End As CodeValue,
                 T.Object_Group ,
                 T.Ct_Code,
                 T.Id As Id_InOut ,
                 T.SumValue
            From (Select
                         Io.Id,
                         E.Employee_Code,
                         E.Id As Employee_Id,
                         C.Cdate as Working_Day,
                         E.Fullname_Vn,
                         To_Char(Io.In_Sys_1, ''HH24:MI'') as In_Sys_1,
                         To_Char(Io.Out_Sys_1, ''HH24:MI'') as Out_Sys_1 ,
                         S.Object_Group ,
                         R.Code As Ct_Code ,
                         D.Dm_Id ,
                         R.G_Code G_Code ,
                         Leave.SumValue
                    From Hu_Employee E
                    Cross Join  Table (table_listdate(:v_FromDate,:v_ToDate)) C
                    Left Join  At_Io io On  C.Cdate=Io.Working_Day  And E.Employee_Code=Io.Employee_Code
                    Left Join Hu_Salary S On S.Id=Pkg_Function.Salarymax_Bydate(E.Id,Cdate)
                    Inner Join (
                    Select *
                    From(
                          Select
                           E.Dm_Id,
                           E.Employee_Id,
                           E.Effect_Date ,
                           E.Is_Deleted ,
                           C.Cdate   ,
                           Row_Number() over(partition by E.Employee_Id,C.Cdate order by trunc(E.Effect_Date) Desc) as row_number
                          From Hu_Direct_Manager E
                          Cross Join Table(Table_Listdate(:v_FromDate,:v_ToDate)) C
                          where   trunc(E.Effect_Date) <=C.CDate
                          And E.Is_Deleted=0
                    )T Where T.row_number=1 And T.Dm_Id='||v_Empid||'
                    )D On E.Id=D.Employee_Id And D.Cdate=C.Cdate
                     Left Join (
                          Select R.Employee_Id,R.Working_Day ,Sum (Nvl(R.Nvalue,0))  As SumValue
                          From At_Rgt R
                          Inner Join At_Sign Si On Si.Id =R.Sign_Id
                          Inner Join At_Gsign G On G.Id=Si.At_Gsignid
                          Where   R.Working_Day Between :v_FromDate And :v_ToDate
                          And G.Code=''LEAVE'' And Si.Code<>''CT''
                          Group By  R.Employee_Id,R.Working_Day
                     )  Leave On Leave.Employee_Id=E.Id And Leave.Working_Day =C.Cdate
                    Left Join(
                        Select R.Employee_Id,R.Working_Day,Sign.Code , G.Code G_Code
                        From  At_Rgt R
                         Inner Join At_Sign Sign
                          On Sign.Id = R.Sign_Id
                        Inner Join At_Gsign G
                          On G.Id = Sign.At_Gsignid
                        Where R.Working_day Between :v_FromDate And :v_ToDate
                        And Sign.Code=''CT'' 
                        Group By R.Employee_Id,R.Working_Day,Sign.Code , G.Code 
                  )R On R.Employee_Id = E.Id
                   And Trunc(R.Working_Day) = Trunc(Io.Working_Day)
                   '||v_SubWhere||'
             ) T
            Left Join (Select *
                        From (Select A.*,d.Dm_Id
                        From At_Aldata a
                        Inner join hu_direct_manager d On d.employee_id=A.Employee_Id
                     And (D.Effect_Date  <= a.working_day )
                     And (D.EXPIRE_DATE Is Null Or  D.EXPIRE_DATE >= a.working_day)
                     And D.Is_Deleted=0
                        Where D.Dm_Id= '||v_Empid||'
                        And A.Working_Day Between :v_FromDate And :v_ToDate
                        )
                        UNPIVOT(valuesWithCode -- unpivot_clause
                             For signCode --  unpivot_for_clause
                             In( -- unpivot_in_clause
                                '||v_ListSignCode||'
                                ))
                       ) Al
              On Al.Employee_Id = T.Employee_Id
             And Al.Working_Day = T.Working_Day
            Left Join At_Sign Shift 
              On Shift.Id = Al.Shift_Id
            Left Join At_Shift S
              On S.At_Sign_Id = Shift.Id
             Left Join ( select si.code,ats.WORK_START,ats.WORK_END,si.id,rgt.employee_id,rgt.working_day
                              from at_rgt rgt
                              left join  at_sign si on rgt.sign_id = si.id
                              left join at_gsign gsi on si.at_gsignid = gsi.id 
                              left join at_shift ats on si.id = ats.at_sign_id
                              where  gsi.code = ''SHIFT''                
                             ) k on k.employee_id = T.Employee_Id and k.working_day = T.Working_Day                  
            Left Join (SELECT AL.EMPLOYEE_ID,
                          AL.DTTT,
                          AL.VSTT,
                          AL.WORKING_DAY,
                          AL.SHIFT_ID,
                          (NVL(AL.CT, 0) + NVL(AL.NB, 0) + NVL(AL.TL, 0) +
                          NVL(AL.CH, 0) + NVL(AL.TS, 0) + NVL(AL.N, 0) +
                          NVL(AL.TN, 0) + NVL(AL.N7, 0) + NVL(AL.VS, 0) +
                          NVL(AL.VSBH, 0) + NVL(AL.CO, 0) + NVL(AL.TNLD, 0) +
                          NVL(AL.DS, 0) + NVL(AL.KHHGD, 0) + NVL(AL.KT, 0) +
                          NVL(AL.KLD, 0) + NVL(AL.ST, 0) + NVL(AL.ONN, 0) +
                          NVL(AL.ODN, 0) + NVL(AL.P, 0) + NVL(AL.L, 0)) TOTAL_N,
                          AL.IO_IN,
                          AL.IO_OUT,
                          AL.RDT,
                          AL.RVS
                     FROM AT_ALDATA AL
                     where --al.EMPLOYEE_ID=3468 and 
                     al.working_day Between :v_FromDate And :v_ToDate) A 
                     on a.EMPLOYEE_ID= t.EMPLOYEE_ID and a.working_day = t.working_day
                     LEFT JOIN AT_SHIFT SH
                            ON A.SHIFT_ID = SH.AT_SIGN_ID
                             '||v_Where||'
        ) Temp
   Group By Temp.EmployeeId, Temp. WorkingDay
   ';
      Insert Into At_strsql Values (Seq_at_strsql.nextval, v_StrSqlQuery);
      Commit;
      Open p_Cur For v_StrSqlQuery
      Using  v_FromDate, v_ToDate, v_FromDate, v_ToDate,v_FromDate, v_ToDate,v_FromDate, v_ToDate,v_FromDate, v_ToDate,v_FromDate, v_ToDate;

      --Open p_Cur For  select 1 SS from dual;

      p_Message := 'ISSUCCESS';
      p_Responsestatus := 1;
   Exception
    When Others Then
      p_Message := 'DATABASEERROR';
      p_Responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_At_InOutByEmployeeMng',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              p_FromDate,
                              p_ToDate,
                              p_EmpName,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End;
  Procedure API_Insert_Register_Leave(
   p_UserId        In Number,
   p_SignCode      In Nvarchar2,
   p_FromDate      In Nvarchar2,
   p_ToDate        In Nvarchar2,
   p_LeaveType     In Nvarchar2,       --OT;LEAVE
   p_LeaveStart    In Nvarchar2,
   p_LeaveEnd      In Nvarchar2,
   p_FromHour   In Nvarchar2 Default '',
   p_ToHour     In Nvarchar2 Default'',
   p_Note          In Nvarchar2,
   p_ReportNo In Nvarchar2,
   p_Language IN NVARCHAR2 default '',
   p_IsSendApprove In Number Default 0,
   p_Message        Out Nvarchar2,
   p_Responsestatus Out Number
  )As
  v_FromDate Date;
  v_ToDate Date;
  v_UserId Number:=Nvl(p_Userid, -1);
  v_Temp Number(19, 0) := 0;
  v_EmployeeId Number;
  v_EmployeeCode  Nvarchar2(50):='';
  v_IdGroup Number;
  v_Value Number;
  v_LeaveType Nvarchar2(15);
  v_SignId Number;
  v_GSignCode Nvarchar2(100);
  v_Date_Temp Date;
  v_Start_DateTime Date;
  v_End_DateTime Date;
  v_PeriodId Number;
  v_OrgId Number:=0;
  v_TitleId Number:=0;
  v_Check Number:=0;
  v_TotalOff Number:=0;
  v_CurhaveNB Number:=0;
  v_TotalLeaveHave Number:=0;
  v_SumPRgtLeaveCurrent Number:=0;
  v_InforAnualRgt Number:=0;
  v_NumOut Number:=0;
  v_SumPRgtCurrent Number:=0;
  v_SumPRgtUsed Number:=0;
  v_LastDateOfMonth Date;
  v_TotalNB Number:=0;
  v_RgtUsed Number:=0;
  v_Total_value_rgt Number:=0;
  v_Ids Clob;
  Begin
    Begin
            v_FromDate:=To_Date(p_FromDate,'yyyy-mm-dd');
            v_ToDate:=To_Date(p_ToDate,'yyyy-mm-dd');
            v_LastDateOfMonth:= To_Date(To_Char( v_ToDate,'yyyy-mm')||'-' ||'01','yyyy-mm-dd')+1;
            Exception When Others Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
               p_Message := TO_CHAR(UNISTR('Th\01A1\0300i gian kh\00F4ng \0111u\0301ng format'));
               else
               p_Message := 'DATETIME INCORRECT FORMAT';
               end if;
               p_Responsestatus := -99;
               Return;
     End;
     Begin
       Select p.Id
       InTo v_PeriodId
       From At_Period p
       Where p.Start_Date <= v_FromDate
       And p.End_Date >=v_FromDate --And p.End_Date >= v_ToDate
       ANd RowNum=1;
       Exception When Others Then
         IF NVL(p_Language,'vi-VN')= 'vi-VN' then
          p_Message := TO_CHAR(UNISTR('Ky\0300 c\00F4ng ch\01B0a thi\00EA\0301t l\00E2\0323p'));
          else
          p_Message := 'PERIODIS NOT FOUND';
          end if;
          p_Responsestatus := -99;
          Return;
     End ;
     if v_FromDate > v_ToDate then
          IF NVL(p_Language,'vi-VN')= 'vi-VN' then
             p_Message := TO_CHAR(UNISTR('Th\1EDDi gian k\1EBFt th\00FAc ph\1EA3i l\1EDBn h\01A1n th\1EDDi gian b\1EAFt \0111\1EA7u'));
          else
             p_Message := 'End time must be sooner than Start time';
          end if;
          p_Responsestatus := -99;
          Return;
     end if;
     
     If v_UserId = -1 Then
          p_Message := 'ISUSERIDNULL';
          p_Responsestatus := -600;
          Return;
      End If;
      Select Id Into v_Temp From Se_user Where Id = v_UserId;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If;
      Begin
          Select He.id, he.employee_code Into v_EmployeeId  ,v_EmployeeCode
          From Se_user Su
          Inner Join Hu_employee He
           On He.Employee_code  = Su.Employee_code
          Where Su.Id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      -- Check Infomation User --------------------------
      Begin
        Select W.Org_Id ,W.Title_Id
        InTo v_OrgId ,v_TitleId
        From Hu_Working W
        Where W.Id =Pkg_Function.WORKINGMAX_BYDATE(v_EmployeeId,v_ToDate);
        If Nvl(v_OrgId,0)=0 Then
          IF NVL(p_Language,'vi-VN')= 'vi-VN' then
          p_Message := TO_CHAR(UNISTR('Kh\00F4ng ti\0300m th\00E2\0301y pho\0300ng ban'));
          else
          p_Message := 'ORGISNOTFOUND';
          end if;
              p_Responsestatus := -600;
              Return;
        End If;
        Exception
          When Others Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
          p_Message := TO_CHAR(UNISTR('Kh\00F4ng ti\0300m th\00E2\0301y pho\0300ng ban'));
          else
          p_Message := 'ORGISNOTFOUND';
          end if;
              p_Responsestatus := -600;
              Return;
      End;
      ---------------------------------------------------------

      Begin
        Select S.Id,G.Code
        Into v_SignId,v_GSignCode
        From At_Sign S
        Inner Join At_Gsign G On G.Id=S.At_Gsignid
        Where S.Code=p_SignCode
        And Rownum=1 ;
        Exception
         When Others Then

          IF NVL(p_Language,'vi-VN')= 'vi-VN' then
             p_Message := TO_CHAR(UNISTR('Kh\00F4ng ti\0300m th\00E2\0301y sign code'));
          else
             p_Message := 'SIGNCODENOTFOUND';
          end if;
              p_Responsestatus := -600;
              Return;
      End;
      PKG_AT.AT_CHECK_EMPLOYEE(v_EmployeeId,v_ToDate,v_Check);
      If v_Check=1 Then
        IF NVL(p_Language,'vi-VN')= 'vi-VN' then
           p_Message := TO_CHAR(UNISTR('Nh\00E2n vi\00EAn ch\01B0a co\0301 quy\00EA\0301t \0111i\0323nh'));
        else
           p_Message := 'Staff has not made a decision, please check again';
        end if;
        p_Responsestatus := -600;
        Return;
      Elsif v_Check=2 Then
        IF NVL(p_Language,'vi-VN')= 'vi-VN' then
         p_Message := TO_CHAR(UNISTR('Chi nha\0301nh kh\00F4ng \0111\01B0\01A1\0323c \0111\0103ng ky\0301'));
        else
         p_Message := 'Affiliate cannot register, please check back';
        end if;
        p_Responsestatus := -600;
        Return;
      End If;
      --Check status period -------------------------------------------------------
      Pkg_At.AT_CHECK_ORG_PERIODID_STATUS(To_Char(v_OrgId),v_PeriodId,1,0,v_Check);
      If  v_Check     =1 Then
        IF NVL(p_Language,'vi-VN')= 'vi-VN' then
           p_Message := TO_CHAR(UNISTR('Ky\0300 c\00F4ng \0111a\0303 \0111o\0301ng'));
        else
           p_Message := 'Period was closed';
        end if;
        p_Responsestatus := -600;
        Return;
      Elsif  v_Check=4 Then
        IF NVL(p_Language,'vi-VN')= 'vi-VN' then
         p_Message := TO_CHAR(UNISTR('Pho\0300ng ban ch\01B0a \0111\01B0\01A1\0323c  thi\00EA\0301t l\00E2\0323p ky\0300 c\00F4ng'));
        else
         p_Message := 'Org was not setup period';
        end if;
        p_Responsestatus := -600;
        Return;
      Elsif  v_Check=2 Then
        IF NVL(p_Language,'vi-VN')= 'vi-VN' then
           p_Message := TO_CHAR(UNISTR('Ba\0309ng c\00F4ng \0111a\0303 \0111\01B0\01A1\0323c \0111o\0301ng b\01A1\0309i h\00F4\0323i s\01A1\0309'));
        else
           p_Message := 'The timesheet was close with HoiSo';
        end if;
        p_Responsestatus := -600;
        Return;
      Elsif  v_Check=3 Then
        IF NVL(p_Language,'vi-VN')= 'vi-VN' then
           p_Message := TO_CHAR(UNISTR('Ky\0300 c\00F4ng \0111a\0303 \0111o\0301ng'));
        else
           p_Message := 'Period was closed, not register';
        end if;
        p_Responsestatus := -600;
        Return;
      End If;

     If Trim( p_SignCode)In('OT') Then
       --check dky trung...
          Select Count(*)
          InTo v_Check
          From (
            Select T1.Employee_ID,
                T1.Working_Day,
                T1.From_Hour,
                T1.To_Hour,
                T1.Sign_Id
            From At_Portal_Reg T1 --portal register
            Where T1.Employee_Id=v_EmployeeId
            And (T1.Status =0  Or T1.Status=2) -- cho duyet
            Union All --app register
            Select
                T2.Employee_ID,
                T2.Working_Day,
                T2.From_Hour,
                T2.To_Hour,
                T2.Sign_Id
            From At_Rgt T2
            Where T2.Employee_Id=v_EmployeeId
          )R
          Inner Join Table(Table_ListDate(v_FromDate, v_ToDate)) D
          On Trunc( D.Cdate)=Trunc(R.Working_Day )
          Inner Join At_Sign S On S.Id=R.Sign_Id
          Inner Join At_Gsign G On G.Id=S.At_Gsignid
          And G.Code='OVERTIME'
          Where R.Employee_Id =v_EmployeeId   And(
           (R.From_Hour <= To_Date(To_Char( D.Cdate,'dd/mm/yyyy')||' '||p_FromHour,'dd/mm/yyyy hh24:mi')And
            R.To_Hour >= To_Date(To_Char( D.Cdate,'dd/mm/yyyy')||' '||p_ToHour,'dd/mm/yyyy hh24:mi')) Or(
            R.From_Hour >=  To_Date(To_Char( D.Cdate,'dd/mm/yyyy')||' '||p_FromHour,'dd/mm/yyyy hh24:mi') And
            R.To_Hour>=To_Date(To_Char( D.Cdate,'dd/mm/yyyy')||' '||p_ToHour,'dd/mm/yyyy hh24:mi')
            ) Or(
            R.From_Hour <=  To_Date(To_Char( D.Cdate,'dd/mm/yyyy')||' '||p_FromHour,'dd/mm/yyyy hh24:mi') And
            R.To_Hour<=To_Date(To_Char( D.Cdate,'dd/mm/yyyy')||' '||p_ToHour,'dd/mm/yyyy hh24:mi')
            ) Or(
            R.From_Hour >=  To_Date(To_Char( D.Cdate,'dd/mm/yyyy')||' '||p_FromHour,'dd/mm/yyyy hh24:mi') And
            R.To_Hour<=To_Date(To_Char( D.Cdate,'dd/mm/yyyy')||' '||p_ToHour,'dd/mm/yyyy hh24:mi')
            )
            );--  And Trunc(R.Working_Day)=( D.Cdate);
            If v_Check>0 Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                 p_Message := TO_CHAR(UNISTR('Th\01A1\0300i gian \0111\0103ng ky\0301 kh\00F4ng \0111\01B0\01A1\0323c phe\0301p'));
              else
                p_Message := 'The registration time for overtime is not valid';
              end if;
              p_Responsestatus := -600;
              Return;
            End If;
            PKG_AT.GET_TOTAL_OT_APPROVE3(v_EmployeeId,v_ToDate,v_Total_value_rgt);
            PKG_AT.CHECK_RGT_OT( v_EmployeeId,v_FromDate,v_ToDate,p_FromHour, p_ToHour, v_Total_value_rgt, v_NumOut);
            If  v_NumOut=1 Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                p_Message := TO_CHAR(UNISTR('Nh\00E2n vi\00EAn ch\01B0a thi\00EA\0301t l\00E2\0323p ca ho\0103\0323c ca kh\00F4ng t\00F4\0300n ta\0323i'));
              else
                 p_Message := 'Employee has not been set up for a shift or the shift does not exist, please check';
              end if;
              p_Responsestatus := -600;
              Return;
            Elsif v_NumOut=2 Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                p_Message := TO_CHAR(UNISTR('Ch\1EE9c danh nh\00E2n vi\00EAn kh\00F4ng \0111\01B0\1EE3c \0111\0103ng k\00FD cho c\00F4ng vi\1EC7c b\00E1n th\1EDDi gian'));
              else
                 p_Message := 'Employee title is not registered for part-time job, please check again';
              end if;
              p_Responsestatus := -600;
              Return;
            Elsif v_NumOut=3 Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                p_Message := TO_CHAR(UNISTR('Th\1EDDi gian \0111\0103ng k\00FD OT kh\00F4ng n\1EB1m trong ca l\00E0m vi\1EC7c'));
              else
                 p_Message := 'OT registration time is not within shift work, please check again';
              end if;
              p_Responsestatus := -600;
              Return;
            Elsif v_NumOut=4 Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                 p_Message := TO_CHAR(UNISTR('Th\1EDDi gian \0111\0103ng k\00FD n\0103\0300m ngoa\0300i th\1EDDi gian ti\0301nh l\00E0m th\00EAm'));
              else
                 p_Message := 'The registration period is not in the period counting overtime, please check again';
              end if;
              p_Responsestatus := -600;
              Return;
            Elsif v_NumOut=5 Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
               p_Message := TO_CHAR(UNISTR('Gi\1EDD \0111\0103ng k\00FD v\01B0\1EE3t qu\00E1 quy \0111\1ECBnh'));
              else
               p_Message := 'The registration time exceed the regulations, please check again';
              end if;
             p_Responsestatus := -600;
              Return;
            Elsif v_NumOut=6 Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
               p_Message := TO_CHAR(UNISTR('Gi\1EDD \0111\0103ng k\00FD v\01B0\1EE3t qu\00E1 quy \0111\1ECBnh'));
              else
               p_Message := 'Not allow registration of overtime work in case of maternity, please check again';
              end if;
             p_Responsestatus := -600;
              Return;
            Elsif v_NumOut=7 Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
               p_Message := TO_CHAR(UNISTR('Co\0301 con d\01B0\01A1\0301i 12 tha\0301ng tu\00F4\0309i kh\00F4ng \0111\01B0\01A1\0323c \0111\0103ng ky\0301'));
              else
               p_Message := 'Have children under 12 months old, can not part-time registe';
              end if;
             p_Responsestatus := -600;
              Return;
            Elsif v_NumOut=8 Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
               p_Message := TO_CHAR(UNISTR('Nh\00E2n vi\00EAn th\1EED vi\1EC7c kh\00F4ng \0111\01B0\1EE3c \0111\0103ng k\00FD l\00E0m th\00EAm'));
              else
               p_Message := 'Probationary staff are not allowed to register for part-time jobs, please check again';
              end if;
             p_Responsestatus := -600;
              Return;
            End If;
            v_Check:=0;
            Select count(*)
            InTo v_Check
            From Hu_Title t
            Where t.Id=v_TitleId
            And t.is_ot=0;
            If v_Check=1 And Nvl(p_ReportNo,'A')='A' Then
              IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                p_Message := TO_CHAR(UNISTR('Ch\1EE9c danh nh\00E2n vi\00EAn kh\00F4ng \0111\01B0\1EE3c ph\00E9p \0111\0103ng k\00FD, nh\1EADp s\1ED1 t\1EDD tr\00ECnh \0111\1EC3 ti\1EBFp t\1EE5c'));
              else
                 p_Message := 'Employee title is not eligible for registration, enter Proposal No. to continue';
              end if;
              p_Responsestatus := -600;
              Return;
            End If;
     Else
        PKG_AT_ATTENDANCE_PORTAL.CHECK_EXIST_OFF (v_EmployeeId,v_FromDate,v_ToDate,v_TotalOff);
        If p_SignCode='NB'Then
           PKG_AT_ANNUAL.AT_INFOR_NB_RGT( v_EmployeeId,v_ToDate,v_CurhaveNB);
       End If ;--kiem tra vuot phep bu.
     --Kiem tra dky vuot phep...........................................................................
       PKG_AT_ATTENDANCE_PORTAL.GET_NUMBER_BY_LEAVE_YEAR(v_EmployeeId,p_SignCode,
       v_ToDate,v_TotalLeaveHave);
       If p_SignCode <>'TS' Then
           If v_FromDate =v_ToDate Then
             If p_LeaveStart<>p_LeaveEnd Then
               v_Value:=1;
               v_LeaveType:='TYPE_LEAVE3';
             Else
               v_Value:=0.5;
               v_LeaveType:=p_LeaveStart;
             End If;
             v_SumPRgtLeaveCurrent:=v_Value;
             --kiem tra vuot qua gioi han dang ky
             If v_TotalLeaveHave <>-99 And v_SumPRgtLeaveCurrent> v_TotalLeaveHave
               And p_SignCode Not In ('NB','P') Then
               IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                  p_Message := TO_CHAR(UNISTR('V\01B0\01A1\0323t qua s\00F4\0301 nga\0300y nghi\0309'));
               else
                  p_Message := 'The number of days off has been exceeded';
               end if;
               p_Responsestatus := -600;
               Return;
             End If;
             --Kiem tra vuot phep nam
             If p_SignCode ='P' Then
               PKG_AT_ANNUAL.AT_INFOR_ANNUAL_RGT(v_EmployeeId,v_FromDate, v_InforAnualRgt);
               If v_InforAnualRgt =99 Then
                 IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                  p_Message := TO_CHAR(UNISTR('Nh\00E2n vi\00EAn ch\01B0a \0111\01B0\01A1\0323c ti\0301nh phe\0301p trong n\0103m'));
                 else
                  p_Message := 'Employee have not been counted in year, please check again';
                 end if;
                 p_Responsestatus := -600;
                  Return;
               Elsif v_InforAnualRgt=98 Then
                 IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Nh\00E2n vi\00EAn th\1EED vi\1EC7c kh\00F4ng \0111\01B0\1EE3c xin ph\00E9p n\0103m'));
                 else
                    p_Message:='Probationary employees cannot apply for annual leave, please check again';
                 end if;
                 p_Responsestatus := -600;
                 Return;
               Elsif v_InforAnualRgt=97 Then
                 IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Nh\00E2n vi\00EAn th\1EED vi\1EC7c kh\00F4ng \0111\01B0\1EE3c \0111\0103ng ky\0301'));
                 else
                    p_Message:='Staff in the probationary period cannot register, please check again';
                 end if;
                 p_Responsestatus := -600;
                 Return;
               Elsif  v_InforAnualRgt< 0 Then
                 IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('S\1ED1 ng\00E0y \0111\0103ng k\00FD v\01B0\1EE3t qu\1EF9 ph\00E9p'));
                 else
                    p_Message:='No annual leave remains';
                 end if;
                p_Responsestatus := -600;
                 Return;
               End If;
               PKG_AT_ATTENDANCE_PORTAL.CHECK_EXIST_OFF_N(v_EmployeeId, v_FromDate, v_NumOut);
             -- Kiem tra neu ngay bat dau nghi la chieu thu 7 thi khong cho dang ky
               If  v_NumOut= 0.5 And p_LeaveStart='TYPE_LEAVE2' Then
                 IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Th\1EDDi gian \0111\0103ng k\00FD tru\0300ng v\01A1\0301i th\1EDDi gian ngh\1EC9 h\00E0ng tu\1EA7n'));
                 else
                    p_Message := 'The registration period is within the weekly break, please check again';
                 end if;
                 p_Responsestatus := -600;
                 Return;
               End If;
             --Kiem tra vuot phep nam
               v_SumPRgtCurrent := v_Value- v_TotalOff;
               v_SumPRgtUsed:=Fn_TotalRegisterByType(v_EmployeeId,v_FromDate,v_ToDate,'',  'P');
               If v_SumPRgtCurrent + v_SumPRgtUsed > v_InforAnualRgt
               Or (v_SumPRgtCurrent = 0 And v_SumPRgtCurrent + v_SumPRgtUsed = v_InforAnualRgt) Then

                 IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('S\1ED1 ng\00E0y \0111\0103ng k\00FD v\01B0\1EE3t qu\1EF9 ph\00E9p'));
                 else
                    p_Message :='Annual leave of employee has expired, please check again' ;
                 end if;
                 p_Responsestatus := -600;
                 Return;
               End If;
          End If;
             --kiem tra vuot phep bu.
             If p_SignCode='NB' Then
               PKG_AT_ANNUAL.AT_INFOR_NB_RGT( v_EmployeeId,v_LastDateOfMonth,v_CurhaveNB);
               v_SumPRgtCurrent  :=v_Value    -v_NumOut;
               v_SumPRgtUsed:=Fn_TotalRegisterByType(v_EmployeeId,v_FromDate,v_ToDate,'',  'NB');
               If v_SumPRgtCurrent + v_SumPRgtUsed > v_CurhaveNB Or
                (v_SumPRgtCurrent = 0 And v_SumPRgtCurrent + v_SumPRgtUsed = v_CurhaveNB) Then

                IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Ph\00E9p bu\0300 cu\0309a nh\00E2n vi\00EAn \0111\00E3 h\1EBFt'));
                 else
                    p_Message :='Staff compensatory leave days has been exhausted, please check again' ;
                 end if;
                 p_Responsestatus := -600;
                 Return;
               End If;
             End If;
             v_SumPRgtUsed := 0 ;
             v_SumPRgtCurrent := 0 ;
             v_SumPRgtLeaveCurrent := 0    ;
           Else -- fromdate < todate
              For ItemsDate In (
                  Select  C.CDate
                  From Table(Table_ListDate(v_FromDate, v_ToDate)) C
              )Loop
              If ItemsDate.Cdate= v_FromDate Then
                If p_LeaveStart='TYPE_LEAVE1' Then
                  v_Value:=1;
                  v_LeaveType:='TYPE_LEAVE3';
                Else
                  v_LeaveType:=p_LeaveStart;
                  v_Value:=0.5;
                End If;
               End If;
               If ItemsDate.Cdate>v_FromDate And ItemsDate.Cdate<v_ToDate Then
                  v_Value:=1;
                  v_LeaveType:='TYPE_LEAVE3';
               End If;
               If ItemsDate.Cdate= v_ToDate Then
                If p_LeaveEnd='TYPE_LEAVE1' Then
                  v_LeaveType:=p_LeaveEnd;
                  v_Value:=0.5;
                Else
                  v_Value:=1;
                  v_LeaveType:='TYPE_LEAVE3';
                End If;
               End If;
               v_RgtUsed :=Fn_TotalRegisterByType(v_EmployeeId,v_FromDate,v_ToDate,'',  '');
               If  p_SignCode ='P' Or p_SignCode= 'NB' Then
                   v_SumPRgtCurrent := v_SumPRgtCurrent + v_Value;
               End If;
               v_SumPRgtLeaveCurrent := v_SumPRgtLeaveCurrent + v_Value;
              End Loop;
              v_SumPRgtLeaveCurrent := v_SumPRgtLeaveCurrent - v_TotalOff;
              If v_TotalLeaveHave <> -99 And v_SumPRgtLeaveCurrent > v_TotalLeaveHave
                And p_SignCode<> 'P' And p_SignCode <> 'NB' Then
                IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('S\1ED1 ng\00E0y \0111\0103ng k\00FD v\01B0\1EE3t qu\1EF9 ph\00E9p'));
                 else
                    p_Message :='No annual leave remains' ;
                 end if;
                 p_Responsestatus := -600;
                 Return;
              End If;
              --Kiem tra dky vuot phep nam.
              If p_SignCode='P' Then
                PKG_AT_ANNUAL.AT_INFOR_ANNUAL_RGT(v_EmployeeId,v_LastDateOfMonth, v_InforAnualRgt);
                If v_InforAnualRgt =99 Then
                  IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Nh\00E2n vi\00EAn ch\01B0a \0111\01B0\1EE3c t\00EDnh phe\0301p trong n\0103m'));
                  else
                    p_Message := 'Employee have not been counted for the year, please check again';
                  end if;
                  p_Responsestatus := -600;
                  Return;
               Elsif v_InforAnualRgt=98 Then
                  IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Nh\00E2n vi\00EAn th\1EED vi\1EC7c kh\00F4ng \0111\01B0\1EE3c xin nghi\0309 ph\00E9p n\0103m'));
                  else
                    p_Message:='Probationary employees cannot apply for annual leave, please check again';
                 end if;
                 p_Responsestatus := -600;
                 Return;
               Elsif v_InforAnualRgt=97 Then
                  IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Nh\00E2n vi\00EAn \0111ang trong th\1EDDi gian th\1EED vi\1EC7c kh\00F4ng \0111\01B0\1EE3c \0111\0103ng k\00FD'));
                  else
                    p_Message:='Staff in the probationary period cannot register, please check again';
                 end if;
                 p_Responsestatus := -600;
                 Return;
               Elsif v_InforAnualRgt=100 Then
                 IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Nh\00E2n vi\00EAn kh\00F4ng c\00F3 h\1EE3p \0111\1ED3ng'));
                  else
                    p_Message:='Employee who do not have a contract please check again';
                 end if;
                 p_Responsestatus := -600;
                 Return;
               Elsif  v_InforAnualRgt< 0 Then
                  IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('S\1ED1 ng\00E0y \0111\0103ng k\00FD v\01B0\1EE3t qu\1EF9 ph\00E9p'));
                 else
                    p_Message :='No annual leave remains' ;
                 end if;
                 p_Responsestatus := -600;
                 Return;
               End If;
               PKG_AT_ATTENDANCE_PORTAL.CHECK_EXIST_OFF_N(v_EmployeeId, v_FromDate, v_NumOut);
             -- Kiem tra neu ngay bat dau nghi la chieu thu 7 thi khong cho dang ky
               If  v_NumOut= 0.5 And p_LeaveStart='TYPE_LEAVE2' Then
                 IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Th\1EDDi gian \0111\0103ng k\00FD tru\0300ng v\01A1\0301i th\1EDDi gian ngh\1EC9 h\00E0ng tu\1EA7n'));
                 else
                    p_Message := 'The registration period is within the weekly break, please check again';
                 end if;
                 p_Responsestatus := -600;
                 Return;
               End If;
               --Kiem tra neu ngay ket thuc dky la thu 7 or chu nhat dong thoi dang ky nghi buoi sang thi - 0.5 OFF
               PKG_AT_ATTENDANCE_PORTAL.CHECK_EXIST_OFF_N(v_EmployeeId, v_ToDate, v_NumOut);
               If p_LeaveEnd = 'TYPE_LEAVE1' And v_NumOut = 0.5 Then
                 v_SumPRgtCurrent := v_NumOut + v_SumPRgtCurrent - v_TotalOff;
               Elsif p_LeaveEnd= 'TYPE_LEAVE1' And v_NumOut = 1.5 Then
                 v_SumPRgtCurrent := 0.5 + v_SumPRgtCurrent - v_TotalOff;
               Elsif p_LeaveEnd = 'TYPE_LEAVE1' And v_NumOut = 1 Then
                 v_SumPRgtCurrent := 0.5 + v_SumPRgtCurrent - v_TotalOff;
               Else
                 v_SumPRgtCurrent := v_SumPRgtCurrent - v_TotalOff;
               End If;
               If v_SumPRgtCurrent + v_SumPRgtUsed > v_InforAnualRgt
                 Or (v_SumPRgtCurrent = 0 And v_SumPRgtCurrent + v_SumPRgtUsed = v_InforAnualRgt) Then
                 IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Phe\0301p n\0103m cu\0309a nh\00E2n vi\00EAn \0111a\0303 h\00EA\0301t'));
                 else
                    p_Message :='Employee is permission year has been exhausted please check again';
                 end if;
                 p_Responsestatus := -600;
                 Return;
               End If;
              End If;
              --kiem tra dky vuot phep bu
              If p_SignCode='NB' Then
                v_SumPRgtUsed:= Fn_TotalRegisterByType(v_EmployeeId,v_FromDate,v_ToDate,'',  'NB');
                PKG_AT_ANNUAL.AT_INFOR_NB_RGT( v_EmployeeId,v_LastDateOfMonth,v_CurhaveNB);
                v_SumPRgtCurrent := v_SumPRgtCurrent - v_TotalOff;
               If v_SumPRgtCurrent + v_SumPRgtUsed > v_CurhaveNB Or
                (v_SumPRgtCurrent = 0 And v_SumPRgtCurrent + v_SumPRgtUsed = v_CurhaveNB) Then

                IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Ng\00E0y ngh\1EC9 b\00F9 c\1EE7a nh\00E2n vi\00EAn \0111\00E3 h\1EBFt'));
                 else
                    p_Message :='No compensatory leave remains' ;
                 end if;
                 p_Responsestatus := -600;
                 Return;
               End If;
              End If;
              v_SumPRgtUsed := 0 ;
              v_SumPRgtCurrent := 0  ;
              v_SumPRgtLeaveCurrent := 0   ;
        End If;
      End If;
     End If;
   --Ket thuc kiem tra-------------------------------------------------------------

    If Trim(p_SignCode)='OT' Then
      v_IdGroup:= Seq_At_Portal_Reg.Nextval;

      For ItemsDate In(
        Select  C.CDate
        From Table(Table_ListDate(v_FromDate, v_ToDate)) C/*
        Left Join At_Holiday H On  H.Workingday=C.Cdate
        Where H.Id Is Null And  To_Char(C.CDate, 'd') <>1*/
      )Loop
        v_Start_DateTime:=To_Date(To_Char( ItemsDate.Cdate,'dd/mm/yyyy')||' '||p_FromHour,'dd/mm/yyyy hh24:mi');
        v_End_DateTime:=To_Date(To_Char( ItemsDate.Cdate,'dd/mm/yyyy')||' '||p_ToHour,'dd/mm/yyyy hh24:mi');
        v_Value:=Round(( ( v_End_DateTime- v_Start_DateTime  )*24),0);
        Sub_Insert_Portal_Reg(v_EmployeeId, ItemsDate.Cdate,p_SignCode,
        v_Value,'',p_FromHour,p_ToHour,p_Note,v_IdGroup,p_ReportNo,p_Message,p_Responsestatus );
       If p_Responsestatus <>1 Then
          p_Message := p_Message;--'DATABASEERROR1';
          p_Responsestatus := -99;
          Rollback;
         Exit;
       End If;
      End Loop;
      If p_IsSendApprove=1 and p_Responsestatus =1 Then
         API_SendApprovePortal(
                             p_Language       =>p_Language,
                             p_UserID         =>p_UserID,
                             p_IdGroups        =>To_Char(v_IdGroup),
                             p_TypeRegister => 'OVERTIME' ,
                            p_Message     =>p_Message,
                            p_ResponseStatus =>p_ResponseStatus
        );
        End If;
    Else
       --TH FromDate=ToDate
     If v_FromDate =v_ToDate Then
    --> 
     /*  If To_Char(v_FromDate, 'd') =1 Then 
           IF NVL(p_Language,'vi-VN')= 'vi-VN' then
                    p_Message:=TO_CHAR(UNISTR('Th\1EDDi gian \0111\0103ng k\00FD tru\0300ng v\01A1\0301i th\1EDDi gian ngh\1EC9 h\00E0ng tu\1EA7n'));
                 else
                    p_Message := 'The registration period is within the weekly break, please check again';
                 end if;
                 p_Responsestatus := -600;
                 Return;
       End If;*/
       v_IdGroup:= Seq_At_Portal_Reg.Nextval;
       If p_LeaveStart<>p_LeaveEnd Then
         v_Value:=1;
         v_LeaveType:='TYPE_LEAVE3';
       Else
         v_Value:=0.5;
         v_LeaveType:=p_LeaveStart;
       End If;
       Sub_Insert_Portal_Reg(v_EmployeeId, v_FromDate,p_SignCode,
       v_Value,v_LeaveType,p_FromHour,p_ToHour,p_Note,v_IdGroup,p_ReportNo,p_Message,p_Responsestatus );  
       If  p_Responsestatus <0 Then Return ;End If;
       If p_IsSendApprove=1 Then
        API_SendApprovePortal(
                             p_Language       =>p_Language,
                             p_UserID         =>p_UserID,
                             p_IdGroups        =>To_Char(v_IdGroup),
                             p_TypeRegister => 'LEAVE' ,
                            p_Message     => p_Message,
                            p_ResponseStatus =>p_ResponseStatus
        );
        End If;
    --TH FromDate < ToDate
    Else
    -->
      v_IdGroup:= Seq_At_Portal_Reg.Nextval;
      For ItemsDate In(
        Select  C.CDate
        From Table(Table_ListDate(v_FromDate, v_ToDate)) C
        Left Join At_Holiday H On  H.Workingday=C.Cdate
        Where (H.Id Is Null     
        Or p_SignCode Not In  ('CT', 'NB', 'TL', 'TLAE', 'CH', 'P', 'VS'  ) )
       --  And  To_Char(C.CDate, 'd') <>1
      )Loop

        If ItemsDate.Cdate= v_FromDate Then
          If p_LeaveStart='TYPE_LEAVE1' Then
            v_Value:=1;
            v_LeaveType:='TYPE_LEAVE3';
          Else
            v_LeaveType:=p_LeaveStart;
            v_Value:=0.5;
          End If;
        End If;
        If ItemsDate.Cdate>v_FromDate And ItemsDate.Cdate<v_ToDate Then
          v_Value:=1;
          v_LeaveType:='TYPE_LEAVE3';
        End If;
        If ItemsDate.Cdate= v_ToDate Then
          If p_LeaveEnd='TYPE_LEAVE1' Then
            v_LeaveType:=p_LeaveEnd;
            v_Value:=0.5;
          Else
            v_Value:=1;
            v_LeaveType:='TYPE_LEAVE3';
          End If;
        End If;
       Sub_Insert_Portal_Reg(v_EmployeeId, ItemsDate.Cdate,p_SignCode,
       v_Value,v_LeaveType,p_FromHour,p_ToHour,p_Note,v_IdGroup,p_ReportNo,p_Message,p_Responsestatus );
       If  p_Responsestatus <1 Then
         rollback;
         Return;
       End If;
       If p_Responsestatus <>1 Then
          p_Message := p_Message;--'DATABASEERROR2';
          p_Responsestatus := -99;
          Rollback;
         Exit;
       End If;
      End Loop;
      If p_IsSendApprove=1 and p_Responsestatus =1 Then

        API_SendApprovePortal(
                             p_Language       =>p_Language,
                             p_UserID         =>p_UserID,
                             p_IdGroups        =>To_Char(v_IdGroup),
                             p_TypeRegister => 'LEAVE' ,
                            p_Message     =>p_Message,
                            p_ResponseStatus =>p_ResponseStatus
        );
        End If;
    End If;
    End If;
    Exception When Others Then
      p_Message := 'DATABASEERROR3';
      p_Responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'API_Insert_Register_Leave',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              p_FromHour,
                              p_ToHour,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
  End;


Procedure API_At_InOutByEmployeeMngAll(p_Companycode    In Nvarchar2,
                                       p_UserId         In Number,
                                       p_Language       In Nvarchar2,
                                       p_FromDate       In Nvarchar2,
                                       p_Cur            Out Cursor_type,
                                       p_Message        Out Nvarchar2,
                                       p_Responsestatus Out Number) As

  v_Userid Number(19, 0) := Nvl(P_userid, -1);
  v_Empid  Number(10);

  v_Temp         Number(19, 0) := 0;
  v_EmployeeCode Nvarchar2(50) := '';
  v_FromDate     Date;

  v_startdate  date;
  v_enddate    date;
  v_Count_Sum1 Number := 0;
  v_Count_Sum2 Number := 0;


  v_Count_Present1 number := 0;
  v_Count_Present2 number := 0;

  v_Count_Present1_notfin number := 0;
  v_Count_Present2_notfin number := 0;

  v_re  number := 0;
  v_re1 number := 0;
  v_re2 number := 0;

  v_re_day  number := 0;
  v_re1_day number := 0;
  v_re2_day number := 0;

  v_lst_org Nvarchar2(5000);
Begin
  v_FromDate := To_Date(p_FromDate, 'YYYY-MM-DD');
  SELECT trunc(v_FromDate) - (to_number(to_char(v_FromDate, 'DD')) - 1)
    into v_startdate
    FROM dual;
  SELECT add_months(trunc(v_FromDate) -
                    (to_number(to_char(v_FromDate, 'DD')) - 1),
                    1) - 1
    into v_enddate
    FROM dual;

  If V_userid = -1 Then
    P_message        := 'ISUSERIDNULL';
    P_responsestatus := -600;
    Return;
  End If;

  Select Id Into V_temp From Se_user Where Id = v_Userid;
  If V_temp < 1 Then
    p_Message        := 'USERISNOTFOUND';
    p_Responsestatus := -600;
    Return;
  End If;

  Begin
    Select He.id, he.employee_code
      Into V_empid, v_EmployeeCode
      From Se_user Su
     Inner Join Hu_employee He
        On He.employee_code = Su.employee_code
     Where Su.id = v_Userid;
  Exception
    When Others Then
      p_Message        := 'EMPLOYEENOTFOUND';
      p_Responsestatus := -600;
      Return;
  End;

  Begin
    Select nvl((sum(co_mat_dk) + sum(co_mat_ck)) / 2 +
           (sum(vang_mat_dk) + sum(vang_mat_ck)) / 2,0), --tong trong thang
           nvl((sum(co_mat_dk) + sum(co_mat_ck)) / 2,0), --co mat trong thang
           nvl((sum(vang_mat_dk) + sum(vang_mat_ck)) / 2,0), --vang mat trong thang
           nvl(sum(co_mat_tn) + sum(vang_mat_tn),0),--tong trong ngay
           nvl(sum(co_mat_tn),0),--co mat ngay
           nvl(sum(vang_mat_tn),0)--vang mat ngay
      into v_re, v_re1, v_re2, v_re_day, v_re1_day, v_re2_day
      From (Select T.Employee_Id EmployeeId,
                   Employee_Code,
                   Fullname_Vn,
                   (T.Working_Day) WorkingDay,
                   T.Object_Group,
                   T.Ct_Code,
                   T.Id As Id_InOut,
                   T.SumValue,
                   case
                     when (T.Id Is Not Null Or
                          (T.Id Is Null And T.Object_Group = 0 And
                          Nvl(T.Ct_Code, ' ') = 'CT') Or
                          (T.Id Is Null And T.Object_Group = 0 And
                          Nvl(T.Ct_Code, ' ') <> 'CT' And
                          Nvl(T.SumValue, 0) < 1) Or
                          (T.Object_Group = 1 And T.Ct_Code = 'CT')) and
                          T.Working_day = v_startdate then
                      1
                     else
                      0
                   end as co_mat_dk,
                   case
                     when (T.Id Is Not Null Or
                          (T.Id Is Null And T.Object_Group = 0 And
                          Nvl(T.Ct_Code, ' ') = 'CT') Or
                          (T.Id Is Null And T.Object_Group = 0 And
                          Nvl(T.Ct_Code, ' ') <> 'CT' And
                          Nvl(T.SumValue, 0) < 1) Or
                          (T.Object_Group = 1 And T.Ct_Code = 'CT')) and
                          T.Working_day = v_enddate then
                      1
                     else
                      0
                   end as co_mat_ck,

                   case
                     when ((T.Id Is Null And T.Object_Group = 0 And
                          Nvl(T.Ct_Code, ' ') <> 'CT' And T.SumValue >= 1) Or
                          (T.Id Is Null And T.Object_Group = 1 And
                          Nvl(T.Ct_Code, ' ') <> 'CT')) and
                          trunc(T.Working_day) = v_startdate then
                      1
                     else
                      0
                   end vang_mat_dk,

                   case
                     when ((T.Id Is Null And T.Object_Group = 0 And
                          Nvl(T.Ct_Code, ' ') <> 'CT' And T.SumValue >= 1) Or
                          (T.Id Is Null And T.Object_Group = 1 And
                          Nvl(T.Ct_Code, ' ') <> 'CT')) and
                          trunc(T.Working_day) = v_enddate then
                      1
                     else
                      0
                   end vang_mat_ck,
                   case
                     when (T.Id Is Not Null Or
                          (T.Id Is Null And T.Object_Group = 0 And
                          Nvl(T.Ct_Code, ' ') = 'CT') Or
                          (T.Id Is Null And T.Object_Group = 0 And
                          Nvl(T.Ct_Code, ' ') <> 'CT' And
                          Nvl(T.SumValue, 0) < 1) Or
                          (T.Object_Group = 1 And T.Ct_Code = 'CT')) and
                          Trunc(T.Working_day) = v_FromDate then
                      1
                     else
                      0
                   end as co_mat_tn,
                   case
                     when ((T.Id Is Null And T.Object_Group = 0 And
                          Nvl(T.Ct_Code, ' ') <> 'CT' And T.SumValue >= 1) Or
                          (T.Id Is Null And T.Object_Group = 1 And
                          Nvl(T.Ct_Code, ' ') <> 'CT')) and
                          trunc(T.Working_day) = v_FromDate then
                      1
                     else
                      0
                   end vang_mat_tn
              From (Select Io.Id,
                           E.Employee_Code,
                           E.Id As Employee_Id,
                           C.Cdate as Working_Day,
                           E.Fullname_Vn,
                           To_Char(Io.In_Sys_1, 'HH24:MI') as In_Sys_1,
                           To_Char(Io.Out_Sys_1, 'HH24:MI') as Out_Sys_1,
                           S.Object_Group,
                           R.Code As Ct_Code,
                           D.Dm_Id,
                           --G.Code As G_Code,
                           Leave.SumValue
                      From Hu_Employee E
                     Cross Join Table(table_listdate(v_startdate, v_enddate)) C
                      Left Join At_Io io
                        On C.Cdate = Io.Working_Day
                       And E.Employee_Code = Io.Employee_Code
                      Left Join Hu_Salary S
                        On S.Id = Pkg_Function.Salarymax_Bydate(E.Id, Cdate)
                     Inner Join (Select *
                                  From (Select E.Dm_Id,
                                               E.Employee_Id,
                                               E.Effect_Date,
                                               E.Is_Deleted,
                                               C.Cdate,
                                               Row_Number() over(partition by E.Employee_Id, C.Cdate order by trunc(E.Effect_Date) Desc) as row_number
                                          From Hu_Direct_Manager E
                                         Cross Join Table(Table_Listdate(v_startdate, v_enddate)) C
                                         where trunc(E.Effect_Date) <= C.CDate
                                           And E.Is_Deleted = 0) T
                                 Where T.row_number = 1
                                   And T.Dm_Id = V_empid) D
                        On E.Id = D.Employee_Id
                       And D.Cdate = C.Cdate
                      Left Join (Select R.Employee_Id,
                                       R.Working_Day,
                                       Sum(Nvl(R.Nvalue, 0)) As SumValue
                                  From At_Rgt R
                                 Inner Join At_Sign Si
                                    On Si.Id = R.Sign_Id
                                 Inner Join At_Gsign G
                                    On G.Id = Si.At_Gsignid
                                 Where R.Working_Day Between v_startdate And
                                       v_enddate
                                   And G.Code = 'LEAVE'
                                   And Si.Code <> 'CT'
                                 Group By R.Employee_Id, R.Working_Day) Leave
                        On Leave.Employee_Id = E.Id
                       And Leave.Working_Day = C.Cdate
                       Left Join(
                        Select R.EMPLOYEE_ID,R.WORKING_DAY,Sign.Code
                        From  At_Rgt R
                         Inner Join At_Sign Sign
                          On Sign.Id = R.Sign_Id
                        Inner Join At_Gsign G
                          On G.Id = Sign.At_Gsignid
                        Where R.Working_day Between  v_startdate And v_enddate
                        And Sign.Code='CT'
                  )R On R.Employee_Id = E.Id
                   And Trunc(R.Working_Day) = Trunc(Io.Working_Day)

                    ) T
             Where T.Dm_Id = V_empid) Su;

  Exception
    When Others Then
      p_Message        := 'LISTEMPLOYEENOTFOUND';
      p_Responsestatus := -600;
      Return;
  End;

  select o.L3 || '-' || o.L4 || '-' || o.L5 || '-' || o.L6 || '-' || o.l7
    into v_lst_org
    from hu_employee e
    left join huv_organization o
      on e.org_id = o.id
   where e.id = v_empid;

  Open p_Cur For

    SELECT round(V_RE,0) RE,
           round(V_RE1,0) RE1,
           round(V_RE2,0) RE2,
           V_RE_DAY RE_DAY,
           V_RE1_DAY RE1_DAY,
           V_RE2_DAY RE2_DAY,
           RTRIM(V_LST_ORG, '-') LST_ORG,
           case
             when V_RE <> 0 then
              round((V_RE1 / V_RE) * 100, 0)
             else
              0
           end RE1_P,
           case
             when V_RE <> 0 then

              100 - round((V_RE1 / V_RE) * 100, 0)
             else
              0
           end RE2_P,
           case
             when V_RE_DAY <> 0 then

              round((V_RE1_DAY / V_RE_DAY) * 100, 0)
             else
              0
           end RE1_DAY_P,
           case
             when V_RE_DAY <> 0 then

              100 - round((V_RE1_DAY / V_RE_DAY) * 100, 0)
             else
              0
           end RE2_DAY_P
      FROM DUAL;

  p_Message        := 'ISSUCCESS';
  p_Responsestatus := 1;
Exception
  When Others Then
    p_Message        := 'DATABASEERROR';
    p_Responsestatus := -99;
    Sys_write_exception_log(Sqlcode,
                            'API_At_InOutByEmployeeMngAll',
                            Sqlerrm || '_' ||
                            Dbms_utility.format_error_backtrace,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null,
                            Null);
End;


  Procedure Sub_Insert_Portal_Reg(
   p_Employee_Id In Number,
   p_Working_Day In Date,
   p_SignCode      In Nvarchar2,
   p_Nvalue        In Number,
   p_LeaveType     In Nvarchar2,
   p_FromHour   In Nvarchar2,
   p_ToHour     In Nvarchar2,
   p_Note          In Nvarchar2,
   p_IdGroup In Number,
   p_ReportNo In Nvarchar2,
   p_Message        Out Nvarchar2,
   p_Responsestatus Out Number
 )As
  v_Id      number;
  v_IdGroup number := p_IdGroup;
  v_Sign_Id number;
  v_CheckHoliday number;
  v_GSignCode nvarchar2(250);
  v_Values number;
  v_Type_Leave nvarchar2(15);
  v_Values_App number;
  v_Values_Portal number;
  v_Type_Leave_App nvarchar2(250);
  v_Type_Leave_Portal nvarchar2(250);
  v_Check_Off number:=0;
  v_SumOff number:=0;
  v_CheckRgt number:=0;
  v_Used_Portal number:=0;
  v_Rgt_App number:=0;
  v_Check_Working number:=0;
  v_Check_Status number:=0;
  v_Check_Ot number:=0;
  v_Check_Nvalue    number := 0;
  v_Check_Ca    number := 0;
 Begin
     -- Lay id ky hieu cong
    Select s.Id, g.Code
      Into v_Sign_Id,v_GSignCode
      from At_Sign s
       Inner Join At_Gsign g
          On s.At_Gsignid = g.Id
     Where s.Code = p_SignCode
       and rownum = 1;
      IF p_SignCode = 'TS'  THEN
          BEGIN
          SELECT NVL(R.NVALUE,0) INTO V_CHECK_NVALUE
          FROM AT_RGT R WHERE R.EMPLOYEE_ID=P_EMPLOYEE_ID
           AND R.WORKING_DAY=P_WORKING_DAY
          AND R.SIGN_CODE='OFF';
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            V_CHECK_NVALUE := 0;

          SELECT COUNT(*) INTO V_CHECK_CA
          FROM AT_RGT R
          INNER JOIN AT_SIGN S
            ON S.ID = R.SIGN_ID
           AND S.AT_GSIGNID <> 8
           WHERE R.EMPLOYEE_ID=P_EMPLOYEE_ID
           AND R.WORKING_DAY=P_WORKING_DAY ;
        END;

        IF V_CHECK_NVALUE = 0 AND V_CHECK_CA = 0 THEN
          IF TO_CHAR(P_WORKING_DAY, 'd') = 7 THEN
            V_VALUES     := 0.5;
            V_TYPE_LEAVE := 'TYPE_LEAVE1';
          ELSIF TO_CHAR(P_WORKING_DAY, 'd') = 1 THEN    
              --p_Message :=TO_CHAR(UNISTR('Ng\00E0y \0111\0103ng k\00FD l\00E0 ch\1EE7 nh\1EADt'));
              --p_Responsestatus := -999;
            RETURN;
          ELSE
            V_VALUES     := P_NVALUE;
            V_TYPE_LEAVE := p_LeaveType;
          END IF;
        ELSE
          IF V_CHECK_NVALUE = 0.5 THEN
           V_VALUES     := 0.5;
            V_TYPE_LEAVE := 'TYPE_LEAVE1';
          ELSIF V_CHECK_NVALUE = 1 THEN    
            p_Message :=
            TO_CHAR(UNISTR('Ng\00E0y \0111\0103ng k\00FD hi\1EC7n t\1EA1i tr\00F9ng v\1EDBi \0111\0103ng k\00FD ca OFF'));
            p_Responsestatus := -999;
            RETURN;
          ELSE
            V_VALUES     := P_NVALUE;
            V_TYPE_LEAVE := p_LeaveType;
          END IF;
        END IF;
           -- Xoa du lieu trong trong qua trinh gui duyet ky hieu nghi truoc do
           DELETE FROM PO_PLAN_REG_PROCESS_AT A
           WHERE A.EMPLOYEE_ID= P_EMPLOYEE_ID
           AND A.PO_PLAN_REG_ID IN
           (SELECT AP.ID FROM AT_PORTAL_REG AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY
            AND S.AT_GSIGNID=8);

           -- Xoa du lieu nghi truoc do tren portal
           DELETE FROM AT_PORTAL_REG AP
           WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY AND AP.STATUS <>4
           AND EXISTS (SELECT S.ID FROM AT_SIGN S
           WHERE S.AT_GSIGNID=8 AND ROWNUM=1);

           -- Xoa du lieu nghi truoc do
           DELETE FROM AT_RGT AP
           WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY
           AND EXISTS (SELECT S.ID FROM AT_SIGN S
           WHERE S.AT_GSIGNID=8
           AND S.ID = AP.Sign_Id
           AND S.CODE <> 'OFF' AND ROWNUM=1);
       -- Cac truong hop dang ky nghi
       ELSIF V_GSIGNCODE = 'LEAVE'  THEN
           -- Kiem tra du lieu nghi dang ky ho duoi app
            SELECT TO_NUMBER(NVL(SUM(NVL(AP.NVALUE,0)),0)) INTO V_RGT_APP
            FROM AT_RGT AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY
            AND S.AT_GSIGNID=8;-- and s.code <> 'OFF';
           -- Neu da dang ky ho duoi app 1 ngay thi bo return
            IF V_RGT_APP >=1 THEN
              p_Message := TO_CHAR(UNISTR('Ng\00E0y \0111\0103ng k\00FD \0111\00E3 t\1ED3n t\1EA1i'));
              p_Responsestatus := 1;
              Return;
            END IF;

            -- lay type leave xac nhan nghi sang hoac chieu tren app
           BEGIN
            SELECT AP.Type_Leave INTO V_TYPE_LEAVE_APP
            FROM AT_RGT AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY
            AND S.AT_GSIGNID=8;
            EXCEPTION WHEN NO_DATA_FOUND THEN
              V_TYPE_LEAVE_APP:='';
            END;

          -- Lay ky hieu nghi truoc do dang dang ky
          Begin
            SELECT TO_NUMBER(NVL(SUM(NVL(AP.NVALUE,0)),0)) INTO V_USED_PORTAL
            FROM AT_PORTAL_REG AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY AND AP.STATUS <>4
            AND S.AT_GSIGNID=8;
            EXCEPTION WHEN NO_DATA_FOUND THEN
              V_USED_PORTAL:=-1;
           End;

            -- lay type leave xac nhan nghi sang hoac chieu tren portal
           BEGIN
            SELECT AP.Type_Leave INTO V_TYPE_LEAVE_PORTAL
            FROM AT_PORTAL_REG AP
            INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
            WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND Trunc(AP.WORKING_DAY)=Trunc(P_WORKING_DAY )
            AND AP.STATUS <>4
            AND S.AT_GSIGNID=8
            And RowNum=1;
            EXCEPTION WHEN NO_DATA_FOUND THEN
              V_TYPE_LEAVE_PORTAL:='';
            END;

          -- Cac dieu kien de insert du lieu
          IF TO_NUMBER(V_RGT_APP) = 0.5 AND V_USED_PORTAL = 0  THEN
             V_VALUES:=0.5;
             IF V_TYPE_LEAVE_APP = 'TYPE_LEAVE1' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE2';
             ELSIF V_TYPE_LEAVE_APP = 'TYPE_LEAVE2' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE1';
               ELSE
             V_TYPE_LEAVE:=p_LeaveType;
             END IF;
          ELSIF TO_NUMBER(V_RGT_APP) = 0.5 AND V_USED_PORTAL = 0.5  THEN
            -- Truong hop nhan vien da dang ky nghi 05 va da duoc phe duyet thi van tiep tuc cho dang ky
            BEGIN
              SELECT NVL(AP.STATUS,0) INTO V_CHECK_STATUS
              FROM AT_PORTAL_REG AP
              INNER JOIN AT_SIGN S ON S.ID=AP.SIGN_ID
              WHERE AP.EMPLOYEE_ID=P_EMPLOYEE_ID AND AP.WORKING_DAY=P_WORKING_DAY AND AP.STATUS <>4
              AND S.AT_GSIGNID=8;         --leave
            IF V_CHECK_STATUS = 1 THEN
             V_VALUES:=0.5;
             IF V_TYPE_LEAVE_PORTAL = 'TYPE_LEAVE1' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE2';
             ELSIF V_TYPE_LEAVE_PORTAL = 'TYPE_LEAVE2' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE1';
             ELSE
             V_TYPE_LEAVE:=p_LeaveType;
             END IF;
             /*PV_TYPE_LEAVE:=P_TYPE_LEAVE;*/
            ELSE
              p_Message :=TO_CHAR(UNISTR('Ng\00E0y \0111\0103ng k\00FD \0111\00E3 t\1ED3n t\1EA1i'));
              p_Responsestatus := -999;
              Return;
            END IF;
            EXCEPTION WHEN NO_DATA_FOUND THEN
              V_CHECK_STATUS:=0;
               p_Message := 'INAPP';
              p_Responsestatus := -999;
              Return;
            END;

          ELSIF TO_NUMBER(V_RGT_APP) = 1 THEN
              p_Message :=TO_CHAR(UNISTR('Ng\00E0y \0111\0103ng k\00FD \0111\00E3 t\1ED3n t\1EA1i'));
              p_Responsestatus := -999;
              Return;
          ELSIF TO_NUMBER(V_RGT_APP) = 0 AND V_USED_PORTAL = 0.5 THEN
             V_VALUES:=0.5;
             IF V_TYPE_LEAVE_PORTAL = 'TYPE_LEAVE1' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE2';
             ELSIF V_TYPE_LEAVE_PORTAL = 'TYPE_LEAVE2' THEN
               V_TYPE_LEAVE := 'TYPE_LEAVE1';
             ELSE
               V_TYPE_LEAVE:=p_LeaveType;
             END IF;
          ELSIF TO_NUMBER(V_RGT_APP) = 0 AND V_USED_PORTAL = 1 THEN
             p_Message :=TO_CHAR(UNISTR('Ng\00E0y \0111\0103ng k\00FD \0111\00E3 t\1ED3n t\1EA1i'));
              p_Responsestatus := -999;
              Return;
          ELSIF TO_NUMBER(V_RGT_APP) = 0.5 AND V_USED_PORTAL = 1 THEN
             p_Message :=TO_CHAR(UNISTR('Ng\00E0y \0111\0103ng k\00FD \0111\00E3 t\1ED3n t\1EA1i'));
              p_Responsestatus := -999;
              Return;
          ELSE
             V_VALUES:=P_NVALUE;
             V_TYPE_LEAVE:=p_LeaveType;
          END IF;
     ELSE
         V_VALUES:=P_NVALUE;
         V_TYPE_LEAVE:=p_LeaveType;
     END IF;
    SELECT SEQ_AT_PORTAL_REG.NEXTVAL INTO V_ID FROM DUAL;
    INSERT INTO AT_PORTAL_REG
      (ID,
       ID_REGGROUP,
       EMPLOYEE_ID,
       WORKING_DAY,
       SIGN_ID,
       NVALUE,
       TYPE_LEAVE,
       NOTE,
       REGDATE,
       STATUS,
       FROM_HOUR,
       TO_HOUR,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       REPORT_NO)
    VALUES
      (V_ID,
       V_IDGROUP,
       P_EMPLOYEE_ID,
       P_WORKING_DAY,
       V_SIGN_ID,
       V_VALUES,
       V_TYPE_LEAVE,
       P_NOTE,
       SYSDATE,
       0,
       TO_DATE(P_WORKING_DAY || ' ' || p_FromHour, 'dd/MM/RRRR HH24:MI'),
       TO_DATE(P_WORKING_DAY || ' ' || p_ToHour, 'dd/MM/RRRR HH24:MI'),
       SYSDATE,
       to_char(p_Employee_Id),
       to_char(p_Employee_Id),
       p_ReportNo);

       p_Message := 'ISSUCCESS';
       p_Responsestatus := 1;

   Exception
    When Others Then
      p_Message := 'DATABASEERROR';
      p_Responsestatus := -99;
      Sys_write_exception_log(Sqlcode,
                              'Sub_Insert_Portal_Reg',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
 End;
 PROCEDURE API_Get_Salary(p_Language       In nvarchar2,
                            p_UserID         In Number,
                            p_Period         In Number,
                            P_CUR            Out CURSOR_TYPE,
                            p_Message        Out NVARCHAR2,
                            p_ResponseStatus Out Number) as
    v_UserID     NUMBER(19, 0) := NVL(p_UserID, -1);
    v_Period     NUMBER(19, 0) := NVL(p_Period, -1);
    v_EmployeeID NUMBER(19, 0);
    v_DayWork    NUMBER(19, 0) := 0;
    v_DayNotWork NUMBER(10, 0) := 0;
    v_StartDate  date;
    v_temp       NUMBER(19, 0) := 0;
    v_username nvarchar2(50);
    PV_SQL CLOB;
    P_LIST_ALLOWANCE CLOB;
    PV_SI_EMP NUMBER;
    PV_HI_EMP NUMBER;
    PV_HI_SI_EMP NUMBER;
  begin
    p_ResponseStatus := 1;

    IF v_UserID = -1 THEN
      p_Message        := 'UserIDIsNUll';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_Period = -1 THEN
      p_Message        := 'PeriodIsNUll';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE su.ID = v_UserID;
    IF v_temp < 1 THEN
      p_Message        := 'UserIsNotFound';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    BEGIN
      SELECT Emp.id,e.USERNAME
        INTO v_EmployeeID,v_username
        FROM se_user e
        left join hu_employee emp
          on emp.employee_code = e.employee_code
       WHERE e.id = v_UserID
      AND rownum = 1
       ;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'UserNotConfig';
        p_ResponseStatus := -600;
        RETURN;
    END;

    BEGIN
      SELECT p.start_date
        INTO v_StartDate
        FROM AT_PERIOD p
       WHERE Id = p_Period;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'PeriodIDNotConfig';
        p_ResponseStatus := -600;
        RETURN;
    END;

    SELECT (Z.SI_EMP / 100)/(NVL(Z.SI_EMP / 100,0) + NVL(Z.HI_EMP / 100,0)),
           (Z.HI_EMP / 100)/(NVL(Z.SI_EMP / 100,0) + NVL(Z.HI_EMP / 100,0))
      INTO PV_SI_EMP,PV_HI_EMP
        FROM (SELECT E.EFFECTIVE_FROM_DATE EFFECTIVE_FROM_DATE,
                     e."1"                 SI_EMP,
                     e."2"                 HI_EMP
                FROM INS_LIST_AREA_ALL T
                LEFT JOIN (SELECT *
                            FROM (SELECT INS_ID,
                                         EFFECTIVE_FROM_DATE,
                                         EMPLOYEE_PERCENT
                                    FROM INS_LIST_AREA_VALUE
                                   WHERE INS_ID IN (1, 2, 3))
                          PIVOT(SUM(NVL(EMPLOYEE_PERCENT, 0))
                             FOR INS_ID IN(1, 2, 3))) E
                  ON T.EFFECTIVE_FROM_DATE = E.EFFECTIVE_FROM_DATE
               WHERE  T.IS_DELETED = 0
               ORDER BY T.EFFECTIVE_FROM_DATE DESC) Z
       INNER JOIN AT_PERIOD P
          ON TO_CHAR(Z.EFFECTIVE_FROM_DATE, 'yyyy') <= P.YEAR
         AND TO_CHAR(Z.EFFECTIVE_FROM_DATE, 'MM') <= P.MONTH
         AND P.ID = p_Period
       WHERE ROWNUM = 1;

    SELECT  LISTAGG('PAY.'||TO_CHAR(B.COL_NAME), ',') WITHIN GROUP(ORDER BY ROWNUM)
           INTO P_LIST_ALLOWANCE
        FROM (SELECT A.COL_NAME, A.NAME_VN, 0 MONEY, 0 TNTT, NULL NOTE
                FROM PA_LISTSALARIES A
               WHERE A.GROUP_IMPORT_SALARY = 'GROUP_IMPORT_SALARY_2'
                 AND A.IS_DELETED = 0
              UNION ALL
              SELECT A.COL_NAME, A.NAME_VN, 0 MONEY, 0 TNTT, NULL NOTE
                FROM PA_LISTSALARIES A
               WHERE A.GROUP_IMPORT_SALARY = 'GROUP_IMPORT_SALARY_4'
                 AND A.IS_DELETED = 0
              UNION ALL
              SELECT A.COL_NAME, A.NAME_VN, 0 MONEY, 0 TNTT, NULL NOTE
                FROM PA_LISTSALARIES A
               WHERE A.GROUP_IMPORT_SALARY = 'GROUP_IMPORT_SALARY_3'
                 AND A.IS_DELETED = 0
              UNION ALL
              SELECT A.COL_NAME, A.NAME_VN, 0 MONEY, 0 TNTT, NULL NOTE
                FROM PA_LISTSALARIES A
               WHERE A.GROUP_IMPORT_SALARY = 'GROUP_IMPORT_SALARY_7'
                 AND A.IS_DELETED = 0) B;


    PV_SQL := ' SELECT
     --ROWNUM as STT,
      (
      NVL(A.S63,0)+  NVL(A.S64,0)+NVL(A.S65 ,0)+NVL(A.S68,0) +  NVL(A.S69,0)
      +NVL(A.S70,0)  +NVL(A.S81,0)+NVL(A.S82,0)+NVL(A.S80,0)+NVL(A.S72,0)
      +NVL(A.S73,0)+NVL(A.S78,0)+NVL(A.S93,0)
      )  AS DECUCTIONS,
      (
      NVL(A.S212,0)  +NVL(A.S203,0) +NVL(A.S204,0) +NVL(A.S205,0)
      +NVL(A.S206,0) +NVL(A.S207,0)+NVL(A.S208,0)+NVL(A.S209,0)+
      NVL(A.S210,0) +NVL(a.s55,0)  +((NVL(A.S34,0) +  NVL(A.S49,0))/2)+
      NVL(a.s53,0) +NVL(a.s54,0)+NVL(a.s52,0) +NVL(A.S200,0)
      ) AS  TOTALINCOME,
       (
      NVL(A.S212,0)  +NVL(A.S203,0) +NVL(A.S204,0) +NVL(A.S205,0)
      +NVL(A.S206,0) +NVL(A.S207,0)+NVL(A.S208,0)+NVL(A.S209,0)+
      NVL(A.S210,0) +NVL(a.s55,0)  +((NVL(A.S34,0) +  NVL(A.S49,0))/2)+
      NVL(a.s53,0) +NVL(a.s54,0)+NVL(a.s52,0) +NVL(A.S200,0)
      ) -
       (
      NVL(A.S63,0)+  NVL(A.S64,0)+NVL(A.S65 ,0)+NVL(A.S68,0) +  NVL(A.S69,0)
      +NVL(A.S70,0)  +NVL(A.S81,0)+NVL(A.S82,0)+NVL(A.S80,0)+NVL(A.S72,0)
      +NVL(A.S73,0)+NVL(A.S78,0)+NVL(A.S93,0)
      )  AS SAL_ACTUAL,
      NVL(A.s16,0) period_standard,
      NVL(A.s19,0) period_salary,
      NVL(a.s17,0) period_actual,
      NVL(a.s18,0) phep_thuong_nien,
      NVL(a.s55,0) pc_an_trua,
      NVL(a.s53,0) truy_linh_luong,
      NVL(a.s54,0) truy_linh_doc_hai,
      NVL(a.s52,0) truy_linh_com,
      NVL(a.s60,0) salary_bhxh_bhyt,
      NVL(a.s61,0) salary_bhtn,
      NVL(a.s70 ,  0) S70,
      NVL(a.s71,0) S71,
      NVL(a.s81, 0) S81,
      NVL(a.s82,0) S82,
      NVL(a.s80, 0) S80,
      NVL(a.s72, 0) S72,
      NVL(a.s73, 0) S73,
      NVL(a.s78, 0) As S78,
      NVL(a.s74, 0) As S74,
      Nvl(a.s75,0) S75,
      Nvl(a.s76, 0) S76,
      Nvl(a.s77,0) S77,
      NVL(A.S3,  0) S3,
      NVL(a.s93,   0) S93,
     NVL(A.S203,0) PCTH,
     NVL(A.S204,0) PCTNDT,
     NVL(A.S212,0) LUONG,
     NVL(A.S205,0)DHNQ,
     NVL(A.S206,0) PCTNCV,
     NVL(A.S207,0) PCKNCV,
     NVL(A.S208,0) PCKNVPKV,
     NVL(A.S209,0) LD,
     NVL(A.S210,0) LVC2,
     (NVL(A.S34,0) +  NVL(A.S49,0))/2 KHAC,
     (NVL(A.S63,0)+  NVL(A.S64,0)) BH_19,
      NVL(A.S65 ,0) BH_20,
      NVL(A.S66,  0) S66,
      NVL(A.S67,0) S67,
      (NVL(A.S68,0) +  NVL(A.S69,0)) BH_21,
       NVL(A.S200,0) PCHHL,
       TO_CHAR( AP.START_DATE,''DD/MM/YYYY'') START_DATE,
       TO_CHAR( AP.END_DATE,''DD/MM/YYYY'') END_DATE
         FROM (
         SELECT    CASE
                 WHEN O.ORG_TYPE = ''HOI_SO'' THEN
                  O.NAME_VN
                 ELSE
                  OV.NAME_C5 || '' - '' || OV.NAME_C4
             END S2,
             EM.EMPLOYEE_CODE S3,
             NVL((SELECT SUM(A.NCTL)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD || '
               AND A.SALARY_ID = SAT.SALARY_ID1),0) S4,
             ''PC '' || SAL1.NAME ||
             CASE WHEN SAR1.RANK IS NOT NULL THEN
              ''-'' || SAR1.RANK
              ELSE
                '''' END S5,
             --SAL1.NAME /*|| ''-'' || SAR1.RANK*/ S5,
             SAT.COEFICIENT_AREA1 S6,
             SAT.COEFICIENT_NSLDBQ1 S7,
             SA1.PERCENT || ''%'' S8,
             SAT.STANDARD_SALARY1 S9,
             NVL((SELECT SUM(A.NCTL)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD || '
               AND A.SALARY_ID = SAT.SALARY_ID2),0) S10,
             CASE WHEN SAL2.NAME IS NOT NULL THEN
             ''PC '' || SAL2.NAME ||
             CASE WHEN SAR2.RANK IS NOT NULL THEN
              ''-'' || SAR2.RANK
              ELSE
                '''' END
             ELSE
              N'''' END S11,
             --SAL2.NAME/* || ''-'' || SAR2.RANK*/ S11,
             SAT.COEFICIENT_AREA2 S12,
             SAT.COEFICIENT_NSLDBQ2 S13,
             SA2.PERCENT || ''%'' S14,
             SAT.STANDARD_SALARY2 S15,
             NVL(PAY.CW1,0) S16,
             NVL(PAY.CW2,0) S17,
             NVL((SELECT SUM(A.P)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD ||
              '),0) S18,
             NVL((SELECT SUM(A.NCTL)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD ||
              '),0) S19,
             NVL(PAY.CW3,0) - NVL((SELECT SUM(A.P)
               FROM AT_ALDATA_SUMMARY A
             WHERE A.EMPLOYEE_ID = PAY.EMPLOYEE_ID
               AND A.PERIOD = ' || P_PERIOD ||
              '),0) S20,
             NVL(PAY.CW4,0) S21,
             ROUND(NVL(S.PCTHN1,0) ,0)S22,
             ROUND(NVL(S.PCXL1,0),0) S23,
             ROUND(NVL(S.PCTH1,0),0) S24,
             ROUND(NVL(S.PCTNDT1,0),0) S25,
             ROUND(
                     (S.PCDHQ2 * S.PERCENT2/100)+
                     S.PCTN2+
                     S.PCKN2+
                     S.PCKNVP2+
                     S.PCLD2+
                     S.PCCA22+
                     S.PCK2,0) S26,
             ROUND(NVL(S.PCDHQ1,0),0) S28,
             ROUND(NVL(S.PCTN1,0),0)  S29,
             ROUND(NVL(S.PCKN1,0),0) S30,
             ROUND(NVL(S.PCKNVP1,0),0)  S31,
             ROUND(NVL(S.PCLD1,0),0)  S32,
             ROUND(NVL(S.PCCA21,0),0)  S33,
             ROUND(NVL(S.PCK1,0),0)  S34,
             ROUND(NVL(((NVL(S.STANDARD_SALARY1, 1)) *
             S.COEFICIENT_AREA1 *
             S.COEFICIENT_NSLDBQ1 *
             ((S.PERCENT1)/100)),0),0) S36,
             S.PCTHN2 S37,
             ROUND(S.STANDARD_SALARY2, 0) *
             S.COEFICIENT_AREA2 *
             S.COEFICIENT_NSLDBQ2 *
             (S.PERCENT2)/100 S38,
             ROUND(NVL(S.PCXL2,0),0) S39,
             ROUND(NVL(S.PCTH2,0),0) S40,
             ROUND(NVL(S.PCTNDT2,0),0) S41,
             ROUND(NVL(S.PCDHQ2,0),0)  S43,
             ROUND(NVL(S.PCTN2,0),0)  S44,
             ROUND(NVL(S.PCKN2,0),0)  S45,
             ROUND(NVL(S.PCKNVP2,0),0)  S46,
             ROUND(NVL(S.PCLD2,0),0)  S47,
             ROUND(NVL(S.PCCA22,0),0)  S48,
             ROUND(S.PCK2,0) S49,
             ROUND(NVL(PAY.ADD4,0),0) S52,
             ROUND(PAY.ADD1, 0) +
             ROUND(PAY.ADD20, 0) S53,
             ROUND(NVL(PAY.ADD18,0),0) S54,
             ROUND(NVL(PAY.CLCHINH9,0),0) S55,
             ROUND(NVL(PAY.ADD19,0),0) S56,
             ROUND(NVL(PAY.ADD56,0),0) S57,
             ROUND(NVL(PAY.INSU20,0),0) S60,
             ROUND(PAY.INSU21, 0) S61,
             ROUND(NVL(PAY.INSU1,0),0) S63,
             ROUND(NVL(PAY.INSU2,0),0) S64,
             ROUND(NVL(PAY.INSU3,0),0) S65,
             ROUND(NVL(PAY.DEDUCT2,0), 0) S66,
             ROUND(NVL(PAY.ADD9,0) ,0) S67,
             ROUND(ROUND(PAY.ADD2,0)* '|| PV_SI_EMP ||',0) S68,
             ROUND(ROUND(PAY.ADD2,0)* '|| PV_HI_EMP ||',0) S69,
             ROUND(PAY.ADD3 , 0) S70,
             ROUND(NVL(PAY.ADD106,0),0) S71,
             ROUND(NVL(PAY.INSU9,0) + NVL(PAY.DEDUCT6,0),0) S72,
             ROUND(NVL(PAY.DEDUCT4,0),0) S73,
             ROUND(NVL(PAY.TAX4,0),0) S74,
             ROUND(NVL(PAY.FAMILY1,0),0) S75,
             ROUND(NVL(PAY.FAMILY4,0),0) S76,
             ROUND(NVL(PAY.TAX1,0),0) S77,
             ROUND(NVL(PAY.TAX2,0),0) S78,
             ROUND(NVL(PAY.DEDUCT5,0),0) S80,
             ROUND(PAY.DEDUCT1, 0) +
             ROUND(PAY.DEDUCT8, 0) +
             ROUND(PAY.DEDUCT9, 0) S81,
             ROUND(NVL(PAY.DEDUCT7,0),0) S82,
             ROUND(NVL(PAY.CLCHINH18,0),0) S83,
             ROUND(NVL(PAY.DEDUCT3,0),0) S84,
             ROUND(NVL(PAY.DEDUCT10,0),0) S85,
             ROUND(NVL(PAY.DEDUCT11,0),0) S86,
             ROUND(((ROUND(((S.STANDARD_SALARY1 *
                      S.COEFICIENT_AREA1 *
                      S.COEFICIENT_NSLDBQ1) +
                     ( S.PCXL1
                      +S.PCTH1
                      +S.PCTHN1
                      +S.PCTNDT1 ))* S.PERCENT1 / 100,0) /
              NVL(PAY.CW1,0) *
              (SELECT SUM(A.NCTL) FROM AT_ALDATA_SUMMARY A
                     WHERE A.EMPLOYEE_ID=PAY.EMPLOYEE_ID AND A.PERIOD=PAY.PERIOD_ID
                     AND A.SALARY_ID=S.SALARY_ID1)) +
             (ROUND(
                     (S.PCDHQ1 * S.PERCENT1/100)+
                     S.PCTN1+
                     S.PCKN1+
                     S.PCKNVP1+
                     S.PCLD1+
                     S.PCCA21+
                     S.PCK1,0) /
              NVL(PAY.CW1,0) *
              (SELECT SUM(A.NCTL) FROM AT_ALDATA_SUMMARY A
                     WHERE A.EMPLOYEE_ID=PAY.EMPLOYEE_ID AND A.PERIOD=PAY.PERIOD_ID
                     AND A.SALARY_ID=S.SALARY_ID1))),0) S87,
             ROUND(NVL(
                   S.PCDHQ1+
                   S.PCTN1+
                   S.PCKN1+
                   S.PCKNVP1+
                   S.PCLD1+
                   S.PCCA21+
                   S.PCK1,0),0)  S88,
             ROUND(S.PCXL1
                  +S.PCTH1
                  +S.PCTHN1
                  +S.PCTNDT1,0) S89,
             ROUND(NVL(
                      S.PCXL2
                      +S.PCTH2
                      +S.PCTHN2
                      +S.PCTNDT2,0),0) S90,
             NULL S91,
             0 S92,
             ROUND(PAY.ADD57,0) S93,
             EM.FULLNAME_VN S96,
             TI.NAME_VN S97,
             ' || P_LIST_ALLOWANCE || '
             ,EM.EMPLOYEE_CODE EMPLOYEE_CODE,
             PAY.ORG_ID ORG_ID,
             ROUND(((ROUND(((S.STANDARD_SALARY2 *
                       S.COEFICIENT_AREA2 *
                       S.COEFICIENT_NSLDBQ2) +
                        (S.PCXL2
                      +S.PCTH2
                      +S.PCTHN2
                      +S.PCTNDT2)) * S.PERCENT2 / 100,0) /
              NVL(PAY.CW1,0) *
              (SELECT SUM(A.NCTL) FROM AT_ALDATA_SUMMARY A
                     WHERE A.EMPLOYEE_ID=PAY.EMPLOYEE_ID AND A.PERIOD=PAY.PERIOD_ID
                     AND A.SALARY_ID=S.SALARY_ID2)) +
             (ROUND(
                     (S.PCDHQ2 * S.PERCENT2/100)+
                     S.PCTN2+
                     S.PCKN2+
                     S.PCKNVP2+
                     S.PCLD2+
                     S.PCCA22+
                     S.PCK2,0) /
              NVL(PAY.CW1,0) *
              (SELECT SUM(A.NCTL) FROM AT_ALDATA_SUMMARY A
                     WHERE A.EMPLOYEE_ID=PAY.EMPLOYEE_ID AND A.PERIOD=PAY.PERIOD_ID
                     AND A.SALARY_ID=S.SALARY_ID2))),0) S92,

             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''ADD19'') S98,
             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''ADD56'')  S99,
             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''DEDUCT3'') S100,
             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''DEDUCT10'') S101,
             PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW(PAY.EMPLOYEE_ID,PAY.PERIOD_ID,''DEDUCT11'') S102,
             PAY.CLCHINH16,
             PAY.PERIOD_ID,
             ROUND(NVL( PAY.ADD64,0),0) S200,
             ROUND(NVL(PAY.CLCHINH55,0),0) S212,
             FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCTH'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S203,
             FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCTNDT'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S204,
            FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCDHQ'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S205,
            FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCTN'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S206,
            FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCKN'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S207,
            FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCKNVP'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S208 ,
           FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCLD'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S209,
           FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         ''PCCA2'',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE)  S210 ,
           ROUND(NVL(PAY.ADD21,0),0)  S211,
           ROUND(NVL(PAY.DEDUCT3,0) + NVL(PAY.DEDUCT10,0) + NVL(PAY.DEDUCT11,0) ,0) S213,
         (CASE
         WHEN NVL(PAY.DEDUCT3, 0) > 0 THEN
          PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT3'') || CASE
            WHEN NVL(PAY.DEDUCT10, 0) > 0 THEN
             '', '' ||
             PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT10'')
          END || CASE
            WHEN NVL(PAY.DEDUCT11, 0) > 0 THEN
             '', '' || PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT11'')
          END
         WHEN NVL(PAY.DEDUCT10, 0) > 0 THEN
          PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT10'')
          || CASE
            WHEN NVL(PAY.DEDUCT11, 0) > 0 THEN
             '', '' || PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT11'')
          END
          WHEN NVL(PAY.DEDUCT11, 0) > 0 THEN
            PA_FUNC.FN_GET_IMP_NOTE(PAY.EMPLOYEE_ID, PAY.PERIOD_ID, ''DEDUCT11'')
       END) S214
      FROM PA_PAYROLLSHEET_FINAL PAY
      LEFT JOIN INFO_SALARY_ALLOW_TEMP S
        ON PAY.EMPLOYEE_ID = S.EMPLOYEE_ID
       AND PAY.PERIOD_ID = S.PERIOD
      INNER JOIN HU_EMPLOYEE EM
        ON EM.ID = PAY.EMPLOYEE_ID
      LEFT JOIN HU_ORGANIZATION O
         ON O.ID = PAY.ORG_ID
      LEFT JOIN HU_ORGANIZATION_V OV
         ON OV.ID = O.ID
      LEFT JOIN HU_TITLE TI
         ON TI.ID = EM.TITLE_ID
      LEFT JOIN HU_SALARY_TEMP SAT
        ON SAT.EMPLOYEE_ID = PAY.EMPLOYEE_ID
       AND SAT.PERIOD = ' || P_PERIOD || '

      LEFT JOIN PA_SALARY_LEVEL SAL1
        ON SAL1.ID = SAT.QUANTUM_SALARY1
      LEFT JOIN PA_SALARY_RANK SAR1
        ON SAR1.ID = SAT.UNCLE_SALARY1

      LEFT JOIN PA_SALARY_LEVEL SAL2
        ON SAL2.ID = SAT.QUANTUM_SALARY2
      LEFT JOIN PA_SALARY_RANK SAR2
        ON SAR2.ID = SAT.UNCLE_SALARY2
      LEFT JOIN HU_SALARY SA1
        ON SA1.ID = SAT.SALARY_ID1
      LEFT JOIN HU_SALARY SA2
        ON SA2.ID = SAT.SALARY_ID2
    WHERE PAY.EMPLOYEE_ID = ' || v_EmployeeID || '
      AND PAY.PERIOD_ID = ' || P_PERIOD || ')A
     LEFT JOIN AT_PERIOD AP
            ON AP.ID=PERIOD_ID  ';


   -- INSERT INTO AT_STRSQL VALUES (seq_at_strsql.nextval,PV_SQL);
    --COMMIT;
    --EXECUTE IMMEDIATE PV_SQL;
    OPEN P_CUR FOR --(PV_SQL);
    SELECT
 (NVL(A.S63, 0) + NVL(A.S64, 0) + NVL(A.S65, 0) + NVL(A.S68, 0) +
 NVL(A.S69, 0) + NVL(A.S70, 0) + NVL(A.S81, 0) + NVL(A.S82, 0) +
 NVL(A.S80, 0) + NVL(A.S72, 0) + NVL(A.S73, 0) + NVL(A.S78, 0) )
 --NVL(A.S93, 0)) 
 AS DECUCTIONS,
 (NVL(A.S212, 0) + NVL(A.S203, 0) + NVL(A.S204, 0) + NVL(A.S205, 0) +
 NVL(A.S206, 0) + NVL(A.S207, 0) + NVL(A.S208, 0) + NVL(A.S209, 0) +
 NVL(A.S210, 0) + NVL(a.s55, 0) + ((NVL(A.S34, 0) + NVL(A.S49, 0)) / 2) +
 NVL(a.s53, 0) + NVL(a.s54, 0) + NVL(a.s52, 0) + NVL(A.S200, 0)) AS TOTALINCOME,
 (NVL(A.S212, 0) + NVL(A.S203, 0) + NVL(A.S204, 0) + NVL(A.S205, 0) +
 NVL(A.S206, 0) + NVL(A.S207, 0) + NVL(A.S208, 0) + NVL(A.S209, 0) +
 NVL(A.S210, 0) + NVL(a.s55, 0) + ((NVL(A.S34, 0) + NVL(A.S49, 0)) / 2) +
 NVL(a.s53, 0) + NVL(a.s54, 0) + NVL(a.s52, 0) + NVL(A.S200, 0)) -
 (NVL(A.S63, 0) + NVL(A.S64, 0) + NVL(A.S65, 0) + NVL(A.S68, 0) +
 NVL(A.S69, 0) + NVL(A.S70, 0) + NVL(A.S81, 0) + NVL(A.S82, 0) +
 NVL(A.S80, 0) + NVL(A.S72, 0) + NVL(A.S73, 0) + NVL(A.S78, 0) +
 NVL(A.S93, 0)) AS SAL_ACTUAL,
 NVL(A.s16, 0) period_standard,
 NVL(A.s19, 0) period_salary,
 NVL(a.s17, 0) period_actual,
 NVL(a.s18, 0) phep_thuong_nien,
 NVL(a.s55, 0) pc_an_trua,
 NVL(a.s53, 0) truy_linh_luong,
 NVL(a.s54, 0) truy_linh_doc_hai,
 NVL(a.s52, 0) truy_linh_com,
 NVL(a.s60, 0) salary_bhxh_bhyt,
 NVL(a.s61, 0) salary_bhtn,
 NVL(a.s70, 0) S70,
 NVL(a.SS70, 0) SS70,
 NVL(a.s71, 0) S71,
 NVL(a.s81, 0) S81,
 NVL(a.s82, 0) S82,
 NVL(a.s80, 0) S80,
 NVL(a.s72, 0) S72,
 NVL(a.s73, 0) S73,
 NVL(a.s78, 0) As S78,
 NVL(a.s74, 0) As S74,
 Nvl(a.s75, 0) S75,
 Nvl(a.s76, 0) S76,
 Nvl(a.s77, 0) S77,
 NVL(A.S3, 0) S3,
 nvl(k.tntt1,0) s93,
 --NVL(a.s93, 0) S93,
 NVL(A.S203, 0) PCTH,
 NVL(A.S204, 0) PCTNDT,
 NVL(A.S212, 0) LUONG,
 NVL(A.S205, 0) DHNQ,
 NVL(A.S206, 0) PCTNCV,
 NVL(A.S207, 0) PCKNCV,
 NVL(A.S208, 0) PCKNVPKV,
 NVL(A.S209, 0) LD,
 NVL(A.S210, 0) LVC2,
 (NVL(A.S34, 0) + NVL(A.S49, 0)) / 2 KHAC,
 (NVL(A.S63, 0) + NVL(A.S64, 0)) BH_19,
 NVL(A.S65, 0) BH_20,
 NVL(A.S66, 0) S66,
 NVL(A.S67, 0) S67,
 (NVL(A.S68, 0) + NVL(A.S69, 0)) BH_21,
 NVL(A.S200, 0) PCHHL,
 TO_CHAR(AP.START_DATE, 'DD/MM/YYYY') START_DATE,
 TO_CHAR(AP.END_DATE, 'DD/MM/YYYY') END_DATE
  FROM (SELECT CASE
                 WHEN O.ORG_TYPE = 'HOI_SO' THEN
                  O.NAME_VN
                 ELSE
                  OV.NAME_C5 || ' - ' || OV.NAME_C4
               END S2,
               EM.EMPLOYEE_CODE S3,
               em.id EMPLOYEE_ID,
               Round(NVL(PAY.CW1, 0),0) S16,
               --Round(NVL(PAY.CW2, 0),0) S17,
               NVL(DataSum.Nctl, 0) S17,
               Round(Nvl(DataSum.P,0),0) S18,
               Round(Nvl(DataSum.NCTL,0),0) S19,
               ROUND(NVL(S.PCK1, 0), 0) S34,
               ROUND(nvl(S.PCK2,0), 0) S49,
               ROUND(NVL(PAY.ADD4, 0), 0) S52,
               ROUND(Nvl(PAY.ADD1,0), 0) + ROUND(nvl(PAY.ADD20,0), 0) S53,
               ROUND(NVL(PAY.ADD18, 0), 0) S54,
               ROUND(NVL(PAY.CLCHINH9, 0), 0) S55,
               ROUND(NVL(PAY.ADD19, 0), 0) S56,
               ROUND(NVL(PAY.INSU20, 0), 0) S60,
               ROUND(nvl(PAY.INSU21,0), 0) S61,
               ROUND(NVL(PAY.INSU1, 0), 0) S63,
               ROUND(NVL(PAY.INSU2, 0), 0) S64,
               ROUND(NVL(PAY.INSU3, 0), 0) S65,
               ROUND(NVL(PAY.DEDUCT2, 0), 0) S66,
               ROUND(NVL(PAY.ADD9, 0), 0) S67,
               ROUND(ROUND(Nvl(PAY.ADD2,0), 0) *
                     PV_SI_EMP,
                     0) S68,
               ROUND(ROUND(Nvl(PAY.ADD2,0), 0) *
                     PV_HI_EMP,
                     0) S69,
               ROUND(Nvl(PAY.ADD3,0), 0) S70,
               ROUND(NVL(PAY.ADD106, 0), 0) S71,
               ROUND(NVL(PAY.ADD106, 0), 0) SS70,
               ROUND(NVL(PAY.INSU9, 0) + NVL(PAY.DEDUCT6, 0), 0) S72,
               ROUND(NVL(PAY.DEDUCT4, 0), 0) S73,
               ROUND(NVL(PAY.TAX4, 0), 0) S74,
               ROUND(NVL(PAY.FAMILY1, 0), 0) S75,
               ROUND(NVL(PAY.FAMILY4, 0), 0) S76,
               ROUND(NVL(PAY.TAX1, 0), 0) S77,
               ROUND(NVL(PAY.TAX2, 0), 0) S78,
               ROUND(NVL(PAY.DEDUCT5, 0), 0) S80,
               ROUND(Nvl(PAY.DEDUCT1,0), 0) + ROUND(Nvl(PAY.DEDUCT8,0), 0) +
               ROUND(Nvl(PAY.DEDUCT9,0), 0) S81,
               ROUND(NVL(PAY.DEDUCT7, 0), 0) S82,
               ROUND(NVL(PAY.CLCHINH18, 0), 0) S83,
               ROUND(NVL(PAY.DEDUCT3, 0), 0) S84,
               ROUND(NVL(PAY.DEDUCT10, 0), 0) S85,
               ROUND(NVL(PAY.DEDUCT11, 0), 0) S86,
               ROUND(Nvl(PAY.ADD57,0), 0) S93,
               PAY.PERIOD_ID,
               ROUND(NVL(PAY.ADD64, 0), 0) S200,
               ROUND(NVL(PAY.CLCHINH55, 0), 0) S212,
               FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         'PCTH',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE) S203,
               FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         'PCTNDT',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE) S204,
               FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         'PCDHQ',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE) S205,
               FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         'PCTN',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE) S206,
               FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         'PCKN',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE) S207,
               FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         'PCKNVP',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE) S208,
               FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         'PCLD',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE) S209,
               FN_GET_PC(PAY.EMPLOYEE_ID,
                         PAY.PERIOD_ID,
                         'PCCA2',
                         PAY.ORG_ID,
                         PAY.START_DATE,
                         PAY.END_DATE) S210
          FROM PA_PAYROLLSHEET_FINAL PAY
          Left Join(
          Select T.Employee_Id ,T.Period , SUM(T.NCTL) NCTL, SUM(Nvl(T.P,0))  P
           From  AT_ALDATA_SUMMARY  T
           Where T.Period=P_PERIOD And T.Employee_Id=v_EmployeeID
           Group By T.Employee_Id ,T.Period
           )DataSum  On DataSum.Employee_Id=Pay.Employee_Id
          And DataSum.Period=Pay.PERIOD_ID
          LEFT JOIN INFO_SALARY_ALLOW_TEMP S
            ON PAY.EMPLOYEE_ID = S.EMPLOYEE_ID
           AND PAY.PERIOD_ID = S.PERIOD
         INNER JOIN HU_EMPLOYEE EM
            ON EM.ID = PAY.EMPLOYEE_ID
          LEFT JOIN HU_ORGANIZATION O
            ON O.ID = PAY.ORG_ID
          LEFT JOIN HU_ORGANIZATION_V OV
						ON OV.ID = O.ID
					LEFT JOIN HU_TITLE TI
						ON TI.ID = EM.TITLE_ID
					LEFT JOIN HU_SALARY_TEMP SAT
						ON SAT.EMPLOYEE_ID = PAY.EMPLOYEE_ID
					 AND SAT.PERIOD = P_PERIOD
					LEFT JOIN PA_SALARY_LEVEL SAL1
						ON SAL1.ID = SAT.QUANTUM_SALARY1
					LEFT JOIN PA_SALARY_RANK SAR1
						ON SAR1.ID = SAT.UNCLE_SALARY1
					LEFT JOIN PA_SALARY_LEVEL SAL2
						ON SAL2.ID = SAT.QUANTUM_SALARY2
					LEFT JOIN PA_SALARY_RANK SAR2
						ON SAR2.ID = SAT.UNCLE_SALARY2
					LEFT JOIN HU_SALARY SA1
						ON SA1.ID = SAT.SALARY_ID1
					LEFT JOIN HU_SALARY SA2
						ON SA2.ID = SAT.SALARY_ID2
				 WHERE PAY.EMPLOYEE_ID = v_EmployeeID
					 AND PAY.PERIOD_ID = P_PERIOD) A
          left join (
           select k.employee_id,sum(k.tntt) tntt1
           from pa_import_salary k
           where k.period_salary_id = P_PERIOD
           group by k.employee_id) k on a.EMPLOYEE_ID = k.EMPLOYEE_ID
	LEFT JOIN AT_PERIOD AP
		ON AP.ID = PERIOD_ID;


    p_Message        := 'IsSuccess';
    p_ResponseStatus := 1;
  EXCEPTION
    WHEN OTHERS THEN
      Sys_write_exception_log(Sqlcode,
                              'API_GET_Salary',
                              Sqlerrm || '_' ||
                              Dbms_utility.format_error_backtrace,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null,
                              Null);
      p_Message        := 'Database Error';
      p_ResponseStatus := -99;
  end;
  FUNCTION  GET_NOTE_SALARY_ALLOW(P_EMPID IN NUMBER,
                                 P_PERIOD  IN NUMBER,
                                 P_CODE    IN NVARCHAR2) RETURN NVARCHAR2 AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    PV_RESULT NVARCHAR2(225);

  BEGIN
    SELECT ' - ' || P.NOTE INTO PV_RESULT
        FROM PA_IMPORT_SALARY P
       WHERE P.PERIOD_SALARY_ID = P_PERIOD
         AND P.FIELD_DATA_CODE = P_CODE
         AND P.EMPLOYEE_ID =P_EMPID;

  RETURN PV_RESULT;

  EXCEPTION
    WHEN OTHERS THEN
      RETURN '';
      SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE.GET_NOTE_SALARY_ALLOW',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL);
      RETURN NULL;
  END;
   PROCEDURE API_GET_APPROVE_LIST(P_USERID         IN NUMBER,
                             P_LANGUAGE       IN NVARCHAR2,
                             P_KEYSEARCH_EMPLOYEE       IN NVARCHAR2,
                             P_FROMDATE       IN NVARCHAR2,
                             P_TODATE         IN NVARCHAR2,
                             P_CODE           IN NVARCHAR2,
                             P_SIGN           IN NUMBER,
                             P_STATUS         IN NVARCHAR2,
                             P_TYPE           IN NVARCHAR2,
                             P_PAGE           IN NUMBER,
                             P_PAGESIZE       IN NUMBER,
                             P_CUR            OUT CURSOR_TYPE,
                             P_PENDINGCOUNT   OUT NUMBER,
                             P_APPROVEDCOUNT  OUT NUMBER,
                             P_REJECTEDCOUNT  OUT NUMBER,
                             P_MESSAGE        OUT NVARCHAR2,
                             P_RESPONSESTATUS OUT NUMBER) AS

    V_USERID     NUMBER(19, 0) := NVL(P_USERID, -1);
    V_EMPID      NUMBER(10);
    V_TEMP       NUMBER(19, 0) := 0;
    V_PAGE       NUMBER(10, 0) := NVL(P_PAGE, 1);
    V_PAGESIZE   NUMBER(2, 0) := NVL(P_PAGESIZE, 10);
    V_STATUS     NUMBER := NVL(P_STATUS, -99);
    V_EMPLOYEEID NUMBER(19, 0);
    V_FROMDATE   DATE;
    V_TODATE     DATE;
  BEGIN
    IF V_USERID = -1 THEN
      P_MESSAGE        := 'ISUSERIDNULL';
      P_RESPONSESTATUS := -600;
      RETURN;
    END IF;

    SELECT ID INTO V_TEMP FROM SE_USER WHERE ID = V_USERID;
    IF V_TEMP < 1 THEN
      P_MESSAGE        := 'USERISNOTFOUND';
      P_RESPONSESTATUS := -600;
      RETURN;
    END IF;
    BEGIN
      SELECT HE.ID
        INTO V_EMPLOYEEID
        FROM HU_EMPLOYEE HE
        JOIN SE_USER SU
          ON SU.EMPLOYEE_CODE = HE.EMPLOYEE_CODE
       WHERE SU.ID = V_USERID
         AND ((HE.WORK_STATUS = 257 AND SYSDATE < HE.TER_EFFECT_DATE) OR
             (HE.WORK_STATUS <> 257))
         AND ROWNUM = 1;
    EXCEPTION
      WHEN OTHERS THEN
        P_MESSAGE        := 'USERNOTCONFIG';
        P_RESPONSESTATUS := -600;
        RETURN;
    END;

    BEGIN
      SELECT HE.ID
        INTO V_EMPID
        FROM SE_USER SU
       INNER JOIN HU_EMPLOYEE HE
          ON HE.EMPLOYEE_CODE = SU.EMPLOYEE_CODE
       WHERE SU.ID = V_USERID;
    EXCEPTION
      WHEN OTHERS THEN
        P_MESSAGE        := 'EMPLOYEENOTFOUND';
        P_RESPONSESTATUS := -600;
        RETURN;
    END;

    IF P_FROMDATE IS NOT NULL THEN
      V_FROMDATE := TO_DATE(P_FROMDATE, 'YYYY-MM-DD');
    END IF;

    IF P_TODATE IS NOT NULL THEN
      V_TODATE := TO_DATE(P_TODATE, 'YYYY-MM-DD');
    END IF;

    SELECT SUM(CASE
                 WHEN R.STATUS = 0 THEN -- WAITING
                  1
                 ELSE
                  0
               END),
           SUM(CASE
                 WHEN R.STATUS = 1 THEN --APPROVE
                  1
                 ELSE
                  0
               END),
           SUM(CASE
                 WHEN R.STATUS = 2 THEN --REJECT 2
                  1
                 ELSE
                  0
               END)
      INTO P_PENDINGCOUNT, P_APPROVEDCOUNT, P_REJECTEDCOUNT
      FROM (SELECT
                                      R.ID_REGGROUP,
                                      Max(E.EMPLOYEE_CODE) EMPLOYEE_CODE,
                                      Max(E.ID)                   EMPLOYEE_ID,
                                      Max(E.FULLNAME_VN  )        EMPLOYEE_NAME,
                                      TO_CHAR(Max(R2.FROM_DATE), 'YYYY-MM-DD')   FROM_DATE,
                                      TO_CHAR(Max(R2.TO_DATE), 'YYYY-MM-DD')   TO_DATE,
                                      TO_CHAR(Max(R2.FROM_DATE), 'DD/MM/YYYY HH24:MI')   FROM_HOUR,
                                      TO_CHAR(Max(R2.TO_DATE), 'DD/MM/YYYY HH24:MI')   TO_HOUR,
                                      TO_CHAR(Max(NVL(R2.NVALUE, 0)) )        as TOTALHOUR,
                                      Max(FR_SS.NAME_VN)          FROM_SESSION,
                                      Max(TO_SS.NAME_VN   )       TO_SESSION,
                                      Max(S.ID)                   SIGN_ID,
                                      Max(S.NAME )                SIGN_NAME,
                                      Max(O.CODE)                 SIGN_CODE,
                                      TO_CHAR(Max(NVL(R2.NVALUE, 0)) )DAYCOUNT,
                                      Max(R.NOTE)                 DISPLAY,
                                      Max(A.APP_STATUS)           STATUS,
                                      Max(R.REPORT_NO) REPORT_NO,
                                      Max(EMP_UN.FULLNAME_VN)     MODIFIED_NAME, -- NGUOI CAP NHAT CUOI CUNG
                                      --R.MODIFIED_DATE, -- NG?Y CAP NHAT CUOI CUNG
                                      TO_CHAR(Max(R.MODIFIED_DATE), 'YYYY-MM-DD')   MODIFIED_DATE,
                                      Max(S4.EMP_APP_NAME)        APPROVE_NEXT, -- NGUOI PHE DUYET KE TIEP
                                      Max(AUTHORIZED.FULLNAME_VN) AUTHORIZED_NAME, -- NGUOI PHE DUYET THAY THE
                                      --A.AUT_MODIFIED_DATE, -- NGAY PHE DUYET THAY THE
                                      TO_CHAR(Max(A.AUT_MODIFIED_DATE), 'YYYY-MM-DD')   AUT_MODIFIED_DATE,
                                      Max(A.APP_NOTES) APP_NOTES, -- Y KIEN PHE DUYET,
                                      To_Char(Max(A.CREATED_DATE),'YYYY-MM-DD')CREATED_DATE,
                                      Max(R.Id ) Id
                        FROM AT_PORTAL_REG R
                       INNER JOIN (SELECT RE.EMPLOYEE_ID,
                                         RE.ID_REGGROUP,
                                         MIN(RE.FROM_HOUR) FROM_DATE,
                                         MAX(RE.To_HOUR) TO_DATE,
                                         SUM(RE.NVALUE) NVALUE,
                                         MIN(RE.SIGN_ID) SIGN_ID,
                                         MIN(RE.NOTE) NOTE
                                    FROM AT_PORTAL_REG RE
                                   GROUP BY RE.EMPLOYEE_ID, RE.ID_REGGROUP) R2
                          ON R2.ID_REGGROUP = R.ID_REGGROUP
                        LEFT JOIN AT_PORTAL_REG L_FROM
                          ON L_FROM.ID_REGGROUP = R2.ID_REGGROUP
                         AND L_FROM.WORKING_DAY = R2.FROM_DATE
                        LEFT JOIN OT_OTHER_LIST FR_SS
                          ON UPPER(FR_SS.CODE) = UPPER(L_FROM.TYPE_LEAVE)
                        LEFT JOIN AT_PORTAL_REG L_TO
                          ON L_TO.ID_REGGROUP = R2.ID_REGGROUP
                         AND L_TO.WORKING_DAY = R2.TO_DATE
                        LEFT JOIN OT_OTHER_LIST TO_SS
                          ON UPPER(TO_SS.CODE) = UPPER(L_TO.TYPE_LEAVE)
                       INNER JOIN HU_EMPLOYEE E
                          ON E.ID = R.EMPLOYEE_ID
                       INNER JOIN AT_SIGN S
                          ON R.SIGN_ID = S.ID
                       INNER JOIN AT_GSIGN O
                          ON S.AT_GSIGNID = O.ID
                       INNER JOIN PROCESS_APPROVED_STATUS A
                          ON R.ID_REGGROUP = A.ID_REGGROUP
                        LEFT JOIN HU_EMPLOYEE AUTHORIZED
                          ON AUTHORIZED.ID = A.EMPLOYEE_AUTHORIZED
                        LEFT JOIN (SELECT S3.ID_REGGROUP,
                                         EMP_NEXT.FULLNAME_VN EMP_APP_NAME,
                                         S3.APP_LEVEL,
                                         ROW_NUMBER() OVER(PARTITION BY S3.ID_REGGROUP
                                          ORDER BY S3.APP_LEVEL DESC) AS RN
                                    FROM PROCESS_APPROVED_STATUS S3
                                   INNER JOIN HU_EMPLOYEE EMP_NEXT
                                      ON EMP_NEXT.ID = S3.EMPLOYEE_APPROVED
                                   WHERE S3.APP_STATUS = 0) S4
                          ON S4.ID_REGGROUP = R.ID_REGGROUP
                         AND S4.APP_LEVEL = A.APP_LEVEL + 1
                        LEFT JOIN SE_USER EMP_U
                          ON EMP_U.USERNAME = R.MODIFIED_BY
                        LEFT JOIN HU_EMPLOYEE EMP_UN
                          ON EMP_UN.ID = EMP_U.EMPLOYEE_ID
                       WHERE O.CODE = P_CODE
                       and (s.code = P_TYPE or P_TYPE is null)
                         AND NVL(R.STATUS, 0) <> 4
                         AND (A.EMPLOYEE_APPROVED = V_EMPLOYEEID OR
                            PKG_FUNCTION.FN_GET_APPROVED_EXT(A.EMPLOYEE_APPROVED,R2.FROM_DATE,P_CODE) = V_EMPLOYEEID)
                         AND (NVL(P_SIGN ,0)= 0 OR S.ID = P_SIGN)
                  AND (A.APP_STATUS=V_STATUS OR V_STATUS=-99)
                         AND ((UPPER(E.FULLNAME_VN) LIKE
                             '%' || UPPER(P_KEYSEARCH_EMPLOYEE) || '%' OR
                             E.EMPLOYEE_CODE LIKE '%' || P_KEYSEARCH_EMPLOYEE || '%') OR
                             P_KEYSEARCH_EMPLOYEE IS NULL)
                         AND ((P_TODATE IS NULL AND V_FROMDATE IS NULL AND
                             1 = 1) OR
                             (P_TODATE IS NOT NULL AND V_FROMDATE IS NULL AND
                             R.WORKING_DAY <= V_TODATE) OR
                             (P_TODATE IS NULL AND V_FROMDATE IS NOT NULL AND
                             R.WORKING_DAY >= V_FROMDATE) OR
                             (P_TODATE IS NOT NULL AND
                             V_FROMDATE IS NOT NULL AND
                             R.WORKING_DAY BETWEEN V_FROMDATE AND V_TODATE))
                         AND ((A.APP_STATUS = 0 AND
                             PKG_FUNCTION.FN_CHECK_APP(A.EMPLOYEE_ID,
                                                         A.PE_PERIOD_ID,
                                                         A.APP_LEVEL - 1,
                                                         A.ID_REGGROUP) = 1 AND
                             PKG_FUNCTION.FN_CHECK_APP(A.EMPLOYEE_ID,
                                                         A.PE_PERIOD_ID,
                                                         A.APP_LEVEL + 1,
                                                         A.ID_REGGROUP) IN
                             (0, 2)) OR (A.APP_STATUS IN (1, 2)))
                             Group By  R.ID_REGGROUP
                             ) R;

    OPEN P_CUR FOR
      SELECT 0 As ClientCheck,b. *
        FROM (SELECT ROWNUM STT, R.*
                FROM (SELECT
                                      R.ID_REGGROUP,
                                      Max(E.EMPLOYEE_CODE) EMPLOYEE_CODE,
                                      Max(E.ID)                   EMPLOYEE_ID,
                                      Max(E.FULLNAME_VN  )        EMPLOYEE_NAME,
                                      TO_CHAR(Max(R2.FROM_DATE), 'YYYY-MM-DD')   FROM_DATE,
                                      TO_CHAR(Max(R2.TO_DATE), 'YYYY-MM-DD')   TO_DATE,
                                      TO_CHAR(Max(R2.FROM_DATE), 'DD/MM/YYYY HH24:MI')   FROM_HOUR,
                                      TO_CHAR(Max(R2.TO_DATE), 'DD/MM/YYYY HH24:MI')   TO_HOUR,
                                      --Round(( Max( R2.TO_DATE)-      Max(R2.FROM_DATE))*24,1)         as TOTALHOUR,
                                      case when Max(NVL(R2.NVALUE, 0)) < 1 then
                                      '0'||To_Char(Max(NVL(R2.NVALUE, 0)))
                                      else
                                        To_Char(Max(NVL(R2.NVALUE, 0)))
                                      end TOTALHOUR,

                                      --TO_CHAR(Max(NVL(R2.NVALUE, 0)) )        as TOTALHOUR,
                                      Max(FR_SS.NAME_VN)          FROM_SESSION,
                                      Max(TO_SS.NAME_VN   )       TO_SESSION,
                                      Max(S.ID)                   SIGN_ID,
                                      Max(S.NAME )                SIGN_NAME,
                                      Max(O.CODE)                 SIGN_CODE,
                                      TO_CHAR(Max(NVL(R2.NVALUE, 0)) )DAYCOUNT,
                                      Max(R.NOTE)                 DISPLAY,
                                      Max(A.APP_STATUS)           STATUS,
                                      Max(R.REPORT_NO) REPORT_NO,
                                      Max(EMP_UN.FULLNAME_VN)     MODIFIED_NAME, -- NGUOI CAP NHAT CUOI CUNG
                                      --R.MODIFIED_DATE, -- NG?Y CAP NHAT CUOI CUNG
                                      TO_CHAR(Max(R.MODIFIED_DATE), 'YYYY-MM-DD')   MODIFIED_DATE,
                                      Max(S4.EMP_APP_NAME)        APPROVE_NEXT, -- NGUOI PHE DUYET KE TIEP
                                      Max(AUTHORIZED.FULLNAME_VN) AUTHORIZED_NAME, -- NGUOI PHE DUYET THAY THE
                                      --A.AUT_MODIFIED_DATE, -- NGAY PHE DUYET THAY THE
                                      TO_CHAR(Max(A.AUT_MODIFIED_DATE), 'YYYY-MM-DD')   AUT_MODIFIED_DATE,
                                      Max(A.APP_NOTES) APP_NOTES, -- Y KIEN PHE DUYET,
                                      To_Char(Max(A.CREATED_DATE),'YYYY-MM-DD')CREATED_DATE,
                                      Max(R.Id ) Id
                        FROM AT_PORTAL_REG R
                       INNER JOIN (SELECT RE.EMPLOYEE_ID,
                                         RE.ID_REGGROUP,
                                         MIN(RE.FROM_HOUR) FROM_DATE,
                                         MAX(RE.To_HOUR) TO_DATE,
                                         SUM(RE.NVALUE) NVALUE,
                                         MIN(RE.SIGN_ID) SIGN_ID,
                                         MIN(RE.NOTE) NOTE
                                    FROM AT_PORTAL_REG RE
                                   GROUP BY RE.EMPLOYEE_ID, RE.ID_REGGROUP) R2
                          ON R2.ID_REGGROUP = R.ID_REGGROUP
                        LEFT JOIN AT_PORTAL_REG L_FROM
                          ON L_FROM.ID_REGGROUP = R2.ID_REGGROUP
                         AND L_FROM.WORKING_DAY = R2.FROM_DATE
                        LEFT JOIN OT_OTHER_LIST FR_SS
                          ON UPPER(FR_SS.CODE) = UPPER(L_FROM.TYPE_LEAVE)
                        LEFT JOIN AT_PORTAL_REG L_TO
                          ON L_TO.ID_REGGROUP = R2.ID_REGGROUP
                         AND L_TO.WORKING_DAY = R2.TO_DATE
                        LEFT JOIN OT_OTHER_LIST TO_SS
                          ON UPPER(TO_SS.CODE) = UPPER(L_TO.TYPE_LEAVE)
                       INNER JOIN HU_EMPLOYEE E
                          ON E.ID = R.EMPLOYEE_ID
                       INNER JOIN AT_SIGN S
                          ON R.SIGN_ID = S.ID
                       INNER JOIN AT_GSIGN O
                          ON S.AT_GSIGNID = O.ID
                       INNER JOIN PROCESS_APPROVED_STATUS A
                          ON R.ID_REGGROUP = A.ID_REGGROUP
                        LEFT JOIN HU_EMPLOYEE AUTHORIZED
                          ON AUTHORIZED.ID = A.EMPLOYEE_AUTHORIZED
                        LEFT JOIN (SELECT S3.ID_REGGROUP,
                                         EMP_NEXT.FULLNAME_VN EMP_APP_NAME,
                                         S3.APP_LEVEL,
                                         ROW_NUMBER() OVER(PARTITION BY S3.ID_REGGROUP
                                          ORDER BY S3.APP_LEVEL DESC) AS RN
                                    FROM PROCESS_APPROVED_STATUS S3
                                   INNER JOIN HU_EMPLOYEE EMP_NEXT
                                      ON EMP_NEXT.ID = S3.EMPLOYEE_APPROVED
                                   WHERE S3.APP_STATUS = 0) S4
                          ON S4.ID_REGGROUP = R.ID_REGGROUP
                         AND S4.APP_LEVEL = A.APP_LEVEL + 1
                        LEFT JOIN SE_USER EMP_U
                          ON EMP_U.USERNAME = R.MODIFIED_BY
                        LEFT JOIN HU_EMPLOYEE EMP_UN
                          ON EMP_UN.ID = EMP_U.EMPLOYEE_ID
                       WHERE O.CODE = P_CODE
                       and (s.code = P_TYPE or P_TYPE is null)
                         AND NVL(R.STATUS, 0) <> 4
                         AND (A.EMPLOYEE_APPROVED = V_EMPLOYEEID OR
                            PKG_FUNCTION.FN_GET_APPROVED_EXT(A.EMPLOYEE_APPROVED,R2.FROM_DATE,P_CODE) = V_EMPLOYEEID)
                         AND (NVL(P_SIGN ,0)= 0 OR S.ID = P_SIGN)
                  AND (A.APP_STATUS=V_STATUS OR V_STATUS=-99)
                         AND ((UPPER(E.FULLNAME_VN) LIKE
                             '%' || UPPER(P_KEYSEARCH_EMPLOYEE) || '%' OR
                             E.EMPLOYEE_CODE LIKE '%' || P_KEYSEARCH_EMPLOYEE || '%') OR
                             P_KEYSEARCH_EMPLOYEE IS NULL)
                         AND ((P_TODATE IS NULL AND V_FROMDATE IS NULL AND
                             1 = 1) OR
                             (P_TODATE IS NOT NULL AND V_FROMDATE IS NULL AND
                             R.WORKING_DAY <= V_TODATE) OR
                             (P_TODATE IS NULL AND V_FROMDATE IS NOT NULL AND
                             R.WORKING_DAY >= V_FROMDATE) OR
                             (P_TODATE IS NOT NULL AND
                             V_FROMDATE IS NOT NULL AND
                             R.WORKING_DAY BETWEEN V_FROMDATE AND V_TODATE))
                         AND ((A.APP_STATUS = 0 AND
                             PKG_FUNCTION.FN_CHECK_APP(A.EMPLOYEE_ID,
                                                         A.PE_PERIOD_ID,
                                                         A.APP_LEVEL - 1,
                                                         A.ID_REGGROUP) = 1 AND
                             PKG_FUNCTION.FN_CHECK_APP(A.EMPLOYEE_ID,
                                                         A.PE_PERIOD_ID,
                                                         A.APP_LEVEL + 1,
                                                         A.ID_REGGROUP) IN
                             (0, 2)) OR (A.APP_STATUS IN (1, 2)))
                             Group By  R.ID_REGGROUP
                             ) R

                             ) B
       WHERE STT > ((V_PAGE - 1) * V_PAGESIZE)
         AND STT < (V_PAGE * V_PAGESIZE + 1)
         order by FROM_DATE desc;
    P_MESSAGE        := 'ISSUCCESS';
    P_RESPONSESTATUS := 1;

  EXCEPTION
    WHEN OTHERS THEN
      P_MESSAGE        := 'DATABASEERROR';
      P_RESPONSESTATUS := -99;
      SYS_WRITE_EXCEPTION_LOG(SQLCODE,
                              'PKG_API_MOBILE_SCB.API_APPROVE_LIST',
                              SQLERRM || '_' ||
                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL);
  END;

   Procedure API_SendApprovePortal(
                             p_Language       In Nvarchar2,
                             p_UserID         In Number,
                             p_IdGroups        In Nvarchar2,
                             p_TypeRegister In Nvarchar2,
                             p_Message     Out Nvarchar2,
                            p_ResponseStatus Out Number
   )As
   v_UserId Number:=Nvl(p_Userid, -1);
   v_Temp Number(19, 0) := 0;
   v_EmployeeId Number;
   v_EmployeeCode  Nvarchar2(50):='';
   v_PeriodId Number;
   v_TotalDayRegister Number;
   v_TotalHourRegister Number;
   v_SignId Number;
   v_UserName Nvarchar2(100);
   v_FromDate Date;
   v_ToDate Date;
   v_Count Number;
   v_CountWithIdGrp Number;
   v_CountSign Number;
   v_IdGroup Number;
   v_Error   Number;
   Begin
    /*Insert Into at_strsql(id,stringsql)values(seq_at_strsql.nextval,p_IdGroups);
    Commit;
    return;*/
     If v_UserId = -1 Then
          p_Message := 'ISUSERIDNULL';
          p_Responsestatus := -600;
          Return;
      End If;
      Select Id, UserName Into v_Temp,v_UserName From Se_user Where Id = v_UserId;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If;
      Begin
          Select He.id, he.employee_code Into v_EmployeeId  ,v_EmployeeCode
          From Se_user Su
          Inner Join Hu_employee He
           On He.Employee_code  = Su.Employee_code
          Where Su.Id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      For Data In (
        Select Distinct( R.Id_Reggroup) Id_Reggroup
        From At_Portal_Reg R
        Where Instr(','|| p_IdGroups || ',' , ',' || R.Id_Reggroup || ',') >0
        ) Loop
      Begin
          Select Max(R.Sign_Id),Max(R.Working_Day),Min(R.Working_Day),Sum(R.Nvalue)   ,
          Round(( Sum( R.TO_HOUR-   R.FROM_HOUR))*24,1)
          Into v_SignId,v_FromDate,v_ToDate, v_TotalDayRegister   ,v_TotalHourRegister
          From At_Portal_Reg  R Where R.Id_RegGroup=Data.Id_Reggroup
          ;
        Exception
          When Others Then
              p_Message := 'IDREGGROUPNOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      Begin
        Select P.Id
        Into v_PeriodId
        From At_Period   P Where Trunc( P.Start_Date)<= Trunc(v_FromDate   )
        And Trunc(P.End_Date) >=  Trunc(v_ToDate) And Trunc( P.End_Date) >=Trunc(v_FromDate  )
        And RowNum=1
        ;
        Exception
          When Others Then
              p_Message := 'PERIODIDNOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
      --Send Approve Register.
        Pkg_At_Process.Pri_Process_App(v_EmployeeId,v_PeriodId, p_TypeRegister,v_TotalHourRegister,v_TotalDayRegister,
        v_SignId, Data.Id_Reggroup,v_UserName, p_ResponseStatus);
      If p_ResponseStatus=0 Then
        p_Message        := 'IsSuccess';
        p_ResponseStatus := 1;
      Elsif   p_ResponseStatus=1 Then
         IF NVL(p_Language,'vi-VN')= 'vi-VN' then
            p_Message := TO_CHAR(UNISTR('Ch\01B0a thi\00EA\0301t l\00E2\0323p template'));
         else
            p_Message := 'Template not set';
         end if;
         p_ResponseStatus := -600;
      Elsif   p_ResponseStatus=4 Then
        IF NVL(p_Language,'vi-VN')= 'vi-VN' then
            p_Message := TO_CHAR(UNISTR('Kh\00F4ng t\1ED3n t\1EA1i c\1EA5p ph\00EA duy\1EC7t theo template ph\00EA duy\1EC7t ')) 
          ;
         Else
            p_Message :=  TO_CHAR(UNISTR('Kh\00F4ng t\1ED3n t\1EA1i c\1EA5p ph\00EA duy\1EC7t theo template ph\00EA duy\1EC7t ')) 
            ;
         End If;
         p_ResponseStatus := -600;
         Pkg_At_Process.DELETE_TEMPLATES_ERROR(v_Error);
      Else
         IF NVL(p_Language,'vi-VN')= 'vi-VN' then
            p_Message := TO_CHAR(UNISTR('C\1EA5p ph\00EA duy\1EC7t ch\01B0a \0111\01B0\1EE3c thi\1EBFt l\1EADp'));
         else
            p_Message := 'Send Approve Register Is Erorr';
         end if;
         p_ResponseStatus := -600;
      End If;
     End Loop;
     Exception When Others Then
       p_Message        := 'Database Error';
      p_ResponseStatus := -99;
   End;
   
   
   PROCEDURE API_CancelRegister
  (p_Language       IN nvarchar2,
    p_UserID IN NUMBER,
    p_IdGroups IN Nvarchar2,
    p_Message OUT NVARCHAR2,
    p_ResponseStatus OUT NUMBER
  ) As
    v_UserId Number:=Nvl(p_Userid, -1);
    v_Temp Number(19, 0) := 0;
    v_EmployeeId Number;
    v_UserName Nvarchar2(100);
    v_EmployeeCode  Nvarchar2(50):='';
  Begin
      If v_UserId = -1 Then
          p_Message := 'ISUSERIDNULL';
          p_Responsestatus := -600;
          Return;
      End If;
      Select Id, UserName Into v_Temp,v_UserName From Se_user Where Id = v_UserId;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If;
      Begin
          Select He.id, he.employee_code Into v_EmployeeId  ,v_EmployeeCode
          From Se_user Su
          Inner Join Hu_employee He
           On He.Employee_code  = Su.Employee_code
          Where Su.Id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
       -- Neu xoa nhung ban ghi o trang thai = 0 (chua gui duyet) thi xoa lun trong data
    Delete From AT_PORTAL_REG R
     Where R.Status = 0 And  Instr(','||p_IdGroups||',',','||R.ID_REGGROUP||',')>0;
    -- Neu xoa nhung ban ghi o trang thai =3 (tu choi phe duyet) thi update status ve 4
    UPDATE AT_PORTAL_REG R
    SET R.STATUS=4
     Where (R.Status = 0 or  r.status = 3)  And    Instr(','||p_IdGroups||',',','||R.ID_REGGROUP||',')>0;
      p_Message        := 'IsSuccess';
      p_ResponseStatus := 1;
    Exception When Others Then
      p_Message        := 'Database Error';
      p_ResponseStatus := -99;
  End;
  PROCEDURE API_ApproveRegister
  (p_Language       In Nvarchar2,
      p_UserID In Number,--uerId Approve.
      p_IdGroups In Clob,  --Id don register.
      p_Comment In Nvarchar2,
      p_RegisterType   In Nvarchar2,    ----[LEAVE,OVERTIME]
      p_Status In Number,                   ----[1 ,2] == [approve, not approve]
      --p_Cur OUT CURSOR_TYPE,
      p_Message Out Nvarchar2,
      p_ResponseStatus Out Number
  )As
   v_UserId Number:=Nvl(p_Userid, -1);
   v_Temp Number(19, 0) := 0;
   v_EmployeeId Number; --EmployeeId aprove
   v_EmployeeCode  Nvarchar2(50):='';
   v_PeriodId Number;
   v_UserName Nvarchar2(100);
   v_FromDate Date;
   v_ToDate Date;
   v_TotalDayRegister Number;
   v_SignId Number;
   v_EmployeeId_SendRegister Number; 
   v_RequestId Number;
  Begin
    If v_UserId = -1 Then
          p_Message := 'ISUSERIDNULL';
          p_Responsestatus := -600;
          Return;
      End If;
      Select Id, UserName Into v_Temp,v_UserName From Se_user Where Id = v_UserId;
      If V_temp < 1 Then
          p_Message := 'USERISNOTFOUND';
          p_Responsestatus := -600;
          Return;
      End If;
      Begin
          Select He.id, he.employee_code Into v_EmployeeId  ,v_EmployeeCode
          From Se_user Su
          Inner Join Hu_employee He
           On He.Employee_code  = Su.Employee_code
          Where Su.Id = v_Userid;
      Exception
          When Others Then
              p_Message := 'EMPLOYEENOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;  
      v_RequestId := seq_org_temp_table.nextval;
      Pkg_Function.GET_ORG_TABLE_TEMP(p_IdGroups,  v_RequestId);
      For Data In ( 
        Select R.Id_Reggroup,
         Max(R.Sign_Id) Sign_Id,Max(R.Working_Day)ToDate,
         Min(R.Working_Day)FromDate ,
         Sum(R.Nvalue) TotalDayRegister ,
         max(R.Employee_Id) EmployeeId_SendRegister
        --Into v_SignId,v_FromDate,v_ToDate, v_TotalDayRegister ,v_EmployeeId_SendRegister
        From At_Portal_Reg  R 
        Inner Join  Org_Temp_Table T On T.Org_Id=R.Id_Reggroup
        Where T.Request_Id=v_RequestId
        Group By R.Id_Reggroup
      )Loop
      /*Begin
        Select Max(R.Sign_Id),Max(R.Working_Day),Min(R.Working_Day),Sum(R.Nvalue)  ,max(R.Employee_Id)
        Into v_SignId,v_FromDate,v_ToDate, v_TotalDayRegister ,v_EmployeeId_SendRegister
        From At_Portal_Reg  R Where
        --Instr(','||p_IdGroups||',',','||R.Id_Reggroup||',')>0
        R.Id_RegGroup=Data.Id_Reggroup
        ;
        Exception
          When Others Then
              p_Message := 'IDREGGROUPNOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;*/
      Begin
        Select P.Pe_Period_Id
        Into v_PeriodId
        From PROCESS_APPROVED_STATUS   P Where p.Id_Reggroup=Data.Id_Reggroup   and rownum=1
        ;
        Exception
          When Others Then
              p_Message := 'PERIODIDNOTFOUND';
              p_Responsestatus := -600;
              Return;
      End;
    --call procedure ---
    Pkg_At_Process.Pri_Process( v_EmployeeId,Data.EmployeeId_SendRegister,
     v_PeriodId,p_Status,p_RegisterType,  p_Comment,Data.Id_Reggroup,v_UserName,p_Responsestatus);
     If  p_Responsestatus=2 Then
       p_Responsestatus:=-600;
       p_Message:='Approve Error';
       Return ;
     Else
        p_Responsestatus:=1;
        p_Message:='IsSuccess';
        --dbms_lock.sleep(5);
     End If;
    End Loop;       
    Delete From Org_Temp_Table Where Request_Id=v_RequestId;
    Exception When Others Then      
      Delete From Org_Temp_Table Where Request_Id=v_RequestId;
      p_Message        := 'Database Error';
      p_ResponseStatus := -99;
      --Read Log : Ad_Log
  End;
  Function  Fn_TotalRegisterByType(p_EmployeeId Number,
                                                 p_FromDate Date,
                                                 p_ToDate Date,
                                                 p_ListSatus Nvarchar2,
                                                 p_RegisterType Nvarchar2)
  Return Number Is
  v_TotalRegister Number:=0;
  V_ToDate3112 DATE;
  V_FromDate_Next DATE;
  Begin
    IF p_ToDate IS NOT NULL THEN
    V_ToDate3112 := To_Date('31/12/'|| To_Char(p_ToDate,'yyyy'),'dd/MM/yyyy');
    END IF;
    IF p_FromDate IS NOT NULL THEN
      V_FromDate_Next := ADD_MONTHS(p_FromDate,1);
    END IF;
    Select Sum( Nvl(NVALUE,0))
    InTo   v_TotalRegister
    From(
    SELECT
               TO_NUMBER(AP.NVALUE) NVALUE
          FROM AT_PORTAL_REG AP
         INNER JOIN AT_SIGN S
            ON S.ID = AP.SIGN_ID AND S.CODE <>'OT'
         INNER JOIN AT_GSIGN GSIGN
            ON GSIGN.ID = S.AT_GSIGNID
          LEFT JOIN OT_OTHER_LIST TYPE_LEAVE
            ON AP.TYPE_LEAVE = TYPE_LEAVE.CODE
           AND TYPE_LEAVE.TYPE_CODE = 'TYPE_LEAVE'
           INNER JOIN HU_EMPLOYEE E ON E.ID = AP.EMPLOYEE_ID
         -- STATUS 4 La trang thai tu choi sau do bi xoa
         -- STATUS 1 La trang thai phe duyet
         WHERE NVL(AP.STATUS,0) NOT IN (4,1)  AND AP.EMPLOYEE_ID = p_EmployeeId
           AND ((P_TODATE IS NUll and P_FROMDATE is null and 1 = 1) or
               (P_TODATE is not null and P_FROMDATE is null and
               AP.WORKING_DAY <= V_ToDate3112) or
               (P_TODATE is null and P_FROMDATE is not null and
               AP.WORKING_DAY >= V_FromDate_Next) or
               (P_TODATE is not null and P_FROMDATE is not null and
               AP.WORKING_DAY BETWEEN V_FromDate_Next and V_ToDate3112))
               And (S.Code=p_RegisterType or   p_RegisterType='')
           --AND instr(',' || p_ListSatus || ',', ',' || AP.STATUS || ',') > 0
         UNION ALL
        -- Lay dang danh ky hieu nguoi dang ky ho duoi app len portal
        SELECT
               TO_NUMBER(AP.NVALUE) NVALUE
          FROM AT_RGT AP
         INNER JOIN AT_SIGN S
            ON S.ID = AP.SIGN_ID AND S.CODE <>'OT'
         INNER JOIN AT_GSIGN GSIGN
            ON GSIGN.ID = S.AT_GSIGNID AND S.AT_GSIGNID=8 -- Nhom nghi
          LEFT JOIN OT_OTHER_LIST TYPE_LEAVE
            ON AP.TYPE_LEAVE = TYPE_LEAVE.CODE
           AND TYPE_LEAVE.TYPE_CODE = 'TYPE_LEAVE'
           INNER JOIN HU_EMPLOYEE E ON E.ID = AP.EMPLOYEE_ID
         WHERE AP.EMPLOYEE_ID = p_EmployeeId
           AND ((P_TODATE IS NUll and P_FROMDATE is null and 1 = 1) or
               (P_TODATE is not null and P_FROMDATE is null and
               AP.WORKING_DAY <= V_ToDate3112) or
               (P_TODATE is null and P_FROMDATE is not null and
               AP.WORKING_DAY >= V_FromDate_Next) or
               (P_TODATE is not null and P_FROMDATE is not null and
               AP.WORKING_DAY BETWEEN V_FromDate_Next and V_ToDate3112))
               And (S.Code=p_RegisterType or   p_RegisterType='')
               );
     Return nvl(v_TotalRegister,0);
    Exception When Others Then
      Return 0;
  End;
  PROCEDURE API_SeenNotificationStatus
	(
	  p_UserID IN nvarchar2,
	  p_StringIds IN nvarchar2,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
	AS
	   v_DateNow DATE := SYSDATE;
	   v_ID nvarchar2(200) := NVL(p_StringIds,'');
	BEGIN
	    BEGIN
		    UPDATE 	SE_NOTIFICATION
		    SET	  	SEND_STATUS = '03' -- tr?ng th?i d? xem
		    		-- read time
		    WHERE 	id IN (
		    		SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_ID, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_ID, '[^,]+', 1, LEVEL) IS NOT NULL)
		    );
		   COMMIT;
	        p_Message := 'IsSuccess';
	        p_ResponseStatus := 1;
	    EXCEPTION
	        WHEN OTHERS THEN
	            ROLLBACK;
	            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	            p_ResponseStatus := -99;
	            RETURN;
	    END;
	END;
  PROCEDURE API_UpdateSentNotification
	(
		p_StringIds IN nvarchar2,
		p_Status IN nvarchar2,
		p_Message OUT nvarchar2,
	  	p_ResponseStatus OUT NUMBER
	)
	AS
		v_DateNow DATE := SYSDATE;
	   	v_ID nvarchar2(200) := NVL(p_StringIds,'0');
	   	v_Status nvarchar2(10):= nvl(p_Status,'02'); -- 00 chua g?i, 01 g?i l?i, 02 g?i th?nh c?ng, 03 d? xem

	BEGIN
	    UPDATE 	SE_NOTIFICATION
	    SET	  	SEND_STATUS = v_Status,
	    		SEND_NUMBER  = NVL(SEND_NUMBER,0) + 1,
	    		SENT_DATE = v_DateNow
	    WHERE 	id IN (
	    		SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                            FROM (
                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_ID, '[^,]+', 1, LEVEL) AS IVALUE
                                FROM DUAL
                                  CONNECT BY REGEXP_SUBSTR(v_ID, '[^,]+', 1, LEVEL) IS NOT NULL)
	    );
	   COMMIT;
        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
            p_ResponseStatus := -99;
            RETURN;
    END;
    Function DirectManagerMaxByDate(
      p_EmployeeId in number,
      p_Date       DATE default SYSDATE)
    RETURN Number  As
    v_Ret number;
    Begin
      Select Dm_Id
      InTo v_Ret
        From (
        Select
         E.Dm_Id,
         E.Effect_Date ,
         Row_Number() Over(Partition by E.Employee_Id Order By Trunc(E.Effect_Date) Desc) as row_number
        From Hu_Direct_Manager E
        Where Trunc(E.Effect_Date) <=Trunc(p_Date  ) And (E.Expire_Date Is Null Or E.Expire_Date >= p_Date)
         And e.employee_id = p_EmployeeId
         And Nvl(E.Is_Deleted,0)=0  )T
         Where T.row_number=1 ;
         Return v_Ret;
         Exception When Others Then
           Return -99;
    End;

END PKG_API_MOBILE;
