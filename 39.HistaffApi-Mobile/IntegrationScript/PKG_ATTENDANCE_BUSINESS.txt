
-- xử lý trùng ITIME_ID
CREATE OR REPLACE PACKAGE BODY "PKG_ATTENDANCE_BUSINESS" IS

  PROCEDURE DELETE_LOG_AT(P_ID IN NUMBER) IS
  BEGIN
    DELETE AT_ACTION_LOG E WHERE E.ID = P_ID;
  END;

  PROCEDURE CALCULATOR_DAY(P_FROM_DATE   IN DATE,
                           P_TO_DATE     IN DATE,
                           P_EMPLOYEE_ID IN NUMBER,
                           P_TYPE_MANUAL IN NUMBER,
                           CUR           OUT CURSOR_TYPE) IS
  BEGIN
    OPEN CUR FOR
      SELECT COUNT(*) COUNTDATA
        FROM TABLE(TABLE_LISTDATE(P_FROM_DATE, P_TO_DATE)) T
       WHERE T.CDATE NOT IN (SELECT H.WORKINGDAY FROM AT_HOLIDAY H)
         AND T.CDATE NOT IN
             (SELECT NVL2(D.WORKINGDAY,
                          D.WORKINGDAY,
                          NVL2(L.WORKINGDAY, L.WORKINGDAY, NULL))
                FROM AT_LEAVESHEET L
                LEFT JOIN AT_TIME_MANUAL M
                  ON L.MANUAL_ID = M.ID
                LEFT JOIN AT_TIME_TIMESHEET_DAILY D
                  ON L.WORKINGDAY = D.WORKINGDAY
                 AND L.EMPLOYEE_ID = D.EMPLOYEE_ID
                 AND L.MANUAL_ID = D.MANUAL_ID
               WHERE L.EMPLOYEE_ID = P_EMPLOYEE_ID
                 AND (M.MORNING_ID = P_TYPE_MANUAL OR
                     M.AFTERNOON_ID = P_TYPE_MANUAL))
         AND T.CDATE >= P_FROM_DATE
         AND T.CDATE <= P_TO_DATE;
  END CALCULATOR_DAY;

  PROCEDURE CAL_DAY_LEAVE_OLD(P_FROM_DATE   IN DATE,
                              P_TO_DATE     IN DATE,
                              P_EMPLOYEE_ID IN NUMBER,
                              CUR           OUT CURSOR_TYPE) IS
  BEGIN
    OPEN CUR FOR
      SELECT COUNT(*) COUNTDATA
        FROM TABLE(TABLE_LISTDATE(P_FROM_DATE, P_TO_DATE)) T
       WHERE T.CDATE NOT IN (SELECT H.WORKINGDAY FROM AT_HOLIDAY H)
         AND T.CDATE >= P_FROM_DATE
         AND T.CDATE <= P_TO_DATE;
  
    /*MOD(TO_CHAR(T.CDATE, 'J'), 7) NOT IN (6, 5) -- neu check khong tinh thu 7 va chu nhat thi them dieu kien nay
    AND*/
  END CAL_DAY_LEAVE_OLD;

  PROCEDURE GET_TOTAL_PHEPNAM(P_EMPLOYEE_ID   IN NUMBER,
                              P_YEAR          IN NUMBER,
                              P_TYPE_LEAVE_ID IN NUMBER,
                              P_CUR           OUT CURSOR_TYPE) IS
  BEGIN
    OPEN P_CUR FOR
      SELECT NVL(SUM(TB.TOTAL), 0) TOTAL
        FROM (SELECT CASE
                       WHEN M.MORNING_ID = 251 AND M.AFTERNOON_ID = 251 THEN
                        1
                       WHEN M.MORNING_ID = 251 AND M.AFTERNOON_ID <> 251 THEN
                        0.5
                       WHEN M.MORNING_ID <> 251 AND M.AFTERNOON_ID = 251 THEN
                        0.5
                       ELSE
                        0
                     END TOTAL
                FROM AT_LEAVESHEET L
               INNER JOIN AT_TIME_MANUAL M
                  ON L.MANUAL_ID = M.ID
               WHERE L.EMPLOYEE_ID = P_EMPLOYEE_ID
                 AND L.WORKINGDAY NOT IN
                     (SELECT H.WORKINGDAY FROM AT_HOLIDAY H)
                    /*AND MOD(TO_CHAR(L.WORKINGDAY, 'J'), 7) NOT IN (6, 5)*/
                 AND TO_CHAR(L.WORKINGDAY, 'yyyy') = P_YEAR) TB;
  END GET_TOTAL_PHEPNAM;
  PROCEDURE GET_TOTAL_PHEPBU(P_EMPLOYEE_ID   IN NUMBER,
                             P_YEAR          IN NUMBER,
                             P_TYPE_LEAVE_ID IN NUMBER,
                             P_CUR           OUT CURSOR_TYPE) IS
  BEGIN
    OPEN P_CUR FOR
      SELECT NVL(SUM(TB.TOTAL), 0) TOTAL
        FROM (SELECT CASE
                       WHEN M.MORNING_ID = 255 AND M.AFTERNOON_ID = 255 THEN
                        1
                       WHEN M.MORNING_ID = 255 AND M.AFTERNOON_ID <> 255 THEN
                        0.5
                       WHEN M.MORNING_ID <> 255 AND M.AFTERNOON_ID = 255 THEN
                        0.5
                       ELSE
                        0
                     END TOTAL
                FROM AT_LEAVESHEET L
               INNER JOIN AT_TIME_MANUAL M
                  ON L.MANUAL_ID = M.ID
               WHERE L.EMPLOYEE_ID = P_EMPLOYEE_ID
                 AND L.WORKINGDAY NOT IN
                     (SELECT H.WORKINGDAY FROM AT_HOLIDAY H)
                    /* AND MOD(TO_CHAR(L.WORKINGDAY, 'J'), 7) NOT IN (6, 5)*/
                 AND TO_CHAR(L.WORKINGDAY, 'yyyy') = P_YEAR) TB;
  END GET_TOTAL_PHEPBU;

  PROCEDURE CALL_ENTITLEMENT_NB(P_USERNAME   NVARCHAR2,
                                P_ORG_ID     IN NUMBER,
                                P_PERIOD_ID  IN NUMBER,
                                P_ISDISSOLVE IN NUMBER) IS
  
    P_CAL_DATE    DATE;
    PV_FROMDATE   DATE;
    PV_ENDDATE    DATE;
    PV_REQUEST_ID NUMBER;
    PV_YEAR       NUMBER;
  BEGIN
    PV_REQUEST_ID := SEQ_AT_REQUEST.NEXTVAL;
  
    SELECT P.START_DATE,
           P.END_DATE,
           P.END_DATE,
           EXTRACT(YEAR FROM P.END_DATE)
      INTO PV_FROMDATE, PV_ENDDATE, P_CAL_DATE, PV_YEAR
      FROM AT_PERIOD P
     WHERE P.ID = P_PERIOD_ID;
  
    -- Insert org can tinh toan
    INSERT INTO AT_CHOSEN_ORG E
      (SELECT ORG_ID, UPPER(P_USERNAME), PV_REQUEST_ID
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME),
                                    P_ORG_ID,
                                    P_ISDISSOLVE)) O);
  
    -- insert emp can tinh toan
    INSERT INTO AT_CHOSEN_EMP
      (EMPLOYEE_ID,
       ITIME_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       STAFF_RANK_LEVEL,
       USERNAME,
       REQUEST_ID,
       EXPIREDATE_ENT)
      (SELECT T.ID,
              T.ITIME_ID,
              W.ORG_ID,
              W.TITLE_ID,
              W.STAFF_RANK_ID,
              W.LEVEL_STAFF,
              UPPER(P_USERNAME),
              PV_REQUEST_ID,
              TO_DATE(TO_CHAR(NVL(EE.EXPIREDATE_ENT,
                                  NVL(E_PARAM.EFFECT_DATE_TO_NB,
                                      TO_DATE('3103' || PV_YEAR, 'ddmmyyyy'))),
                              'ddmm') || PV_YEAR,
                      'ddmmyyyy')
         FROM HU_EMPLOYEE T
        INNER JOIN (SELECT E.EMPLOYEE_ID,
                          E.TITLE_ID,
                          E.ORG_ID,
                          E.IS_3B,
                          E.STAFF_RANK_ID,
                          S.LEVEL_STAFF,
                          ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                     FROM HU_WORKING E
                     LEFT JOIN HU_STAFF_RANK S
                       ON E.STAFF_RANK_ID = S.ID
                    WHERE E.EFFECT_DATE <= PV_ENDDATE
                      AND E.STATUS_ID = 447
                      AND E.IS_3B = 0) W
           ON T.ID = W.EMPLOYEE_ID
          AND W.ROW_NUMBER = 1
        INNER JOIN (SELECT ORG_ID FROM AT_CHOSEN_ORG O) O
           ON O.ORG_ID = W.ORG_ID
         LEFT JOIN (SELECT E.EMPLOYEE_ID,
                          MAX(TO_DATE('01' ||
                                      TO_CHAR(E.MONTH_EXTENSION_NB, '00') ||
                                      E.YEAR_NB,
                                      'ddmmyyyy')) EXPIREDATE_ENT
                     FROM AT_DECLARE_ENTITLEMENT E
                    WHERE E.MONTH_EXTENSION_NB IS NOT NULL
                      AND E.MONTH_EXTENSION_NB > 0
                      AND E.YEAR_NB IS NOT NULL
                      AND E.YEAR_NB = PV_YEAR
                      AND E.YEAR_NB >= 1900
                    GROUP BY E.EMPLOYEE_ID) EE
           ON W.EMPLOYEE_ID = EE.EMPLOYEE_ID
         LEFT JOIN (SELECT *
                     FROM (SELECT E.EFFECT_DATE_TO_NB
                             FROM AT_LIST_PARAM_SYSTEM E
                            WHERE E.EFFECT_DATE_FROM <= PV_ENDDATE
                              AND E.EFFECT_DATE_TO_NB IS NOT NULL
                              AND E.ACTFLG = 'A')
                    WHERE ROWNUM = 1) E_PARAM
           ON 1 = 1
        WHERE (NVL(T.WORK_STATUS, 0) <> 257 OR
              (T.WORK_STATUS = 257 AND T.TER_LAST_DATE >= PV_FROMDATE)));
  
    CAL_COMPENSATORY(P_CAL_DATE, UPPER(P_USERNAME), P_PERIOD_ID);
  
  END;

  PROCEDURE CALL_ENTITLEMENT(P_USERNAME   VARCHAR2,
                             P_ORG_ID     IN NUMBER,
                             P_PERIOD_ID  IN NUMBER,
                             P_ISDISSOLVE IN NUMBER) IS
    P_CAL_DATE    DATE;
    PV_FROMDATE   DATE;
    PV_ENDDATE    DATE;
    PV_REQUEST_ID NUMBER;
    PV_YEAR       NUMBER;
  BEGIN
    PV_REQUEST_ID := SEQ_AT_REQUEST.NEXTVAL;
  
    SELECT P.START_DATE,
           P.END_DATE,
           P.END_DATE,
           EXTRACT(YEAR FROM P.END_DATE)
      INTO PV_FROMDATE, PV_ENDDATE, P_CAL_DATE, PV_YEAR
      FROM AT_PERIOD P
     WHERE P.ID = P_PERIOD_ID;
  
    -- Insert org can tinh toan
    INSERT INTO AT_CHOSEN_ORG E
      (SELECT ORG_ID, UPPER(P_USERNAME), PV_REQUEST_ID
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME),
                                    P_ORG_ID,
                                    P_ISDISSOLVE)) O);
  
    -- insert emp can tinh toan
    INSERT INTO AT_CHOSEN_EMP
      (EMPLOYEE_ID,
       ITIME_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       STAFF_RANK_LEVEL,
       USERNAME,
       REQUEST_ID,
       EXPIREDATE_ENT)
      (SELECT T.ID,
              T.ITIME_ID,
              W.ORG_ID,
              W.TITLE_ID,
              W.STAFF_RANK_ID,
              W.LEVEL_STAFF,
              UPPER(P_USERNAME),
              PV_REQUEST_ID,
              TO_DATE(TO_CHAR(NVL(EE.EXPIREDATE_ENT,
                                  NVL(E_PARAM.TO_LEAVE_YEAR,
                                      TO_DATE('3103' || PV_YEAR, 'ddmmyyyy'))),
                              'ddmm') || PV_YEAR,
                      'ddmmyyyy')
         FROM HU_EMPLOYEE T
        INNER JOIN (SELECT E.EMPLOYEE_ID,
                          E.TITLE_ID,
                          E.ORG_ID,
                          E.IS_3B,
                          E.STAFF_RANK_ID,
                          S.LEVEL_STAFF,
                          ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                     FROM HU_WORKING E
                     LEFT JOIN HU_STAFF_RANK S
                       ON E.STAFF_RANK_ID = S.ID
                    WHERE E.EFFECT_DATE <= PV_ENDDATE
                      AND E.STATUS_ID = 447
                      AND E.IS_3B = 0) W
           ON T.ID = W.EMPLOYEE_ID
          AND W.ROW_NUMBER = 1
        INNER JOIN (SELECT ORG_ID FROM AT_CHOSEN_ORG O) O
           ON O.ORG_ID = W.ORG_ID
         LEFT JOIN (SELECT E.EMPLOYEE_ID,
                          MAX(TO_DATE('01' ||
                                      TO_CHAR(E.START_MONTH_EXTEND, '00') ||
                                      E.YEAR_ENTITLEMENT,
                                      'ddmmyyyy')) EXPIREDATE_ENT
                     FROM AT_DECLARE_ENTITLEMENT E
                    WHERE E.START_MONTH_EXTEND IS NOT NULL
                      AND E.START_MONTH_EXTEND > 0
                      AND E.YEAR_ENTITLEMENT IS NOT NULL
                      AND E.YEAR_ENTITLEMENT = PV_YEAR
                      AND E.YEAR_ENTITLEMENT >= 1900
                    GROUP BY E.EMPLOYEE_ID) EE
           ON W.EMPLOYEE_ID = EE.EMPLOYEE_ID
         LEFT JOIN (SELECT *
                     FROM (SELECT E.TO_LEAVE_YEAR
                             FROM AT_LIST_PARAM_SYSTEM E
                            WHERE E.EFFECT_DATE_FROM <= PV_ENDDATE
                              AND E.TO_LEAVE_YEAR IS NOT NULL
                              AND E.ACTFLG = 'A')
                    WHERE ROWNUM = 1) E_PARAM
           ON 1 = 1
        WHERE (NVL(T.WORK_STATUS, 0) <> 257 OR
              (T.WORK_STATUS = 257 AND T.TER_LAST_DATE >= PV_FROMDATE)));
  
    CAL_ENTITLEMENT_NEW(P_CAL_DATE, UPPER(P_USERNAME), P_PERIOD_ID);
  END;

  PROCEDURE UPDATE_DATAINOUT(P_ITIMEID  IN NUMBER,
                             P_USERNAME NVARCHAR2,
                             P_FROMDATE IN DATE,
                             P_ENDDATE  IN DATE) IS
  	PV_FROM DATE;
 	v_LastID NUMBER;
  BEGIN
    PV_FROM := P_FROMDATE;
    DELETE AT_DATA_INOUT T
     WHERE T.WORKINGDAY >= PV_FROM
       AND T.WORKINGDAY <= P_ENDDATE
       AND (T.ITIME_ID = P_ITIMEID OR P_ITIMEID = 0);
  
     -- SELECT SEQ_AT_DATA_INOUT.NEXTVAL INTO v_LastID FROM dual; 
      
    INSERT INTO AT_DATA_INOUT S
      (S.ID,
       S.EMPLOYEE_ID,
       S.WORKINGDAY,
       S.VALIN1,
       S.VALIN2,
       S.VALIN3,
       S.VALIN4,
       S.VALIN5,
       S.VALIN6,
       S.VALIN7,
       S.VALIN8,
       S.VALIN9,
       S.VALIN10,
       S.VALIN11,
       S.VALIN12,
       S.VALIN13,
       S.VALIN14,
       S.VALIN15,
       S.ITIME_ID,
       S.CREATED_DATE,
       S.CREATED_BY,
       S.CREATED_LOG)
      SELECT SEQ_AT_DATA_INOUT.NEXTVAL ,
             A.EMPLOYEE_ID,
             A.WORKINGDAY,
             A.VAL1,
             A.VAL2,
             A.VAL3,
             A.VAL4,
             A.VAL5,
             A.VAL6,
             A.VAL7,
             A.VAL8,
             A.VAL9,
             A.VAL10,
             A.VAL11,
             A.VAL12,
             A.VAL13,
             A.VAL14,
             A.VAL15,
             A.ITIME_ID,
             SYSDATE,
             P_USERNAME,
             P_USERNAME
        FROM (SELECT   A.*
                FROM (SELECT T.ITIME_ID,
                             E.ID EMPLOYEE_ID,
                             T.WORKINGDAY,
                             T.VALTIME,
                             ROW_NUMBER() OVER(PARTITION BY T.ITIME_ID, T.WORKINGDAY, E.ID ORDER BY T.ITIME_ID, T.VALTIME ASC) AS STT
                        FROM HU_EMPLOYEE E
                        	-- Xử lý trùng ITIME_ID 
	                        LEFT JOIN HU_ORGANIZATION ho ON ho.id = e.ORG_ID  
							LEFT JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'
							LEFT JOIN AT_SWIPE_DATA T ON T.ITIME_ID = E.ITIME_ID  AND t.TERMINAL_ID  = at2.ID 
                       WHERE T.WORKINGDAY >= PV_FROM
                         AND T.WORKINGDAY <= P_ENDDATE
                         AND (T.ITIME_ID = P_ITIMEID OR P_ITIMEID = 0)
                         AND (NVL(E.WORK_STATUS, 0) <> 257 OR
                             (NVL(E.WORK_STATUS, 0) = 257 AND
                             E.TER_EFFECT_DATE >= PV_FROM AND
                             T.WORKINGDAY < E.TER_EFFECT_DATE))
                         AND T.WORKINGDAY >= E.JOIN_DATE)
              PIVOT(MAX(VALTIME)
                 FOR STT IN(1 AS VAL1,
                           2 AS VAL2,
                           3 AS VAL3,
                           4 AS VAL4,
                           5 AS VAL5,
                           6 AS VAL6,
                           7 AS VAL7,
                           8 AS VAL8,
                           9 AS VAL9,
                           10 AS VAL10,
                           11 AS VAL11,
                           12 AS VAL12,
                           13 AS VAL13,
                           14 AS VAL14,
                           15 AS VAL15,
                           16 AS VAL16,
                           17 AS VAL17,
                           18 AS VAL18,
                           19 AS VAL19,
                           20 AS VAL20)) A ) A;
  END;
 -- SETUP SHIFT DEFAULT
  PROCEDURE CAL_TIME_TIMESHEET_MACHINES(P_USERNAME   IN NVARCHAR2,
                                        P_ORG_ID     IN NUMBER,
                                        P_FROMDATE   IN DATE,
                                        P_ENDDATE    IN DATE,
                                        P_ISDISSOLVE IN NUMBER) IS
    PV_FROMDATE    DATE;
    PV_ENDDATE     DATE;
    PV_SQL         CLOB;
    PV_PERIOD_ID   NUMBER;
    PV_REQUEST_ID  NUMBER;
    PV_MINUS_ALLOW NUMBER := 50;
  BEGIN

    PV_FROMDATE   := P_FROMDATE;
    PV_ENDDATE    := P_ENDDATE;
    PV_REQUEST_ID := SEQ_AT_REQUEST.NEXTVAL;

    SELECT P.ID
      INTO PV_PERIOD_ID
      FROM AT_PERIOD P
     WHERE PV_FROMDATE BETWEEN P.START_DATE AND P.END_DATE
       AND ROWNUM = 1;
       
    -- Insert org can tinh toan
    INSERT INTO AT_CHOSEN_ORG E
      (SELECT ORG_ID, UPPER(P_USERNAME), PV_REQUEST_ID
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME),
                                    P_ORG_ID,
                                    P_ISDISSOLVE)) O
        WHERE EXISTS (SELECT 1
                 FROM AT_ORG_PERIOD OP
                WHERE OP.PERIOD_ID = PV_PERIOD_ID
                  AND OP.ORG_ID = O.ORG_ID
                  AND OP.STATUSCOLEX = 1));

    -- insert emp can tinh toan
    INSERT INTO AT_CHOSEN_EMP
      (EMPLOYEE_ID,
       ITIME_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       STAFF_RANK_LEVEL,
       TER_EFFECT_DATE,
       USERNAME,
       REQUEST_ID,
       JOIN_DATE,
       JOIN_DATE_STATE)
      (SELECT T.ID,
              T.ITIME_ID,
              W.ORG_ID,
              W.TITLE_ID,
              W.STAFF_RANK_ID,
              W.LEVEL_STAFF,
              CASE
                WHEN T.TER_EFFECT_DATE IS NOT NULL THEN
                 T.TER_EFFECT_DATE + 1
                ELSE
                 NULL
              END TER_EFFECT_DATE,
              UPPER(P_USERNAME),
              PV_REQUEST_ID,
              T.JOIN_DATE,
              T.JOIN_DATE_STATE
         FROM HU_EMPLOYEE T
        INNER JOIN (SELECT E.EMPLOYEE_ID,
                          E.TITLE_ID,
                          E.ORG_ID,
                          E.IS_3B,
                          E.STAFF_RANK_ID,
                          S.LEVEL_STAFF,
                          ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                     FROM HU_WORKING E
                     LEFT JOIN HU_STAFF_RANK S
                       ON E.STAFF_RANK_ID = S.ID
                    WHERE E.EFFECT_DATE <= PV_ENDDATE
                      AND E.STATUS_ID = 447
                      AND E.IS_3B = 0) W
           ON T.ID = W.EMPLOYEE_ID
          AND W.ROW_NUMBER = 1
        INNER JOIN (SELECT ORG_ID FROM AT_CHOSEN_ORG O) O
           ON O.ORG_ID = W.ORG_ID
        WHERE (NVL(T.WORK_STATUS, 0) <> 257 OR
              (T.WORK_STATUS = 257 AND T.TER_LAST_DATE >= PV_FROMDATE)));

    -- lay val 1 --> 4
    INSERT INTO AT_CAL_INOUT_TEMP
      (ID,
       EMPLOYEE_ID,
       WORKINGDAY,
       SHIFT_ID,
       SHIFT_CODE,
       SHIFT_MANUAL_ID,
       SHIFT_HOURS_START,
       SHIFT_HOURS_STOP,
       BREAKS_FORM,
       BREAKS_TO,
       IS_NOON,
       WORKINGHOUR_SHIFT,
       VALTIME1,
       MINUTE_DM,
       MINUTE_VS,
       REQUEST_ID,
       ITIME_ID)
      SELECT SEQ_AT_CAL_INOUT_TEMP.NEXTVAL,
             T.EMPLOYEE_ID,
             WSIGN.WORKINGDAY,
             WSIGN.SHIFT_ID,
             WSIGN.SHIFT_CODE,
             WSIGN.SHIFT_MANUAL_ID,
             WSIGN.HOURS_START,
             WSIGN.HOURS_STOP,
             WSIGN.BREAKS_FORM,
             WSIGN.BREAKS_TO,
             WSIGN.IS_NOON,
             CASE
               WHEN WSIGN.SHIFT_ID IS NOT NULL THEN
                CASE
                  WHEN WSIGN.BREAKS_FORM IS NULL AND WSIGN.BREAKS_TO IS NULL THEN
                   CASE
                     WHEN WSIGN.HOURS_STOP < WSIGN.HOURS_START THEN
                      ROUND((WSIGN.HOURS_STOP + 1 - WSIGN.HOURS_START) * 24, 2)
                     ELSE
                      ROUND((WSIGN.HOURS_STOP - WSIGN.HOURS_START) * 24, 2)
                   END
                  ELSE
                   ROUND((WSIGN.BREAKS_FORM - WSIGN.HOURS_START) * 24, 2) +
                   ROUND((WSIGN.HOURS_STOP - WSIGN.BREAKS_TO) * 24, 2)
                END
               ELSE
                0
             END,
             CASE
               WHEN WSIGN.HOURS_START IS NOT NULL THEN
                (SELECT INOUT.VALTIME
                   FROM (SELECT INOUT.*,
                                ROW_NUMBER() OVER(PARTITION BY INOUT.ITIME_ID, INOUT.WORKINGDAY ORDER BY INOUT.VALTIME) AS ROW_NUMBER
                           FROM AT_SWIPE_DATA INOUT) INOUT
                           -- Xử lý trùng ITIME_ID 
                           LEFT JOIN HU_ORGANIZATION ho ON ho.id = T.ORG_ID  
						   JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND INOUT.TERMINAL_ID  = at2.ID 
                  WHERE INOUT.ITIME_ID = T.ITIME_ID
                    AND INOUT.WORKINGDAY = WSIGN.WORKINGDAY
                    AND INOUT.ROW_NUMBER = 1 AND INOUT.VALTIME <= WSIGN.BREAKS_FORM)
             END,
             WSIGN.MINUTE_DM,
             WSIGN.MINUTE_VS,
             PV_REQUEST_ID,
             T.ITIME_ID
        FROM AT_CHOSEN_EMP T
       INNER JOIN (SELECT WSIGN.EMPLOYEE_ID,
                          WSIGN.SHIFT_ID,
                          WSIGN.WORKINGDAY,
                          SHIFT.CODE SHIFT_CODE,
                          SHIFT.MANUAL_ID SHIFT_MANUAL_ID,
                          CASE
                            WHEN SHIFT.BREAKS_FORM IS NOT NULL THEN
                             TO_DATE(TO_CHAR(WSIGN.WORKINGDAY, 'yyyymmdd') ||
                                     TO_CHAR(SHIFT.BREAKS_FORM, 'HH24MI'),
                                     'yyyymmddHH24MI')
                          END BREAKS_FORM,
                          CASE
                            WHEN SHIFT.BREAKS_TO IS NOT NULL THEN
                             TO_DATE(TO_CHAR(WSIGN.WORKINGDAY, 'yyyymmdd') ||
                                     TO_CHAR(SHIFT.BREAKS_TO, 'HH24MI'),
                                     'yyyymmddHH24MI')
                          END BREAKS_TO,

                          CASE
                            WHEN SHIFT.HOURS_START IS NOT NULL THEN
                             TO_DATE(TO_CHAR(WSIGN.WORKINGDAY, 'yyyymmdd') ||
                                     TO_CHAR(SHIFT.HOURS_START, 'HH24MI'),
                                     'yyyymmddHH24MI')
                          END HOURS_START,

                          CASE
                            WHEN SHIFT.HOURS_STOP IS NOT NULL THEN
                             TO_DATE(TO_CHAR(WSIGN.WORKINGDAY, 'yyyymmdd') ||
                                     TO_CHAR(SHIFT.HOURS_STOP, 'HH24MI'),
                                     'yyyymmddHH24MI')
                          END HOURS_STOP,
                          NVL(SHIFT.IS_NOON, 0) IS_NOON,
                          NVL(LATE.MINUTE_DM, 0) MINUTE_DM,
                          NVL(LATE.MINUTE_VS, 0) MINUTE_VS
                     FROM AT_WORKSIGN WSIGN
                    INNER JOIN AT_SHIFT SHIFT
                       ON WSIGN.SHIFT_ID = SHIFT.ID
                     LEFT JOIN (SELECT LATE.EMPLOYEE_ID,
                                      LATE.WORKINGDAY,
                                      SUM(CASE
                                            WHEN LATE.TYPE_DSVM = 168 THEN
                                             LATE.MINUTE
                                            ELSE
                                             0
                                          END) MINUTE_DM,
                                      SUM(CASE
                                            WHEN LATE.TYPE_DSVM = 167 THEN
                                             LATE.MINUTE
                                            ELSE
                                             0
                                          END) MINUTE_VS
                                 FROM AT_LATE_COMBACKOUT LATE
                                WHERE LATE.WORKINGDAY >= PV_FROMDATE
                                  AND LATE.WORKINGDAY <= PV_ENDDATE
                                GROUP BY LATE.EMPLOYEE_ID, LATE.WORKINGDAY) LATE
                       ON WSIGN.EMPLOYEE_ID = LATE.EMPLOYEE_ID
                      AND WSIGN.WORKINGDAY = LATE.WORKINGDAY
                    WHERE WSIGN.WORKINGDAY >= PV_FROMDATE
                      AND WSIGN.WORKINGDAY <= PV_ENDDATE) WSIGN
          ON WSIGN.EMPLOYEE_ID = T.EMPLOYEE_ID;

    UPDATE AT_CAL_INOUT_TEMP WSIGN
       SET WSIGN.VALTIME2 = CASE
                              WHEN NVL(WSIGN.IS_NOON, 0) = -1 THEN
                               (SELECT MIN(INOUT.VALTIME)
                                  FROM AT_SWIPE_DATA INOUT
                                  	-- Xử lý trùng ITIME_ID 
                                  	JOIN HU_EMPLOYEE he ON WSIGN.EMPLOYEE_ID  = he.id AND he.ITIME_ID  = WSIGN.ITIME_ID  
                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = he.ORG_ID  
						   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND INOUT.TERMINAL_ID  = at2.ID 
                                 WHERE INOUT.ITIME_ID = WSIGN.ITIME_ID
                                   AND INOUT.WORKINGDAY = WSIGN.WORKINGDAY
                                   AND INOUT.VALTIME >
                                       NVL(WSIGN.VALTIME1, '1/jan/1900')
                                   AND INOUT.VALTIME >=
                                       (WSIGN.BREAKS_FORM -
                                       PV_MINUS_ALLOW / 60 / 24)
                                   AND INOUT.VALTIME <=
                                       (WSIGN.BREAKS_FORM +
                                       PV_MINUS_ALLOW / 60 / 24))
                            END;

    UPDATE AT_CAL_INOUT_TEMP WSIGN
       SET WSIGN.VALTIME3 = CASE
                              WHEN NVL(WSIGN.IS_NOON, 0) = -1 THEN

                               (SELECT MIN(INOUT.VALTIME)
                                  FROM AT_SWIPE_DATA INOUT
                                  -- Xử lý trùng ITIME_ID 
                                  	JOIN HU_EMPLOYEE he ON WSIGN.EMPLOYEE_ID  = he.id AND he.ITIME_ID  = WSIGN.ITIME_ID  
                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = he.ORG_ID  
						   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND INOUT.TERMINAL_ID  = at2.ID 
                                 WHERE INOUT.ITIME_ID = WSIGN.ITIME_ID
                                   AND INOUT.WORKINGDAY = WSIGN.WORKINGDAY
                                   AND INOUT.VALTIME >
                                       NVL(WSIGN.VALTIME2, '1/jan/1900')
                                   AND INOUT.VALTIME >
                                       NVL(WSIGN.VALTIME1, '1/jan/1900'))
                            END;

    UPDATE AT_CAL_INOUT_TEMP WSIGN
       SET WSIGN.VALTIME4 = CASE
                              WHEN WSIGN.SHIFT_HOURS_STOP IS NOT NULL AND
                                   WSIGN.SHIFT_HOURS_START IS NOT NULL THEN
                               CASE
                                 WHEN SHIFT_HOURS_STOP < SHIFT_HOURS_START THEN
                                  (SELECT MAX(INOUT.VALTIME)
                                     FROM AT_SWIPE_DATA INOUT
                                     -- Xử lý trùng ITIME_ID 
                                  	JOIN HU_EMPLOYEE he ON WSIGN.EMPLOYEE_ID  = he.id AND he.ITIME_ID  = WSIGN.ITIME_ID  
                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = he.ORG_ID  
						   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND INOUT.TERMINAL_ID  = at2.ID 
                                    -- end Xử lý trùng ITIME_ID 
						   			WHERE INOUT.ITIME_ID = WSIGN.ITIME_ID
                                      AND INOUT.WORKINGDAY = WSIGN.WORKINGDAY + 1
                                      AND INOUT.VALTIME <=
                                          (trunc(SHIFT_HOURS_STOP) + 1 + 16/24 +
                                          PV_MINUS_ALLOW / 60 / 24))
                                 ELSE
                                  (SELECT MAX(INOUT.VALTIME)
                                     FROM AT_SWIPE_DATA INOUT
                                      -- Xử lý trùng ITIME_ID 
                                  	JOIN HU_EMPLOYEE he ON WSIGN.EMPLOYEE_ID  = he.id AND he.ITIME_ID  = WSIGN.ITIME_ID  
                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = he.ORG_ID  
						   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND INOUT.TERMINAL_ID  = at2.ID 
                                    -- end Xử lý trùng ITIME_ID 
                                    WHERE INOUT.ITIME_ID = WSIGN.ITIME_ID
                                      AND INOUT.WORKINGDAY = WSIGN.WORKINGDAY
                                      AND INOUT.VALTIME >
                                          NVL(WSIGN.VALTIME3, '1/jan/1900')
                                      AND INOUT.VALTIME >
                                          NVL(WSIGN.VALTIME2, '1/jan/1900')
                                      AND INOUT.VALTIME >
                                          NVL(WSIGN.VALTIME1, '1/jan/1900'))
                               END
                            END;
    
       
    --> CHUA BO SUNG THEO NGAY NGHI VIEC
    INSERT INTO AT_TIME_TIMESHEET_MACHINE_TEMP M
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       WORKINGDAY,
       SHIFT_ID,
       SHIFT_CODE,
       SHIFT_MANUAL_ID,
       SHIFT_HOURS_START,
       SHIFT_HOURS_STOP,
       BREAKS_FORM,
       BREAKS_TO,
       IS_NOON,
       WORKINGHOUR_SHIFT,
       VALIN1,
       VALIN2,
       VALIN3,
       VALIN4,
       LEAVE_ID,
       LEAVE_CODE,
       IS_HOLIDAY,
       IS_FULLDAY,
       MINUTE_DM,
       MINUTE_VS,
       CREATED_DATE,
       CREATED_BY,
       REQUEST_ID,
       WORKINGHOUR,
       SWIPECARD_EMP,
       SWIPECARD_STAFF)
      SELECT SEQ_AT_TIME_MACHINE_TEMP.NEXTVAL,
             T.EMPLOYEE_ID,
             T.ORG_ID,
             T.TITLE_ID,
             T.STAFF_RANK_ID,
             CA.CDATE,
             WSIGN.SHIFT_ID,
             WSIGN.SHIFT_CODE,
             WSIGN.SHIFT_MANUAL_ID,
             WSIGN.SHIFT_HOURS_START,
             WSIGN.SHIFT_HOURS_STOP,
             WSIGN.BREAKS_FORM,
             WSIGN.BREAKS_TO,
             WSIGN.IS_NOON,
             WSIGN.WORKINGHOUR_SHIFT,
             WSIGN.VALTIME1,
             WSIGN.VALTIME2,
             WSIGN.VALTIME3,
             WSIGN.VALTIME4,             
            CASE
              WHEN NVL(WSIGN.SHIFT_MANUAL_ID, 0) = 22 THEN
                22
              ELSE
                LEAVE.MANUAL_ID
              END 
							-- gan id ma kieu cong
							--NVL(LEAVE.MANUAL_ID,NVL(WSIGN.SHIFT_MANUAL_ID, 0))
              MANUAL_ID,

             CASE
               WHEN NVL(WSIGN.SHIFT_MANUAL_ID, 0) = 22 THEN
                'OFF'
               ELSE
                TO_CHAR(LEAVE.MANUAL_CODE)
             END MANUAL_CODE,
             CASE
               WHEN HOLIDAY.WORKINGDAY IS NOT NULL THEN
                1
               ELSE
                0
             END,
             CASE
               WHEN NVL(WSIGN.SHIFT_MANUAL_ID, 0) = 22 THEN
                1
               ELSE
                LEAVE.IS_FULLDAY
             END IS_FULLDAY, 
             WSIGN.MINUTE_DM,  
             WSIGN.MINUTE_VS,
             SYSDATE,
             UPPER(P_USERNAME),
             PV_REQUEST_ID,
             PKG_ATTENDANCE_FUNTION.WORKINGHOUR(SHIFT_HOURS_START,
                                                SHIFT_HOURS_STOP,
                                                BREAKS_FORM,
                                                BREAKS_TO,
                                                IS_NOON,
                                                VALTIME1,
                                                VALTIME2,
                                                VALTIME3,
                                                VALTIME4,
                                                MINUTE_DM,
                                                MINUTE_VS),
            SETUP_EMP.SWIPECARD_EMP,
            SETUP_SPECIAL.SWIPECARD_SPECIAL
        FROM AT_CHOSEN_EMP T
       CROSS JOIN TABLE(TABLE_LISTDATE(PV_FROMDATE, PV_ENDDATE)) CA
        LEFT JOIN (SELECT * FROM AT_CAL_INOUT_TEMP WSIGN) WSIGN
          ON T.EMPLOYEE_ID = WSIGN.EMPLOYEE_ID
         AND WSIGN.WORKINGDAY = CA.CDATE
        LEFT JOIN (SELECT T.MANUAL_ID,
                          M.CODE MANUAL_CODE,
                          T.EMPLOYEE_ID,
                          T.WORKINGDAY,
                          CASE
                            WHEN NVL(F.IS_LEAVE, 0) = -1 AND
                                 NVL(F2.IS_LEAVE, 0) = -1 THEN
                             1
                            WHEN NVL(F.IS_LEAVE, 0) = -1 OR
                                 NVL(F2.IS_LEAVE, 0) = -1 THEN
                             .5
                            ELSE
                             0
                          END IS_FULLDAY
                     FROM AT_LEAVESHEET T
                     LEFT JOIN AT_TIME_MANUAL M
                       ON T.MANUAL_ID = M.ID
                     LEFT JOIN AT_FML F
                       ON M.MORNING_ID = F.ID
                     LEFT JOIN AT_FML F2
                       ON M.AFTERNOON_ID = F2.ID
                    WHERE T.WORKINGDAY >= PV_FROMDATE
                      AND T.WORKINGDAY <= PV_ENDDATE) LEAVE
          ON T.EMPLOYEE_ID = LEAVE.EMPLOYEE_ID
         AND LEAVE.WORKINGDAY = CA.CDATE
        LEFT JOIN (SELECT DISTINCT HOLIDAY.WORKINGDAY
                     FROM AT_HOLIDAY HOLIDAY
                    WHERE HOLIDAY.WORKINGDAY >= PV_FROMDATE
                      AND HOLIDAY.WORKINGDAY <= PV_ENDDATE
                      AND HOLIDAY.ACTFLG = 'A') HOLIDAY
          ON HOLIDAY.WORKINGDAY = CA.CDATE
        -- Thiet lap cham cong theo nhan vien
        LEFT JOIN (SELECT EMPLOYEE_ID, NUMBER_SWIPECARD SWIPECARD_EMP  FROM AT_SETUP_TIME_EMP WHERE ACTFLG='A') SETUP_EMP 
             ON SETUP_EMP.EMPLOYEE_ID = T.EMPLOYEE_ID
        -- Thiet lap cham cong theo cap nhan su
        LEFT JOIN (SELECT STAFF_RANK_ID, NUMBER_SWIPECARD SWIPECARD_SPECIAL FROM AT_SETUP_SPECIAL WHERE ACTFLG='A') SETUP_SPECIAL
             ON SETUP_SPECIAL.STAFF_RANK_ID = T.STAFF_RANK_ID
        WHERE (T.TER_EFFECT_DATE IS NULL OR (T.TER_EFFECT_DATE IS NOT NULL AND
             CA.CDATE < T.TER_EFFECT_DATE))
         AND CA.CDATE >= T.JOIN_DATE;
    --------------------------------------------------------------------------------------
    -- AP DUNG CONG THUC TINH CHO CAC COT TREN BANG CONG TONG HOP
    --------------------------------------------------------------------------------------
    FOR CUR_ITEM IN (SELECT T.FORMULAR_CODE, T.FORMULAR_VALUE
                       FROM AT_TIME_FORMULAR T
                      WHERE T.TYPE = 1
                        AND T.STATUS = 1
                      ORDER BY T.FORMULAR_ID) LOOP

      PV_SQL := 'UPDATE AT_TIME_TIMESHEET_MACHINE_TEMP T SET ' ||
                CUR_ITEM.FORMULAR_CODE || '= NVL((' ||
                CUR_ITEM.FORMULAR_VALUE || '),0)';
      EXECUTE IMMEDIATE PV_SQL;

    END LOOP;

    -- XOA DU LIEU CU TRUOC KHI TINH
    DELETE FROM AT_TIME_TIMESHEET_MACHINET D
     WHERE D.WORKINGDAY >= PV_FROMDATE
       AND D.WORKINGDAY <= PV_ENDDATE
       AND D.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP O);
   FOR C IN (SELECT * FROM AT_TIME_TIMESHEET_MACHINE_TEMP WHERE EMPLOYEE_ID = 6387)
   LOOP
        DBMS_OUTPUT.PUT_LINE('MACONG: ' || C.MANUAL_ID || 'WORKINGHOUR_SHIFT: ' || C.WORKINGHOUR_SHIFT || 'LEAVE_ID: ' || C.LEAVE_ID || 'IS_FULLDAY: ' || C.IS_FULLDAY || 'SHIFT_MANUAL_ID: ' ||C.SHIFT_MANUAL_ID);
   END LOOP;
    INSERT INTO AT_TIME_TIMESHEET_MACHINET
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       WORKINGDAY,
       SHIFT_CODE,
       LEAVE_CODE,
       LATE,
       COMEBACKOUT,
       WORKDAY_OT,
       WORKDAY_NIGHT,
       TYPE_DAY,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       WORKINGHOUR,
       VALIN1,
       VALIN2,
       VALIN3,
       VALIN4,
       SHIFT_ID,
       MANUAL_ID,
       LEAVE_ID,
       WORKINGHOUR_SHIFT,
       NUMBER_SWIPE,
       IS_HOLIDAY,
       IS_FULLDAY,
       SHIFT_MANUAL_ID,
       IS_NOON,
       SHIFT_HOURS_START,
       SHIFT_HOURS_STOP,
       BREAKS_FORM,
       BREAKS_TO,
       MINUTE_DM,
       MINUTE_VS,
       SWIPECARD_EMP,
       SWIPECARD_STAFF)

      SELECT SEQ_AT_TIME_TIMESHEET_MACHINET.NEXTVAL,
             EMPLOYEE_ID,
             ORG_ID,
             TITLE_ID,
             STAFF_RANK_ID,
             WORKINGDAY,
             SHIFT_CODE,
             LEAVE_CODE,
             LATE,
             COMEBACKOUT,
             WORKDAY_OT,
             WORKDAY_NIGHT,
             TYPE_DAY,
             SYSDATE,
             UPPER(P_USERNAME),
             UPPER(P_USERNAME),
             SYSDATE,
             UPPER(P_USERNAME),
             UPPER(P_USERNAME),
             WORKINGHOUR,
             VALIN1,
             VALIN2,
             VALIN3,
             VALIN4,
             AW.SHIFT_ID,--
             --AW.MANUAL_ID,CHECK NULL 
             CASE WHEN AW.LEAVE_ID > 0 AND AW.LEAVE_ID IS NOT NULL THEN AW.LEAVE_ID  ELSE (CASE WHEN AW.WORKINGHOUR >= ATS.MINHOURS THEN ATS.MANUAL_ID ELSE AW.MANUAL_ID END) END MANUAL_ID, --HONGDX S?A SPINDEX 08/09/2017
             LEAVE_ID,
             AW.WORKINGHOUR_SHIFT,
             AW.NUMBER_SWIPE,
             AW.IS_HOLIDAY,
             AW.IS_FULLDAY,
             AW.SHIFT_MANUAL_ID,--
             AW.IS_NOON,
             AW.SHIFT_HOURS_START,
             AW.SHIFT_HOURS_STOP,
             AW.BREAKS_FORM,
             AW.BREAKS_TO,
             AW.MINUTE_DM,
             AW.MINUTE_VS,
             AW.SWIPECARD_EMP,
             AW.SWIPECARD_STAFF
        FROM AT_TIME_TIMESHEET_MACHINE_TEMP AW
         LEFT JOIN AT_SHIFT ATS ON AW.SHIFT_ID = ATS.ID; --HongDX S?a SpinDEX 08/09/2017;

  UPDATE AT_TIME_TIMESHEET_MACHINET WSIGN
       SET WSIGN.LATE = CASE
                              WHEN WSIGN.VALIN1 IS NOT NULL AND
                                   WSIGN.SHIFT_HOURS_START IS NOT NULL AND (WSIGN.VALIN1 > WSIGN.SHIFT_HOURS_START) THEN
                                ROUND((WSIGN.VALIN1 - WSIGN.SHIFT_HOURS_START)*60*24,0)
                                 ELSE
                                  NULL
                             END,
                             WSIGN.COMEBACKOUT = CASE
                              WHEN WSIGN.VALIN4 IS NOT NULL AND
                                   WSIGN.SHIFT_HOURS_STOP IS NOT NULL AND (WSIGN.VALIN4 < WSIGN.SHIFT_HOURS_STOP) THEN
                                ROUND((WSIGN.SHIFT_HOURS_STOP - WSIGN.VALIN4)*60*24,0)
                                 ELSE
                                  NULL
                             END;
  
  --Tinh so phut di muon ve som
   UPDATE AT_TIME_TIMESHEET_MACHINET WSIGN
       SET WSIGN.LATE = NVL(WSIGN.LATE,0) - NVL((SELECT SUM(LATE.MINUTE) FROM AT_LATE_COMBACKOUT LATE
                                WHERE LATE.TYPE_DSVM = 168
                                  AND WSIGN.EMPLOYEE_ID =  LATE.EMPLOYEE_ID AND WSIGN.WORKINGDAY =LATE.WORKINGDAY
                                GROUP BY LATE.EMPLOYEE_ID, LATE.WORKINGDAY),0)
           
           ,WSIGN.COMEBACKOUT = NVL(WSIGN.COMEBACKOUT,0) - NVL((SELECT SUM(LATE.MINUTE) FROM AT_LATE_COMBACKOUT LATE
                                WHERE LATE.TYPE_DSVM = 167
                                  AND WSIGN.EMPLOYEE_ID =  LATE.EMPLOYEE_ID AND WSIGN.WORKINGDAY =LATE.WORKINGDAY
                                GROUP BY LATE.EMPLOYEE_ID, LATE.WORKINGDAY),0);
   
    UPDATE AT_TIME_TIMESHEET_MACHINET WSIGN
       SET WSIGN.LATE = NULL WHERE WSIGN.LATE <= 0;
       
    UPDATE AT_TIME_TIMESHEET_MACHINET WSIGN
       SET WSIGN.COMEBACKOUT = NULL WHERE WSIGN.COMEBACKOUT <= 0;                             

    DELETE FROM AT_TIME_TIMESHEET_DAILY D
     WHERE D.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP O)
       AND D.WORKINGDAY >= PV_FROMDATE
       AND D.WORKINGDAY <= PV_ENDDATE;

    DELETE FROM AT_TIME_TIMESHEET_ORIGIN D
     WHERE D.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP O)
       AND D.WORKINGDAY >= PV_FROMDATE
       AND D.WORKINGDAY <= PV_ENDDATE;

    INSERT INTO AT_TIME_TIMESHEET_DAILY T
      (T.ID,
       T.EMPLOYEE_ID,
       T.ORG_ID,
       T.TITLE_ID,
       T.WORKINGDAY,
       T.SHIFT_CODE,
       T.WORKINGHOUR,
       T.WORKINGHOUR_SHIFT,
       T.NUMBER_SWIPE,
       T.SHIFT_ID,
       T.LEAVE_CODE,
       T.MANUAL_ID,
       T.LEAVE_ID,
       T.LATE,
       T.COMEBACKOUT,
       T.VALIN1,
       T.VALIN2,
       T.VALIN3,
       T.VALIN4,
       T.CREATED_DATE,
       T.CREATED_BY)
      SELECT SEQ_AT_TIME_TIMESHEET_DAILY.NEXTVAL,
             W.EMPLOYEE_ID,
             W.ORG_ID,
             W.TITLE_ID,
             W.WORKINGDAY,
             W.SHIFT_CODE,
             W.WORKINGHOUR,
             W.WORKINGHOUR_SHIFT,
             W.NUMBER_SWIPE,
             W.SHIFT_ID,
             W.LEAVE_CODE,
             CASE WHEN W.LEAVE_ID > 0 AND W.LEAVE_ID IS NOT NULL THEN W.LEAVE_ID  ELSE (CASE WHEN W.WORKINGHOUR >= ATS.MINHOURS THEN ATS.MANUAL_ID ELSE W.MANUAL_ID END) END MANUAL_ID, --HONGDX S?A SPINDEX 08/09/2017
             --W.MANUAL_ID, --HongDX S?a SpinDEX 08/09/2017
             W.LEAVE_ID,
             W.LATE,
             W.COMEBACKOUT,
             W.VALIN1,
             W.VALIN2,
             W.VALIN3,
             W.VALIN4,
             SYSDATE,
             UPPER(P_USERNAME)
        FROM AT_TIME_TIMESHEET_MACHINE_TEMP W
        LEFT JOIN AT_SHIFT ATS ON W.SHIFT_ID = ATS.ID; --HongDX S?a SpinDEX 08/09/2017

    INSERT INTO AT_TIME_TIMESHEET_ORIGIN T
      (T.ID,
       T.EMPLOYEE_ID,
       T.ORG_ID,
       T.TITLE_ID,
       T.WORKINGDAY,
       T.SHIFT_CODE,
       T.WORKINGHOUR,
       T.WORKINGHOUR_SHIFT,
       T.NUMBER_SWIPE,
       T.SHIFT_ID,
       T.LEAVE_CODE,
       T.MANUAL_ID,
       T.LEAVE_ID,
       T.LATE,
       T.COMEBACKOUT,
       T.VALIN1,
       T.VALIN2,
       T.VALIN3,
       T.VALIN4,
       T.CREATED_DATE,
       T.CREATED_BY)
      SELECT SEQ_AT_TIME_TIMESHEET_ORIGIN.NEXTVAL,
             W.EMPLOYEE_ID,
             W.ORG_ID,
             W.TITLE_ID,
             W.WORKINGDAY,
             W.SHIFT_CODE,
             W.WORKINGHOUR,
             W.WORKINGHOUR_SHIFT,
             W.NUMBER_SWIPE,
             W.SHIFT_ID,
             W.LEAVE_CODE,
             W.MANUAL_ID,
             W.LEAVE_ID,
             W.LATE,
             W.COMEBACKOUT,
             W.VALIN1,
             W.VALIN2,
             W.VALIN3,
             W.VALIN4,
             SYSDATE,
             UPPER(P_USERNAME)
        FROM AT_TIME_TIMESHEET_MACHINE_TEMP W;

    --DELETE AT_CHOSEN_ORG E WHERE E.REQUEST_ID = PV_REQUEST_ID;
    --DELETE AT_CHOSEN_EMP E WHERE E.REQUEST_ID = PV_REQUEST_ID;
    --DELETE AT_SWIPE_DATA_TEMP E WHERE E.REQUEST_ID = PV_REQUEST_ID;
    --DELETE AT_CAL_INOUT_TEMP E WHERE E.REQUEST_ID = PV_REQUEST_ID;
    --DELETE AT_TIME_TIMESHEET_MACHINE_TEMP E WHERE E.REQUEST_ID = PV_REQUEST_ID;

  END;
  
  PROCEDURE CAL_TIMETIMESHEET_OT(P_USERNAME   NVARCHAR2,
                                 P_ORG_ID     IN NUMBER,
                                 P_PERIOD_ID  IN NUMBER,
                                 P_ISDISSOLVE IN NUMBER) IS
    PV_FROMDATE    DATE;
    PV_ENDDATE     DATE;
    PV_MAX_PAYOT   NUMBER;
    PV_LEVEL_STAFF NUMBER;
    PV_HOUR_CAL_OT NUMBER;
    PV_REQUEST_ID  NUMBER;
    PV_MINUS_ALLOW NUMBER := 50;
  BEGIN
  
    PV_REQUEST_ID := SEQ_AT_REQUEST.NEXTVAL;
  
    -- TONG HOP DU LIEU TU DANG KY LAM THEM VS KHAI BAO LAM THEM RA BANG LAM THEM TONG HOP
    SELECT P.START_DATE, P.END_DATE
      INTO PV_FROMDATE, PV_ENDDATE
      FROM AT_PERIOD P
     WHERE P.ID = P_PERIOD_ID;
  
    -- Insert org can tinh toan
    INSERT INTO AT_CHOSEN_ORG E
      (SELECT ORG_ID, UPPER(P_USERNAME), PV_REQUEST_ID
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME),
                                    P_ORG_ID,
                                    P_ISDISSOLVE)) O
        WHERE EXISTS (SELECT 1
                 FROM AT_ORG_PERIOD OP
                WHERE OP.PERIOD_ID = P_PERIOD_ID
                  AND OP.ORG_ID = O.ORG_ID
                  AND OP.STATUSCOLEX = 1));
  
    -- insert emp can tinh toan
    INSERT INTO AT_CHOSEN_EMP E
      (EMPLOYEE_ID,
       ITIME_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       STAFF_RANK_LEVEL,
       USERNAME,
       REQUEST_ID)
      (SELECT T.ID,
              T.ITIME_ID,
              W.ORG_ID,
              W.TITLE_ID,
              W.STAFF_RANK_ID,
              W.LEVEL_STAFF,
              UPPER(P_USERNAME),
              PV_REQUEST_ID
         FROM HU_EMPLOYEE T
        INNER JOIN (SELECT E.EMPLOYEE_ID,
                          E.TITLE_ID,
                          E.ORG_ID,
                          E.STAFF_RANK_ID,
                          E.IS_3B,
                          S.LEVEL_STAFF,
                          ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                     FROM HU_WORKING E
                     LEFT JOIN HU_STAFF_RANK S
                       ON E.STAFF_RANK_ID = S.ID
                    WHERE E.EFFECT_DATE <= PV_ENDDATE
                      AND E.STATUS_ID = 447
                      AND E.IS_3B = 0) W
           ON T.ID = W.EMPLOYEE_ID
          AND W.ROW_NUMBER = 1
        INNER JOIN (SELECT ORG_ID FROM AT_CHOSEN_ORG O) O
           ON O.ORG_ID = W.ORG_ID
        WHERE (NVL(T.WORK_STATUS, 0) <> 257 OR
              (T.WORK_STATUS = 257 AND T.TER_LAST_DATE >= PV_FROMDATE)));
  
    INSERT INTO AT_CHOSEN_EMP_CLEAR
      (EMPLOYEE_ID, REQUEST_ID)
      (SELECT EMPLOYEE_ID, PV_REQUEST_ID
         FROM (SELECT A.*,
                      ROW_NUMBER() OVER(PARTITION BY A.EMPLOYEE_ID ORDER BY A.EFFECT_DATE DESC, A.ID DESC) AS ROW_NUMBER
                 FROM HU_WORKING A
                WHERE A.STATUS_ID = 447
                  AND A.EFFECT_DATE <= PV_ENDDATE
                  AND A.IS_3B = 0) C
        INNER JOIN HU_EMPLOYEE EE
           ON C.EMPLOYEE_ID = EE.ID
          AND C.ROW_NUMBER = 1
        WHERE (NVL(EE.WORK_STATUS, 0) <> 257 OR
              (EE.WORK_STATUS = 257 AND EE.TER_LAST_DATE >= PV_FROMDATE)));
  
    --1. TONG HOP GIO LAM THEM KHI DANG KY LAM THEM  
  
    SELECT S.HOUR_MAX_OT, S.LEVEL_STAFF, S.HOUR_CAL_OT
      INTO PV_MAX_PAYOT, PV_LEVEL_STAFF, PV_HOUR_CAL_OT
      FROM (SELECT T.HOUR_MAX_OT, K.LEVEL_STAFF, T.HOUR_CAL_OT
              FROM AT_LIST_PARAM_SYSTEM T
              LEFT JOIN HU_STAFF_RANK K
                ON T.RANK_PAY_OT = K.ID
             WHERE T.ACTFLG = 'A'
               AND T.EFFECT_DATE_FROM <= PV_ENDDATE
             ORDER BY ROW_NUMBER() OVER(ORDER BY T.EFFECT_DATE_FROM DESC)) S
     WHERE ROWNUM = 1;
  
    -- DELETE AT_REGISTER_OT_TEMP;
    INSERT INTO AT_REGISTER_OT_TEMP
      (ID,
       EMPLOYEE_ID,
       WORKINGDAY,
       FROM_HOUR,
       TO_HOUR,
       BREAK_HOUR,
       NOTE,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       TYPE_OT,
       HOUR,
       HS_OT,
       TYPE_INPUT,
       IS_NB,
       WORKING_ID,
       WORKING_START,
       WORKING_END,
       VAL_IN,
       VAL_OUT)
      WITH CTE_WORKING AS
       (SELECT T.ORG_ID,
               T.TITLE_ID,
               T.EMPLOYEE_ID,
               T.ID,
               T.START_DATE,
               T.SAL_BASIC,
               T.STAFF_RANK_ID,
               T.COST_SUPPORT,
               T.PERCENT_SALARY,
               NVL(LAG(T.START_DATE - 1)
                   OVER(PARTITION BY T.EMPLOYEE_ID ORDER BY T.START_DATE DESC,
                        T.ID DESC),
                   PV_ENDDATE) END_DATE
          FROM (SELECT *
                  FROM (SELECT W.ORG_ID,
                               W.EMPLOYEE_ID,
                               W.ID,
                               W.TITLE_ID,
                               W.STAFF_RANK_ID,
                               W.EFFECT_DATE START_DATE,
                               NVL(W.SAL_BASIC, 0) * NVL(W.PERCENT_SALARY, 0) / 100 SAL_BASIC,
                               NVL(W.COST_SUPPORT, 0) *
                               NVL(W.PERCENT_SALARY, 0) / 100 COST_SUPPORT,
                               NVL(W.PERCENT_SALARY, 0) PERCENT_SALARY,
                               ROW_NUMBER() OVER(PARTITION BY W.EMPLOYEE_ID ORDER BY W.EFFECT_DATE DESC, W.ID DESC) RN
                          FROM HU_WORKING W
                         WHERE W.STATUS_ID = 447
                           AND W.IS_3B = 0
                           AND W.EFFECT_DATE <= PV_FROMDATE)
                 WHERE RN = 1
                UNION ALL
                SELECT W.ORG_ID,
                       W.EMPLOYEE_ID,
                       W.ID,
                       W.TITLE_ID,
                       W.STAFF_RANK_ID,
                       W.EFFECT_DATE,
                       NVL(W.SAL_BASIC, 0) * NVL(W.PERCENT_SALARY, 0) / 100 SAL_BASIC,
                       NVL(W.COST_SUPPORT, 0) * NVL(W.PERCENT_SALARY, 0) / 100 COST_SUPPORT,
                       NVL(W.PERCENT_SALARY, 0) PERCENT_SALARY,
                       ROW_NUMBER() OVER(PARTITION BY W.EMPLOYEE_ID ORDER BY W.EFFECT_DATE DESC, W.ID DESC) RN
                  FROM HU_WORKING W
                 WHERE W.STATUS_ID = 447
                   AND W.IS_3B = 0
                   AND W.IS_WAGE = -1
                   AND W.EFFECT_DATE > PV_FROMDATE
                   AND W.EFFECT_DATE <= PV_ENDDATE) T)
      SELECT SEQ_AT_REGISTER_OT_TEMP.NEXTVAL,
             EMPLOYEE_ID,
             WORKINGDAY,
             FROM_HOUR,
             TO_HOUR,
             BREAK_HOUR,
             NOTE,
             CREATED_DATE,
             CREATED_BY,
             CREATED_LOG,
             MODIFIED_DATE,
             MODIFIED_BY,
             MODIFIED_LOG,
             TYPE_OT,
             ROUND(PKG_ATTENDANCE_FUNTION.WORKINGHOUR_OT(C.FROM_HOUR,
                                                         C.TO_HOUR,
                                                         C.VAL_MIN,
                                                         C.VAL_MAX),
                   2),
             HS_OT,
             TYPE_INPUT,
             IS_NB,
             WORKING_ID,
             CASE
               WHEN WORKING_START < PV_FROMDATE THEN
                PV_FROMDATE
               ELSE
                WORKING_START
             END,
             WORKING_END,
             VAL_MIN,
             VAL_MAX
      
        FROM (SELECT OT.EMPLOYEE_ID,
                     WORKINGDAY,
                     FROM_HOUR,
                     CASE
                       WHEN TO_CHAR(OT.FROM_HOUR, 'yyyymmdd') <>
                            TO_CHAR(OT.TO_HOUR, 'yyyymmdd') THEN
                        TO_HOUR
                       WHEN OT.FROM_HOUR > OT.TO_HOUR THEN
                        TO_HOUR + 1
                       ELSE
                        TO_HOUR
                     END TO_HOUR,
                     BREAK_HOUR,
                     NOTE,
                     CREATED_DATE,
                     CREATED_BY,
                     CREATED_LOG,
                     MODIFIED_DATE,
                     MODIFIED_BY,
                     MODIFIED_LOG,
                     TYPE_OT,
                     HOUR,
                     HS_OT,
                     TYPE_INPUT,
                     CASE
                       WHEN NVL(OT.TYPE_INPUT, 0) = -1 THEN
                        (SELECT INOUT.VALTIME
                           FROM (SELECT INOUT.*,
                                        ROW_NUMBER() OVER(PARTITION BY INOUT.ITIME_ID, INOUT.WORKINGDAY ORDER BY INOUT.VALTIME) AS ROW_NUMBER
                                   FROM AT_SWIPE_DATA INOUT) INOUT
                                     -- Xử lý trùng ITIME_ID 
                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = EE.ORG_ID  
						   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND INOUT.TERMINAL_ID  = at2.ID 
                                    -- end Xử lý trùng ITIME_ID 
                          WHERE INOUT.WORKINGDAY IS NOT NULL
                            AND INOUT.ITIME_ID = EE.ITIME_ID
                            AND INOUT.WORKINGDAY = OT.WORKINGDAY
                            AND INOUT.ROW_NUMBER = 1)
                       ELSE
                        FROM_HOUR
                     END VAL_MIN,
                     CASE
                       WHEN NVL(OT.TYPE_INPUT, 0) = -1 THEN
                        CASE
                          WHEN TO_CHAR(OT.FROM_HOUR, 'yyyymmdd') <>
                               TO_CHAR(OT.TO_HOUR, 'yyyymmdd') THEN
                           (SELECT MAX(E.VALTIME)
                              FROM AT_SWIPE_DATA E
                               -- Xử lý trùng ITIME_ID 
                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = EE.ORG_ID  
						   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND E.TERMINAL_ID  = at2.ID 
                                    -- end Xử lý trùng ITIME_ID 
                             WHERE E.WORKINGDAY IS NOT NULL
                               AND E.ITIME_ID = EE.ITIME_ID
                               AND E.WORKINGDAY <= OT.WORKINGDAY + 1
                               AND E.WORKINGDAY >= OT.WORKINGDAY
                               AND E.VALTIME <=
                                   (OT.TO_HOUR + PV_MINUS_ALLOW / 60 / 24)
                               AND E.VALTIME >
                                   NVL((SELECT INOUT.VALTIME
                                         FROM (SELECT INOUT.*,
                                                      ROW_NUMBER() OVER(PARTITION BY INOUT.ITIME_ID, INOUT.WORKINGDAY ORDER BY INOUT.VALTIME) AS ROW_NUMBER
                                                 FROM AT_SWIPE_DATA INOUT) INOUT
                                                 -- Xử lý trùng ITIME_ID 
			                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = EE.ORG_ID  
									   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND INOUT.TERMINAL_ID  = at2.ID 
			                                    -- end Xử lý trùng ITIME_ID 
                                        WHERE INOUT.WORKINGDAY IS NOT NULL
                                          AND INOUT.ITIME_ID = EE.ITIME_ID
                                          AND INOUT.WORKINGDAY = OT.WORKINGDAY
                                          AND INOUT.ROW_NUMBER = 1),
                                       '1/jan/1900'))
                          WHEN OT.FROM_HOUR > OT.TO_HOUR THEN
                           (SELECT MAX(E.VALTIME)
                              FROM AT_SWIPE_DATA E
                               -- Xử lý trùng ITIME_ID 
                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = EE.ORG_ID  
						   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND E.TERMINAL_ID  = at2.ID 
                                    -- end Xử lý trùng ITIME_ID 
                             WHERE E.WORKINGDAY IS NOT NULL
                               AND E.ITIME_ID = EE.ITIME_ID
                               AND E.WORKINGDAY <= OT.WORKINGDAY + 1
                               AND E.WORKINGDAY >= OT.WORKINGDAY
                               AND E.VALTIME <=
                                   (OT.TO_HOUR + 1 + PV_MINUS_ALLOW / 60 / 24)
                               AND E.VALTIME >
                                   NVL((SELECT INOUT.VALTIME
                                         FROM (SELECT INOUT.*,
                                                      ROW_NUMBER() OVER(PARTITION BY INOUT.ITIME_ID, INOUT.WORKINGDAY ORDER BY INOUT.VALTIME) AS ROW_NUMBER
                                                 FROM AT_SWIPE_DATA INOUT) INOUT
                                                  -- Xử lý trùng ITIME_ID 
			                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = EE.ORG_ID  
									   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND INOUT.TERMINAL_ID  = at2.ID 
			                                    -- end Xử lý trùng ITIME_ID 
                                        WHERE INOUT.WORKINGDAY IS NOT NULL
                                          AND INOUT.ITIME_ID = EE.ITIME_ID
                                          AND INOUT.WORKINGDAY = OT.WORKINGDAY
                                          AND INOUT.ROW_NUMBER = 1),
                                       '1/jan/1900'))
                          ELSE
                           (SELECT MAX(E.VALTIME)
                              FROM (SELECT INOUT.*,
                                           ROW_NUMBER() OVER(PARTITION BY INOUT.ITIME_ID, INOUT.WORKINGDAY ORDER BY INOUT.VALTIME) AS ROW_NUMBER
                                      FROM AT_SWIPE_DATA INOUT) E
                                       -- Xử lý trùng ITIME_ID 
			                                  	LEFT JOIN HU_ORGANIZATION ho ON ho.id = EE.ORG_ID  
									   			JOIN AT_TERMINALS at2 ON ho.HIERARCHICAL_PATH LIKE '%'|| at2.ORG_ID ||'%'  AND E.TERMINAL_ID  = at2.ID 
			                                    -- end Xử lý trùng ITIME_ID 
                             WHERE E.WORKINGDAY IS NOT NULL
                               AND E.ITIME_ID = EE.ITIME_ID
                               AND E.WORKINGDAY = OT.WORKINGDAY
                               AND E.ROW_NUMBER > 1)
                        END
                       ELSE
                        CASE
                          WHEN TO_CHAR(OT.FROM_HOUR, 'yyyymmdd') <>
                               TO_CHAR(OT.TO_HOUR, 'yyyymmdd') THEN
                           TO_HOUR
                          WHEN OT.FROM_HOUR > OT.TO_HOUR THEN
                           TO_HOUR + 1
                          ELSE
                           TO_HOUR
                        END
                     END VAL_MAX,
                     OT.IS_NB,
                     W.ID WORKING_ID,
                     W.START_DATE WORKING_START,
                     W.END_DATE WORKING_END
                FROM AT_REGISTER_OT OT
               INNER JOIN AT_CHOSEN_EMP EE
                  ON OT.EMPLOYEE_ID = EE.EMPLOYEE_ID
               INNER JOIN CTE_WORKING W
                  ON OT.EMPLOYEE_ID = W.EMPLOYEE_ID
                 AND W.START_DATE <= OT.WORKINGDAY
                 AND W.END_DATE >= OT.WORKINGDAY
               WHERE OT.WORKINGDAY >= PV_FROMDATE
                 AND OT.WORKINGDAY <= PV_ENDDATE) C;
  
    UPDATE AT_REGISTER_OT_TEMP T
       SET T.HOUR = CASE
                      WHEN NVL(T.HOUR, 0) >= NVL(PV_HOUR_CAL_OT, 0) THEN
                       NVL(T.HOUR, 0)
                      ELSE
                       0
                    END;
  
    -- KHOI TAO DDU LIEU   
    INSERT INTO AT_TIME_TIMESHEET_OT_TEMP
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       PERIOD_ID,
       FROM_DATE,
       END_DATE,
       D1,
       D2,
       D3,
       D4,
       D5,
       D6,
       D7,
       D8,
       D9,
       D10,
       D11,
       D12,
       D13,
       D14,
       D15,
       D16,
       D17,
       D18,
       D19,
       D20,
       D21,
       D22,
       D23,
       D24,
       D25,
       D26,
       D27,
       D28,
       D29,
       D30,
       D31,
       D1_1,
       D1_15,
       D1_2,
       D1_27,
       D1_3,
       D1_39,
       D2_1,
       D2_15,
       D2_2,
       D2_27,
       D2_3,
       D2_39,
       D3_1,
       D3_15,
       D3_2,
       D3_27,
       D3_3,
       D3_39,
       D4_1,
       D4_15,
       D4_2,
       D4_27,
       D4_3,
       D4_39,
       D5_1,
       D5_15,
       D5_2,
       D5_27,
       D5_3,
       D5_39,
       D6_1,
       D6_15,
       D6_2,
       D6_27,
       D6_3,
       D6_39,
       D7_1,
       D7_15,
       D7_2,
       D7_27,
       D7_3,
       D7_39,
       D8_1,
       D8_15,
       D8_2,
       D8_27,
       D8_3,
       D8_39,
       D9_1,
       D9_15,
       D9_2,
       D9_27,
       D9_3,
       D9_39,
       D10_1,
       D10_15,
       D10_2,
       D10_27,
       D10_3,
       D10_39,
       D11_1,
       D11_15,
       D11_2,
       D11_27,
       D11_3,
       D11_39,
       D12_1,
       D12_15,
       D12_2,
       D12_27,
       D12_3,
       D12_39,
       D13_1,
       D13_15,
       D13_2,
       D13_27,
       D13_3,
       D13_39,
       D14_1,
       D14_15,
       D14_2,
       D14_27,
       D14_3,
       D14_39,
       D15_1,
       D15_15,
       D15_2,
       D15_27,
       D15_3,
       D15_39,
       D16_1,
       D16_15,
       D16_2,
       D16_27,
       D16_3,
       D16_39,
       D17_1,
       D17_15,
       D17_2,
       D17_27,
       D17_3,
       D17_39,
       D18_1,
       D18_15,
       D18_2,
       D18_27,
       D18_3,
       D18_39,
       D19_1,
       D19_15,
       D19_2,
       D19_27,
       D19_3,
       D19_39,
       D20_1,
       D20_15,
       D20_2,
       D20_27,
       D20_3,
       D20_39,
       D21_1,
       D21_15,
       D21_2,
       D21_27,
       D21_3,
       D21_39,
       D22_1,
       D22_15,
       D22_2,
       D22_27,
       D22_3,
       D22_39,
       D23_1,
       D23_15,
       D23_2,
       D23_27,
       D23_3,
       D23_39,
       D24_1,
       D24_15,
       D24_2,
       D24_27,
       D24_3,
       D24_39,
       D25_1,
       D25_15,
       D25_2,
       D25_27,
       D25_3,
       D25_39,
       D26_1,
       D26_15,
       D26_2,
       D26_27,
       D26_3,
       D26_39,
       D27_1,
       D27_15,
       D27_2,
       D27_27,
       D27_3,
       D27_39,
       D28_1,
       D28_15,
       D28_2,
       D28_27,
       D28_3,
       D28_39,
       D29_1,
       D29_15,
       D29_2,
       D29_27,
       D29_3,
       D29_39,
       D30_1,
       D30_15,
       D30_2,
       D30_27,
       D30_3,
       D30_39,
       D31_1,
       D31_15,
       D31_2,
       D31_27,
       D31_3,
       D31_39,
       CREATED_DATE,
       CREATED_BY,
       REQUEST_ID,
       TOTAL_FACTOR1,
       TOTAL_FACTOR1_5,
       TOTAL_FACTOR2,
       TOTAL_FACTOR2_7,
       TOTAL_FACTOR3,
       TOTAL_FACTOR3_9,
       TOTAL_FACTOR_CONVERT,
       NUMBER_FACTOR_PAY,
       NUMBER_FACTOR_CP)
      SELECT SEQ_AT_TIME_OT_TEMP.NEXTVAL,
             A.EMPLOYEE_ID,
             A.ORG_ID,
             A.TITLE_ID,
             A.STAFF_RANK_ID,
             P_PERIOD_ID,
             PV_FROMDATE,
             PV_ENDDATE,
             NVL(A.D1_1, 0) + NVL(A.D1_15, 0) + NVL(A.D1_2, 0) +
             NVL(A.D1_27, 0) + NVL(A.D1_3, 0) + NVL(A.D1_39, 0) D1,
             NVL(A.D2_1, 0) + NVL(A.D2_15, 0) + NVL(A.D2_2, 0) +
             NVL(A.D2_27, 0) + NVL(A.D2_3, 0) + NVL(A.D2_39, 0) D2,
             NVL(A.D3_1, 0) + NVL(A.D3_15, 0) + NVL(A.D3_2, 0) +
             NVL(A.D3_27, 0) + NVL(A.D3_3, 0) + NVL(A.D3_39, 0) D3,
             NVL(A.D4_1, 0) + NVL(A.D4_15, 0) + NVL(A.D4_2, 0) +
             NVL(A.D4_27, 0) + NVL(A.D4_3, 0) + NVL(A.D4_39, 0) D4,
             NVL(A.D5_1, 0) + NVL(A.D5_15, 0) + NVL(A.D5_2, 0) +
             NVL(A.D5_27, 0) + NVL(A.D5_3, 0) + NVL(A.D5_39, 0) D5,
             NVL(A.D6_1, 0) + NVL(A.D6_15, 0) + NVL(A.D6_2, 0) +
             NVL(A.D6_27, 0) + NVL(A.D6_3, 0) + NVL(A.D6_39, 0) D6,
             NVL(A.D7_1, 0) + NVL(A.D7_15, 0) + NVL(A.D7_2, 0) +
             NVL(A.D7_27, 0) + NVL(A.D7_3, 0) + NVL(A.D7_39, 0) D7,
             NVL(A.D8_1, 0) + NVL(A.D8_15, 0) + NVL(A.D8_2, 0) +
             NVL(A.D8_27, 0) + NVL(A.D8_3, 0) + NVL(A.D8_39, 0) D8,
             NVL(A.D9_1, 0) + NVL(A.D9_15, 0) + NVL(A.D9_2, 0) +
             NVL(A.D9_27, 0) + NVL(A.D9_3, 0) + NVL(A.D9_39, 0) D9,
             NVL(A.D10_1, 0) + NVL(A.D10_15, 0) + NVL(A.D10_2, 0) +
             NVL(A.D10_27, 0) + NVL(A.D10_3, 0) + NVL(A.D10_39, 0) D10,
             NVL(A.D11_1, 0) + NVL(A.D11_15, 0) + NVL(A.D11_2, 0) +
             NVL(A.D11_27, 0) + NVL(A.D11_3, 0) + NVL(A.D11_39, 0) D11,
             NVL(A.D12_1, 0) + NVL(A.D12_15, 0) + NVL(A.D12_2, 0) +
             NVL(A.D12_27, 0) + NVL(A.D12_3, 0) + NVL(A.D12_39, 0) D12,
             NVL(A.D13_1, 0) + NVL(A.D13_15, 0) + NVL(A.D13_2, 0) +
             NVL(A.D13_27, 0) + NVL(A.D13_3, 0) + NVL(A.D13_39, 0) D13,
             NVL(A.D14_1, 0) + NVL(A.D14_15, 0) + NVL(A.D14_2, 0) +
             NVL(A.D14_27, 0) + NVL(A.D14_3, 0) + NVL(A.D14_39, 0) D14,
             NVL(A.D15_1, 0) + NVL(A.D15_15, 0) + NVL(A.D15_2, 0) +
             NVL(A.D15_27, 0) + NVL(A.D15_3, 0) + NVL(A.D15_39, 0) D15,
             NVL(A.D16_1, 0) + NVL(A.D16_15, 0) + NVL(A.D16_2, 0) +
             NVL(A.D16_27, 0) + NVL(A.D16_3, 0) + NVL(A.D16_39, 0) D16,
             NVL(A.D17_1, 0) + NVL(A.D17_15, 0) + NVL(A.D17_2, 0) +
             NVL(A.D17_27, 0) + NVL(A.D17_3, 0) + NVL(A.D17_39, 0) D17,
             NVL(A.D18_1, 0) + NVL(A.D18_15, 0) + NVL(A.D18_2, 0) +
             NVL(A.D18_27, 0) + NVL(A.D18_3, 0) + NVL(A.D18_39, 0) D18,
             NVL(A.D19_1, 0) + NVL(A.D19_15, 0) + NVL(A.D19_2, 0) +
             NVL(A.D19_27, 0) + NVL(A.D19_3, 0) + NVL(A.D19_39, 0) D19,
             NVL(A.D20_1, 0) + NVL(A.D20_15, 0) + NVL(A.D20_2, 0) +
             NVL(A.D20_27, 0) + NVL(A.D20_3, 0) + NVL(A.D20_39, 0) D20,
             NVL(A.D21_1, 0) + NVL(A.D21_15, 0) + NVL(A.D21_2, 0) +
             NVL(A.D21_27, 0) + NVL(A.D21_3, 0) + NVL(A.D21_39, 0) D21,
             NVL(A.D22_1, 0) + NVL(A.D22_15, 0) + NVL(A.D22_2, 0) +
             NVL(A.D22_27, 0) + NVL(A.D22_3, 0) + NVL(A.D22_39, 0) D22,
             NVL(A.D23_1, 0) + NVL(A.D23_15, 0) + NVL(A.D23_2, 0) +
             NVL(A.D23_27, 0) + NVL(A.D23_3, 0) + NVL(A.D23_39, 0) D23,
             NVL(A.D24_1, 0) + NVL(A.D24_15, 0) + NVL(A.D24_2, 0) +
             NVL(A.D24_27, 0) + NVL(A.D24_3, 0) + NVL(A.D24_39, 0) D24,
             NVL(A.D25_1, 0) + NVL(A.D25_15, 0) + NVL(A.D25_2, 0) +
             NVL(A.D25_27, 0) + NVL(A.D25_3, 0) + NVL(A.D25_39, 0) D25,
             NVL(A.D26_1, 0) + NVL(A.D26_15, 0) + NVL(A.D26_2, 0) +
             NVL(A.D26_27, 0) + NVL(A.D26_3, 0) + NVL(A.D26_39, 0) D26,
             NVL(A.D27_1, 0) + NVL(A.D27_15, 0) + NVL(A.D27_2, 0) +
             NVL(A.D27_27, 0) + NVL(A.D27_3, 0) + NVL(A.D27_39, 0) D27,
             NVL(A.D28_1, 0) + NVL(A.D28_15, 0) + NVL(A.D28_2, 0) +
             NVL(A.D28_27, 0) + NVL(A.D28_3, 0) + NVL(A.D28_39, 0) D28,
             NVL(A.D29_1, 0) + NVL(A.D29_15, 0) + NVL(A.D29_2, 0) +
             NVL(A.D29_27, 0) + NVL(A.D29_3, 0) + NVL(A.D29_39, 0) D29,
             NVL(A.D30_1, 0) + NVL(A.D30_15, 0) + NVL(A.D30_2, 0) +
             NVL(A.D30_27, 0) + NVL(A.D30_3, 0) + NVL(A.D30_39, 0) D30,
             NVL(A.D31_1, 0) + NVL(A.D31_15, 0) + NVL(A.D31_2, 0) +
             NVL(A.D31_27, 0) + NVL(A.D31_3, 0) + NVL(A.D31_39, 0) D31,
             A.D1_1,
             A.D1_15,
             A.D1_2,
             A.D1_27,
             A.D1_3,
             A.D1_39,
             A.D2_1,
             A.D2_15,
             A.D2_2,
             A.D2_27,
             A.D2_3,
             A.D2_39,
             A.D3_1,
             A.D3_15,
             A.D3_2,
             A.D3_27,
             A.D3_3,
             A.D3_39,
             A.D4_1,
             A.D4_15,
             A.D4_2,
             A.D4_27,
             A.D4_3,
             A.D4_39,
             A.D5_1,
             A.D5_15,
             A.D5_2,
             A.D5_27,
             A.D5_3,
             A.D5_39,
             A.D6_1,
             A.D6_15,
             A.D6_2,
             A.D6_27,
             A.D6_3,
             A.D6_39,
             A.D7_1,
             A.D7_15,
             A.D7_2,
             A.D7_27,
             A.D7_3,
             A.D7_39,
             A.D8_1,
             A.D8_15,
             A.D8_2,
             A.D8_27,
             A.D8_3,
             A.D8_39,
             A.D9_1,
             A.D9_15,
             A.D9_2,
             A.D9_27,
             A.D9_3,
             A.D9_39,
             A.D10_1,
             A.D10_15,
             A.D10_2,
             A.D10_27,
             A.D10_3,
             A.D10_39,
             A.D11_1,
             A.D11_15,
             A.D11_2,
             A.D11_27,
             A.D11_3,
             A.D11_39,
             A.D12_1,
             A.D12_15,
             A.D12_2,
             A.D12_27,
             A.D12_3,
             A.D12_39,
             A.D13_1,
             A.D13_15,
             A.D13_2,
             A.D13_27,
             A.D13_3,
             A.D13_39,
             A.D14_1,
             A.D14_15,
             A.D14_2,
             A.D14_27,
             A.D14_3,
             A.D14_39,
             A.D15_1,
             A.D15_15,
             A.D15_2,
             A.D15_27,
             A.D15_3,
             A.D15_39,
             A.D16_1,
             A.D16_15,
             A.D16_2,
             A.D16_27,
             A.D16_3,
             A.D16_39,
             A.D17_1,
             A.D17_15,
             A.D17_2,
             A.D17_27,
             A.D17_3,
             A.D17_39,
             A.D18_1,
             A.D18_15,
             A.D18_2,
             A.D18_27,
             A.D18_3,
             A.D18_39,
             A.D19_1,
             A.D19_15,
             A.D19_2,
             A.D19_27,
             A.D19_3,
             A.D19_39,
             A.D20_1,
             A.D20_15,
             A.D20_2,
             A.D20_27,
             A.D20_3,
             A.D20_39,
             A.D21_1,
             A.D21_15,
             A.D21_2,
             A.D21_27,
             A.D21_3,
             A.D21_39,
             A.D22_1,
             A.D22_15,
             A.D22_2,
             A.D22_27,
             A.D22_3,
             A.D22_39,
             A.D23_1,
             A.D23_15,
             A.D23_2,
             A.D23_27,
             A.D23_3,
             A.D23_39,
             A.D24_1,
             A.D24_15,
             A.D24_2,
             A.D24_27,
             A.D24_3,
             A.D24_39,
             A.D25_1,
             A.D25_15,
             A.D25_2,
             A.D25_27,
             A.D25_3,
             A.D25_39,
             A.D26_1,
             A.D26_15,
             A.D26_2,
             A.D26_27,
             A.D26_3,
             A.D26_39,
             A.D27_1,
             A.D27_15,
             A.D27_2,
             A.D27_27,
             A.D27_3,
             A.D27_39,
             A.D28_1,
             A.D28_15,
             A.D28_2,
             A.D28_27,
             A.D28_3,
             A.D28_39,
             A.D29_1,
             A.D29_15,
             A.D29_2,
             A.D29_27,
             A.D29_3,
             A.D29_39,
             A.D30_1,
             A.D30_15,
             A.D30_2,
             A.D30_27,
             A.D30_3,
             A.D30_39,
             A.D31_1,
             A.D31_15,
             A.D31_2,
             A.D31_27,
             A.D31_3,
             A.D31_39,
             TRUNC(SYSDATE),
             UPPER(P_USERNAME),
             PV_REQUEST_ID,
             CASE
               WHEN OT.FACTOR1 = 0 THEN
                NULL
               ELSE
                OT.FACTOR1
             END FACTOR1,
             CASE
               WHEN OT.FACTOR1_5 = 0 THEN
                NULL
               ELSE
                OT.FACTOR1_5
             END FACTOR1_5,
             CASE
               WHEN OT.FACTOR2 = 0 THEN
                NULL
               ELSE
                OT.FACTOR2
             END FACTOR2,
             CASE
               WHEN OT.FACTOR2_7 = 0 THEN
                NULL
               ELSE
                OT.FACTOR2_7
             END FACTOR2_7,
             CASE
               WHEN OT.FACTOR3 = 0 THEN
                NULL
               ELSE
                OT.FACTOR3
             END FACTOR3,
             CASE
               WHEN OT.FACTOR3_9 = 0 THEN
                NULL
               ELSE
                OT.FACTOR3_9
             END FACTOR3_9,
             CASE
               WHEN OT.TOTAL_FACTOR_CONVERT = 0 THEN
                NULL
               ELSE
                OT.TOTAL_FACTOR_CONVERT
             END TOTAL_FACTOR_CONVERT,
             CASE
               WHEN NVL(A.STAFF_RANK_LEVEL, 0) > PV_LEVEL_STAFF THEN
                CASE
                  WHEN NVL(OT.TOTAL_FACTOR_CONVERT, 0) <= PV_MAX_PAYOT THEN
                   NVL(OT.TOTAL_FACTOR_CONVERT, 0)
                  WHEN NVL(OT.TOTAL_FACTOR_CONVERT, 0) > PV_MAX_PAYOT THEN
                   PV_MAX_PAYOT
                END
             END,
             (NVL(OT.TOTAL_FACTOR_CONVERT, 0) -
             NVL(CASE
                    WHEN NVL(A.STAFF_RANK_LEVEL, 0) > PV_LEVEL_STAFF THEN
                     CASE
                       WHEN NVL(OT.TOTAL_FACTOR_CONVERT, 0) <= PV_MAX_PAYOT THEN
                        NVL(OT.TOTAL_FACTOR_CONVERT, 0)
                       WHEN NVL(OT.TOTAL_FACTOR_CONVERT, 0) > PV_MAX_PAYOT THEN
                        PV_MAX_PAYOT
                     END
                  END,
                  0)) + NVL(NB.TOTAL_FACTOR_CONVERT, 0)
        FROM (SELECT T.EMPLOYEE_ID,
                     EE.ORG_ID,
                     EE.TITLE_ID,
                     EE.STAFF_RANK_ID,
                     EE.STAFF_RANK_LEVEL,
                     TO_CHAR(T.WORKINGDAY, 'dd') || '_' || CASE
                       WHEN T.HS_OT = 4236 THEN -- 1
                        '1'
                       WHEN T.HS_OT = 4237 THEN -- 1.5
                        '15'
                       WHEN T.HS_OT = 4238 THEN -- 2
                        '2'
                       WHEN T.HS_OT = 4239 THEN -- 2.7
                        '27'
                       WHEN T.HS_OT = 4240 THEN -- 3
                        '3'
                       WHEN T.HS_OT = 4241 THEN -- 3.9
                        '39'
                     END AS DAY,
                     CASE
                       WHEN NVL(T.IS_NB, 0) = 0 THEN --
                        T.HOUR
                       ELSE
                        0
                     END HOUR
                FROM AT_REGISTER_OT_TEMP T
               INNER JOIN AT_CHOSEN_EMP EE
                  ON T.EMPLOYEE_ID = EE.EMPLOYEE_ID) T
      PIVOT(SUM(HOUR)
         FOR DAY IN('01_1' AS D1_1,
                    '01_15' AS D1_15,
                    '01_2' AS D1_2,
                    '01_27' AS D1_27,
                    '01_3' AS D1_3,
                    '01_39' AS D1_39,
                    '02_1' AS D2_1,
                    '02_15' AS D2_15,
                    '02_2' AS D2_2,
                    '02_27' AS D2_27,
                    '02_3' AS D2_3,
                    '02_39' AS D2_39,
                    '03_1' AS D3_1,
                    '03_15' AS D3_15,
                    '03_2' AS D3_2,
                    '03_27' AS D3_27,
                    '03_3' AS D3_3,
                    '03_39' AS D3_39,
                    '04_1' AS D4_1,
                    '04_15' AS D4_15,
                    '04_2' AS D4_2,
                    '04_27' AS D4_27,
                    '04_3' AS D4_3,
                    '04_39' AS D4_39,
                    '05_1' AS D5_1,
                    '05_15' AS D5_15,
                    '05_2' AS D5_2,
                    '05_27' AS D5_27,
                    '05_3' AS D5_3,
                    '05_39' AS D5_39,
                    '06_1' AS D6_1,
                    '06_15' AS D6_15,
                    '06_2' AS D6_2,
                    '06_27' AS D6_27,
                    '06_3' AS D6_3,
                    '06_39' AS D6_39,
                    '07_1' AS D7_1,
                    '07_15' AS D7_15,
                    '07_2' AS D7_2,
                    '07_27' AS D7_27,
                    '07_3' AS D7_3,
                    '07_39' AS D7_39,
                    '08_1' AS D8_1,
                    '08_15' AS D8_15,
                    '08_2' AS D8_2,
                    '08_27' AS D8_27,
                    '08_3' AS D8_3,
                    '08_39' AS D8_39,
                    '09_1' AS D9_1,
                    '09_15' AS D9_15,
                    '09_2' AS D9_2,
                    '09_27' AS D9_27,
                    '09_3' AS D9_3,
                    '09_39' AS D9_39,
                    '10_1' AS D10_1,
                    '10_15' AS D10_15,
                    '10_2' AS D10_2,
                    '10_27' AS D10_27,
                    '10_3' AS D10_3,
                    '10_39' AS D10_39,
                    '11_1' AS D11_1,
                    '11_15' AS D11_15,
                    '11_2' AS D11_2,
                    '11_27' AS D11_27,
                    '11_3' AS D11_3,
                    '11_39' AS D11_39,
                    '12_1' AS D12_1,
                    '12_15' AS D12_15,
                    '12_2' AS D12_2,
                    '12_27' AS D12_27,
                    '12_3' AS D12_3,
                    '12_39' AS D12_39,
                    '13_1' AS D13_1,
                    '13_15' AS D13_15,
                    '13_2' AS D13_2,
                    '13_27' AS D13_27,
                    '13_3' AS D13_3,
                    '13_39' AS D13_39,
                    '14_1' AS D14_1,
                    '14_15' AS D14_15,
                    '14_2' AS D14_2,
                    '14_27' AS D14_27,
                    '14_3' AS D14_3,
                    '14_39' AS D14_39,
                    '15_1' AS D15_1,
                    '15_15' AS D15_15,
                    '15_2' AS D15_2,
                    '15_27' AS D15_27,
                    '15_3' AS D15_3,
                    '15_39' AS D15_39,
                    '16_1' AS D16_1,
                    '16_15' AS D16_15,
                    '16_2' AS D16_2,
                    '16_27' AS D16_27,
                    '16_3' AS D16_3,
                    '16_39' AS D16_39,
                    '17_1' AS D17_1,
                    '17_15' AS D17_15,
                    '17_2' AS D17_2,
                    '17_27' AS D17_27,
                    '17_3' AS D17_3,
                    '17_39' AS D17_39,
                    '18_1' AS D18_1,
                    '18_15' AS D18_15,
                    '18_2' AS D18_2,
                    '18_27' AS D18_27,
                    '18_3' AS D18_3,
                    '18_39' AS D18_39,
                    '19_1' AS D19_1,
                    '19_15' AS D19_15,
                    '19_2' AS D19_2,
                    '19_27' AS D19_27,
                    '19_3' AS D19_3,
                    '19_39' AS D19_39,
                    '20_1' AS D20_1,
                    '20_15' AS D20_15,
                    '20_2' AS D20_2,
                    '20_27' AS D20_27,
                    '20_3' AS D20_3,
                    '20_39' AS D20_39,
                    '21_1' AS D21_1,
                    '21_15' AS D21_15,
                    '21_2' AS D21_2,
                    '21_27' AS D21_27,
                    '21_3' AS D21_3,
                    '21_39' AS D21_39,
                    '22_1' AS D22_1,
                    '22_15' AS D22_15,
                    '22_2' AS D22_2,
                    '22_27' AS D22_27,
                    '22_3' AS D22_3,
                    '22_39' AS D22_39,
                    '23_1' AS D23_1,
                    '23_15' AS D23_15,
                    '23_2' AS D23_2,
                    '23_27' AS D23_27,
                    '23_3' AS D23_3,
                    '23_39' AS D23_39,
                    '24_1' AS D24_1,
                    '24_15' AS D24_15,
                    '24_2' AS D24_2,
                    '24_27' AS D24_27,
                    '24_3' AS D24_3,
                    '24_39' AS D24_39,
                    '25_1' AS D25_1,
                    '25_15' AS D25_15,
                    '25_2' AS D25_2,
                    '25_27' AS D25_27,
                    '25_3' AS D25_3,
                    '25_39' AS D25_39,
                    '26_1' AS D26_1,
                    '26_15' AS D26_15,
                    '26_2' AS D26_2,
                    '26_27' AS D26_27,
                    '26_3' AS D26_3,
                    '26_39' AS D26_39,
                    '27_1' AS D27_1,
                    '27_15' AS D27_15,
                    '27_2' AS D27_2,
                    '27_27' AS D27_27,
                    '27_3' AS D27_3,
                    '27_39' AS D27_39,
                    '28_1' AS D28_1,
                    '28_15' AS D28_15,
                    '28_2' AS D28_2,
                    '28_27' AS D28_27,
                    '28_3' AS D28_3,
                    '28_39' AS D28_39,
                    '29_1' AS D29_1,
                    '29_15' AS D29_15,
                    '29_2' AS D29_2,
                    '29_27' AS D29_27,
                    '29_3' AS D29_3,
                    '29_39' AS D29_39,
                    '30_1' AS D30_1,
                    '30_15' AS D30_15,
                    '30_2' AS D30_2,
                    '30_27' AS D30_27,
                    '30_3' AS D30_3,
                    '30_39' AS D30_39,
                    '31_1' AS D31_1,
                    '31_15' AS D31_15,
                    '31_2' AS D31_2,
                    '31_27' AS D31_27,
                    '31_3' AS D31_3,
                    '31_39' AS D31_39)) A
        LEFT JOIN (SELECT OT.EMPLOYEE_ID,
                          NVL(OT.FACTOR1, 0) FACTOR1,
                          NVL(OT.FACTOR1_5, 0) FACTOR1_5,
                          NVL(OT.FACTOR2, 0) FACTOR2,
                          NVL(OT.FACTOR2_7, 0) FACTOR2_7,
                          NVL(OT.FACTOR3, 0) FACTOR3,
                          NVL(OT.FACTOR3_9, 0) FACTOR3_9,
                          ROUND(NVL(OT.FACTOR1, 0) * 1 +
                                NVL(OT.FACTOR1_5, 0) * 1.5 +
                                NVL(OT.FACTOR2, 0) * 2 +
                                NVL(OT.FACTOR2_7, 0) * 2.7 +
                                NVL(OT.FACTOR3, 0) * 3 +
                                NVL(OT.FACTOR3_9, 0) * 3.9,
                                2) TOTAL_FACTOR_CONVERT
                     FROM (SELECT T.EMPLOYEE_ID,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4236 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR1,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4237 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR1_5,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4238 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR2,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4239 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR2_7,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4240 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR3,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4241 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR3_9
                             FROM AT_REGISTER_OT_TEMP T
                            WHERE NVL(T.IS_NB, 0) = 0
                            GROUP BY T.EMPLOYEE_ID) OT) OT
          ON A.EMPLOYEE_ID = OT.EMPLOYEE_ID
        LEFT JOIN (SELECT OT.EMPLOYEE_ID,
                          ROUND(NVL(OT.FACTOR1, 0) * 1 +
                                NVL(OT.FACTOR1_5, 0) * 1.5 +
                                NVL(OT.FACTOR2, 0) * 2 +
                                NVL(OT.FACTOR2_7, 0) * 2.7 +
                                NVL(OT.FACTOR3, 0) * 3 +
                                NVL(OT.FACTOR3_9, 0) * 3.9,
                                2) TOTAL_FACTOR_CONVERT
                     FROM (SELECT T.EMPLOYEE_ID,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4236 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR1,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4237 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR1_5,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4238 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR2,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4239 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR2_7,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4240 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR3,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4241 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR3_9
                             FROM AT_REGISTER_OT_TEMP T
                            WHERE NVL(T.IS_NB, 0) = -1
                            GROUP BY T.EMPLOYEE_ID) OT) NB
          ON A.EMPLOYEE_ID = NB.EMPLOYEE_ID;
  
    UPDATE AT_TIME_TIMESHEET_OT_TEMP OT
       SET OT.CONGHIBU = CASE
                           WHEN NVL(OT.NUMBER_FACTOR_CP, 0) > 0 OR
                                NVL(OT.BACKUP_MONTH_BEFORE, 0) > 0
                                THEN
                            ROUND((
                            NVL(OT.NUMBER_FACTOR_CP, 0) +
                             NVL(OT.BACKUP_MONTH_BEFORE, 0)
                                 ) / 8,
                                2)
                              
                           ELSE
                            0
                         END;
  
    --DELETE AT_TIMESHEET_OT_DTL_TEMP;
    -- KHOI TAO DDU LIEU   
    INSERT INTO AT_TIMESHEET_OT_DTL_TEMP
      (ID,
       EMPLOYEE_ID,
       PERIOD_ID,
       FROM_DATE,
       END_DATE,
       D1,
       D2,
       D3,
       D4,
       D5,
       D6,
       D7,
       D8,
       D9,
       D10,
       D11,
       D12,
       D13,
       D14,
       D15,
       D16,
       D17,
       D18,
       D19,
       D20,
       D21,
       D22,
       D23,
       D24,
       D25,
       D26,
       D27,
       D28,
       D29,
       D30,
       D31,
       CREATED_DATE,
       CREATED_BY,
       TOTAL_FACTOR1,
       TOTAL_FACTOR1_5,
       TOTAL_FACTOR2,
       TOTAL_FACTOR2_7,
       TOTAL_FACTOR3,
       TOTAL_FACTOR3_9,
       TOTAL_FACTOR_CONVERT,
       NUMBER_FACTOR_PAY,
       WORKING_ID)
      WITH CTE_OT AS
       (SELECT T.EMPLOYEE_ID,
               T.WORKING_ID,
               T.WORKING_START,
               T.WORKING_END,
               SUM(NVL(CASE
                         WHEN T.HS_OT = 4236 AND
                              NVL(EE.STAFF_RANK_LEVEL, 0) > PV_LEVEL_STAFF AND
                              NVL(T.HOUR, 0) * 60 >= NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                          T.HOUR
                       END,
                       0)) FACTOR1,
               SUM(NVL(CASE
                         WHEN T.HS_OT = 4237 AND
                              NVL(EE.STAFF_RANK_LEVEL, 0) > PV_LEVEL_STAFF AND
                              NVL(T.HOUR, 0) * 60 >= NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                          T.HOUR
                       END,
                       0)) FACTOR1_5,
               SUM(NVL(CASE
                         WHEN T.HS_OT = 4238 AND
                              NVL(EE.STAFF_RANK_LEVEL, 0) > PV_LEVEL_STAFF AND
                              NVL(T.HOUR, 0) * 60 >= NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                          T.HOUR
                       END,
                       0)) FACTOR2,
               SUM(NVL(CASE
                         WHEN T.HS_OT = 4239 AND
                              NVL(EE.STAFF_RANK_LEVEL, 0) > PV_LEVEL_STAFF AND
                              NVL(T.HOUR, 0) * 60 >= NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                          T.HOUR
                       END,
                       0)) FACTOR2_7,
               SUM(NVL(CASE
                         WHEN T.HS_OT = 4240 AND
                              NVL(EE.STAFF_RANK_LEVEL, 0) > PV_LEVEL_STAFF AND
                              NVL(T.HOUR, 0) * 60 >= NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                          T.HOUR
                       END,
                       0)) FACTOR3,
               SUM(NVL(CASE
                         WHEN T.HS_OT = 4241 AND
                              NVL(EE.STAFF_RANK_LEVEL, 0) > PV_LEVEL_STAFF AND
                              NVL(T.HOUR, 0) * 60 >= NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                          T.HOUR
                       END,
                       0)) FACTOR3_9
          FROM AT_REGISTER_OT_TEMP T
         INNER JOIN AT_CHOSEN_EMP EE
            ON T.EMPLOYEE_ID = EE.EMPLOYEE_ID
         WHERE NVL(T.IS_NB, 0) = 0
         GROUP BY T.EMPLOYEE_ID,
                  T.WORKING_ID,
                  T.WORKING_START,
                  T.WORKING_END)
      SELECT SEQ_AT_TIME_OT_TEMP.NEXTVAL,
             A.EMPLOYEE_ID,
             P_PERIOD_ID,
             WORKING_START,
             WORKING_END,
             A.D1,
             A.D2,
             A.D3,
             A.D4,
             A.D5,
             A.D6,
             A.D7,
             A.D8,
             A.D9,
             A.D10,
             A.D11,
             A.D12,
             A.D13,
             A.D14,
             A.D15,
             A.D16,
             A.D17,
             A.D18,
             A.D19,
             A.D20,
             A.D21,
             A.D22,
             A.D23,
             A.D24,
             A.D25,
             A.D26,
             A.D27,
             A.D28,
             A.D29,
             A.D30,
             A.D31,
             TRUNC(SYSDATE),
             UPPER(P_USERNAME),
             CASE
               WHEN OT.FACTOR1 = 0 THEN
                NULL
               ELSE
                OT.FACTOR1
             END FACTOR1,
             CASE
               WHEN OT.FACTOR1_5 = 0 THEN
                NULL
               ELSE
                OT.FACTOR1_5
             END FACTOR1_5,
             CASE
               WHEN OT.FACTOR2 = 0 THEN
                NULL
               ELSE
                OT.FACTOR2
             END FACTOR2,
             CASE
               WHEN OT.FACTOR2_7 = 0 THEN
                NULL
               ELSE
                OT.FACTOR2_7
             END FACTOR2_7,
             CASE
               WHEN OT.FACTOR3 = 0 THEN
                NULL
               ELSE
                OT.FACTOR3
             END FACTOR3,
             CASE
               WHEN OT.FACTOR3_9 = 0 THEN
                NULL
               ELSE
                OT.FACTOR3_9
             END FACTOR3_9,
             CASE
               WHEN OT.TOTAL_FACTOR_CONVERT = 0 THEN
                NULL
               ELSE
                OT.TOTAL_FACTOR_CONVERT
             END TOTAL_FACTOR_CONVERT,
             CASE
               WHEN NVL(A.STAFF_RANK_LEVEL, 0) > PV_LEVEL_STAFF THEN
                CASE
                  WHEN NVL(OT.TOTAL_FACTOR_CONVERT, 0) +
                       NVL(OT.TOTAL_FACTOR_CONVERT_BEFORE, 0) <= PV_MAX_PAYOT THEN
                   NVL(OT.TOTAL_FACTOR_CONVERT, 0)
                  WHEN NVL(OT.TOTAL_FACTOR_CONVERT, 0) +
                       NVL(OT.TOTAL_FACTOR_CONVERT_BEFORE, 0) > PV_MAX_PAYOT THEN
                   PV_MAX_PAYOT - NVL(OT.TOTAL_FACTOR_CONVERT_BEFORE, 0)
                END
             END,
             OT.WORKING_ID
        FROM (SELECT T.EMPLOYEE_ID,
                     EE.STAFF_RANK_ID,
                     EE.STAFF_RANK_LEVEL,
                     T.WORKING_ID,
                     TO_NUMBER(TO_CHAR(T.WORKINGDAY, 'dd')) AS DAY,
                     SUM(CASE
                           WHEN MOD(NVL(T.HOUR, 0) * 60, 60) >= 1 AND
                                NVL(T.HOUR, 0) * 60 > NVL(PV_HOUR_CAL_OT, 0) * 60 AND
                                MOD(NVL(T.HOUR, 0) * 60, 60) < 30 THEN
                            TRUNC(NVL(T.HOUR, 0)) + 30 / 60
                           WHEN MOD(NVL(T.HOUR, 0) * 60, 60) > 30 AND
                                NVL(T.HOUR, 0) * 60 > NVL(PV_HOUR_CAL_OT, 0) * 60 AND
                                MOD(NVL(T.HOUR, 0) * 60, 60) <= 60 THEN
                            TRUNC(NVL(T.HOUR, 0)) + 1
                           WHEN NVL(T.HOUR, 0) * 60 > 30 THEN
                            TRUNC(NVL(T.HOUR, 0))
                           ELSE
                            0
                         END) HOUR
                FROM AT_REGISTER_OT_TEMP T
               INNER JOIN AT_CHOSEN_EMP EE
                  ON T.EMPLOYEE_ID = EE.EMPLOYEE_ID
               GROUP BY T.EMPLOYEE_ID,
                        T.WORKING_ID,
                        EE.STAFF_RANK_ID,
                        EE.STAFF_RANK_LEVEL,
                        T.WORKINGDAY) T
      PIVOT(SUM(HOUR)
         FOR DAY IN(1 AS D1,
                    2 AS D2,
                    3 AS D3,
                    4 AS D4,
                    5 AS D5,
                    6 AS D6,
                    7 AS D7,
                    8 AS D8,
                    9 AS D9,
                    10 AS D10,
                    11 AS D11,
                    12 AS D12,
                    13 AS D13,
                    14 AS D14,
                    15 AS D15,
                    16 AS D16,
                    17 AS D17,
                    18 AS D18,
                    19 AS D19,
                    20 AS D20,
                    21 AS D21,
                    22 AS D22,
                    23 AS D23,
                    24 AS D24,
                    25 AS D25,
                    26 AS D26,
                    27 AS D27,
                    28 AS D28,
                    29 AS D29,
                    30 AS D30,
                    31 AS D31)) A
        LEFT JOIN (SELECT OT.EMPLOYEE_ID,
                          OT.WORKING_ID,
                          OT.WORKING_START,
                          OT.WORKING_END,
                          NVL(OT.FACTOR1, 0) FACTOR1,
                          NVL(OT.FACTOR1_5, 0) FACTOR1_5,
                          NVL(OT.FACTOR2, 0) FACTOR2,
                          NVL(OT.FACTOR2_7, 0) FACTOR2_7,
                          NVL(OT.FACTOR3, 0) FACTOR3,
                          NVL(OT.FACTOR3_9, 0) FACTOR3_9,
                          ROUND(NVL(OT.FACTOR1, 0) * 1 +
                                NVL(OT.FACTOR1_5, 0) * 1.5 +
                                NVL(OT.FACTOR2, 0) * 2 +
                                NVL(OT.FACTOR2_7, 0) * 2.7 +
                                NVL(OT.FACTOR3, 0) * 3 +
                                NVL(OT.FACTOR3_9, 0) * 3.9,
                                2) TOTAL_FACTOR_CONVERT,
                          NVL((SELECT ROUND(NVL(OT1.FACTOR1, 0) * 1 +
                                           NVL(OT1.FACTOR1_5, 0) * 1.5 +
                                           NVL(OT1.FACTOR2, 0) * 2 +
                                           NVL(OT1.FACTOR2_7, 0) * 2.7 +
                                           NVL(OT1.FACTOR3, 0) * 3 +
                                           NVL(OT1.FACTOR3_9, 0) * 3.9,
                                           2) TOTAL_FACTOR_CONVERT
                                FROM CTE_OT OT1
                               WHERE OT1.WORKING_END = OT.WORKING_START - 1
                                 AND OT1.EMPLOYEE_ID = OT.EMPLOYEE_ID),
                              0) TOTAL_FACTOR_CONVERT_BEFORE
                     FROM CTE_OT OT) OT
          ON A.EMPLOYEE_ID = OT.EMPLOYEE_ID
         AND A.WORKING_ID = OT.WORKING_ID;
  
    DELETE AT_REGISTER_OT OT
     WHERE OT.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP EE)
       AND OT.WORKINGDAY >= PV_FROMDATE
       AND OT.WORKINGDAY <= PV_ENDDATE;
  
    -- XOA DU LIEU CU TRUOC KHI TINH
    DELETE FROM AT_TIMESHEET_OT_DTL D
     WHERE D.PERIOD_ID = P_PERIOD_ID
       AND D.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP O);
  
    -- XOA DU LIEU CU TRUOC KHI TINH
    DELETE FROM AT_TIME_TIMESHEET_OT D
     WHERE D.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP O)
       AND D.PERIOD_ID = P_PERIOD_ID;
  
    INSERT INTO AT_TIME_TIMESHEET_OT
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       PERIOD_ID,
       TOTAL_FACTOR1,
       TOTAL_FACTOR1_5,
       TOTAL_FACTOR2,
       TOTAL_FACTOR2_7,
       TOTAL_FACTOR3,
       TOTAL_FACTOR3_9,
       TOTAL_FACTOR_CONVERT,
       NUMBER_FACTOR_PAY,
       NUMBER_FACTOR_CP,
       CONGHIBU,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       D1,
       D2,
       D3,
       D4,
       D5,
       D6,
       D7,
       D8,
       D9,
       D10,
       D11,
       D12,
       D13,
       D14,
       D15,
       D16,
       D17,
       D18,
       D19,
       D20,
       D21,
       D22,
       D23,
       D24,
       D25,
       D26,
       D27,
       D28,
       D29,
       D30,
       D31,
       D1_1,
       D1_15,
       D1_2,
       D1_27,
       D1_3,
       D1_39,
       D2_1,
       D2_15,
       D2_2,
       D2_27,
       D2_3,
       D2_39,
       D3_1,
       D3_15,
       D3_2,
       D3_27,
       D3_3,
       D3_39,
       D4_1,
       D4_15,
       D4_2,
       D4_27,
       D4_3,
       D4_39,
       D5_1,
       D5_15,
       D5_2,
       D5_27,
       D5_3,
       D5_39,
       D6_1,
       D6_15,
       D6_2,
       D6_27,
       D6_3,
       D6_39,
       D7_1,
       D7_15,
       D7_2,
       D7_27,
       D7_3,
       D7_39,
       D8_1,
       D8_15,
       D8_2,
       D8_27,
       D8_3,
       D8_39,
       D9_1,
       D9_15,
       D9_2,
       D9_27,
       D9_3,
       D9_39,
       D10_1,
       D10_15,
       D10_2,
       D10_27,
       D10_3,
       D10_39,
       D11_1,
       D11_15,
       D11_2,
       D11_27,
       D11_3,
       D11_39,
       D12_1,
       D12_15,
       D12_2,
       D12_27,
       D12_3,
       D12_39,
       D13_1,
       D13_15,
       D13_2,
       D13_27,
       D13_3,
       D13_39,
       D14_1,
       D14_15,
       D14_2,
       D14_27,
       D14_3,
       D14_39,
       D15_1,
       D15_15,
       D15_2,
       D15_27,
       D15_3,
       D15_39,
       D16_1,
       D16_15,
       D16_2,
       D16_27,
       D16_3,
       D16_39,
       D17_1,
       D17_15,
       D17_2,
       D17_27,
       D17_3,
       D17_39,
       D18_1,
       D18_15,
       D18_2,
       D18_27,
       D18_3,
       D18_39,
       D19_1,
       D19_15,
       D19_2,
       D19_27,
       D19_3,
       D19_39,
       D20_1,
       D20_15,
       D20_2,
       D20_27,
       D20_3,
       D20_39,
       D21_1,
       D21_15,
       D21_2,
       D21_27,
       D21_3,
       D21_39,
       D22_1,
       D22_15,
       D22_2,
       D22_27,
       D22_3,
       D22_39,
       D23_1,
       D23_15,
       D23_2,
       D23_27,
       D23_3,
       D23_39,
       D24_1,
       D24_15,
       D24_2,
       D24_27,
       D24_3,
       D24_39,
       D25_1,
       D25_15,
       D25_2,
       D25_27,
       D25_3,
       D25_39,
       D26_1,
       D26_15,
       D26_2,
       D26_27,
       D26_3,
       D26_39,
       D27_1,
       D27_15,
       D27_2,
       D27_27,
       D27_3,
       D27_39,
       D28_1,
       D28_15,
       D28_2,
       D28_27,
       D28_3,
       D28_39,
       D29_1,
       D29_15,
       D29_2,
       D29_27,
       D29_3,
       D29_39,
       D30_1,
       D30_15,
       D30_2,
       D30_27,
       D30_3,
       D30_39,
       D31_1,
       D31_15,
       D31_2,
       D31_27,
       D31_3,
       D31_39,
       FROM_DATE,
       END_DATE,
       BACKUP_MONTH_BEFORE,
       GHINHAN_OT)
      SELECT SEQ_AT_TIME_TIMESHEET_OT.NEXTVAL,
             EMPLOYEE_ID,
             ORG_ID,
             TITLE_ID,
             STAFF_RANK_ID,
             PERIOD_ID,
             TOTAL_FACTOR1,
             TOTAL_FACTOR1_5,
             TOTAL_FACTOR2,
             TOTAL_FACTOR2_7,
             TOTAL_FACTOR3,
             TOTAL_FACTOR3_9,
             TOTAL_FACTOR_CONVERT,
             NUMBER_FACTOR_PAY,
             NUMBER_FACTOR_CP,
             CONGHIBU,
             CREATED_DATE,
             CREATED_BY,
             CREATED_LOG,
             CASE
               WHEN NVL(D1, 0) = 0 THEN
                NULL
               ELSE
                D1
             END D1,
             CASE
               WHEN NVL(D2, 0) = 0 THEN
                NULL
               ELSE
                D2
             END D2,
             CASE
               WHEN NVL(D3, 0) = 0 THEN
                NULL
               ELSE
                D3
             END D3,
             CASE
               WHEN NVL(D4, 0) = 0 THEN
                NULL
               ELSE
                D4
             END D4,
             CASE
               WHEN NVL(D5, 0) = 0 THEN
                NULL
               ELSE
                D5
             END D5,
             CASE
               WHEN NVL(D6, 0) = 0 THEN
                NULL
               ELSE
                D6
             END D6,
             CASE
               WHEN NVL(D7, 0) = 0 THEN
                NULL
               ELSE
                D7
             END D7,
             CASE
               WHEN NVL(D8, 0) = 0 THEN
                NULL
               ELSE
                D8
             END D8,
             CASE
               WHEN NVL(D9, 0) = 0 THEN
                NULL
               ELSE
                D9
             END D9,
             CASE
               WHEN NVL(D10, 0) = 0 THEN
                NULL
               ELSE
                D10
             END D10,
             CASE
               WHEN NVL(D11, 0) = 0 THEN
                NULL
               ELSE
                D11
             END D11,
             CASE
               WHEN NVL(D12, 0) = 0 THEN
                NULL
               ELSE
                D12
             END D12,
             CASE
               WHEN NVL(D13, 0) = 0 THEN
                NULL
               ELSE
                D13
             END D13,
             CASE
               WHEN NVL(D14, 0) = 0 THEN
                NULL
               ELSE
                D14
             END D14,
             CASE
               WHEN NVL(D15, 0) = 0 THEN
                NULL
               ELSE
                D15
             END D15,
             CASE
               WHEN NVL(D16, 0) = 0 THEN
                NULL
               ELSE
                D16
             END D16,
             CASE
               WHEN NVL(D17, 0) = 0 THEN
                NULL
               ELSE
                D17
             END D17,
             CASE
               WHEN NVL(D18, 0) = 0 THEN
                NULL
               ELSE
                D18
             END D18,
             CASE
               WHEN NVL(D19, 0) = 0 THEN
                NULL
               ELSE
                D19
             END D19,
             CASE
               WHEN NVL(D20, 0) = 0 THEN
                NULL
               ELSE
                D20
             END D20,
             CASE
               WHEN NVL(D21, 0) = 0 THEN
                NULL
               ELSE
                D21
             END D21,
             CASE
               WHEN NVL(D22, 0) = 0 THEN
                NULL
               ELSE
                D22
             END D22,
             CASE
               WHEN NVL(D23, 0) = 0 THEN
                NULL
               ELSE
                D23
             END D23,
             CASE
               WHEN NVL(D24, 0) = 0 THEN
                NULL
               ELSE
                D24
             END D24,
             CASE
               WHEN NVL(D25, 0) = 0 THEN
                NULL
               ELSE
                D25
             END D25,
             CASE
               WHEN NVL(D26, 0) = 0 THEN
                NULL
               ELSE
                D26
             END D26,
             CASE
               WHEN NVL(D27, 0) = 0 THEN
                NULL
               ELSE
                D27
             END D27,
             CASE
               WHEN NVL(D28, 0) = 0 THEN
                NULL
               ELSE
                D28
             END D28,
             CASE
               WHEN NVL(D29, 0) = 0 THEN
                NULL
               ELSE
                D29
             END D29,
             CASE
               WHEN NVL(D30, 0) = 0 THEN
                NULL
               ELSE
                D30
             END D30,
             CASE
               WHEN NVL(D31, 0) = 0 THEN
                NULL
               ELSE
                D31
             END D31,
             D1_1,
             D1_15,
             D1_2,
             D1_27,
             D1_3,
             D1_39,
             D2_1,
             D2_15,
             D2_2,
             D2_27,
             D2_3,
             D2_39,
             D3_1,
             D3_15,
             D3_2,
             D3_27,
             D3_3,
             D3_39,
             D4_1,
             D4_15,
             D4_2,
             D4_27,
             D4_3,
             D4_39,
             D5_1,
             D5_15,
             D5_2,
             D5_27,
             D5_3,
             D5_39,
             D6_1,
             D6_15,
             D6_2,
             D6_27,
             D6_3,
             D6_39,
             D7_1,
             D7_15,
             D7_2,
             D7_27,
             D7_3,
             D7_39,
             D8_1,
             D8_15,
             D8_2,
             D8_27,
             D8_3,
             D8_39,
             D9_1,
             D9_15,
             D9_2,
             D9_27,
             D9_3,
             D9_39,
             D10_1,
             D10_15,
             D10_2,
             D10_27,
             D10_3,
             D10_39,
             D11_1,
             D11_15,
             D11_2,
             D11_27,
             D11_3,
             D11_39,
             D12_1,
             D12_15,
             D12_2,
             D12_27,
             D12_3,
             D12_39,
             D13_1,
             D13_15,
             D13_2,
             D13_27,
             D13_3,
             D13_39,
             D14_1,
             D14_15,
             D14_2,
             D14_27,
             D14_3,
             D14_39,
             D15_1,
             D15_15,
             D15_2,
             D15_27,
             D15_3,
             D15_39,
             D16_1,
             D16_15,
             D16_2,
             D16_27,
             D16_3,
             D16_39,
             D17_1,
             D17_15,
             D17_2,
             D17_27,
             D17_3,
             D17_39,
             D18_1,
             D18_15,
             D18_2,
             D18_27,
             D18_3,
             D18_39,
             D19_1,
             D19_15,
             D19_2,
             D19_27,
             D19_3,
             D19_39,
             D20_1,
             D20_15,
             D20_2,
             D20_27,
             D20_3,
             D20_39,
             D21_1,
             D21_15,
             D21_2,
             D21_27,
             D21_3,
             D21_39,
             D22_1,
             D22_15,
             D22_2,
             D22_27,
             D22_3,
             D22_39,
             D23_1,
             D23_15,
             D23_2,
             D23_27,
             D23_3,
             D23_39,
             D24_1,
             D24_15,
             D24_2,
             D24_27,
             D24_3,
             D24_39,
             D25_1,
             D25_15,
             D25_2,
             D25_27,
             D25_3,
             D25_39,
             D26_1,
             D26_15,
             D26_2,
             D26_27,
             D26_3,
             D26_39,
             D27_1,
             D27_15,
             D27_2,
             D27_27,
             D27_3,
             D27_39,
             D28_1,
             D28_15,
             D28_2,
             D28_27,
             D28_3,
             D28_39,
             D29_1,
             D29_15,
             D29_2,
             D29_27,
             D29_3,
             D29_39,
             D30_1,
             D30_15,
             D30_2,
             D30_27,
             D30_3,
             D30_39,
             D31_1,
             D31_15,
             D31_2,
             D31_27,
             D31_3,
             D31_39,
             FROM_DATE,
             END_DATE,
             BACKUP_MONTH_BEFORE,
             GHINHAN_OT
        FROM AT_TIME_TIMESHEET_OT_TEMP E;
  
    INSERT INTO AT_REGISTER_OT
      (ID,
       EMPLOYEE_ID,
       WORKINGDAY,
       FROM_HOUR,
       TO_HOUR,
       BREAK_HOUR,
       NOTE,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       TYPE_OT,
       HOUR,
       HS_OT,
       TYPE_INPUT,
       IS_NB,
       WORKING_ID,
       VAL_IN,
       VAL_OUT)
      SELECT SEQ_AT_REGISTER_OT.NEXTVAL,
             EMPLOYEE_ID,
             WORKINGDAY,
             FROM_HOUR,
             TO_HOUR,
             BREAK_HOUR,
             NOTE,
             CREATED_DATE,
             CREATED_BY,
             CREATED_LOG,
             MODIFIED_DATE,
             MODIFIED_BY,
             MODIFIED_LOG,
             TYPE_OT,
             HOUR,
             HS_OT,
             TYPE_INPUT,
             IS_NB,
             WORKING_ID,
             VAL_IN,
             VAL_OUT
        FROM AT_REGISTER_OT_TEMP OT
       WHERE EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP EE);
  
    INSERT INTO AT_TIMESHEET_OT_DTL
      SELECT *
        FROM AT_TIMESHEET_OT_DTL_TEMP OT
       WHERE EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP EE);
       
       
    DELETE AT_TIME_TIMESHEET_OT E
     WHERE E.PERIOD_ID = P_PERIOD_ID
       AND E.EMPLOYEE_ID NOT IN
           (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP_CLEAR);
            
    DELETE AT_TIMESHEET_OT_DTL E
     WHERE E.PERIOD_ID = P_PERIOD_ID
       AND E.EMPLOYEE_ID NOT IN
           (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP_CLEAR);
  END;

  PROCEDURE CAL_TIMETIMESHEET_NB(P_USERNAME   NVARCHAR2,
                                 P_ORG_ID     IN NUMBER,
                                 P_PERIOD_ID  IN NUMBER,
                                 P_ISDISSOLVE IN NUMBER) IS
    PV_FROMDATE    DATE;
    PV_ENDDATE     DATE;
    PV_MAX_PAYOT   NUMBER;
    PV_LEVEL_STAFF NUMBER;
    PV_HOUR_CAL_OT NUMBER;
    PV_REQUEST_ID  NUMBER;
    PV_MINUS_ALLOW NUMBER := 50;
  BEGIN
  
    PV_REQUEST_ID := SEQ_AT_REQUEST.NEXTVAL;
  
    -- TONG HOP DU LIEU TU DANG KY LAM THEM VS KHAI BAO LAM THEM RA BANG LAM THEM TONG HOP
    SELECT P.START_DATE, P.END_DATE
      INTO PV_FROMDATE, PV_ENDDATE
      FROM AT_PERIOD P
     WHERE P.ID = P_PERIOD_ID;
  
    -- Insert org can tinh toan
    INSERT INTO AT_CHOSEN_ORG E
      (SELECT ORG_ID, UPPER(P_USERNAME), PV_REQUEST_ID
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME),
                                    P_ORG_ID,
                                    P_ISDISSOLVE)) O
        WHERE EXISTS (SELECT 1
                 FROM AT_ORG_PERIOD OP
                WHERE OP.PERIOD_ID = P_PERIOD_ID
                  AND OP.ORG_ID = O.ORG_ID
                  AND OP.STATUSCOLEX = 1));
  
    -- insert emp can tinh toan
    INSERT INTO AT_CHOSEN_EMP E
      (EMPLOYEE_ID,
       ITIME_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       STAFF_RANK_LEVEL,
       USERNAME,
       REQUEST_ID)
      (SELECT T.ID,
              T.ITIME_ID,
              W.ORG_ID,
              W.TITLE_ID,
              W.STAFF_RANK_ID,
              W.LEVEL_STAFF,
              UPPER(P_USERNAME),
              PV_REQUEST_ID
         FROM HU_EMPLOYEE T
        INNER JOIN (SELECT E.EMPLOYEE_ID,
                          E.TITLE_ID,
                          E.ORG_ID,
                          E.STAFF_RANK_ID,
                          E.IS_3B,
                          S.LEVEL_STAFF,
                          ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                     FROM HU_WORKING E
                     LEFT JOIN HU_STAFF_RANK S
                       ON E.STAFF_RANK_ID = S.ID
                    WHERE E.EFFECT_DATE <= PV_ENDDATE
                      AND E.STATUS_ID = 447
                      AND E.IS_3B = 0) W
           ON T.ID = W.EMPLOYEE_ID
          AND W.ROW_NUMBER = 1
        INNER JOIN (SELECT ORG_ID FROM AT_CHOSEN_ORG O) O
           ON O.ORG_ID = W.ORG_ID
        WHERE (NVL(T.WORK_STATUS, 0) <> 257 OR
              (T.WORK_STATUS = 257 AND T.TER_LAST_DATE >= PV_FROMDATE)));
  
    INSERT INTO AT_CHOSEN_EMP_CLEAR
      (EMPLOYEE_ID, REQUEST_ID)
      (SELECT EMPLOYEE_ID, PV_REQUEST_ID
         FROM (SELECT A.*,
                      ROW_NUMBER() OVER(PARTITION BY A.EMPLOYEE_ID ORDER BY A.EFFECT_DATE DESC, A.ID DESC) AS ROW_NUMBER
                 FROM HU_WORKING A
                WHERE A.STATUS_ID = 447
                  AND A.EFFECT_DATE <= PV_ENDDATE
                  AND A.IS_3B = 0) C
        INNER JOIN HU_EMPLOYEE EE
           ON C.EMPLOYEE_ID = EE.ID
          AND C.ROW_NUMBER = 1
        WHERE (NVL(EE.WORK_STATUS, 0) <> 257 OR
              (EE.WORK_STATUS = 257 AND EE.TER_LAST_DATE >= PV_FROMDATE)));
  
    --1. TONG HOP GIO LAM THEM KHI DANG KY LAM THEM  
  
    SELECT S.HOUR_MAX_OT, S.LEVEL_STAFF, S.HOUR_CAL_OT
      INTO PV_MAX_PAYOT, PV_LEVEL_STAFF, PV_HOUR_CAL_OT
      FROM (SELECT T.HOUR_MAX_OT, K.LEVEL_STAFF, T.HOUR_CAL_OT
              FROM AT_LIST_PARAM_SYSTEM T
              LEFT JOIN HU_STAFF_RANK K
                ON T.RANK_PAY_OT = K.ID
             WHERE T.ACTFLG = 'A'
               AND T.EFFECT_DATE_FROM <= PV_ENDDATE
             ORDER BY ROW_NUMBER() OVER(ORDER BY T.EFFECT_DATE_FROM DESC)) S
     WHERE ROWNUM = 1;
  
    -- DELETE AT_REGISTER_OT_TEMP;
    INSERT INTO AT_REGISTER_OT_TEMP
      (ID,
       EMPLOYEE_ID,
       WORKINGDAY,
       FROM_HOUR,
       TO_HOUR,
       BREAK_HOUR,
       NOTE,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       TYPE_OT,
       HOUR,
       HS_OT,
       TYPE_INPUT,
       IS_NB,
       VAL_IN,
       VAL_OUT)      
      SELECT ID,
       EMPLOYEE_ID,
       WORKINGDAY,
       FROM_HOUR,
       TO_HOUR,
       BREAK_HOUR,
       NOTE,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       TYPE_OT,
       HOUR,
       HS_OT,
       TYPE_INPUT,
       IS_NB,
       VAL_IN,
       VAL_OUT
      
        FROM (SELECT OT.* FROM AT_REGISTER_OT OT
               INNER JOIN AT_CHOSEN_EMP EE
                  ON OT.EMPLOYEE_ID = EE.EMPLOYEE_ID
               WHERE OT.WORKINGDAY >= PV_FROMDATE
                 AND OT.WORKINGDAY <= PV_ENDDATE
                 AND nvl(ot.IS_NB,0) = -1 ) C;
  
    -- KHOI TAO DDU LIEU   
    INSERT INTO AT_TIME_TIMESHEET_NB_TEMP
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       PERIOD_ID,
       FROM_DATE,
       END_DATE,
       D1,
       D2,
       D3,
       D4,
       D5,
       D6,
       D7,
       D8,
       D9,
       D10,
       D11,
       D12,
       D13,
       D14,
       D15,
       D16,
       D17,
       D18,
       D19,
       D20,
       D21,
       D22,
       D23,
       D24,
       D25,
       D26,
       D27,
       D28,
       D29,
       D30,
       D31,
       D1_1,
       D1_15,
       D1_2,
       D1_27,
       D1_3,
       D1_39,
       D2_1,
       D2_15,
       D2_2,
       D2_27,
       D2_3,
       D2_39,
       D3_1,
       D3_15,
       D3_2,
       D3_27,
       D3_3,
       D3_39,
       D4_1,
       D4_15,
       D4_2,
       D4_27,
       D4_3,
       D4_39,
       D5_1,
       D5_15,
       D5_2,
       D5_27,
       D5_3,
       D5_39,
       D6_1,
       D6_15,
       D6_2,
       D6_27,
       D6_3,
       D6_39,
       D7_1,
       D7_15,
       D7_2,
       D7_27,
       D7_3,
       D7_39,
       D8_1,
       D8_15,
       D8_2,
       D8_27,
       D8_3,
       D8_39,
       D9_1,
       D9_15,
       D9_2,
       D9_27,
       D9_3,
       D9_39,
       D10_1,
       D10_15,
       D10_2,
       D10_27,
       D10_3,
       D10_39,
       D11_1,
       D11_15,
       D11_2,
       D11_27,
       D11_3,
       D11_39,
       D12_1,
       D12_15,
       D12_2,
       D12_27,
       D12_3,
       D12_39,
       D13_1,
       D13_15,
       D13_2,
       D13_27,
       D13_3,
       D13_39,
       D14_1,
       D14_15,
       D14_2,
       D14_27,
       D14_3,
       D14_39,
       D15_1,
       D15_15,
       D15_2,
       D15_27,
       D15_3,
       D15_39,
       D16_1,
       D16_15,
       D16_2,
       D16_27,
       D16_3,
       D16_39,
       D17_1,
       D17_15,
       D17_2,
       D17_27,
       D17_3,
       D17_39,
       D18_1,
       D18_15,
       D18_2,
       D18_27,
       D18_3,
       D18_39,
       D19_1,
       D19_15,
       D19_2,
       D19_27,
       D19_3,
       D19_39,
       D20_1,
       D20_15,
       D20_2,
       D20_27,
       D20_3,
       D20_39,
       D21_1,
       D21_15,
       D21_2,
       D21_27,
       D21_3,
       D21_39,
       D22_1,
       D22_15,
       D22_2,
       D22_27,
       D22_3,
       D22_39,
       D23_1,
       D23_15,
       D23_2,
       D23_27,
       D23_3,
       D23_39,
       D24_1,
       D24_15,
       D24_2,
       D24_27,
       D24_3,
       D24_39,
       D25_1,
       D25_15,
       D25_2,
       D25_27,
       D25_3,
       D25_39,
       D26_1,
       D26_15,
       D26_2,
       D26_27,
       D26_3,
       D26_39,
       D27_1,
       D27_15,
       D27_2,
       D27_27,
       D27_3,
       D27_39,
       D28_1,
       D28_15,
       D28_2,
       D28_27,
       D28_3,
       D28_39,
       D29_1,
       D29_15,
       D29_2,
       D29_27,
       D29_3,
       D29_39,
       D30_1,
       D30_15,
       D30_2,
       D30_27,
       D30_3,
       D30_39,
       D31_1,
       D31_15,
       D31_2,
       D31_27,
       D31_3,
       D31_39,
       CREATED_DATE,
       CREATED_BY,
       REQUEST_ID,
       TOTAL_FACTOR1,
       TOTAL_FACTOR1_5,
       TOTAL_FACTOR2,
       TOTAL_FACTOR2_7,
       TOTAL_FACTOR3,
       TOTAL_FACTOR3_9,
       TOTAL_FACTOR_CONVERT)
      SELECT SEQ_AT_TIME_OT_TEMP.NEXTVAL,
             A.EMPLOYEE_ID,
             A.ORG_ID,
             A.TITLE_ID,
             A.STAFF_RANK_ID,
             P_PERIOD_ID,
             PV_FROMDATE,
             PV_ENDDATE,
             NVL(A.D1_1, 0) + NVL(A.D1_15, 0) + NVL(A.D1_2, 0) +
             NVL(A.D1_27, 0) + NVL(A.D1_3, 0) + NVL(A.D1_39, 0) D1,
             NVL(A.D2_1, 0) + NVL(A.D2_15, 0) + NVL(A.D2_2, 0) +
             NVL(A.D2_27, 0) + NVL(A.D2_3, 0) + NVL(A.D2_39, 0) D2,
             NVL(A.D3_1, 0) + NVL(A.D3_15, 0) + NVL(A.D3_2, 0) +
             NVL(A.D3_27, 0) + NVL(A.D3_3, 0) + NVL(A.D3_39, 0) D3,
             NVL(A.D4_1, 0) + NVL(A.D4_15, 0) + NVL(A.D4_2, 0) +
             NVL(A.D4_27, 0) + NVL(A.D4_3, 0) + NVL(A.D4_39, 0) D4,
             NVL(A.D5_1, 0) + NVL(A.D5_15, 0) + NVL(A.D5_2, 0) +
             NVL(A.D5_27, 0) + NVL(A.D5_3, 0) + NVL(A.D5_39, 0) D5,
             NVL(A.D6_1, 0) + NVL(A.D6_15, 0) + NVL(A.D6_2, 0) +
             NVL(A.D6_27, 0) + NVL(A.D6_3, 0) + NVL(A.D6_39, 0) D6,
             NVL(A.D7_1, 0) + NVL(A.D7_15, 0) + NVL(A.D7_2, 0) +
             NVL(A.D7_27, 0) + NVL(A.D7_3, 0) + NVL(A.D7_39, 0) D7,
             NVL(A.D8_1, 0) + NVL(A.D8_15, 0) + NVL(A.D8_2, 0) +
             NVL(A.D8_27, 0) + NVL(A.D8_3, 0) + NVL(A.D8_39, 0) D8,
             NVL(A.D9_1, 0) + NVL(A.D9_15, 0) + NVL(A.D9_2, 0) +
             NVL(A.D9_27, 0) + NVL(A.D9_3, 0) + NVL(A.D9_39, 0) D9,
             NVL(A.D10_1, 0) + NVL(A.D10_15, 0) + NVL(A.D10_2, 0) +
             NVL(A.D10_27, 0) + NVL(A.D10_3, 0) + NVL(A.D10_39, 0) D10,
             NVL(A.D11_1, 0) + NVL(A.D11_15, 0) + NVL(A.D11_2, 0) +
             NVL(A.D11_27, 0) + NVL(A.D11_3, 0) + NVL(A.D11_39, 0) D11,
             NVL(A.D12_1, 0) + NVL(A.D12_15, 0) + NVL(A.D12_2, 0) +
             NVL(A.D12_27, 0) + NVL(A.D12_3, 0) + NVL(A.D12_39, 0) D12,
             NVL(A.D13_1, 0) + NVL(A.D13_15, 0) + NVL(A.D13_2, 0) +
             NVL(A.D13_27, 0) + NVL(A.D13_3, 0) + NVL(A.D13_39, 0) D13,
             NVL(A.D14_1, 0) + NVL(A.D14_15, 0) + NVL(A.D14_2, 0) +
             NVL(A.D14_27, 0) + NVL(A.D14_3, 0) + NVL(A.D14_39, 0) D14,
             NVL(A.D15_1, 0) + NVL(A.D15_15, 0) + NVL(A.D15_2, 0) +
             NVL(A.D15_27, 0) + NVL(A.D15_3, 0) + NVL(A.D15_39, 0) D15,
             NVL(A.D16_1, 0) + NVL(A.D16_15, 0) + NVL(A.D16_2, 0) +
             NVL(A.D16_27, 0) + NVL(A.D16_3, 0) + NVL(A.D16_39, 0) D16,
             NVL(A.D17_1, 0) + NVL(A.D17_15, 0) + NVL(A.D17_2, 0) +
             NVL(A.D17_27, 0) + NVL(A.D17_3, 0) + NVL(A.D17_39, 0) D17,
             NVL(A.D18_1, 0) + NVL(A.D18_15, 0) + NVL(A.D18_2, 0) +
             NVL(A.D18_27, 0) + NVL(A.D18_3, 0) + NVL(A.D18_39, 0) D18,
             NVL(A.D19_1, 0) + NVL(A.D19_15, 0) + NVL(A.D19_2, 0) +
             NVL(A.D19_27, 0) + NVL(A.D19_3, 0) + NVL(A.D19_39, 0) D19,
             NVL(A.D20_1, 0) + NVL(A.D20_15, 0) + NVL(A.D20_2, 0) +
             NVL(A.D20_27, 0) + NVL(A.D20_3, 0) + NVL(A.D20_39, 0) D20,
             NVL(A.D21_1, 0) + NVL(A.D21_15, 0) + NVL(A.D21_2, 0) +
             NVL(A.D21_27, 0) + NVL(A.D21_3, 0) + NVL(A.D21_39, 0) D21,
             NVL(A.D22_1, 0) + NVL(A.D22_15, 0) + NVL(A.D22_2, 0) +
             NVL(A.D22_27, 0) + NVL(A.D22_3, 0) + NVL(A.D22_39, 0) D22,
             NVL(A.D23_1, 0) + NVL(A.D23_15, 0) + NVL(A.D23_2, 0) +
             NVL(A.D23_27, 0) + NVL(A.D23_3, 0) + NVL(A.D23_39, 0) D23,
             NVL(A.D24_1, 0) + NVL(A.D24_15, 0) + NVL(A.D24_2, 0) +
             NVL(A.D24_27, 0) + NVL(A.D24_3, 0) + NVL(A.D24_39, 0) D24,
             NVL(A.D25_1, 0) + NVL(A.D25_15, 0) + NVL(A.D25_2, 0) +
             NVL(A.D25_27, 0) + NVL(A.D25_3, 0) + NVL(A.D25_39, 0) D25,
             NVL(A.D26_1, 0) + NVL(A.D26_15, 0) + NVL(A.D26_2, 0) +
             NVL(A.D26_27, 0) + NVL(A.D26_3, 0) + NVL(A.D26_39, 0) D26,
             NVL(A.D27_1, 0) + NVL(A.D27_15, 0) + NVL(A.D27_2, 0) +
             NVL(A.D27_27, 0) + NVL(A.D27_3, 0) + NVL(A.D27_39, 0) D27,
             NVL(A.D28_1, 0) + NVL(A.D28_15, 0) + NVL(A.D28_2, 0) +
             NVL(A.D28_27, 0) + NVL(A.D28_3, 0) + NVL(A.D28_39, 0) D28,
             NVL(A.D29_1, 0) + NVL(A.D29_15, 0) + NVL(A.D29_2, 0) +
             NVL(A.D29_27, 0) + NVL(A.D29_3, 0) + NVL(A.D29_39, 0) D29,
             NVL(A.D30_1, 0) + NVL(A.D30_15, 0) + NVL(A.D30_2, 0) +
             NVL(A.D30_27, 0) + NVL(A.D30_3, 0) + NVL(A.D30_39, 0) D30,
             NVL(A.D31_1, 0) + NVL(A.D31_15, 0) + NVL(A.D31_2, 0) +
             NVL(A.D31_27, 0) + NVL(A.D31_3, 0) + NVL(A.D31_39, 0) D31,
             A.D1_1,
             A.D1_15,
             A.D1_2,
             A.D1_27,
             A.D1_3,
             A.D1_39,
             A.D2_1,
             A.D2_15,
             A.D2_2,
             A.D2_27,
             A.D2_3,
             A.D2_39,
             A.D3_1,
             A.D3_15,
             A.D3_2,
             A.D3_27,
             A.D3_3,
             A.D3_39,
             A.D4_1,
             A.D4_15,
             A.D4_2,
             A.D4_27,
             A.D4_3,
             A.D4_39,
             A.D5_1,
             A.D5_15,
             A.D5_2,
             A.D5_27,
             A.D5_3,
             A.D5_39,
             A.D6_1,
             A.D6_15,
             A.D6_2,
             A.D6_27,
             A.D6_3,
             A.D6_39,
             A.D7_1,
             A.D7_15,
             A.D7_2,
             A.D7_27,
             A.D7_3,
             A.D7_39,
             A.D8_1,
             A.D8_15,
             A.D8_2,
             A.D8_27,
             A.D8_3,
             A.D8_39,
             A.D9_1,
             A.D9_15,
             A.D9_2,
             A.D9_27,
             A.D9_3,
             A.D9_39,
             A.D10_1,
             A.D10_15,
             A.D10_2,
             A.D10_27,
             A.D10_3,
             A.D10_39,
             A.D11_1,
             A.D11_15,
             A.D11_2,
             A.D11_27,
             A.D11_3,
             A.D11_39,
             A.D12_1,
             A.D12_15,
             A.D12_2,
             A.D12_27,
             A.D12_3,
             A.D12_39,
             A.D13_1,
             A.D13_15,
             A.D13_2,
             A.D13_27,
             A.D13_3,
             A.D13_39,
             A.D14_1,
             A.D14_15,
             A.D14_2,
             A.D14_27,
             A.D14_3,
             A.D14_39,
             A.D15_1,
             A.D15_15,
             A.D15_2,
             A.D15_27,
             A.D15_3,
             A.D15_39,
             A.D16_1,
             A.D16_15,
             A.D16_2,
             A.D16_27,
             A.D16_3,
             A.D16_39,
             A.D17_1,
             A.D17_15,
             A.D17_2,
             A.D17_27,
             A.D17_3,
             A.D17_39,
             A.D18_1,
             A.D18_15,
             A.D18_2,
             A.D18_27,
             A.D18_3,
             A.D18_39,
             A.D19_1,
             A.D19_15,
             A.D19_2,
             A.D19_27,
             A.D19_3,
             A.D19_39,
             A.D20_1,
             A.D20_15,
             A.D20_2,
             A.D20_27,
             A.D20_3,
             A.D20_39,
             A.D21_1,
             A.D21_15,
             A.D21_2,
             A.D21_27,
             A.D21_3,
             A.D21_39,
             A.D22_1,
             A.D22_15,
             A.D22_2,
             A.D22_27,
             A.D22_3,
             A.D22_39,
             A.D23_1,
             A.D23_15,
             A.D23_2,
             A.D23_27,
             A.D23_3,
             A.D23_39,
             A.D24_1,
             A.D24_15,
             A.D24_2,
             A.D24_27,
             A.D24_3,
             A.D24_39,
             A.D25_1,
             A.D25_15,
             A.D25_2,
             A.D25_27,
             A.D25_3,
             A.D25_39,
             A.D26_1,
             A.D26_15,
             A.D26_2,
             A.D26_27,
             A.D26_3,
             A.D26_39,
             A.D27_1,
             A.D27_15,
             A.D27_2,
             A.D27_27,
             A.D27_3,
             A.D27_39,
             A.D28_1,
             A.D28_15,
             A.D28_2,
             A.D28_27,
             A.D28_3,
             A.D28_39,
             A.D29_1,
             A.D29_15,
             A.D29_2,
             A.D29_27,
             A.D29_3,
             A.D29_39,
             A.D30_1,
             A.D30_15,
             A.D30_2,
             A.D30_27,
             A.D30_3,
             A.D30_39,
             A.D31_1,
             A.D31_15,
             A.D31_2,
             A.D31_27,
             A.D31_3,
             A.D31_39,
             TRUNC(SYSDATE),
             UPPER(P_USERNAME),
             PV_REQUEST_ID,
             CASE
               WHEN OT.FACTOR1 = 0 THEN
                NULL
               ELSE
                OT.FACTOR1
             END FACTOR1,
             CASE
               WHEN OT.FACTOR1_5 = 0 THEN
                NULL
               ELSE
                OT.FACTOR1_5
             END FACTOR1_5,
             CASE
               WHEN OT.FACTOR2 = 0 THEN
                NULL
               ELSE
                OT.FACTOR2
             END FACTOR2,
             CASE
               WHEN OT.FACTOR2_7 = 0 THEN
                NULL
               ELSE
                OT.FACTOR2_7
             END FACTOR2_7,
             CASE
               WHEN OT.FACTOR3 = 0 THEN
                NULL
               ELSE
                OT.FACTOR3
             END FACTOR3,
             CASE
               WHEN OT.FACTOR3_9 = 0 THEN
                NULL
               ELSE
                OT.FACTOR3_9
             END FACTOR3_9,
             CASE
               WHEN OT.TOTAL_FACTOR_CONVERT = 0 THEN
                NULL
               ELSE
                OT.TOTAL_FACTOR_CONVERT
             END TOTAL_FACTOR_CONVERT
        FROM (SELECT T.EMPLOYEE_ID,
                     EE.ORG_ID,
                     EE.TITLE_ID,
                     EE.STAFF_RANK_ID,
                     EE.STAFF_RANK_LEVEL,
                     TO_CHAR(T.WORKINGDAY, 'dd') || '_' || CASE
                       WHEN T.HS_OT = 4236 THEN -- 1
                        '1'
                       WHEN T.HS_OT = 4237 THEN -- 1.5
                        '15'
                       WHEN T.HS_OT = 4238 THEN -- 2
                        '2'
                       WHEN T.HS_OT = 4239 THEN -- 2.7
                        '27'
                       WHEN T.HS_OT = 4240 THEN -- 3
                        '3'
                       WHEN T.HS_OT = 4241 THEN -- 3.9
                        '39'
                     END AS DAY,
                     T.HOUR
                FROM AT_REGISTER_OT_TEMP T
               INNER JOIN AT_CHOSEN_EMP EE
                  ON T.EMPLOYEE_ID = EE.EMPLOYEE_ID) T
      PIVOT(SUM(HOUR)
         FOR DAY IN('01_1' AS D1_1,
                    '01_15' AS D1_15,
                    '01_2' AS D1_2,
                    '01_27' AS D1_27,
                    '01_3' AS D1_3,
                    '01_39' AS D1_39,
                    '02_1' AS D2_1,
                    '02_15' AS D2_15,
                    '02_2' AS D2_2,
                    '02_27' AS D2_27,
                    '02_3' AS D2_3,
                    '02_39' AS D2_39,
                    '03_1' AS D3_1,
                    '03_15' AS D3_15,
                    '03_2' AS D3_2,
                    '03_27' AS D3_27,
                    '03_3' AS D3_3,
                    '03_39' AS D3_39,
                    '04_1' AS D4_1,
                    '04_15' AS D4_15,
                    '04_2' AS D4_2,
                    '04_27' AS D4_27,
                    '04_3' AS D4_3,
                    '04_39' AS D4_39,
                    '05_1' AS D5_1,
                    '05_15' AS D5_15,
                    '05_2' AS D5_2,
                    '05_27' AS D5_27,
                    '05_3' AS D5_3,
                    '05_39' AS D5_39,
                    '06_1' AS D6_1,
                    '06_15' AS D6_15,
                    '06_2' AS D6_2,
                    '06_27' AS D6_27,
                    '06_3' AS D6_3,
                    '06_39' AS D6_39,
                    '07_1' AS D7_1,
                    '07_15' AS D7_15,
                    '07_2' AS D7_2,
                    '07_27' AS D7_27,
                    '07_3' AS D7_3,
                    '07_39' AS D7_39,
                    '08_1' AS D8_1,
                    '08_15' AS D8_15,
                    '08_2' AS D8_2,
                    '08_27' AS D8_27,
                    '08_3' AS D8_3,
                    '08_39' AS D8_39,
                    '09_1' AS D9_1,
                    '09_15' AS D9_15,
                    '09_2' AS D9_2,
                    '09_27' AS D9_27,
                    '09_3' AS D9_3,
                    '09_39' AS D9_39,
                    '10_1' AS D10_1,
                    '10_15' AS D10_15,
                    '10_2' AS D10_2,
                    '10_27' AS D10_27,
                    '10_3' AS D10_3,
                    '10_39' AS D10_39,
                    '11_1' AS D11_1,
                    '11_15' AS D11_15,
                    '11_2' AS D11_2,
                    '11_27' AS D11_27,
                    '11_3' AS D11_3,
                    '11_39' AS D11_39,
                    '12_1' AS D12_1,
                    '12_15' AS D12_15,
                    '12_2' AS D12_2,
                    '12_27' AS D12_27,
                    '12_3' AS D12_3,
                    '12_39' AS D12_39,
                    '13_1' AS D13_1,
                    '13_15' AS D13_15,
                    '13_2' AS D13_2,
                    '13_27' AS D13_27,
                    '13_3' AS D13_3,
                    '13_39' AS D13_39,
                    '14_1' AS D14_1,
                    '14_15' AS D14_15,
                    '14_2' AS D14_2,
                    '14_27' AS D14_27,
                    '14_3' AS D14_3,
                    '14_39' AS D14_39,
                    '15_1' AS D15_1,
                    '15_15' AS D15_15,
                    '15_2' AS D15_2,
                    '15_27' AS D15_27,
                    '15_3' AS D15_3,
                    '15_39' AS D15_39,
                    '16_1' AS D16_1,
                    '16_15' AS D16_15,
                    '16_2' AS D16_2,
                    '16_27' AS D16_27,
                    '16_3' AS D16_3,
                    '16_39' AS D16_39,
                    '17_1' AS D17_1,
                    '17_15' AS D17_15,
                    '17_2' AS D17_2,
                    '17_27' AS D17_27,
                    '17_3' AS D17_3,
                    '17_39' AS D17_39,
                    '18_1' AS D18_1,
                    '18_15' AS D18_15,
                    '18_2' AS D18_2,
                    '18_27' AS D18_27,
                    '18_3' AS D18_3,
                    '18_39' AS D18_39,
                    '19_1' AS D19_1,
                    '19_15' AS D19_15,
                    '19_2' AS D19_2,
                    '19_27' AS D19_27,
                    '19_3' AS D19_3,
                    '19_39' AS D19_39,
                    '20_1' AS D20_1,
                    '20_15' AS D20_15,
                    '20_2' AS D20_2,
                    '20_27' AS D20_27,
                    '20_3' AS D20_3,
                    '20_39' AS D20_39,
                    '21_1' AS D21_1,
                    '21_15' AS D21_15,
                    '21_2' AS D21_2,
                    '21_27' AS D21_27,
                    '21_3' AS D21_3,
                    '21_39' AS D21_39,
                    '22_1' AS D22_1,
                    '22_15' AS D22_15,
                    '22_2' AS D22_2,
                    '22_27' AS D22_27,
                    '22_3' AS D22_3,
                    '22_39' AS D22_39,
                    '23_1' AS D23_1,
                    '23_15' AS D23_15,
                    '23_2' AS D23_2,
                    '23_27' AS D23_27,
                    '23_3' AS D23_3,
                    '23_39' AS D23_39,
                    '24_1' AS D24_1,
                    '24_15' AS D24_15,
                    '24_2' AS D24_2,
                    '24_27' AS D24_27,
                    '24_3' AS D24_3,
                    '24_39' AS D24_39,
                    '25_1' AS D25_1,
                    '25_15' AS D25_15,
                    '25_2' AS D25_2,
                    '25_27' AS D25_27,
                    '25_3' AS D25_3,
                    '25_39' AS D25_39,
                    '26_1' AS D26_1,
                    '26_15' AS D26_15,
                    '26_2' AS D26_2,
                    '26_27' AS D26_27,
                    '26_3' AS D26_3,
                    '26_39' AS D26_39,
                    '27_1' AS D27_1,
                    '27_15' AS D27_15,
                    '27_2' AS D27_2,
                    '27_27' AS D27_27,
                    '27_3' AS D27_3,
                    '27_39' AS D27_39,
                    '28_1' AS D28_1,
                    '28_15' AS D28_15,
                    '28_2' AS D28_2,
                    '28_27' AS D28_27,
                    '28_3' AS D28_3,
                    '28_39' AS D28_39,
                    '29_1' AS D29_1,
                    '29_15' AS D29_15,
                    '29_2' AS D29_2,
                    '29_27' AS D29_27,
                    '29_3' AS D29_3,
                    '29_39' AS D29_39,
                    '30_1' AS D30_1,
                    '30_15' AS D30_15,
                    '30_2' AS D30_2,
                    '30_27' AS D30_27,
                    '30_3' AS D30_3,
                    '30_39' AS D30_39,
                    '31_1' AS D31_1,
                    '31_15' AS D31_15,
                    '31_2' AS D31_2,
                    '31_27' AS D31_27,
                    '31_3' AS D31_3,
                    '31_39' AS D31_39)) A
        LEFT JOIN (SELECT OT.EMPLOYEE_ID,
                          NVL(OT.FACTOR1, 0) FACTOR1,
                          NVL(OT.FACTOR1_5, 0) FACTOR1_5,
                          NVL(OT.FACTOR2, 0) FACTOR2,
                          NVL(OT.FACTOR2_7, 0) FACTOR2_7,
                          NVL(OT.FACTOR3, 0) FACTOR3,
                          NVL(OT.FACTOR3_9, 0) FACTOR3_9,
                          ROUND(NVL(OT.FACTOR1, 0) * 1 +
                                NVL(OT.FACTOR1_5, 0) * 1.5 +
                                NVL(OT.FACTOR2, 0) * 2 +
                                NVL(OT.FACTOR2_7, 0) * 2.7 +
                                NVL(OT.FACTOR3, 0) * 3 +
                                NVL(OT.FACTOR3_9, 0) * 3.9,
                                2) TOTAL_FACTOR_CONVERT
                     FROM (SELECT T.EMPLOYEE_ID,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4236 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR1,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4237 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR1_5,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4238 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR2,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4239 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR2_7,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4240 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR3,
                                  SUM(NVL(CASE
                                            WHEN T.HS_OT = 4241 AND
                                                 NVL(T.HOUR, 0) * 60 >=
                                                 NVL(PV_HOUR_CAL_OT, 0) * 60 THEN
                                             T.HOUR
                                          END,
                                          0)) FACTOR3_9
                             FROM AT_REGISTER_OT_TEMP T
                            GROUP BY T.EMPLOYEE_ID) OT) OT
          ON A.EMPLOYEE_ID = OT.EMPLOYEE_ID;
  
  
    -- XOA DU LIEU CU TRUOC KHI TINH
    DELETE FROM AT_TIME_TIMESHEET_NB D
     WHERE D.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP O)
       AND D.PERIOD_ID = P_PERIOD_ID;
  
    INSERT INTO AT_TIME_TIMESHEET_NB
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       PERIOD_ID,
       TOTAL_FACTOR1,
       TOTAL_FACTOR1_5,
       TOTAL_FACTOR2,
       TOTAL_FACTOR2_7,
       TOTAL_FACTOR3,
       TOTAL_FACTOR3_9,
       TOTAL_FACTOR_CONVERT,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       D1,
       D2,
       D3,
       D4,
       D5,
       D6,
       D7,
       D8,
       D9,
       D10,
       D11,
       D12,
       D13,
       D14,
       D15,
       D16,
       D17,
       D18,
       D19,
       D20,
       D21,
       D22,
       D23,
       D24,
       D25,
       D26,
       D27,
       D28,
       D29,
       D30,
       D31,
       D1_1,
       D1_15,
       D1_2,
       D1_27,
       D1_3,
       D1_39,
       D2_1,
       D2_15,
       D2_2,
       D2_27,
       D2_3,
       D2_39,
       D3_1,
       D3_15,
       D3_2,
       D3_27,
       D3_3,
       D3_39,
       D4_1,
       D4_15,
       D4_2,
       D4_27,
       D4_3,
       D4_39,
       D5_1,
       D5_15,
       D5_2,
       D5_27,
       D5_3,
       D5_39,
       D6_1,
       D6_15,
       D6_2,
       D6_27,
       D6_3,
       D6_39,
       D7_1,
       D7_15,
       D7_2,
       D7_27,
       D7_3,
       D7_39,
       D8_1,
       D8_15,
       D8_2,
       D8_27,
       D8_3,
       D8_39,
       D9_1,
       D9_15,
       D9_2,
       D9_27,
       D9_3,
       D9_39,
       D10_1,
       D10_15,
       D10_2,
       D10_27,
       D10_3,
       D10_39,
       D11_1,
       D11_15,
       D11_2,
       D11_27,
       D11_3,
       D11_39,
       D12_1,
       D12_15,
       D12_2,
       D12_27,
       D12_3,
       D12_39,
       D13_1,
       D13_15,
       D13_2,
       D13_27,
       D13_3,
       D13_39,
       D14_1,
       D14_15,
       D14_2,
       D14_27,
       D14_3,
       D14_39,
       D15_1,
       D15_15,
       D15_2,
       D15_27,
       D15_3,
       D15_39,
       D16_1,
       D16_15,
       D16_2,
       D16_27,
       D16_3,
       D16_39,
       D17_1,
       D17_15,
       D17_2,
       D17_27,
       D17_3,
       D17_39,
       D18_1,
       D18_15,
       D18_2,
       D18_27,
       D18_3,
       D18_39,
       D19_1,
       D19_15,
       D19_2,
       D19_27,
       D19_3,
       D19_39,
       D20_1,
       D20_15,
       D20_2,
       D20_27,
       D20_3,
       D20_39,
       D21_1,
       D21_15,
       D21_2,
       D21_27,
       D21_3,
       D21_39,
       D22_1,
       D22_15,
       D22_2,
       D22_27,
       D22_3,
       D22_39,
       D23_1,
       D23_15,
       D23_2,
       D23_27,
       D23_3,
       D23_39,
       D24_1,
       D24_15,
       D24_2,
       D24_27,
       D24_3,
       D24_39,
       D25_1,
       D25_15,
       D25_2,
       D25_27,
       D25_3,
       D25_39,
       D26_1,
       D26_15,
       D26_2,
       D26_27,
       D26_3,
       D26_39,
       D27_1,
       D27_15,
       D27_2,
       D27_27,
       D27_3,
       D27_39,
       D28_1,
       D28_15,
       D28_2,
       D28_27,
       D28_3,
       D28_39,
       D29_1,
       D29_15,
       D29_2,
       D29_27,
       D29_3,
       D29_39,
       D30_1,
       D30_15,
       D30_2,
       D30_27,
       D30_3,
       D30_39,
       D31_1,
       D31_15,
       D31_2,
       D31_27,
       D31_3,
       D31_39,
       FROM_DATE,
       END_DATE,
       BACKUP_MONTH_BEFORE,
       GHINHAN_OT)
      SELECT SEQ_AT_TIME_TIMESHEET_OT.NEXTVAL,
             EMPLOYEE_ID,
             ORG_ID,
             TITLE_ID,
             STAFF_RANK_ID,
             PERIOD_ID,
             TOTAL_FACTOR1,
             TOTAL_FACTOR1_5,
             TOTAL_FACTOR2,
             TOTAL_FACTOR2_7,
             TOTAL_FACTOR3,
             TOTAL_FACTOR3_9,
             TOTAL_FACTOR_CONVERT,
             CREATED_DATE,
             CREATED_BY,
             CREATED_LOG,
             CASE
               WHEN NVL(D1, 0) = 0 THEN
                NULL
               ELSE
                D1
             END D1,
             CASE
               WHEN NVL(D2, 0) = 0 THEN
                NULL
               ELSE
                D2
             END D2,
             CASE
               WHEN NVL(D3, 0) = 0 THEN
                NULL
               ELSE
                D3
             END D3,
             CASE
               WHEN NVL(D4, 0) = 0 THEN
                NULL
               ELSE
                D4
             END D4,
             CASE
               WHEN NVL(D5, 0) = 0 THEN
                NULL
               ELSE
                D5
             END D5,
             CASE
               WHEN NVL(D6, 0) = 0 THEN
                NULL
               ELSE
                D6
             END D6,
             CASE
               WHEN NVL(D7, 0) = 0 THEN
                NULL
               ELSE
                D7
             END D7,
             CASE
               WHEN NVL(D8, 0) = 0 THEN
                NULL
               ELSE
                D8
             END D8,
             CASE
               WHEN NVL(D9, 0) = 0 THEN
                NULL
               ELSE
                D9
             END D9,
             CASE
               WHEN NVL(D10, 0) = 0 THEN
                NULL
               ELSE
                D10
             END D10,
             CASE
               WHEN NVL(D11, 0) = 0 THEN
                NULL
               ELSE
                D11
             END D11,
             CASE
               WHEN NVL(D12, 0) = 0 THEN
                NULL
               ELSE
                D12
             END D12,
             CASE
               WHEN NVL(D13, 0) = 0 THEN
                NULL
               ELSE
                D13
             END D13,
             CASE
               WHEN NVL(D14, 0) = 0 THEN
                NULL
               ELSE
                D14
             END D14,
             CASE
               WHEN NVL(D15, 0) = 0 THEN
                NULL
               ELSE
                D15
             END D15,
             CASE
               WHEN NVL(D16, 0) = 0 THEN
                NULL
               ELSE
                D16
             END D16,
             CASE
               WHEN NVL(D17, 0) = 0 THEN
                NULL
               ELSE
                D17
             END D17,
             CASE
               WHEN NVL(D18, 0) = 0 THEN
                NULL
               ELSE
                D18
             END D18,
             CASE
               WHEN NVL(D19, 0) = 0 THEN
                NULL
               ELSE
                D19
             END D19,
             CASE
               WHEN NVL(D20, 0) = 0 THEN
                NULL
               ELSE
                D20
             END D20,
             CASE
               WHEN NVL(D21, 0) = 0 THEN
                NULL
               ELSE
                D21
             END D21,
             CASE
               WHEN NVL(D22, 0) = 0 THEN
                NULL
               ELSE
                D22
             END D22,
             CASE
               WHEN NVL(D23, 0) = 0 THEN
                NULL
               ELSE
                D23
             END D23,
             CASE
               WHEN NVL(D24, 0) = 0 THEN
                NULL
               ELSE
                D24
             END D24,
             CASE
               WHEN NVL(D25, 0) = 0 THEN
                NULL
               ELSE
                D25
             END D25,
             CASE
               WHEN NVL(D26, 0) = 0 THEN
                NULL
               ELSE
                D26
             END D26,
             CASE
               WHEN NVL(D27, 0) = 0 THEN
                NULL
               ELSE
                D27
             END D27,
             CASE
               WHEN NVL(D28, 0) = 0 THEN
                NULL
               ELSE
                D28
             END D28,
             CASE
               WHEN NVL(D29, 0) = 0 THEN
                NULL
               ELSE
                D29
             END D29,
             CASE
               WHEN NVL(D30, 0) = 0 THEN
                NULL
               ELSE
                D30
             END D30,
             CASE
               WHEN NVL(D31, 0) = 0 THEN
                NULL
               ELSE
                D31
             END D31,
             D1_1,
             D1_15,
             D1_2,
             D1_27,
             D1_3,
             D1_39,
             D2_1,
             D2_15,
             D2_2,
             D2_27,
             D2_3,
             D2_39,
             D3_1,
             D3_15,
             D3_2,
             D3_27,
             D3_3,
             D3_39,
             D4_1,
             D4_15,
             D4_2,
             D4_27,
             D4_3,
             D4_39,
             D5_1,
             D5_15,
             D5_2,
             D5_27,
             D5_3,
             D5_39,
             D6_1,
             D6_15,
             D6_2,
             D6_27,
             D6_3,
             D6_39,
             D7_1,
             D7_15,
             D7_2,
             D7_27,
             D7_3,
             D7_39,
             D8_1,
             D8_15,
             D8_2,
             D8_27,
             D8_3,
             D8_39,
             D9_1,
             D9_15,
             D9_2,
             D9_27,
             D9_3,
             D9_39,
             D10_1,
             D10_15,
             D10_2,
             D10_27,
             D10_3,
             D10_39,
             D11_1,
             D11_15,
             D11_2,
             D11_27,
             D11_3,
             D11_39,
             D12_1,
             D12_15,
             D12_2,
             D12_27,
             D12_3,
             D12_39,
             D13_1,
             D13_15,
             D13_2,
             D13_27,
             D13_3,
             D13_39,
             D14_1,
             D14_15,
             D14_2,
             D14_27,
             D14_3,
             D14_39,
             D15_1,
             D15_15,
             D15_2,
             D15_27,
             D15_3,
             D15_39,
             D16_1,
             D16_15,
             D16_2,
             D16_27,
             D16_3,
             D16_39,
             D17_1,
             D17_15,
             D17_2,
             D17_27,
             D17_3,
             D17_39,
             D18_1,
             D18_15,
             D18_2,
             D18_27,
             D18_3,
             D18_39,
             D19_1,
             D19_15,
             D19_2,
             D19_27,
             D19_3,
             D19_39,
             D20_1,
             D20_15,
             D20_2,
             D20_27,
             D20_3,
             D20_39,
             D21_1,
             D21_15,
             D21_2,
             D21_27,
             D21_3,
             D21_39,
             D22_1,
             D22_15,
             D22_2,
             D22_27,
             D22_3,
             D22_39,
             D23_1,
             D23_15,
             D23_2,
             D23_27,
             D23_3,
             D23_39,
             D24_1,
             D24_15,
             D24_2,
             D24_27,
             D24_3,
             D24_39,
             D25_1,
             D25_15,
             D25_2,
             D25_27,
             D25_3,
             D25_39,
             D26_1,
             D26_15,
             D26_2,
             D26_27,
             D26_3,
             D26_39,
             D27_1,
             D27_15,
             D27_2,
             D27_27,
             D27_3,
             D27_39,
             D28_1,
             D28_15,
             D28_2,
             D28_27,
             D28_3,
             D28_39,
             D29_1,
             D29_15,
             D29_2,
             D29_27,
             D29_3,
             D29_39,
             D30_1,
             D30_15,
             D30_2,
             D30_27,
             D30_3,
             D30_39,
             D31_1,
             D31_15,
             D31_2,
             D31_27,
             D31_3,
             D31_39,
             FROM_DATE,
             END_DATE,
             BACKUP_MONTH_BEFORE,
             GHINHAN_OT
        FROM AT_TIME_TIMESHEET_NB_TEMP E;
  
    DELETE AT_TIME_TIMESHEET_NB E
     WHERE E.PERIOD_ID = P_PERIOD_ID
       AND E.EMPLOYEE_ID NOT IN
           (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP_CLEAR);
           
  END;

  PROCEDURE CAL_TIME_TIMESHEET_RICE(P_USERNAME   NVARCHAR2,
                                    P_ORG_ID     IN NUMBER,
                                    P_PERIOD_ID  IN NUMBER,
                                    P_ISDISSOLVE IN NUMBER) IS
    PV_FROMDATE   DATE;
    PV_ENDDATE    DATE;
    PV_REQUEST_ID NUMBER;
  BEGIN
    PV_REQUEST_ID := SEQ_AT_REQUEST.NEXTVAL;
  
    SELECT P.START_DATE, P.END_DATE
      INTO PV_FROMDATE, PV_ENDDATE
      FROM AT_PERIOD P
     WHERE P.ID = P_PERIOD_ID;
    -- XOA DU LIEU CU TRUOC KHI TINH
  
    -- Insert org can tinh toan
    INSERT INTO AT_CHOSEN_ORG E
      (SELECT ORG_ID, UPPER(P_USERNAME), PV_REQUEST_ID
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME),
                                    P_ORG_ID,
                                    P_ISDISSOLVE)) O
        WHERE EXISTS (SELECT 1
                 FROM AT_ORG_PERIOD OP
                WHERE OP.PERIOD_ID = P_PERIOD_ID
                  AND OP.ORG_ID = O.ORG_ID
                  AND OP.STATUSCOLEX = 1));
  
    -- insert emp can tinh toan
    INSERT INTO AT_CHOSEN_EMP E
      (EMPLOYEE_ID,
       ITIME_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       STAFF_RANK_LEVEL,
       USERNAME,
       REQUEST_ID)
      (SELECT T.ID,
              T.ITIME_ID,
              W.ORG_ID,
              W.TITLE_ID,
              W.STAFF_RANK_ID,
              W.LEVEL_STAFF,
              UPPER(P_USERNAME),
              PV_REQUEST_ID
         FROM HU_EMPLOYEE T
        INNER JOIN (SELECT E.EMPLOYEE_ID,
                          E.TITLE_ID,
                          E.ORG_ID,
                          E.STAFF_RANK_ID,
                          E.IS_3B,
                          S.LEVEL_STAFF,
                          ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                     FROM HU_WORKING E
                     LEFT JOIN HU_STAFF_RANK S
                       ON E.STAFF_RANK_ID = S.ID
                    WHERE E.EFFECT_DATE <= PV_ENDDATE
                      AND E.STATUS_ID = 447
                      AND E.IS_3B = 0) W
           ON T.ID = W.EMPLOYEE_ID
          AND W.ROW_NUMBER = 1
        INNER JOIN (SELECT ORG_ID FROM AT_CHOSEN_ORG O) O
           ON O.ORG_ID = W.ORG_ID
        WHERE (NVL(T.WORK_STATUS, 0) <> 257 OR
              (T.WORK_STATUS = 257 AND T.TER_LAST_DATE >= PV_FROMDATE)));
  
    INSERT INTO AT_CHOSEN_EMP_CLEAR
      (EMPLOYEE_ID, REQUEST_ID)
      (SELECT EMPLOYEE_ID, PV_REQUEST_ID
         FROM (SELECT A.*,
                      ROW_NUMBER() OVER(PARTITION BY A.EMPLOYEE_ID ORDER BY A.EFFECT_DATE DESC, A.ID DESC) AS ROW_NUMBER
                 FROM HU_WORKING A
                WHERE A.STATUS_ID = 447
                  AND A.EFFECT_DATE <= PV_ENDDATE
                  AND A.IS_3B = 0) C
        INNER JOIN HU_EMPLOYEE EE
           ON C.EMPLOYEE_ID = EE.ID
          AND C.ROW_NUMBER = 1
        WHERE (NVL(EE.WORK_STATUS, 0) <> 257 OR
              (EE.WORK_STATUS = 257 AND EE.TER_LAST_DATE >= PV_FROMDATE)));
  
    DELETE FROM AT_TIME_TIMESHEET_RICE D
     WHERE D.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP O)
       AND D.PERIOD_ID = P_PERIOD_ID;
  
    INSERT INTO AT_TIME_RICE_TEM
      SELECT C.EMPLOYEE_ID,
             C.WORKINGDAY,
             C.DAY,
             C.ORG_ID,
             P_PERIOD_ID,
             PV_FROMDATE,
             PV_ENDDATE,
             C.MANUAL_ID,
             CASE
               WHEN C.MANUAL_ID > 0 THEN
                (SELECT NVL(P.PRICE, 0)
                   FROM PA_PRICE_LUNCH P
                  INNER JOIN PA_ORG_LUNCH L
                     ON P.ID = L.LUNCH_ID
                  WHERE L.ORG_ID = C.ORG_ID
                    AND C.WORKINGDAY >= P.EFFECT_DATE
                    AND C.WORKINGDAY <= P.EXPIRE_DATE
                    AND ROWNUM = 1) * C.MANUAL_ID
               ELSE
                0
             END PRICE,
             C.TITLE_ID,
             C.STAFF_RANK_ID
        FROM (SELECT D.EMPLOYEE_ID,
                     D.WORKINGDAY,
                     TO_NUMBER(TO_CHAR(D.WORKINGDAY, 'dd')) AS DAY,
                     E.ORG_ID,
                     E.TITLE_ID,
                     E.STAFF_RANK_ID,
                     CASE
                       WHEN ((WORKSIGN.SHIFT_ID IS NULL) OR
                            (WORKSIGN.SHIFT_ID IS NOT NULL AND
                            WORKSIGN.SHIFT_ID <> 81 AND
                            NVL(SHIFT.NVALUE, 0) > 4)) THEN
                        1
                       ELSE
                        0
                     END MANUAL_ID
                FROM AT_TIME_TIMESHEET_DAILY D
               INNER JOIN AT_TIME_MANUAL M
                  ON D.MANUAL_ID = M.ID
                 AND M.IS_PAID_RICE = -1
                LEFT JOIN AT_WORKSIGN WORKSIGN
                  ON D.WORKINGDAY = WORKSIGN.WORKINGDAY
                 AND D.EMPLOYEE_ID = WORKSIGN.EMPLOYEE_ID
                LEFT JOIN (SELECT CASE
                                   WHEN SHIFT.HOURS_STOP IS NOT NULL AND
                                        SHIFT.HOURS_START IS NOT NULL THEN
                                    CASE
                                      WHEN SHIFT.HOURS_STOP < SHIFT.HOURS_START THEN
                                       (SHIFT.HOURS_STOP + 1 - SHIFT.HOURS_START) * 24
                                      ELSE
                                       (SHIFT.HOURS_STOP - SHIFT.HOURS_START) * 24
                                    END
                                   ELSE
                                    0
                                 END - CASE
                                   WHEN SHIFT.BREAKS_FORM IS NOT NULL AND
                                        SHIFT.BREAKS_TO IS NOT NULL THEN
                                    (SHIFT.BREAKS_TO - SHIFT.BREAKS_FORM) * 24
                                   ELSE
                                    0
                                 END NVALUE,
                                 SHIFT.ID SHIFT_ID
                            FROM AT_SHIFT SHIFT) SHIFT
                  ON WORKSIGN.SHIFT_ID = SHIFT.SHIFT_ID
                LEFT JOIN AT_FML F
                  ON F.ID = M.MORNING_ID
                LEFT JOIN AT_FML F2
                  ON F2.ID = M.AFTERNOON_ID
               INNER JOIN AT_CHOSEN_EMP E
                  ON D.EMPLOYEE_ID = E.EMPLOYEE_ID
               WHERE D.WORKINGDAY >= PV_FROMDATE
                 AND D.WORKINGDAY <= PV_ENDDATE) C;
  
    -- KHOI TAO DDU LIEU
    INSERT INTO AT_TIME_TIMESHEET_RICE_TEM
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       PERIOD_ID,
       FROM_DATE,
       END_DATE,
       D1,
       D2,
       D3,
       D4,
       D5,
       D6,
       D7,
       D8,
       D9,
       D10,
       D11,
       D12,
       D13,
       D14,
       D15,
       D16,
       D17,
       D18,
       D19,
       D20,
       D21,
       D22,
       D23,
       D24,
       D25,
       D26,
       D27,
       D28,
       D29,
       D30,
       D31,
       CREATED_DATE,
       CREATED_BY,
       NDAY_RICE,
       TOTAL_RICE_PRICE,
       TOTAL_RICE_DECLARE,
       TOTAL_RICE)
      SELECT SEQ_AT_TIME_TIMESHEET_RICE.NEXTVAL,
             A.EMPLOYEE_ID,
             A.ORG_ID,
             A.TITLE_ID,
             A.STAFF_RANK_ID,
             P_PERIOD_ID,
             PV_FROMDATE,
             PV_ENDDATE,
             A.D1,
             A.D2,
             A.D3,
             A.D4,
             A.D5,
             A.D6,
             A.D7,
             A.D8,
             A.D9,
             A.D10,
             A.D11,
             A.D12,
             A.D13,
             A.D14,
             A.D15,
             A.D16,
             A.D17,
             A.D18,
             A.D19,
             A.D20,
             A.D21,
             A.D22,
             A.D23,
             A.D24,
             A.D25,
             A.D26,
             A.D27,
             A.D28,
             A.D29,
             A.D30,
             A.D31,
             SYSDATE,
             UPPER(P_USERNAME),
             NVL(D.NDAY_RICE, 0),
             NVL(RICE_PRICE.TOTAL_RICE_PRICE, 0),
             NVL(RICE_DECLARE.TOTAL_RICE_DECLARE, 0),
             NVL(RICE_PRICE.TOTAL_RICE_PRICE, 0) +
             NVL(RICE_DECLARE.TOTAL_RICE_DECLARE, 0)
        FROM (SELECT E.EMPLOYEE_ID,
                     E.ORG_ID,
                     E1.DAY,
                     E1.MANUAL_ID,
                     E.TITLE_ID,
                     E.STAFF_RANK_ID
                FROM AT_CHOSEN_EMP E
                LEFT JOIN (SELECT D.EMPLOYEE_ID,
                                 D.ORG_ID,
                                 D.DAYS DAY,
                                 D.MANUAL_ID,
                                 D.TITLE_ID,
                                 D.STAFF_RANK_ID
                            FROM AT_TIME_RICE_TEM D) E1
                  ON E.EMPLOYEE_ID = E1.EMPLOYEE_ID)
      PIVOT(MAX(MANUAL_ID)
         FOR DAY IN(1 AS D1,
                    2 AS D2,
                    3 AS D3,
                    4 AS D4,
                    5 AS D5,
                    6 AS D6,
                    7 AS D7,
                    8 AS D8,
                    9 AS D9,
                    10 AS D10,
                    11 AS D11,
                    12 AS D12,
                    13 AS D13,
                    14 AS D14,
                    15 AS D15,
                    16 AS D16,
                    17 AS D17,
                    18 AS D18,
                    19 AS D19,
                    20 AS D20,
                    21 AS D21,
                    22 AS D22,
                    23 AS D23,
                    24 AS D24,
                    25 AS D25,
                    26 AS D26,
                    27 AS D27,
                    28 AS D28,
                    29 AS D29,
                    30 AS D30,
                    31 AS D31)) A
        LEFT JOIN (SELECT D.EMPLOYEE_ID,
                          SUM(CASE
                                WHEN ((WORKSIGN.SHIFT_ID IS NULL) OR
                                     (WORKSIGN.SHIFT_ID IS NOT NULL AND
                                     WORKSIGN.SHIFT_ID <> 81 AND
                                     NVL(SHIFT.NVALUE, 0) > 4)) THEN
                                 1
                                ELSE
                                 0
                              END) NDAY_RICE
                     FROM AT_TIME_TIMESHEET_DAILY D
                     LEFT JOIN AT_WORKSIGN WORKSIGN
                       ON D.WORKINGDAY = WORKSIGN.WORKINGDAY
                      AND D.EMPLOYEE_ID = WORKSIGN.EMPLOYEE_ID
                     LEFT JOIN (SELECT CASE
                                        WHEN SHIFT.HOURS_STOP IS NOT NULL AND
                                             SHIFT.HOURS_START IS NOT NULL THEN
                                         CASE
                                           WHEN SHIFT.HOURS_STOP <
                                                SHIFT.HOURS_START THEN
                                            (SHIFT.HOURS_STOP + 1 -
                                            SHIFT.HOURS_START) * 24
                                           ELSE
                                            (SHIFT.HOURS_STOP -
                                            SHIFT.HOURS_START) * 24
                                         END
                                        ELSE
                                         0
                                      END - CASE
                                        WHEN SHIFT.BREAKS_FORM IS NOT NULL AND
                                             SHIFT.BREAKS_TO IS NOT NULL THEN
                                         (SHIFT.BREAKS_TO - SHIFT.BREAKS_FORM) * 24
                                        ELSE
                                         0
                                      END NVALUE,
                                      SHIFT.ID SHIFT_ID
                                 FROM AT_SHIFT SHIFT) SHIFT
                       ON WORKSIGN.SHIFT_ID = SHIFT.SHIFT_ID
                    INNER JOIN AT_TIME_MANUAL M
                       ON D.MANUAL_ID = M.ID
                     LEFT JOIN AT_FML F
                       ON F.ID = M.MORNING_ID
                     LEFT JOIN AT_FML F2
                       ON F2.ID = M.AFTERNOON_ID
                    WHERE D.WORKINGDAY >= PV_FROMDATE
                      AND D.WORKINGDAY <= PV_ENDDATE
                      AND M.IS_PAID_RICE = -1
                    GROUP BY D.EMPLOYEE_ID) D
          ON D.EMPLOYEE_ID = A.EMPLOYEE_ID
        LEFT JOIN (SELECT O.EMPLOYEE_ID,
                          SUM(NVL(O.PRICE_GENERAL, 0)) TOTAL_RICE_PRICE
                     FROM AT_TIME_RICE_TEM O
                    GROUP BY O.EMPLOYEE_ID) RICE_PRICE
          ON RICE_PRICE.EMPLOYEE_ID = A.EMPLOYEE_ID
        LEFT JOIN (SELECT C.EMPLOYEE_ID,
                          SUM(NVL(C.PRICE, 0)) TOTAL_RICE_DECLARE
                     FROM AT_TIME_RICE C
                    WHERE C.WORKINGDAY >= PV_FROMDATE
                      AND C.WORKINGDAY <= PV_ENDDATE
                    GROUP BY C.EMPLOYEE_ID) RICE_DECLARE
          ON RICE_DECLARE.EMPLOYEE_ID = A.EMPLOYEE_ID;
  
    ----------------------------------------------------------------
    -- TONG HOP CONG COM 
    -------------------------------------------------------------- 
    INSERT INTO AT_TIME_TIMESHEET_RICE T
      SELECT * FROM AT_TIME_TIMESHEET_RICE_TEM T1;
  
    DELETE AT_TIME_TIMESHEET_RICE E
     WHERE E.PERIOD_ID = P_PERIOD_ID
       AND E.EMPLOYEE_ID NOT IN
           (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP_CLEAR);
           
  END;

  PROCEDURE DELETE_WORKSIGN(P_EMPLOYEE_ID IN NUMBER,
                            P_FROM        IN DATE,
                            P_TO          IN DATE) IS
  BEGIN
    DELETE AT_WORKSIGN A
     WHERE A.EMPLOYEE_ID = P_EMPLOYEE_ID
       AND TO_CHAR(A.WORKINGDAY, 'YYYYMMDD') >= TO_CHAR(P_FROM, 'YYYYMMDD')
       AND TO_CHAR(A.WORKINGDAY, 'YYYYMMDD') <= TO_CHAR(P_TO, 'YYYYMMDD');
  END;

  PROCEDURE GET_WORKSIGN(P_LANGUAGE        IN NVARCHAR2,
                         P_USERNAME      IN NVARCHAR2,
                         P_ORG_ID        IN NUMBER,
                         P_ISDISSOLVE    IN NUMBER,
                         P_PAGE_INDEX    IN NUMBER,
                         P_EMPLOYEE_CODE IN VARCHAR2,
                         P_PAGE_SIZE     IN NUMBER,
                         P_PERIOD_ID     IN NUMBER,
                         P_CUR           OUT CURSOR_TYPE,
                         P_CURCOUNR      OUT CURSOR_TYPE) IS
    PV_STARTDATE DATE;
    PV_ENDDATE   DATE;
  BEGIN
  
    IF P_PERIOD_ID IS NULL OR P_PERIOD_ID = 0 THEN
      PV_STARTDATE := TO_DATE('01/01/2016', 'dd/MM/yyyy');
      PV_ENDDATE   := TO_DATE('31/01/2016', 'dd/MM/yyyy');
    ELSE
      SELECT P.START_DATE, P.END_DATE
        INTO PV_STARTDATE, PV_ENDDATE
        FROM AT_PERIOD P
       WHERE P.ID = P_PERIOD_ID;
    END IF;
  
    OPEN P_CUR FOR
      SELECT EE.ID,
             EE.EMPLOYEE_CODE,
             DECODE(P_LANGUAGE, 'vi-VN', EE.FULLNAME_VN, NVL(EE.FULLNAME_EN, EE.FULLNAME_VN)) VN_FULLNAME,
             DECODE(P_LANGUAGE, 'vi-VN', O.Name_Vn, NVL(O.Name_En, O.Name_Vn))              ORG_NAME,
             O.DESCRIPTION_PATH ORG_DESC,
             DECODE(P_LANGUAGE, 'vi-VN', TI.Name_Vn, NVL(TI.Name_En, TI.Name_Vn))             TITLE_NAME,
             DECODE(P_LANGUAGE, 'vi-VN', ji.NAME, NVL(ji.NAME_EN,ji.NAME)) JOB_POSITION_NAME,
             A.D1,
             A.D2,
             A.D3,
             A.D4,
             A.D5,
             A.D6,
             A.D7,
             A.D8,
             A.D9,
             A.D10,
             A.D11,
             A.D12,
             A.D13,
             A.D14,
             A.D15,
             A.D16,
             A.D17,
             A.D18,
             A.D19,
             A.D20,
             A.D21,
             A.D22,
             A.D23,
             A.D24,
             A.D25,
             A.D26,
             A.D27,
             A.D28,
             A.D29,
             A.D30,
             A.D31
        FROM (SELECT T.EMPLOYEE_ID,
                     WK.ORG_ID,
                     TO_NUMBER(TO_CHAR(T.WORKINGDAY, 'dd')) AS DAY,
                     L.CODE
                FROM AT_WORKSIGN T
                LEFT JOIN AT_SHIFT L
                  ON T.SHIFT_ID = L.ID
               INNER JOIN (SELECT E.EMPLOYEE_ID,
                                 E.TITLE_ID,
                                 E.ORG_ID,
                                 E.ID,
                                 E.STAFF_RANK_ID,
                                 EMP.LAST_WORKING_ID,
                                 E.EFFECT_DATE,
                                 E.IS_3B,
                                 ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                            FROM HU_WORKING E
                           INNER JOIN HU_EMPLOYEE EMP
                              ON E.EMPLOYEE_ID = EMP.ID
                           WHERE E.EFFECT_DATE <= TRUNC(SYSDATE)
                             AND E.STATUS_ID = 447
                             AND E.IS_3B = 0) WK
                  ON T.EMPLOYEE_ID = WK.EMPLOYEE_ID
                 AND WK.ROW_NUMBER = 1
               INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O1
                  ON WK.ORG_ID = O1.ORG_ID
               WHERE TO_CHAR(T.WORKINGDAY, 'YYYYMMDD') >=
                     TO_CHAR(PV_STARTDATE, 'YYYYMMDD')
                 AND TO_CHAR(T.WORKINGDAY, 'YYYYMMDD') <=
                     TO_CHAR(PV_ENDDATE, 'YYYYMMDD'))
      PIVOT(MAX(CODE)
         FOR DAY IN(1 AS D1,
                    2 AS D2,
                    3 AS D3,
                    4 AS D4,
                    5 AS D5,
                    6 AS D6,
                    7 AS D7,
                    8 AS D8,
                    9 AS D9,
                    10 AS D10,
                    11 AS D11,
                    12 AS D12,
                    13 AS D13,
                    14 AS D14,
                    15 AS D15,
                    16 AS D16,
                    17 AS D17,
                    18 AS D18,
                    19 AS D19,
                    20 AS D20,
                    21 AS D21,
                    22 AS D22,
                    23 AS D23,
                    24 AS D24,
                    25 AS D25,
                    26 AS D26,
                    27 AS D27,
                    28 AS D28,
                    29 AS D29,
                    30 AS D30,
                    31 AS D31)) A
       INNER JOIN HU_EMPLOYEE EE
          ON EE.ID = A.EMPLOYEE_ID
        LEFT JOIN HU_ORGANIZATION O
          ON O.ID = A.ORG_ID
        LEFT JOIN HU_JOB_POSITION JI
                  ON JI.ID = EE.JOB_POSITION_ID
       INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O1
          ON A.ORG_ID = O1.ORG_ID
        LEFT JOIN HU_TITLE TI
          ON TI.ID = EE.TITLE_ID
       WHERE (P_EMPLOYEE_CODE IS NULL OR
             (P_EMPLOYEE_CODE IS NOT NULL AND
             EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
          OR (P_EMPLOYEE_CODE IS NULL OR
             (P_EMPLOYEE_CODE IS NOT NULL AND
             EE.FULLNAME_VN LIKE '%' || P_EMPLOYEE_CODE || '%'))
       ORDER BY EE.EMPLOYEE_CODE;
  
    OPEN P_CURCOUNR FOR
      SELECT COUNT(*) TOTAL
        FROM (SELECT T.EMPLOYEE_ID,
                     WK.ORG_ID,
                     TO_NUMBER(TO_CHAR(T.WORKINGDAY, 'dd')) AS DAY,
                     L.CODE
                FROM AT_WORKSIGN T
                LEFT JOIN AT_SHIFT L
                  ON T.SHIFT_ID = L.ID
               INNER JOIN (SELECT E.EMPLOYEE_ID,
                                 E.TITLE_ID,
                                 E.ORG_ID,
                                 E.ID,
                                 E.STAFF_RANK_ID,
                                 EMP.LAST_WORKING_ID,
                                 E.EFFECT_DATE,
                                 E.IS_3B,
                                 ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                            FROM HU_WORKING E
                           INNER JOIN HU_EMPLOYEE EMP
                              ON E.EMPLOYEE_ID = EMP.ID
                           WHERE E.EFFECT_DATE <= TRUNC(SYSDATE)
                             AND E.STATUS_ID = 447
                             AND E.IS_3B = 0) WK
                  ON T.EMPLOYEE_ID = WK.EMPLOYEE_ID
                 AND WK.ROW_NUMBER = 1
               INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O1
                  ON WK.ORG_ID = O1.ORG_ID
               WHERE TO_CHAR(T.WORKINGDAY, 'YYYYMMDD') >=
                     TO_CHAR(PV_STARTDATE, 'YYYYMMDD')
                 AND TO_CHAR(T.WORKINGDAY, 'YYYYMMDD') <=
                     TO_CHAR(PV_ENDDATE, 'YYYYMMDD'))
      PIVOT(MAX(CODE)
         FOR DAY IN(1 AS D1,
                    2 AS D2,
                    3 AS D3,
                    4 AS D4,
                    5 AS D5,
                    6 AS D6,
                    7 AS D7,
                    8 AS D8,
                    9 AS D9,
                    10 AS D10,
                    11 AS D11,
                    12 AS D12,
                    13 AS D13,
                    14 AS D14,
                    15 AS D15,
                    16 AS D16,
                    17 AS D17,
                    18 AS D18,
                    19 AS D19,
                    20 AS D20,
                    21 AS D21,
                    22 AS D22,
                    23 AS D23,
                    24 AS D24,
                    25 AS D25,
                    26 AS D26,
                    27 AS D27,
                    28 AS D28,
                    29 AS D29,
                    30 AS D30,
                    31 AS D31)) A
       INNER JOIN HU_EMPLOYEE EE
          ON EE.ID = A.EMPLOYEE_ID
        LEFT JOIN HU_ORGANIZATION O
          ON O.ID = A.ORG_ID
       INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O1
          ON A.ORG_ID = O1.ORG_ID
        LEFT JOIN HU_TITLE TI
          ON TI.ID = EE.TITLE_ID
       WHERE (P_EMPLOYEE_CODE IS NULL OR
             (P_EMPLOYEE_CODE IS NOT NULL AND
             EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
          OR (P_EMPLOYEE_CODE IS NULL OR
             (P_EMPLOYEE_CODE IS NOT NULL AND
             EE.FULLNAME_VN LIKE '%' || P_EMPLOYEE_CODE || '%'));
  END;

  PROCEDURE GET_CCT(P_LANGUAGE IN NVARCHAR2, 
		                P_USERNAME      IN NVARCHAR2,
                    P_ORG_ID        IN NUMBER,
                    P_ISDISSOLVE    IN NUMBER,
                    P_PAGE_INDEX    IN NUMBER,
                    P_EMPLOYEE_CODE IN NVARCHAR2,
                    P_EMPLOYEE_NAME IN NVARCHAR2,
                    P_ORG_NAME      IN NVARCHAR2,
                    P_TITLE_NAME    IN NVARCHAR2,
                    P_PAGE_SIZE     IN NUMBER,
                    P_PERIOD_ID     IN NUMBER,
                    P_TERMINATE     IN NUMBER,
                    P_CUR           OUT CURSOR_TYPE,
                    P_CURCOUNR      OUT CURSOR_TYPE) IS
    PV_STARTDATE DATE;
    PV_ENDDATE   DATE;
  BEGIN
  
    IF P_PERIOD_ID IS NULL OR P_PERIOD_ID = 0 THEN
      PV_STARTDATE := TO_DATE('01/01/2016', 'dd/MM/yyyy');
      PV_ENDDATE   := TO_DATE('31/01/2016', 'dd/MM/yyyy');
    ELSE
      SELECT P.START_DATE, P.END_DATE
        INTO PV_STARTDATE, PV_ENDDATE
        FROM AT_PERIOD P
       WHERE P.ID = P_PERIOD_ID;
    END IF;
  
    PKG_COMMON_LIST.INSERT_CHOSEN_ORG(P_USERNAME, P_ORG_ID, P_ISDISSOLVE);
  
    OPEN P_CUR FOR
      SELECT *
        FROM (SELECT ROWNUM             TT,
                     EE.ID              EMPLOYEE_ID,
                     EE.EMPLOYEE_CODE,
                     EE.FULLNAME_VN     VN_FULLNAME,
                     DECODE(P_LANGUAGE, 'vi-VN', o.NAME_VN, NVL(o.NAME_EN,o.NAME_VN)) ORG_NAME,
                     O.ORG_PATH,
                     O.DESCRIPTION_PATH ORG_DESC,
                     DECODE(P_LANGUAGE, 'vi-VN', TI.NAME_VN, NVL(TI.NAME_EN,TI.NAME_VN)) TITLE_NAME,
										 DECODE(P_LANGUAGE, 'vi-VN', ji.NAME, NVL(ji.NAME_EN,ji.NAME)) JOB_POSITION_NAME,
                     S.LEVEL_STAFF             STAFF_RANK_NAME,
                     A.D1,
                     A.D2,
                     A.D3,
                     A.D4,
                     A.D5,
                     A.D6,
                     A.D7,
                     A.D8,
                     A.D9,
                     A.D10,
                     A.D11,
                     A.D12,
                     A.D13,
                     A.D14,
                     A.D15,
                     A.D16,
                     A.D17,
                     A.D18,
                     A.D19,
                     A.D20,
                     A.D21,
                     A.D22,
                     A.D23,
                     A.D24,
                     A.D25,
                     A.D26,
                     A.D27,
                     A.D28,
                     A.D29,
                     A.D30,
                     A.D31,
                     DC.D1              D1_COLOR,
                     DC.D2              D2_COLOR,
                     DC.D3              D3_COLOR,
                     DC.D4              D4_COLOR,
                     DC.D5              D5_COLOR,
                     DC.D6              D6_COLOR,
                     DC.D7              D7_COLOR,
                     DC.D8              D8_COLOR,
                     DC.D9              D9_COLOR,
                     DC.D10             D10_COLOR,
                     DC.D11             D11_COLOR,
                     DC.D12             D12_COLOR,
                     DC.D13             D13_COLOR,
                     DC.D14             D14_COLOR,
                     DC.D15             D15_COLOR,
                     DC.D16             D16_COLOR,
                     DC.D17             D17_COLOR,
                     DC.D18             D18_COLOR,
                     DC.D19             D19_COLOR,
                     DC.D20             D20_COLOR,
                     DC.D21             D21_COLOR,
                     DC.D22             D22_COLOR,
                     DC.D23             D23_COLOR,
                     DC.D24             D24_COLOR,
                     DC.D25             D25_COLOR,
                     DC.D26             D26_COLOR,
                     DC.D27             D27_COLOR,
                     DC.D28             D28_COLOR,
                     DC.D29             D29_COLOR,
                     DC.D30             D30_COLOR,
                     DC.D31             D31_COLOR
                FROM (SELECT T.EMPLOYEE_ID,
                             T.ORG_ID,
                             T.TITLE_ID,
                             TO_NUMBER(TO_CHAR(T.WORKINGDAY, 'dd')) AS DAY,
                             NVL(L.CODE, NULL) CODE
                        FROM AT_TIME_TIMESHEET_DAILY T
                       INNER JOIN SE_CHOSEN_ORG CHOSEN
                          ON CHOSEN.ORG_ID = T.ORG_ID
                         AND CHOSEN.USERNAME = UPPER(P_USERNAME)
                        LEFT JOIN AT_TIME_MANUAL L
                          ON T.MANUAL_ID = L.ID
                       WHERE T.WORKINGDAY >= PV_STARTDATE
                         AND T.WORKINGDAY <= PV_ENDDATE)
              PIVOT(MAX(CODE)
                 FOR DAY IN(1 AS D1,
                           2 AS D2,
                           3 AS D3,
                           4 AS D4,
                           5 AS D5,
                           6 AS D6,
                           7 AS D7,
                           8 AS D8,
                           9 AS D9,
                           10 AS D10,
                           11 AS D11,
                           12 AS D12,
                           13 AS D13,
                           14 AS D14,
                           15 AS D15,
                           16 AS D16,
                           17 AS D17,
                           18 AS D18,
                           19 AS D19,
                           20 AS D20,
                           21 AS D21,
                           22 AS D22,
                           23 AS D23,
                           24 AS D24,
                           25 AS D25,
                           26 AS D26,
                           27 AS D27,
                           28 AS D28,
                           29 AS D29,
                           30 AS D30,
                           31 AS D31)) A
               INNER JOIN HU_EMPLOYEE EE
                  ON EE.ID = A.EMPLOYEE_ID
                LEFT JOIN HUV_ORGANIZATION O
                  ON O.ID = A.ORG_ID
                LEFT JOIN HU_TITLE TI
                  ON TI.ID = A.TITLE_ID
								LEFT JOIN HU_JOB_POSITION JI
                  ON JI.ID = EE.JOB_POSITION_ID
                LEFT JOIN HU_STAFF_RANK S
                  ON S.ID = EE.STAFF_RANK_ID
                LEFT JOIN (SELECT A.EMPLOYEE_ID,
                                 A.D1,
                                 A.D2,
                                 A.D3,
                                 A.D4,
                                 A.D5,
                                 A.D6,
                                 A.D7,
                                 A.D8,
                                 A.D9,
                                 A.D10,
                                 A.D11,
                                 A.D12,
                                 A.D13,
                                 A.D14,
                                 A.D15,
                                 A.D16,
                                 A.D17,
                                 A.D18,
                                 A.D19,
                                 A.D20,
                                 A.D21,
                                 A.D22,
                                 A.D23,
                                 A.D24,
                                 A.D25,
                                 A.D26,
                                 A.D27,
                                 A.D28,
                                 A.D29,
                                 A.D30,
                                 A.D31
                            FROM (SELECT T.EMPLOYEE_ID,
                                         T.ORG_ID,
                                         TO_NUMBER(TO_CHAR(T.WORKINGDAY, 'dd')) AS DAY,
                                         T.NUMBER_SWIPE,
                                         CASE
                                           WHEN T.WORKINGHOUR > 0 AND
                                                NVL(T.LEAVE_ID, 0) > 0 AND
                                                T.MODIFIED_DATE IS NULL THEN
                                            1
                                           WHEN NVL(T.WORKINGHOUR, 0) <
                                                NVL(T.WORKINGHOUR_SHIFT, 0) AND
                                                NVL(T.MANUAL_ID, 0) <= 0 AND
                                                NVL(T.WORKINGHOUR, 0) > 0 AND
                                                ((NVL(SHIFT.IS_NOON, 0) = 0 AND
                                                 T.VALIN1 IS NOT NULL AND
                                                 T.VALIN2 IS NOT NULL) OR
                                                 (NVL(SHIFT.IS_NOON, 0) = -1 AND
                                                 T.VALIN1 IS NOT NULL AND
                                                 T.VALIN2 IS NOT NULL AND
                                                 T.VALIN3 IS NOT NULL AND
                                                 T.VALIN4 IS NOT NULL)) AND
                                                T.MODIFIED_DATE IS NULL THEN
                                            2
                                           WHEN SHIFT.ID IS NOT NULL AND
                                                NVL(SHIFT.IS_NOON, 0) = 0 AND
                                                (T.VALIN2 IS NULL OR
                                                T.VALIN1 IS NULL) AND
                                                NVL(T.MANUAL_ID, 0) <= 0 THEN
                                            3
                                           WHEN SHIFT.ID IS NOT NULL AND
                                                NVL(SHIFT.IS_NOON, 0) = -1 AND
                                                (T.VALIN4 IS NULL OR
                                                T.VALIN3 IS NULL OR
                                                T.VALIN2 IS NULL OR
                                                T.VALIN1 IS NULL) AND
                                                NVL(T.MANUAL_ID, 0) <= 0 AND
                                                T.MODIFIED_DATE IS NULL THEN
                                            3
                                           WHEN T.SHIFT_CODE IS NULL AND
                                                T.VALIN1 IS NULL AND
                                                NVL(T.LEAVE_ID, 0) = 0 AND
                                                NVL(T.MANUAL_ID, 0) <= 0 AND
                                                T.MODIFIED_DATE IS NULL THEN
                                            4
                                         END CODE
                                    FROM AT_TIME_TIMESHEET_DAILY T
                                   INNER JOIN SE_CHOSEN_ORG CHOSEN
                                      ON CHOSEN.ORG_ID = T.ORG_ID
                                     AND CHOSEN.USERNAME = UPPER(P_USERNAME)
                                    LEFT JOIN AT_TIME_MANUAL L
                                      ON T.MANUAL_ID = L.ID
                                    LEFT JOIN AT_SHIFT SHIFT
                                      ON T.SHIFT_ID = SHIFT.ID
                                   WHERE T.WORKINGDAY >= PV_STARTDATE
                                     AND T.WORKINGDAY <= PV_ENDDATE)
                          PIVOT(MAX(CODE)
                             FOR DAY IN(1 AS D1,
                                       2 AS D2,
                                       3 AS D3,
                                       4 AS D4,
                                       5 AS D5,
                                       6 AS D6,
                                       7 AS D7,
                                       8 AS D8,
                                       9 AS D9,
                                       10 AS D10,
                                       11 AS D11,
                                       12 AS D12,
                                       13 AS D13,
                                       14 AS D14,
                                       15 AS D15,
                                       16 AS D16,
                                       17 AS D17,
                                       18 AS D18,
                                       19 AS D19,
                                       20 AS D20,
                                       21 AS D21,
                                       22 AS D22,
                                       23 AS D23,
                                       24 AS D24,
                                       25 AS D25,
                                       26 AS D26,
                                       27 AS D27,
                                       28 AS D28,
                                       29 AS D29,
                                       30 AS D30,
                                       31 AS D31)) A) DC
                  ON DC.EMPLOYEE_ID = A.EMPLOYEE_ID
               WHERE (P_EMPLOYEE_CODE IS NULL OR
                     (P_EMPLOYEE_CODE IS NOT NULL AND
                     EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
                 AND (P_EMPLOYEE_NAME IS NULL OR
                     (P_EMPLOYEE_NAME IS NOT NULL AND
                     UPPER(EE.FULLNAME_VN) LIKE
                     '%' || UPPER(P_EMPLOYEE_NAME) || '%'))
                 AND (P_ORG_NAME IS NULL OR
                     (P_ORG_NAME IS NOT NULL AND
                     UPPER(O.NAME_VN) LIKE '%' || UPPER(P_ORG_NAME) || '%'))
                 AND (P_TITLE_NAME IS NULL OR
                     (P_TITLE_NAME IS NOT NULL AND
                     UPPER(TI.NAME_VN) LIKE
                     '%' || UPPER(P_TITLE_NAME) || '%'))
                 AND (NVL(EE.WORK_STATUS, 0) <> 257 OR
                     (NVL(EE.WORK_STATUS, 0) = 257 AND
                     EE.TER_LAST_DATE >= PV_STARTDATE))) C
       WHERE C.TT < (P_PAGE_INDEX * P_PAGE_SIZE) + 1
         AND C.TT >= ((P_PAGE_INDEX - 1) * P_PAGE_SIZE) + 1;
  
    OPEN P_CURCOUNR FOR
      SELECT COUNT(*) TOTAL
        FROM (SELECT *
                FROM (SELECT T.EMPLOYEE_ID,
                             T.ORG_ID,
                             T.TITLE_ID,
                             TO_NUMBER(TO_CHAR(T.WORKINGDAY, 'dd')) AS DAY,
                             L.CODE
                        FROM AT_TIME_TIMESHEET_DAILY T
                        LEFT JOIN AT_TIME_MANUAL L
                          ON T.MANUAL_ID = L.ID
                       INNER JOIN SE_CHOSEN_ORG CHOSEN
                          ON CHOSEN.ORG_ID = T.ORG_ID
                         AND CHOSEN.USERNAME = UPPER(P_USERNAME)
                       WHERE TO_CHAR(T.WORKINGDAY, 'YYYYMMDD') >=
                             TO_CHAR(PV_STARTDATE, 'YYYYMMDD')
                         AND TO_CHAR(T.WORKINGDAY, 'YYYYMMDD') <=
                             TO_CHAR(PV_ENDDATE, 'YYYYMMDD'))
              PIVOT(MAX(CODE)
                 FOR DAY IN(1 AS D1)) A) A
       INNER JOIN HU_EMPLOYEE EE
          ON A.EMPLOYEE_ID = EE.ID
        LEFT JOIN HU_ORGANIZATION O
          ON O.ID = A.ORG_ID
        LEFT JOIN HU_TITLE TI
          ON TI.ID = A.TITLE_ID
        LEFT JOIN HU_STAFF_RANK S
          ON S.ID = EE.STAFF_RANK_ID
       WHERE (P_EMPLOYEE_CODE IS NULL OR
             (P_EMPLOYEE_CODE IS NOT NULL AND
             EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
         AND (P_EMPLOYEE_NAME IS NULL OR
             (P_EMPLOYEE_NAME IS NOT NULL AND
             UPPER(EE.FULLNAME_VN) LIKE
             '%' || UPPER(P_EMPLOYEE_NAME) || '%'))
         AND (P_ORG_NAME IS NULL OR
             (P_ORG_NAME IS NOT NULL AND
             UPPER(O.NAME_VN) LIKE '%' || UPPER(P_ORG_NAME) || '%'))
         AND (P_TITLE_NAME IS NULL OR
             (P_TITLE_NAME IS NOT NULL AND
             UPPER(TI.NAME_VN) LIKE '%' || UPPER(P_TITLE_NAME) || '%'))
         AND (NVL(EE.WORK_STATUS, 0) <> 257 OR
             (NVL(EE.WORK_STATUS, 0) = 257 AND
             EE.TER_LAST_DATE >= PV_STARTDATE));
  END;

  PROCEDURE GET_CCT_ORIGIN(P_LANGUAGE IN NVARCHAR2, 
		                       P_USERNAME      IN NVARCHAR2,
                           P_ORG_ID        IN NUMBER,
                           P_ISDISSOLVE    IN NUMBER,
                           P_EMPLOYEE_CODE IN NVARCHAR2,
                           P_EMPLOYEE_NAME IN NVARCHAR2,
                           P_ORG_NAME      IN NVARCHAR2,
                           P_TITLE_NAME    IN NVARCHAR2,
                           P_PERIOD_ID     IN NUMBER,
                           P_TERMINATE     IN NUMBER,
                           P_CUR           OUT CURSOR_TYPE) IS
    PV_STARTDATE DATE;
    PV_ENDDATE   DATE;
  BEGIN
  
    IF P_PERIOD_ID IS NULL OR P_PERIOD_ID = 0 THEN
      PV_STARTDATE := TO_DATE('01/01/2016', 'dd/MM/yyyy');
      PV_ENDDATE   := TO_DATE('31/01/2016', 'dd/MM/yyyy');
    ELSE
      SELECT P.START_DATE, P.END_DATE
        INTO PV_STARTDATE, PV_ENDDATE
        FROM AT_PERIOD P
       WHERE P.ID = P_PERIOD_ID;
    END IF;
  
    PKG_COMMON_LIST.INSERT_CHOSEN_ORG(P_USERNAME, P_ORG_ID, P_ISDISSOLVE);
  
    OPEN P_CUR FOR
      SELECT ROWNUM             TT,
             EE.ID              EMPLOYEE_ID,
             EE.EMPLOYEE_CODE,
             EE.FULLNAME_VN     VN_FULLNAME,
             DECODE(P_LANGUAGE, 'vi-VN', o.NAME_VN, NVL(o.NAME_EN,o.NAME_VN)) ORG_NAME,
             O.DESCRIPTION_PATH ORG_DESC,
            DECODE(P_LANGUAGE, 'vi-VN', TI.NAME_VN, NVL(TI.NAME_EN,TI.NAME_VN)) TITLE_NAME,
             DECODE(P_LANGUAGE, 'vi-VN', ji.NAME, NVL(JI.NAME_EN,JI.NAME)) JOB_POSITION_NAME,
						 S.LEVEL_STAFF             STAFF_RANK_NAME,
             A.D1,
             A.D2,
             A.D3,
             A.D4,
             A.D5,
             A.D6,
             A.D7,
             A.D8,
             A.D9,
             A.D10,
             A.D11,
             A.D12,
             A.D13,
             A.D14,
             A.D15,
             A.D16,
             A.D17,
             A.D18,
             A.D19,
             A.D20,
             A.D21,
             A.D22,
             A.D23,
             A.D24,
             A.D25,
             A.D26,
             A.D27,
             A.D28,
             A.D29,
             A.D30,
             A.D31
        FROM (SELECT T.EMPLOYEE_ID,
                     T.ORG_ID,
                     T.TITLE_ID,
                     TO_NUMBER(TO_CHAR(T.WORKINGDAY, 'dd')) AS DAY,
                     NVL(L.CODE, NULL) CODE
                FROM AT_TIME_TIMESHEET_ORIGIN T
               INNER JOIN SE_CHOSEN_ORG CHOSEN
                  ON CHOSEN.ORG_ID = T.ORG_ID
                 AND CHOSEN.USERNAME = UPPER(P_USERNAME)
                LEFT JOIN AT_TIME_MANUAL L
                  ON T.MANUAL_ID = L.ID
               WHERE T.WORKINGDAY >= PV_STARTDATE
                 AND T.WORKINGDAY <= PV_ENDDATE)
      PIVOT(MAX(CODE)
         FOR DAY IN(1 AS D1,
                    2 AS D2,
                    3 AS D3,
                    4 AS D4,
                    5 AS D5,
                    6 AS D6,
                    7 AS D7,
                    8 AS D8,
                    9 AS D9,
                    10 AS D10,
                    11 AS D11,
                    12 AS D12,
                    13 AS D13,
                    14 AS D14,
                    15 AS D15,
                    16 AS D16,
                    17 AS D17,
                    18 AS D18,
                    19 AS D19,
                    20 AS D20,
                    21 AS D21,
                    22 AS D22,
                    23 AS D23,
                    24 AS D24,
                    25 AS D25,
                    26 AS D26,
                    27 AS D27,
                    28 AS D28,
                    29 AS D29,
                    30 AS D30,
                    31 AS D31)) A
       INNER JOIN HU_EMPLOYEE EE
          ON EE.ID = A.EMPLOYEE_ID
        LEFT JOIN HU_ORGANIZATION O
          ON O.ID = A.ORG_ID
        LEFT JOIN HU_TITLE TI
          ON TI.ID = A.TITLE_ID
					LEFT JOIN HU_JOB_POSITION JI ON JI.ID=EE.JOB_POSITION_ID
        LEFT JOIN HU_STAFF_RANK S
          ON S.ID = EE.STAFF_RANK_ID
       WHERE (P_EMPLOYEE_CODE IS NULL OR
             (P_EMPLOYEE_CODE IS NOT NULL AND
             EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
         AND (P_EMPLOYEE_NAME IS NULL OR
             (P_EMPLOYEE_NAME IS NOT NULL AND
             UPPER(EE.FULLNAME_VN) LIKE
             '%' || UPPER(P_EMPLOYEE_NAME) || '%'))
         AND (P_ORG_NAME IS NULL OR
             (P_ORG_NAME IS NOT NULL AND
             UPPER(O.NAME_VN) LIKE '%' || UPPER(P_ORG_NAME) || '%'))
         AND (P_TITLE_NAME IS NULL OR
             (P_TITLE_NAME IS NOT NULL AND
             UPPER(TI.NAME_VN) LIKE '%' || UPPER(P_TITLE_NAME) || '%'))
         AND (NVL(EE.WORK_STATUS, 0) <> 257 OR
             (NVL(EE.WORK_STATUS, 0) = 257 AND
             EE.TER_LAST_DATE >= PV_STARTDATE));
  
  END;
 
 PROCEDURE GET_SUMMARY_OT(P_LANGUAGE        IN NVARCHAR2,
                          P_USERNAME        IN NVARCHAR2,
                          P_ORG_ID          IN NUMBER,
                          P_ISDISSOLVE      IN NUMBER,
                          P_PAGE_INDEX      IN NUMBER,
                          P_EMPLOYEE_CODE   IN VARCHAR2,
                          P_PAGE_SIZE       IN NUMBER,
                          P_PERIOD_ID       IN NUMBER,
                          P_EMPLOYEE_NAME   IN NVARCHAR2,
                          P_ORG_NAME        IN NVARCHAR2,
                          P_TITLE_NAME      IN NVARCHAR2,
                          P_STAFF_RANK_NAME IN NVARCHAR2,
                          P_CUR             OUT CURSOR_TYPE,
                          P_CURCOUNR        OUT CURSOR_TYPE) IS
   PV_STARTDATE DATE;
   PV_ENDDATE   DATE;
 BEGIN
   SELECT P.START_DATE, P.END_DATE
     INTO PV_STARTDATE, PV_ENDDATE
     FROM AT_PERIOD P
    WHERE P.ID = P_PERIOD_ID;
 
   OPEN P_CUR FOR
     SELECT *
       FROM (SELECT ROWNUM                 TT,
                    A.ID,
                    EE.ID                  EMPLOYEE_ID,
                    EE.EMPLOYEE_CODE,
                    DECODE(P_LANGUAGE, 'vi-VN', EE.FULLNAME_VN, NVL(EE.FULLNAME_EN, EE.FULLNAME_VN)) VN_FULLNAME,
                    DECODE(P_LANGUAGE, 'vi-VN', O.Name_Vn, NVL(O.Name_En, O.Name_Vn))              ORG_NAME,
                    O.DESCRIPTION_PATH     ORG_DESC,
                    DECODE(P_LANGUAGE, 'vi-VN', TI.Name_Vn, NVL(TI.Name_En, TI.Name_Vn))             TITLE_NAME,
                    DECODE(P_LANGUAGE, 'vi-VN', ji.NAME, NVL(ji.NAME_EN,ji.NAME)) JOB_POSITION_NAME,
                    S.NAME                 STAFF_RANK_NAME,
                    A.D1,
                    A.D2,
                    A.D3,
                    A.D4,
                    A.D5,
                    A.D6,
                    A.D7,
                    A.D8,
                    A.D9,
                    A.D10,
                    A.D11,
                    A.D12,
                    A.D13,
                    A.D14,
                    A.D15,
                    A.D16,
                    A.D17,
                    A.D18,
                    A.D19,
                    A.D20,
                    A.D21,
                    A.D22,
                    A.D23,
                    A.D24,
                    A.D25,
                    A.D26,
                    A.D27,
                    A.D28,
                    A.D29,
                    A.D30,
                    A.D31,
                    A.TOTAL_FACTOR1,
                    A.TOTAL_FACTOR1_5,
                    A.TOTAL_FACTOR2,
                    A.TOTAL_FACTOR2_7,
                    A.TOTAL_FACTOR3,
                    A.TOTAL_FACTOR3_9,
                    A.TOTAL_FACTOR_CONVERT,
                    A.NUMBER_FACTOR_PAY,
                    A.NUMBER_FACTOR_CP,
                    A.BACKUP_MONTH_BEFORE,
                    A.GHINHAN_OT,
                    A.CONGHIBU             CONGHIBU
               FROM AT_TIME_TIMESHEET_OT A
              INNER JOIN HU_EMPLOYEE EE
                 ON EE.ID = A.EMPLOYEE_ID
              LEFT JOIN HU_JOB_POSITION JI
                  ON JI.ID = EE.JOB_POSITION_ID
              INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O1
                 ON A.ORG_ID = O1.ORG_ID
               LEFT JOIN HU_ORGANIZATION O
                 ON O.ID = A.ORG_ID
               LEFT JOIN HU_TITLE TI
                 ON TI.ID = EE.TITLE_ID
               LEFT JOIN HU_STAFF_RANK S
                 ON S.ID = EE.STAFF_RANK_ID
              WHERE A.PERIOD_ID = P_PERIOD_ID
                AND (P_EMPLOYEE_CODE IS NULL OR
                    (P_EMPLOYEE_CODE IS NOT NULL AND
                    EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
                AND (P_EMPLOYEE_NAME IS NULL OR
                    (P_EMPLOYEE_NAME IS NOT NULL AND
                    UPPER(EE.FULLNAME_VN) LIKE
                    '%' || UPPER(P_EMPLOYEE_NAME) || '%'))
                AND (P_ORG_NAME IS NULL OR
                    (P_ORG_NAME IS NOT NULL AND
                    UPPER(O.NAME_VN) LIKE '%' || UPPER(P_ORG_NAME) || '%'))
                AND (P_TITLE_NAME IS NULL OR
                    (P_TITLE_NAME IS NOT NULL AND
                    UPPER(TI.NAME_VN) LIKE
                    '%' || UPPER(P_TITLE_NAME) || '%'))
                AND (P_STAFF_RANK_NAME IS NULL OR
                    (P_STAFF_RANK_NAME IS NOT NULL AND
                    UPPER(S.NAME) LIKE
                    '%' || UPPER(P_STAFF_RANK_NAME) || '%'))
                AND (NVL(EE.WORK_STATUS, 0) <> 257 OR
                    (NVL(EE.WORK_STATUS, 0) = 257 AND
                    EE.TER_LAST_DATE >= PV_STARTDATE))) C
      WHERE C.TT < (P_PAGE_INDEX * P_PAGE_SIZE) + 1
        AND C.TT >= ((P_PAGE_INDEX - 1) * P_PAGE_SIZE) + 1;
   OPEN P_CURCOUNR FOR
     SELECT COUNT(*) TOTAL
       FROM AT_TIME_TIMESHEET_OT A
      INNER JOIN HU_EMPLOYEE EE
         ON EE.ID = A.EMPLOYEE_ID
      INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O
         ON A.ORG_ID = O.ORG_ID
       LEFT JOIN HU_STAFF_RANK S
         ON S.ID = EE.STAFF_RANK_ID
       LEFT JOIN HU_TITLE TI
         ON TI.ID = EE.TITLE_ID
       LEFT JOIN HU_ORGANIZATION O
         ON O.ID = A.ORG_ID
      WHERE A.PERIOD_ID = P_PERIOD_ID
        AND (P_EMPLOYEE_CODE IS NULL OR
            (P_EMPLOYEE_CODE IS NOT NULL AND
            EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
        AND (P_EMPLOYEE_NAME IS NULL OR
            (P_EMPLOYEE_NAME IS NOT NULL AND
            UPPER(EE.FULLNAME_VN) LIKE
            '%' || UPPER(P_EMPLOYEE_NAME) || '%'))
        AND (P_ORG_NAME IS NULL OR
            (P_ORG_NAME IS NOT NULL AND
            UPPER(O.NAME_VN) LIKE '%' || UPPER(P_ORG_NAME) || '%'))
        AND (P_TITLE_NAME IS NULL OR
            (P_TITLE_NAME IS NOT NULL AND
            UPPER(TI.NAME_VN) LIKE '%' || UPPER(P_TITLE_NAME) || '%'))
        AND (P_STAFF_RANK_NAME IS NULL OR
            (P_STAFF_RANK_NAME IS NOT NULL AND
            UPPER(S.NAME) LIKE '%' || UPPER(P_STAFF_RANK_NAME) || '%'))
        AND (NVL(EE.WORK_STATUS, 0) <> 257 OR
            (NVL(EE.WORK_STATUS, 0) = 257 AND
            EE.TER_LAST_DATE >= PV_STARTDATE));
 END;
 
 PROCEDURE GET_SUMMARY_NB(P_LANGUAGE        IN NVARCHAR2,
                          P_USERNAME        IN NVARCHAR2,
                          P_ORG_ID          IN NUMBER,
                          P_ISDISSOLVE      IN NUMBER,
                          P_PAGE_INDEX      IN NUMBER,
                          P_EMPLOYEE_CODE   IN VARCHAR2,
                          P_PAGE_SIZE       IN NUMBER,
                          P_PERIOD_ID       IN NUMBER,
                          P_EMPLOYEE_NAME   IN NVARCHAR2,
                          P_ORG_NAME        IN NVARCHAR2,
                          P_TITLE_NAME      IN NVARCHAR2,
                          P_STAFF_RANK_NAME IN NVARCHAR2,
                          P_CUR             OUT CURSOR_TYPE,
                          P_CURCOUNR        OUT CURSOR_TYPE) IS
   PV_STARTDATE DATE;
   PV_ENDDATE   DATE;
 BEGIN
   SELECT P.START_DATE, P.END_DATE
     INTO PV_STARTDATE, PV_ENDDATE
     FROM AT_PERIOD P
    WHERE P.ID = P_PERIOD_ID;
 
   OPEN P_CUR FOR
     SELECT *
       FROM (SELECT ROWNUM                 TT,
                    A.ID,
                    EE.ID                  EMPLOYEE_ID,
                    EE.EMPLOYEE_CODE,
                    DECODE(P_LANGUAGE, 'vi-VN', EE.FULLNAME_VN, NVL(EE.FULLNAME_EN, EE.FULLNAME_VN)) VN_FULLNAME,
                    DECODE(P_LANGUAGE, 'vi-VN', O.Name_Vn, NVL(O.Name_En, O.Name_Vn))              ORG_NAME,
                    O.DESCRIPTION_PATH     ORG_DESC,
                    DECODE(P_LANGUAGE, 'vi-VN', TI.Name_Vn, NVL(TI.Name_En, TI.Name_Vn))             TITLE_NAME,
                    DECODE(P_LANGUAGE, 'vi-VN', ji.NAME, NVL(ji.NAME_EN,ji.NAME)) JOB_POSITION_NAME,
                    S.NAME                 STAFF_RANK_NAME,
                    A.D1,
                    A.D2,
                    A.D3,
                    A.D4,
                    A.D5,
                    A.D6,
                    A.D7,
                    A.D8,
                    A.D9,
                    A.D10,
                    A.D11,
                    A.D12,
                    A.D13,
                    A.D14,
                    A.D15,
                    A.D16,
                    A.D17,
                    A.D18,
                    A.D19,
                    A.D20,
                    A.D21,
                    A.D22,
                    A.D23,
                    A.D24,
                    A.D25,
                    A.D26,
                    A.D27,
                    A.D28,
                    A.D29,
                    A.D30,
                    A.D31,
                    A.TOTAL_FACTOR1,
                    A.TOTAL_FACTOR1_5,
                    A.TOTAL_FACTOR2,
                    A.TOTAL_FACTOR2_7,
                    A.TOTAL_FACTOR3,
                    A.TOTAL_FACTOR3_9,
                    A.TOTAL_FACTOR_CONVERT
               FROM AT_TIME_TIMESHEET_NB A
              INNER JOIN HU_EMPLOYEE EE
                 ON EE.ID = A.EMPLOYEE_ID
              LEFT JOIN HU_JOB_POSITION JI
                  ON JI.ID = EE.JOB_POSITION_ID
              INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O1
                 ON A.ORG_ID = O1.ORG_ID
               LEFT JOIN HU_ORGANIZATION O
                 ON O.ID = A.ORG_ID
               LEFT JOIN HU_TITLE TI
                 ON TI.ID = EE.TITLE_ID
               LEFT JOIN HU_STAFF_RANK S
                 ON S.ID = EE.STAFF_RANK_ID
              WHERE A.PERIOD_ID = P_PERIOD_ID
                AND (P_EMPLOYEE_CODE IS NULL OR
                    (P_EMPLOYEE_CODE IS NOT NULL AND
                    EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
                AND (P_EMPLOYEE_NAME IS NULL OR
                    (P_EMPLOYEE_NAME IS NOT NULL AND
                    UPPER(EE.FULLNAME_VN) LIKE
                    '%' || UPPER(P_EMPLOYEE_NAME) || '%'))
                AND (P_ORG_NAME IS NULL OR
                    (P_ORG_NAME IS NOT NULL AND
                    UPPER(O.NAME_VN) LIKE '%' || UPPER(P_ORG_NAME) || '%'))
                AND (P_TITLE_NAME IS NULL OR
                    (P_TITLE_NAME IS NOT NULL AND
                    UPPER(TI.NAME_VN) LIKE
                    '%' || UPPER(P_TITLE_NAME) || '%'))
                AND (P_STAFF_RANK_NAME IS NULL OR
                    (P_STAFF_RANK_NAME IS NOT NULL AND
                    UPPER(S.NAME) LIKE
                    '%' || UPPER(P_STAFF_RANK_NAME) || '%'))
                AND (NVL(EE.WORK_STATUS, 0) <> 257 OR
                    (NVL(EE.WORK_STATUS, 0) = 257 AND
                    EE.TER_LAST_DATE >= PV_STARTDATE))) C
      WHERE C.TT < (P_PAGE_INDEX * P_PAGE_SIZE) + 1
        AND C.TT >= ((P_PAGE_INDEX - 1) * P_PAGE_SIZE) + 1;
   OPEN P_CURCOUNR FOR
     SELECT COUNT(*) TOTAL
       FROM AT_TIME_TIMESHEET_NB A
      INNER JOIN HU_EMPLOYEE EE
         ON EE.ID = A.EMPLOYEE_ID
      INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O
         ON A.ORG_ID = O.ORG_ID
       LEFT JOIN HU_STAFF_RANK S
         ON S.ID = EE.STAFF_RANK_ID
       LEFT JOIN HU_TITLE TI
         ON TI.ID = EE.TITLE_ID
       LEFT JOIN HU_ORGANIZATION O
         ON O.ID = A.ORG_ID
      WHERE A.PERIOD_ID = P_PERIOD_ID
        AND (P_EMPLOYEE_CODE IS NULL OR
            (P_EMPLOYEE_CODE IS NOT NULL AND
            EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
        AND (P_EMPLOYEE_NAME IS NULL OR
            (P_EMPLOYEE_NAME IS NOT NULL AND
            UPPER(EE.FULLNAME_VN) LIKE
            '%' || UPPER(P_EMPLOYEE_NAME) || '%'))
        AND (P_ORG_NAME IS NULL OR
            (P_ORG_NAME IS NOT NULL AND
            UPPER(O.NAME_VN) LIKE '%' || UPPER(P_ORG_NAME) || '%'))
        AND (P_TITLE_NAME IS NULL OR
            (P_TITLE_NAME IS NOT NULL AND
            UPPER(TI.NAME_VN) LIKE '%' || UPPER(P_TITLE_NAME) || '%'))
        AND (P_STAFF_RANK_NAME IS NULL OR
            (P_STAFF_RANK_NAME IS NOT NULL AND
            UPPER(S.NAME) LIKE '%' || UPPER(P_STAFF_RANK_NAME) || '%'))
        AND (NVL(EE.WORK_STATUS, 0) <> 257 OR
            (NVL(EE.WORK_STATUS, 0) = 257 AND
            EE.TER_LAST_DATE >= PV_STARTDATE));
 END;
 
 PROCEDURE GET_SUMMARY_RICE(P_LANGUAGE        IN NVARCHAR2,
                            P_USERNAME        IN NVARCHAR2,
                            P_ORG_ID          IN NUMBER,
                            P_ISDISSOLVE      IN NUMBER,
                            P_PAGE_INDEX      IN NUMBER,
                            P_EMPLOYEE_CODE   IN VARCHAR2,
                            P_PAGE_SIZE       IN NUMBER,
                            P_PERIOD_ID       IN NUMBER,
                            P_EMPLOYEE_NAME   IN VARCHAR2,
                            P_ORG_NAME        IN NVARCHAR2,
                            P_TITLE_NAME      IN NVARCHAR2,
                            P_STAFF_RANK_NAME IN NVARCHAR2,
                            P_CUR             OUT CURSOR_TYPE,
                            P_CURCOUNR        OUT CURSOR_TYPE) IS
   PV_STARTDATE DATE;
   PV_ENDDATE   DATE;
 BEGIN
 
   SELECT P.START_DATE, P.END_DATE
     INTO PV_STARTDATE, PV_ENDDATE
     FROM AT_PERIOD P
    WHERE P.ID = P_PERIOD_ID;
 
   OPEN P_CUR FOR
     SELECT C.*
       FROM (SELECT ROWNUM               TT,
                    A.ID,
                    EE.ID                EMPLOYEE_ID,
                    EE.EMPLOYEE_CODE,
                    DECODE(P_LANGUAGE, 'vi-VN', EE.FULLNAME_VN, NVL(EE.FULLNAME_EN, EE.FULLNAME_VN)) VN_FULLNAME,
                    DECODE(P_LANGUAGE, 'vi-VN', O.Name_Vn, NVL(O.Name_En, O.Name_Vn))              ORG_NAME,
                    O.DESCRIPTION_PATH   ORG_DESC,
                    DECODE(P_LANGUAGE, 'vi-VN', TI.Name_Vn, NVL(TI.Name_En, TI.Name_Vn))             TITLE_NAME,
                    DECODE(P_LANGUAGE, 'vi-VN', ji.NAME, NVL(ji.NAME_EN,ji.NAME)) JOB_POSITION_NAME,
                    S.NAME               STAFF_RANK_NAME,
                    A.D1,
                    A.D2,
                    A.D3,
                    A.D4,
                    A.D5,
                    A.D6,
                    A.D7,
                    A.D8,
                    A.D9,
                    A.D10,
                    A.D11,
                    A.D12,
                    A.D13,
                    A.D14,
                    A.D15,
                    A.D16,
                    A.D17,
                    A.D18,
                    A.D19,
                    A.D20,
                    A.D21,
                    A.D22,
                    A.D23,
                    A.D24,
                    A.D25,
                    A.D26,
                    A.D27,
                    A.D28,
                    A.D29,
                    A.D30,
                    A.D31,
                    A.NDAY_RICE,
                    A.TOTAL_RICE_PRICE,
                    A.TOTAL_RICE_DECLARE,
                    A.RICE_EDIT,
                    A.TOTAL_RICE
               FROM AT_TIME_TIMESHEET_RICE A
              INNER JOIN HU_EMPLOYEE EE
                 ON EE.ID = A.EMPLOYEE_ID
              LEFT JOIN HU_JOB_POSITION JI
                  ON JI.ID = EE.JOB_POSITION_ID
              INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O1
                 ON EE.ORG_ID = O1.ORG_ID
               LEFT JOIN HU_ORGANIZATION O
                 ON O.ID = A.ORG_ID
               LEFT JOIN HU_TITLE TI
                 ON TI.ID = EE.TITLE_ID
               LEFT JOIN HU_STAFF_RANK S
                 ON S.ID = EE.STAFF_RANK_ID
              WHERE A.PERIOD_ID = P_PERIOD_ID
                AND (P_EMPLOYEE_CODE IS NULL OR
                    (P_EMPLOYEE_CODE IS NOT NULL AND
                    EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%'))
                AND (P_EMPLOYEE_NAME IS NULL OR
                    (P_EMPLOYEE_NAME IS NOT NULL AND
                    UPPER(EE.FULLNAME_VN) LIKE
                    '%' || UPPER(P_EMPLOYEE_NAME) || '%'))
                AND (P_ORG_NAME IS NULL OR
                    (P_ORG_NAME IS NOT NULL AND
                    O.NAME_VN LIKE '%' || P_ORG_NAME || '%'))
                AND (P_TITLE_NAME IS NULL OR
                    (P_TITLE_NAME IS NOT NULL AND
                    TI.NAME_VN LIKE '%' || P_TITLE_NAME || '%'))
                AND (P_STAFF_RANK_NAME IS NULL OR
                    (P_STAFF_RANK_NAME IS NOT NULL AND
                    LOWER(S.NAME) LIKE '%' || LOWER(P_STAFF_RANK_NAME) || '%'))
                AND (NVL(EE.WORK_STATUS, 0) <> 257 OR
                    (NVL(EE.WORK_STATUS, 0) = 257 AND
                    EE.TER_LAST_DATE >= PV_STARTDATE))) C
      WHERE C.TT < (P_PAGE_INDEX * P_PAGE_SIZE) + 1
        AND C.TT >= ((P_PAGE_INDEX - 1) * P_PAGE_SIZE) + 1;
   OPEN P_CURCOUNR FOR
     SELECT COUNT(*) TOTAL
       FROM AT_TIME_TIMESHEET_RICE A
      INNER JOIN HU_EMPLOYEE EE
         ON EE.ID = A.EMPLOYEE_ID
      INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, P_ISDISSOLVE)) O1
         ON EE.ORG_ID = O1.ORG_ID
       LEFT JOIN HU_STAFF_RANK S
         ON S.ID = EE.STAFF_RANK_ID
       LEFT JOIN HU_TITLE TI
         ON TI.ID = EE.TITLE_ID
       LEFT JOIN HU_ORGANIZATION O
         ON O.ID = A.ORG_ID
      WHERE A.PERIOD_ID = P_PERIOD_ID
        AND ((P_EMPLOYEE_CODE IS NULL OR
            (P_EMPLOYEE_CODE IS NOT NULL AND
            EE.EMPLOYEE_CODE LIKE '%' || P_EMPLOYEE_CODE || '%')) OR
            (P_EMPLOYEE_CODE IS NULL OR
            (P_EMPLOYEE_CODE IS NOT NULL AND
            EE.FULLNAME_VN LIKE '%' || P_EMPLOYEE_CODE || '%')))
        AND (P_ORG_NAME IS NULL OR (P_ORG_NAME IS NOT NULL AND
            O.NAME_VN LIKE '%' || P_ORG_NAME || '%'))
        AND (P_TITLE_NAME IS NULL OR
            (P_TITLE_NAME IS NOT NULL AND
            TI.NAME_VN LIKE '%' || P_TITLE_NAME || '%'))
        AND (P_STAFF_RANK_NAME IS NULL OR
            (P_STAFF_RANK_NAME IS NOT NULL AND
            S.NAME LIKE '%' || P_STAFF_RANK_NAME || '%'))
        AND (NVL(EE.WORK_STATUS, 0) <> 257 OR
            (NVL(EE.WORK_STATUS, 0) = 257 AND
            EE.TER_LAST_DATE >= PV_STARTDATE));
 END;
 
 PROCEDURE GETDATAFROMORG(P_USERNAME    IN NVARCHAR2,
                          P_ORG_ID      IN NUMBER,
                          P_ISDISSOLVE  IN NUMBER,
                          P_EXPORT_TYPE IN NUMBER,
                          P_PERIOD_ID   IN NUMBER,
                          P_CUR         OUT CURSOR_TYPE,
                          P_CUR2        OUT CURSOR_TYPE,
                          P_CUR3        OUT CURSOR_TYPE) IS
   PV_STARTDATE  DATE;
   PV_ENDDATE    DATE;
   PV_PERIODNAME NVARCHAR2(255);
 BEGIN
   IF P_EXPORT_TYPE <> 3 AND P_EXPORT_TYPE <> 5 AND P_EXPORT_TYPE <> 8 AND P_EXPORT_TYPE <> 9 THEN
     SELECT P.START_DATE, P.END_DATE, P.PERIOD_NAME
       INTO PV_STARTDATE, PV_ENDDATE, PV_PERIODNAME
       FROM AT_PERIOD P
      WHERE P.ID = P_PERIOD_ID;
   END IF;
 
   IF P_EXPORT_TYPE = 1 THEN
     OPEN P_CUR FOR
       SELECT ROWNUM STT, A.*
         FROM (SELECT E.ID EMPLOYEE_ID,
                      E.EMPLOYEE_CODE,
                      E.FULLNAME_VN VN_FULLNAME,
                      O.NAME_VN ORG_NAME,
                      O.ORG_PATH,
                      T.NAME_VN TITLE_NAME,
                      TO_CHAR(CA.CDATE, 'dd/MM/yyyy') WORKINGDAY
                 FROM HU_EMPLOYEE E
                INNER JOIN (SELECT E.EMPLOYEE_ID,
                                  E.TITLE_ID,
                                  E.ORG_ID,
                                  E.IS_3B,
                                  E.STAFF_RANK_ID,
                                  ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                             FROM HU_WORKING E
                            WHERE E.EFFECT_DATE <= PV_ENDDATE
                              AND E.STATUS_ID = 447
                              AND E.IS_3B = 0) W
                   ON E.ID = W.EMPLOYEE_ID
                  AND W.ROW_NUMBER = 1
                INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, NVL(P_ISDISSOLVE, 0))) O1
                   ON W.ORG_ID = O1.ORG_ID
                 LEFT JOIN HUV_ORGANIZATION O
                   ON W.ORG_ID = O.ID
                 LEFT JOIN HU_TITLE T
                   ON W.TITLE_ID = T.ID
                CROSS JOIN TABLE(TABLE_LISTDATE(PV_STARTDATE, PV_ENDDATE)) CA
                WHERE E.CONTRACT_ID IS NOT NULL
                  AND E.WORK_STATUS IS NOT NULL
                  AND (E.WORK_STATUS <> 257 OR
                      (E.WORK_STATUS = 257 AND
                      E.TER_EFFECT_DATE >= PV_STARTDATE))
                ORDER BY O.NAME_VN, E.EMPLOYEE_CODE) A;
   ELSIF P_EXPORT_TYPE = 2 THEN
     OPEN P_CUR FOR
       SELECT ROWNUM STT, TB.*
         FROM (SELECT E.ID            EMPLOYEE_ID,
                      E.EMPLOYEE_CODE,
                      E.FULLNAME_VN   VN_FULLNAME,
                      O.ID            ORG_ID,
                      O.NAME_VN       ORG_NAME,
                      O.ORG_PATH,
                      T.NAME_VN       TITLE_NAME,
                      K.NAME          STAFF_RANK_NAME
                 FROM HU_EMPLOYEE E
                INNER JOIN (SELECT E.EMPLOYEE_ID,
                                  E.TITLE_ID,
                                  E.ORG_ID,
                                  E.IS_3B,
                                  E.STAFF_RANK_ID,
                                  ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                             FROM HU_WORKING E
                            WHERE E.EFFECT_DATE <= PV_ENDDATE
                              AND E.STATUS_ID = 447
                              AND E.IS_3B = 0) W
                   ON E.ID = W.EMPLOYEE_ID
                  AND W.ROW_NUMBER = 1
                INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, NVL(P_ISDISSOLVE, 0))) O1
                   ON W.ORG_ID = O1.ORG_ID
                 LEFT JOIN HUV_ORGANIZATION O
                   ON W.ORG_ID = O.ID
                 LEFT JOIN HU_TITLE T
                   ON W.TITLE_ID = T.ID
                 LEFT JOIN HU_STAFF_RANK K
                   ON W.STAFF_RANK_ID = K.ID
                WHERE E.CONTRACT_ID IS NOT NULL
                  AND (NVL(E.WORK_STATUS, 0) <> 257 OR
                      (E.WORK_STATUS = 257 AND
                      E.TER_LAST_DATE >= PV_STARTDATE))
                ORDER BY O.NAME_VN, E.EMPLOYEE_CODE) TB;
   
     OPEN P_CUR2 FOR
       SELECT M.ID, M.NAME NAME_VN
         FROM AT_TIME_MANUAL M
        WHERE M.CODE = 'RDT'
           OR M.CODE = 'RVS'
          AND M.ACTFLG = 'A';
     OPEN P_CUR3 FOR
       SELECT S.ID,
              S.CODE,
              S.NAME_VN,
              '[' || M.CODE || '] - ' || M.NAME MANUAL_NAME,
              CASE
                WHEN S.IS_NOON = -1 THEN
                 'X'
                ELSE
                 ''
              END IS_NOON,
              M1.NAME SUNDAY_NAME,
              SATURDAY.NAME_VN SATURDAY_NAME,
              S.HOURS_START,
              S.HOURS_STOP,
              S.BREAKS_FORM,
              S.BREAKS_TO,
              S.NOTE
         FROM AT_SHIFT S
         LEFT JOIN AT_SHIFT SATURDAY
           ON S.SATURDAY = SATURDAY.ID
         LEFT JOIN AT_TIME_MANUAL M
           ON S.MANUAL_ID = M.ID
         LEFT JOIN AT_TIME_MANUAL M1
           ON S.SUNDAY = M1.ID
        WHERE S.ACTFLG = 'A'
        ORDER BY S.CODE;
   ELSIF P_EXPORT_TYPE = 3 THEN
     OPEN P_CUR FOR
       SELECT ROWNUM STT, TB.*
         FROM (SELECT E.ID            EMPLOYEE_ID,
                      E.EMPLOYEE_CODE,
                      E.FULLNAME_VN   VN_FULLNAME,
                      E.ORG_ID,
                      E.TITLE_ID,
                      O.NAME_VN       ORG_NAME,
                      O.ORG_PATH,
                      T.NAME_VN       TITLE_NAME,
                      K.NAME          STAFF_RANK_NAME
                 FROM HU_EMPLOYEE E
                INNER JOIN (SELECT E.EMPLOYEE_ID,
                                  E.TITLE_ID,
                                  E.ORG_ID,
                                  E.IS_3B,
                                  E.STAFF_RANK_ID,
                                  ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                             FROM HU_WORKING E
                            WHERE E.EFFECT_DATE <= SYSDATE
                              AND E.STATUS_ID = 447
                              AND E.IS_3B = 0) W
                   ON E.ID = W.EMPLOYEE_ID
                  AND W.ROW_NUMBER = 1
                INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, NVL(P_ISDISSOLVE, 0))) O1
                   ON W.ORG_ID = O1.ORG_ID
                 LEFT JOIN HUV_ORGANIZATION O
                   ON W.ORG_ID = O.ID
                 LEFT JOIN HU_TITLE T
                   ON W.TITLE_ID = T.ID
                 LEFT JOIN HU_STAFF_RANK K
                   ON W.STAFF_RANK_ID = K.ID
                WHERE E.CONTRACT_ID IS NOT NULL
                  AND (NVL(E.WORK_STATUS, 0) <> 257 OR
                      (E.WORK_STATUS = 257 AND E.TER_LAST_DATE >= SYSDATE))
                ORDER BY O.NAME_VN, E.EMPLOYEE_CODE) TB;
   ELSIF P_EXPORT_TYPE = 4 THEN
     OPEN P_CUR FOR
       SELECT T.ID, T.CODE FROM AT_TIME_MANUAL T WHERE T.ACTFLG = 'A';
   ELSIF P_EXPORT_TYPE = 5 THEN
     OPEN P_CUR FOR
       SELECT ROWNUM STT, TB.*
         FROM (SELECT E.ID            EMPLOYEE_ID,
                      E.EMPLOYEE_CODE,
                      E.FULLNAME_VN   VN_FULLNAME,
                      E.ORG_ID,
                      E.TITLE_ID,
                      O.NAME_VN       ORG_NAME,
                      O.ORG_PATH,
                      T.NAME_VN       TITLE_NAME,
                      S.NAME          STAFF_RANK_NAME
                 FROM HU_EMPLOYEE E
                INNER JOIN (SELECT E.EMPLOYEE_ID,
                                  E.TITLE_ID,
                                  E.ORG_ID,
                                  E.IS_3B,
                                  E.STAFF_RANK_ID,
                                  ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                             FROM HU_WORKING E
                            WHERE E.EFFECT_DATE <= SYSDATE
                              AND E.STATUS_ID = 447
                              AND E.IS_3B = 0) W
                   ON E.ID = W.EMPLOYEE_ID
                  AND W.ROW_NUMBER = 1
                 LEFT JOIN HUV_ORGANIZATION O
                   ON W.ORG_ID = O.ID
                 LEFT JOIN HU_TITLE T
                   ON W.TITLE_ID = T.ID
                 LEFT JOIN HU_STAFF_RANK S
                   ON W.STAFF_RANK_ID = S.ID
                INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, NVL(P_ISDISSOLVE, 0))) O1
                   ON W.ORG_ID = O1.ORG_ID
                WHERE E.CONTRACT_ID IS NOT NULL
                  AND NVL(E.WORK_STATUS, 0) <> 257
                  AND E.WORK_STATUS IS NOT NULL
                   OR (NVL(E.WORK_STATUS, 0) = 257 AND
                      E.TER_EFFECT_DATE >= SYSDATE)
                  AND E.ID NOT IN
                      (SELECT I.EMPLOYEE_ID FROM INS_INFORMATION I)
                ORDER BY O.NAME_VN, E.EMPLOYEE_CODE) TB;
   ELSIF P_EXPORT_TYPE = 6 THEN
     OPEN P_CUR FOR
       WITH CTE_WORKSIGN AS
        (SELECT A.EMPLOYEE_ID,
                A.D1,
                A.D2,
                A.D3,
                A.D4,
                A.D5,
                A.D6,
                A.D7,
                A.D8,
                A.D9,
                A.D10,
                A.D11,
                A.D12,
                A.D13,
                A.D14,
                A.D15,
                A.D16,
                A.D17,
                A.D18,
                A.D19,
                A.D20,
                A.D21,
                A.D22,
                A.D23,
                A.D24,
                A.D25,
                A.D26,
                A.D27,
                A.D28,
                A.D29,
                A.D30,
                A.D31
           FROM (SELECT T.EMPLOYEE_ID,
                        TO_NUMBER(TO_CHAR(T.WORKINGDAY, 'dd')) AS DAY,
                        L.CODE
                   FROM AT_WORKSIGN T
                   LEFT JOIN AT_SHIFT L
                     ON T.SHIFT_ID = L.ID
                  WHERE T.WORKINGDAY >= PV_STARTDATE
                    AND T.WORKINGDAY <= PV_ENDDATE)
         PIVOT(MAX(CODE)
            FOR DAY IN(1 AS D1,
                      2 AS D2,
                      3 AS D3,
                      4 AS D4,
                      5 AS D5,
                      6 AS D6,
                      7 AS D7,
                      8 AS D8,
                      9 AS D9,
                      10 AS D10,
                      11 AS D11,
                      12 AS D12,
                      13 AS D13,
                      14 AS D14,
                      15 AS D15,
                      16 AS D16,
                      17 AS D17,
                      18 AS D18,
                      19 AS D19,
                      20 AS D20,
                      21 AS D21,
                      22 AS D22,
                      23 AS D23,
                      24 AS D24,
                      25 AS D25,
                      26 AS D26,
                      27 AS D27,
                      28 AS D28,
                      29 AS D29,
                      30 AS D30,
                      31 AS D31)) A)
       SELECT ROWNUM STT, TB.*
         FROM (SELECT E.ID            EMPLOYEE_ID,
                      E.EMPLOYEE_CODE,
                      E.FULLNAME_VN   VN_FULLNAME,
                      O.ID            ORG_ID,
                      O.NAME_VN       ORG_NAME,
                      O.ORG_PATH,
                      T.NAME_VN       TITLE_NAME,
                      K.NAME          STAFF_RANK_NAME,
                      A.D1,
                      A.D2,
                      A.D3,
                      A.D4,
                      A.D5,
                      A.D6,
                      A.D7,
                      A.D8,
                      A.D9,
                      A.D10,
                      A.D11,
                      A.D12,
                      A.D13,
                      A.D14,
                      A.D15,
                      A.D16,
                      A.D17,
                      A.D18,
                      A.D19,
                      A.D20,
                      A.D21,
                      A.D22,
                      A.D23,
                      A.D24,
                      A.D25,
                      A.D26,
                      A.D27,
                      A.D28,
                      A.D29,
                      A.D30,
                      A.D31
                 FROM HU_EMPLOYEE E
                INNER JOIN (SELECT E.EMPLOYEE_ID,
                                  E.TITLE_ID,
                                  E.ORG_ID,
                                  E.IS_3B,
                                  E.STAFF_RANK_ID,
                                  ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                             FROM HU_WORKING E
                            WHERE E.EFFECT_DATE <= PV_ENDDATE
                              AND E.STATUS_ID = 447
                              AND E.IS_3B = 0) W
                   ON E.ID = W.EMPLOYEE_ID
                  AND W.ROW_NUMBER = 1
                 LEFT JOIN CTE_WORKSIGN A
                   ON E.ID = A.EMPLOYEE_ID
                INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, NVL(P_ISDISSOLVE, 0))) O1
                   ON W.ORG_ID = O1.ORG_ID
                 LEFT JOIN HUV_ORGANIZATION O
                   ON W.ORG_ID = O.ID
                 LEFT JOIN HU_TITLE T
                   ON W.TITLE_ID = T.ID
                 LEFT JOIN HU_STAFF_RANK K
                   ON W.STAFF_RANK_ID = K.ID
                WHERE E.CONTRACT_ID IS NOT NULL
                  AND (NVL(E.WORK_STATUS, 0) <> 257 OR
                      (E.WORK_STATUS = 257 AND
                      E.TER_LAST_DATE >= PV_STARTDATE))
                ORDER BY O.NAME_VN, E.EMPLOYEE_CODE) TB;
     OPEN P_CUR2 FOR
       SELECT M.ID, M.NAME NAME_VN
         FROM AT_TIME_MANUAL M
        WHERE M.CODE = 'RDT'
           OR M.CODE = 'RVS'
          AND M.ACTFLG = 'A';
     OPEN P_CUR3 FOR
       SELECT S.ID,
              S.CODE,
              S.NAME_VN,
              '[' || M.CODE || '] - ' || M.NAME MANUAL_NAME,
              CASE
                WHEN S.IS_NOON = -1 THEN
                 'X'
                ELSE
                 ''
              END IS_NOON,
              M1.NAME SUNDAY_NAME,
              SATURDAY.NAME_VN SATURDAY_NAME,
              S.HOURS_START,
              S.HOURS_STOP,
              S.BREAKS_FORM,
              S.BREAKS_TO,
              S.NOTE
         FROM AT_SHIFT S
         LEFT JOIN AT_SHIFT SATURDAY
           ON S.SATURDAY = SATURDAY.ID
         LEFT JOIN AT_TIME_MANUAL M
           ON S.MANUAL_ID = M.ID
         LEFT JOIN AT_TIME_MANUAL M1
           ON S.SUNDAY = M1.ID
        WHERE S.ACTFLG = 'A'
        ORDER BY S.CODE;
   ELSIF P_EXPORT_TYPE = 7 THEN
     OPEN P_CUR FOR
       SELECT ROWNUM STT, TB.*
         FROM (SELECT E.ID            EMPLOYEE_ID,
                      E.EMPLOYEE_CODE,
                      E.FULLNAME_VN   VN_FULLNAME,
                      E.ORG_ID,
                      E.TITLE_ID,
                      O.NAME_VN       ORG_NAME,
                      O.ORG_PATH,
                      T.NAME_VN       TITLE_NAME,
                      S.NAME          STAFF_RANK_NAME,
                      PN.CUR_HAVE     BALANCE_NOW,
                      C.CUR_HAVE      NBCL,
                      PV_PERIODNAME   PERIOD_NAME
                 FROM HU_EMPLOYEE E
                INNER JOIN (SELECT E.EMPLOYEE_ID,
                                  E.TITLE_ID,
                                  E.ORG_ID,
                                  E.IS_3B,
                                  E.STAFF_RANK_ID,
                                  ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                             FROM HU_WORKING E
                            WHERE E.EFFECT_DATE <= PV_ENDDATE
                              AND E.STATUS_ID = 447
                              AND E.IS_3B = 0) W
                   ON E.ID = W.EMPLOYEE_ID
                  AND W.ROW_NUMBER = 1
                 LEFT JOIN HUV_ORGANIZATION O
                   ON W.ORG_ID = O.ID
                 LEFT JOIN HU_TITLE T
                   ON W.TITLE_ID = T.ID
                 LEFT JOIN HU_STAFF_RANK S
                   ON W.STAFF_RANK_ID = S.ID
                 LEFT JOIN AT_ENTITLEMENT PN
                   ON E.ID = PN.EMPLOYEE_ID
                  AND TO_CHAR(PN.YEAR) = TO_CHAR(PV_STARTDATE, 'yyyy')
                 LEFT JOIN AT_COMPENSATORY C
                   ON E.ID = C.EMPLOYEE_ID
                  AND TO_CHAR(C.YEAR) = TO_CHAR(PV_STARTDATE, 'yyyy')
                INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, NVL(P_ISDISSOLVE, 0))) O1
                   ON W.ORG_ID = O1.ORG_ID
                WHERE E.CONTRACT_ID IS NOT NULL
                  AND (NVL(E.WORK_STATUS, 0) <> 257 OR
                      (E.WORK_STATUS = 257 AND
                      E.TER_LAST_DATE >= PV_STARTDATE))
                ORDER BY O.NAME_VN, E.EMPLOYEE_CODE) TB;
     ----------------------------------------------------------------
   ELSIF P_EXPORT_TYPE = 8 THEN
     OPEN P_CUR FOR
       SELECT ROWNUM STT, TB.*
         FROM (SELECT E.ID            EMPLOYEE_ID,
                      E.EMPLOYEE_CODE,
                      E.FULLNAME_VN   VN_FULLNAME,
                      E.ORG_ID,
                      E.TITLE_ID,
                      O.NAME_VN       ORG_NAME,
                      O.ORG_PATH,
                      T.NAME_VN       TITLE_NAME,
                      S.NAME          STAFF_RANK_NAME
                 FROM HU_EMPLOYEE E
                INNER JOIN (SELECT E.EMPLOYEE_ID,
                                  E.TITLE_ID,
                                  E.ORG_ID,
                                  E.IS_3B,
                                  E.STAFF_RANK_ID,
                                  ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                             FROM HU_WORKING E
                            WHERE E.EFFECT_DATE <= SYSDATE
                              AND E.STATUS_ID = 447
                              AND E.IS_3B = 0) W
                   ON E.ID = W.EMPLOYEE_ID
                  AND W.ROW_NUMBER = 1
                 LEFT JOIN HUV_ORGANIZATION O
                   ON W.ORG_ID = O.ID
                 LEFT JOIN HU_TITLE T
                   ON W.TITLE_ID = T.ID
                 LEFT JOIN HU_STAFF_RANK S
                   ON W.STAFF_RANK_ID = S.ID
                 LEFT JOIN INS_SUN_CARE C
                   ON E.ID = C.EMPLOYEE_ID
                  AND TO_CHAR(C.START_DATE, 'yyyy') =
                      TO_CHAR(SYSDATE, 'yyyy')
                INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, NVL(P_ISDISSOLVE, 0))) O1
                   ON W.ORG_ID = O1.ORG_ID
                WHERE E.CONTRACT_ID IS NOT NULL
                  AND NVL(E.WORK_STATUS, 0) <> 257
                  AND E.WORK_STATUS IS NOT NULL
                   OR (NVL(E.WORK_STATUS, 0) = 257 AND
                      E.TER_EFFECT_DATE >= SYSDATE)
                ORDER BY O.NAME_VN, E.EMPLOYEE_CODE) TB;
    -------------------------------------------------------------------------------                
    ELSIF P_EXPORT_TYPE = 9 THEN
         OPEN P_CUR FOR
           SELECT ROWNUM STT, TB.*
             FROM (SELECT E.ID            EMPLOYEE_ID,
                          E.EMPLOYEE_CODE,
                          E.FULLNAME_VN   VN_FULLNAME,
                          E.ORG_ID,
                          E.TITLE_ID,
                          O.NAME_VN       ORG_NAME,
                          O.ORG_PATH,
                          T.NAME_VN       TITLE_NAME,
                          K.NAME          STAFF_RANK_NAME
                     FROM HU_EMPLOYEE E
                    INNER JOIN (SELECT E.EMPLOYEE_ID,
                                      E.TITLE_ID,
                                      E.ORG_ID,
                                      E.IS_3B,
                                      E.STAFF_RANK_ID,
                                      ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                                 FROM HU_WORKING E
                                WHERE to_char(E.EFFECT_DATE,'YYYYMM') <= TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                                  AND E.STATUS_ID = 447
                                  AND E.IS_3B = 0) W
                       ON E.ID = W.EMPLOYEE_ID
                      AND W.ROW_NUMBER = 1
                    INNER JOIN TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME), P_ORG_ID, NVL(P_ISDISSOLVE, 0))) O1
                       ON W.ORG_ID = O1.ORG_ID
                     LEFT JOIN HUV_ORGANIZATION O
                       ON W.ORG_ID = O.ID
                     LEFT JOIN HU_TITLE T
                       ON W.TITLE_ID = T.ID
                     LEFT JOIN HU_STAFF_RANK K
                       ON W.STAFF_RANK_ID = K.ID
                    WHERE E.CONTRACT_ID IS NOT NULL
                      AND (NVL(E.WORK_STATUS, 0) <> 257 OR
                          (E.WORK_STATUS = 257 AND to_char(E.TER_LAST_DATE,'YYYYMM') >= TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')))
                    ORDER BY O.NAME_VN, E.EMPLOYEE_CODE) TB;
   END IF;
 END;
 -- DONG KY CONG
  PROCEDURE CLOSEDOPEN_PERIOD(P_USERNAME   NVARCHAR2,
                              P_ORG_ID     IN NUMBER,
                              P_ISDISSOLVE IN NUMBER,
                              P_STATUS     IN NUMBER,
                              P_PERIOD_ID  IN NUMBER) IS
  BEGIN
    
    PKG_COMMON_LIST.INSERT_CHOSEN_ORG(P_USERNAME, P_ORG_ID, P_ISDISSOLVE);
  
  
    UPDATE AT_ORG_PERIOD PO
       SET PO.STATUSCOLEX = P_STATUS
     WHERE (PO.ID, PO.ORG_ID) IN
           (SELECT PO.ID, PO.ORG_ID
              FROM AT_PERIOD P
             INNER JOIN AT_ORG_PERIOD PO
                ON P.ID = PO.PERIOD_ID
             INNER JOIN SE_CHOSEN_ORG O
                ON O.ORG_ID = PO.ORG_ID
                AND o.USERNAME = upper(P_USERNAME)
             WHERE P.ID = P_PERIOD_ID);
  END;

  PROCEDURE GETSIGNDEFAULT(P_USERNAME   NVARCHAR2,
                           P_ORG_ID     IN NUMBER,
                           P_PERIOD_ID  IN NUMBER,
                           P_ISDISSOLVE IN NUMBER,
                           P_CUR        OUT CURSOR_TYPE) IS
    PV_FROMDATE DATE;
    PV_ENDDATE  DATE;
  BEGIN
  
    SELECT P.START_DATE, P.END_DATE
      INTO PV_FROMDATE, PV_ENDDATE
      FROM AT_PERIOD P
     WHERE P.ID = P_PERIOD_ID;
  
    -- Insert org can tinh toan
    INSERT INTO AT_CHOSEN_ORG E
      (SELECT ORG_ID, UPPER(P_USERNAME), 1
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME),
                                    P_ORG_ID,
                                    P_ISDISSOLVE)) O
        WHERE EXISTS (SELECT 1
                 FROM AT_ORG_PERIOD OP
                WHERE OP.PERIOD_ID = P_PERIOD_ID
                  AND OP.ORG_ID = O.ORG_ID
                  AND OP.STATUSCOLEX = 1));
  
    -- insert emp can tinh toan
    INSERT INTO AT_CHOSEN_EMP
      (EMPLOYEE_ID,
       ITIME_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       STAFF_RANK_LEVEL,
       USERNAME,
       REQUEST_ID)
      (SELECT T.ID,
              T.ITIME_ID,
              W.ORG_ID,
              W.TITLE_ID,
              W.STAFF_RANK_ID,
              W.LEVEL_STAFF,
              UPPER(P_USERNAME),
              1
         FROM HU_EMPLOYEE T
        INNER JOIN (SELECT E.EMPLOYEE_ID,
                          E.TITLE_ID,
                          E.ORG_ID,
                          E.IS_3B,
                          E.STAFF_RANK_ID,
                          S.LEVEL_STAFF,
                          ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                     FROM HU_WORKING E
                     LEFT JOIN HU_STAFF_RANK S
                       ON E.STAFF_RANK_ID = S.ID
                    WHERE E.EFFECT_DATE <= PV_ENDDATE
                      AND E.STATUS_ID = 447
                      AND E.IS_3B = 0) W
           ON T.ID = W.EMPLOYEE_ID
          AND W.ROW_NUMBER = 1
        INNER JOIN AT_CHOSEN_ORG O
           ON O.ORG_ID = W.ORG_ID
        WHERE (NVL(T.WORK_STATUS, 0) <> 257 OR
              (T.WORK_STATUS = 257 AND T.TER_LAST_DATE >= PV_FROMDATE)));
  
    -- XOA DU LIEU DA TON TAI  
    DELETE FROM AT_WORKSIGN T1
     WHERE EXISTS
     (SELECT 1
              FROM (SELECT T.EMPLOYEE_ID,
                           CASE
                             WHEN T.EFFECT_DATE_FROM > PV_FROMDATE THEN
                              T.EFFECT_DATE_FROM
                             ELSE
                              PV_FROMDATE
                           END START_DELETE,
                           CASE
                             WHEN T.EFFECT_DATE_TO < PV_ENDDATE THEN
                              T.EFFECT_DATE_TO
                             ELSE
                              PV_ENDDATE
                           END END_DELETE
                      FROM AT_SIGNDEFAULT T
                     INNER JOIN AT_CHOSEN_EMP EE
                        ON T.EMPLOYEE_ID = EE.EMPLOYEE_ID
                     INNER JOIN AT_SHIFT S
                        ON T.SINGDEFAULE = S.ID
                     WHERE S.ACTFLG = 'A'
                       AND T.EFFECT_DATE_FROM <= PV_ENDDATE
                       AND NVL(T.EFFECT_DATE_TO, PV_FROMDATE) >= PV_FROMDATE) E
             WHERE T1.EMPLOYEE_ID = E.EMPLOYEE_ID
               AND T1.WORKINGDAY >= E.START_DELETE
               AND T1.WORKINGDAY <= E.END_DELETE);
  
    --INSERT CA MAC DINH
    INSERT INTO AT_WORKSIGN T
      (T.ID,
       T.EMPLOYEE_ID,
       T.WORKINGDAY,
       T.SHIFT_ID,
       T.PERIOD_ID,
       T.CREATED_DATE,
       T.CREATED_BY)
      SELECT SEQ_AT_WORKSIGN.NEXTVAL,
             EE.EMPLOYEE_ID,
             C.CDATE,
             CASE
               WHEN MOD(TO_CHAR(C.CDATE, 'J'), 7) = 6 AND
                    NVL(EE.SUNDAY, 0) > 0 THEN
                81 -- OFF theo bang AT_SHIFT
               WHEN MOD(TO_CHAR(C.CDATE, 'J'), 7) = 5 AND
                    NVL(EE.SATURDAY, 0) > 0 THEN
                EE.SATURDAY
               ELSE
                EE.SHIFT_ID
             END SHIFT_ID,
             P_PERIOD_ID,
             SYSDATE,
             UPPER(P_USERNAME)
        FROM (SELECT T.EMPLOYEE_ID,
                     CASE
                       WHEN T.EFFECT_DATE_FROM > PV_FROMDATE THEN
                        T.EFFECT_DATE_FROM
                       ELSE
                        PV_FROMDATE
                     END START_DELETE,
                     CASE
                       WHEN T.EFFECT_DATE_TO < PV_ENDDATE THEN
                        T.EFFECT_DATE_TO
                       ELSE
                        PV_ENDDATE
                     END END_DELETE,
                     NVL(S.SUNDAY, 0) SUNDAY,
                     NVL(S.SATURDAY, 0) SATURDAY,
                     S.ID SHIFT_ID
                FROM AT_SIGNDEFAULT T
               INNER JOIN AT_CHOSEN_EMP EE
                  ON T.EMPLOYEE_ID = EE.EMPLOYEE_ID
               INNER JOIN AT_SHIFT S
                  ON T.SINGDEFAULE = S.ID
               WHERE T.ACTFLG = 'A'
                 AND S.ACTFLG = 'A'
                 AND T.EFFECT_DATE_FROM <= PV_ENDDATE
                 AND NVL(T.EFFECT_DATE_TO, PV_FROMDATE) >= PV_FROMDATE) EE
       CROSS JOIN TABLE(TABLE_LISTDATE(PV_FROMDATE, PV_ENDDATE)) C
       WHERE C.CDATE >= EE.START_DELETE
         AND C.CDATE <= EE.END_DELETE;
  
    OPEN P_CUR FOR
      SELECT 1 FROM DUAL;
  
  END;

 
  PROCEDURE INSERT_TIME_CARD(P_TIMEID   IN NUMBER,
                            P_TERMINALID IN NUMBER,
                             P_VALTIME  IN DATE,
                             P_USERNAME IN NVARCHAR2) AS
  BEGIN
    MERGE INTO AT_SWIPE_DATA T
    USING (SELECT P_TIMEID TIMEID,
                  P_TERMINALID TERMINAL_ID,
                  P_VALTIME VALTIME,
                  TRUNC(P_VALTIME) WORKINGDAY
             FROM DUAL) D
    ON (T.ITIME_ID = D.TIMEID AND T.TERMINAL_ID = D.TERMINAL_ID AND TO_CHAR(T.VALTIME, 'yyyyMMdd HH24MI') = TO_CHAR(D.VALTIME, 'yyyyMMdd HH24MI'))
    WHEN NOT MATCHED THEN
      INSERT
        (ID, ITIME_ID, TERMINAL_ID, VALTIME, WORKINGDAY)
      VALUES
        (SEQ_AT_SWIPE_DATA.NEXTVAL, P_TIMEID,P_TERMINALID, P_VALTIME, D.WORKINGDAY);
  END;

  PROCEDURE INSERT_TIME_CARD_AUTO(P_TIMEID      IN NUMBER,
                                  P_TERMINAL_ID IN NUMBER,
                                  P_VALTIME     IN DATE,
                                  P_USERNAME    IN NVARCHAR2) AS
  BEGIN
    MERGE INTO AT_SWIPE_DATA T
    USING (SELECT P_TIMEID TIMEID,
                  P_VALTIME VALTIME,
                  TRUNC(P_VALTIME) WORKINGDAY
             FROM DUAL) D
    ON (T.ITIME_ID = D.TIMEID AND TO_CHAR(T.VALTIME, 'yyyyMMdd HH24MI') = TO_CHAR(D.VALTIME, 'yyyyMMdd HH24MI'))
    WHEN NOT MATCHED THEN
      INSERT
        (ID,
         ITIME_ID,
         VALTIME,
         WORKINGDAY,
         TERMINAL_ID,
         CREATED_BY,
         CREATED_LOG,
         CREATED_DATE)
      VALUES
        (SEQ_AT_SWIPE_DATA.NEXTVAL,
         P_TIMEID,
         P_VALTIME,
         D.WORKINGDAY,
         P_TERMINAL_ID,
         P_USERNAME,
         P_USERNAME,
         SYSDATE)
    WHEN MATCHED THEN
      UPDATE
         SET TERMINAL_ID   = P_TERMINAL_ID,
             MODIFIED_BY   = P_USERNAME,
             MODIFIED_LOG  = P_USERNAME,
             MODIFIED_DATE = SYSDATE;
  END;

  PROCEDURE IMPORT_WORKSIGN_DATE(P_STARTDATE IN DATE,
                                 P_ENDDATE   IN DATE,
                                 P_USERNAME  IN VARCHAR2) AS
    PV_START      NUMBER;
    PV_END        NUMBER;
    PV_START_CHAR VARCHAR2(100);
  BEGIN
    PV_START      := TO_CHAR(P_STARTDATE, 'yyyymmdd');
    PV_END        := TO_CHAR(P_ENDDATE, 'yyyymmdd');
    PV_START_CHAR := TO_CHAR(P_STARTDATE, 'yyyymm');
  
    DELETE AT_WORKSIGN
     WHERE EMPLOYEE_ID IN
           (SELECT E.EMPLOYEE_ID FROM AT_WORKSIGN_DATE_TEMP E)
       AND WORKINGDAY >= P_STARTDATE
       AND WORKINGDAY <= P_ENDDATE;
  
    INSERT INTO AT_WORKSIGN
      (ID,
       EMPLOYEE_ID,
       WORKINGDAY,
       PERIOD_ID,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       SHIFT_ID)
      SELECT SEQ_AT_WORKSIGN.NEXTVAL,
             E.EMPLOYEE_ID,
             TO_DATE(PV_START_CHAR || E.QUARTER, 'yyyymmdd'),
             E.PERIOD_ID,
             SYSDATE,
             P_USERNAME,
             P_USERNAME,
             SYSDATE,
             P_USERNAME,
             P_USERNAME,
             
             CASE
               WHEN MOD(TO_CHAR(TO_DATE(PV_START_CHAR || E.QUARTER,
                                        'yyyymmdd'),
                                'J'),
                        7) = 6 AND NVL(S.SUNDAY, 0) > 0 THEN
                81 -- OFF theo bang AT_SHIFT
               WHEN MOD(TO_CHAR(TO_DATE(PV_START_CHAR || E.QUARTER,
                                        'yyyymmdd'),
                                'J'),
                        7) = 5 AND NVL(S.SATURDAY, 0) > 0 THEN
                S.SATURDAY
               ELSE
                E.QUANTITY_SOLD
             END SHIFT_ID
      
        FROM (SELECT *
                FROM AT_WORKSIGN_DATE_TEMP T UNPIVOT INCLUDE NULLS(QUANTITY_SOLD FOR QUARTER IN(D1 AS '01',
                                                                                                D2 AS '02',
                                                                                                D3 AS '03',
                                                                                                D4 AS '04',
                                                                                                D5 AS '05',
                                                                                                D6 AS '06',
                                                                                                D7 AS '07',
                                                                                                D8 AS '08',
                                                                                                D9 AS '09',
                                                                                                D10 AS '10',
                                                                                                D11 AS '11',
                                                                                                D12 AS '12',
                                                                                                D13 AS '13',
                                                                                                D14 AS '14',
                                                                                                D15 AS '15',
                                                                                                D16 AS '16',
                                                                                                D17 AS '17',
                                                                                                D18 AS '18',
                                                                                                D19 AS '19',
                                                                                                D20 AS '20',
                                                                                                D21 AS '21',
                                                                                                D22 AS '22',
                                                                                                D23 AS '23',
                                                                                                D24 AS '24',
                                                                                                D25 AS '25',
                                                                                                D26 AS '26',
                                                                                                D27 AS '27',
                                                                                                D28 AS '28',
                                                                                                D29 AS '29',
                                                                                                D30 AS '30',
                                                                                                D31 AS '31'))) E
      
       INNER JOIN AT_SHIFT S
          ON E.QUANTITY_SOLD = S.ID
       WHERE PV_START_CHAR || E.QUARTER >= PV_START
         AND PV_START_CHAR || E.QUARTER <= PV_END;
  
  END;

  PROCEDURE INSERT_WORKSIGN_DATE(P_EMPLOYEEID IN NUMBER,
                                 P_PERIODID   IN NUMBER,
                                 P_USERNAME   IN VARCHAR2,
                                 P_D1         IN NUMBER,
                                 P_D2         IN NUMBER,
                                 P_D3         IN NUMBER,
                                 P_D4         IN NUMBER,
                                 P_D5         IN NUMBER,
                                 P_D6         IN NUMBER,
                                 P_D7         IN NUMBER,
                                 P_D8         IN NUMBER,
                                 P_D9         IN NUMBER,
                                 P_D10        IN NUMBER,
                                 P_D11        IN NUMBER,
                                 P_D12        IN NUMBER,
                                 P_D13        IN NUMBER,
                                 P_D14        IN NUMBER,
                                 P_D15        IN NUMBER,
                                 P_D16        IN NUMBER,
                                 P_D17        IN NUMBER,
                                 P_D18        IN NUMBER,
                                 P_D19        IN NUMBER,
                                 P_D20        IN NUMBER,
                                 P_D21        IN NUMBER,
                                 P_D22        IN NUMBER,
                                 P_D23        IN NUMBER,
                                 P_D24        IN NUMBER,
                                 P_D25        IN NUMBER,
                                 P_D26        IN NUMBER,
                                 P_D27        IN NUMBER,
                                 P_D28        IN NUMBER,
                                 P_D29        IN NUMBER,
                                 P_D30        IN NUMBER,
                                 P_D31        IN NUMBER) AS
  BEGIN
    MERGE INTO AT_WORKSIGN_DATE_TEMP T
    USING (SELECT P_EMPLOYEEID EMPLOYEE_ID FROM DUAL) D
    ON (T.EMPLOYEE_ID = D.EMPLOYEE_ID)
    WHEN NOT MATCHED THEN
      INSERT
        (ID,
         EMPLOYEE_ID,
         PERIOD_ID,
         D1,
         D2,
         D3,
         D4,
         D5,
         D6,
         D7,
         D8,
         D9,
         D10,
         D11,
         D12,
         D13,
         D14,
         D15,
         D16,
         D17,
         D18,
         D19,
         D20,
         D21,
         D22,
         D23,
         D24,
         D25,
         D26,
         D27,
         D28,
         D29,
         D30,
         D31)
      VALUES
        (SEQ_AT_WORKSIGN_DATE_TEMP.NEXTVAL,
         P_EMPLOYEEID,
         P_PERIODID,
         P_D1,
         P_D2,
         P_D3,
         P_D4,
         P_D5,
         P_D6,
         P_D7,
         P_D8,
         P_D9,
         P_D10,
         P_D11,
         P_D12,
         P_D13,
         P_D14,
         P_D15,
         P_D16,
         P_D17,
         P_D18,
         P_D19,
         P_D20,
         P_D21,
         P_D22,
         P_D23,
         P_D24,
         P_D25,
         P_D26,
         P_D27,
         P_D28,
         P_D29,
         P_D30,
         P_D31);
  
  END;

  PROCEDURE UPDATE_LEAVESHEET_DAILY(P_STARTDATE IN DATE,
                                    P_ENDDATE   IN DATE,
                                    P_USERNAME  IN VARCHAR2) AS
    PV_START      NUMBER;
    PV_END        NUMBER;
    PV_START_CHAR VARCHAR2(100);
  BEGIN
    PV_START      := TO_CHAR(P_STARTDATE, 'yyyymmdd');
    PV_END        := TO_CHAR(P_ENDDATE, 'yyyymmdd');
    PV_START_CHAR := TO_CHAR(P_STARTDATE, 'yyyymm');
  
    INSERT INTO AT_TIME_TIMESHEET_DAILY_TEMP
      SELECT E.ID,
             E.EMPLOYEE_ID,
             ORG_ID,
             TITLE_ID,
             E.WORKINGDAY,
             SHIFT_CODE,
             LEAVE_CODE,
             LATE,
             COMEBACKOUT,
             WORKDAY_OT,
             WORKDAY_NIGHT,
             TYPE_DAY,
             SYSDATE,
             P_USERNAME,
             P_USERNAME,
             SYSDATE,
             P_USERNAME,
             P_USERNAME,
             VALIN1,
             VALIN2,
             VALIN3,
             VALIN4,
             DECISION_ID,
             PA_OBJECT_SALARY_ID,
             SHIFT_ID,
             EE.MANUAL_ID,
             LEAVE_ID,
             WORKINGHOUR,
             WORKINGHOUR_SHIFT,
             NUMBER_SWIPE
        FROM AT_TIME_TIMESHEET_DAILY E
       INNER JOIN (SELECT E.EMPLOYEE_ID,
                          TO_DATE(PV_START_CHAR || E.QUARTER, 'yyyymmdd') WORKINGDAY,
                          E.QUANTITY_SOLD MANUAL_ID
                     FROM (SELECT *
                             FROM AT_WORKSIGN_DATE_TEMP T UNPIVOT INCLUDE NULLS(QUANTITY_SOLD FOR QUARTER IN(D1 AS '01',
                                                                                                             D2 AS '02',
                                                                                                             D3 AS '03',
                                                                                                             D4 AS '04',
                                                                                                             D5 AS '05',
                                                                                                             D6 AS '06',
                                                                                                             D7 AS '07',
                                                                                                             D8 AS '08',
                                                                                                             D9 AS '09',
                                                                                                             D10 AS '10',
                                                                                                             D11 AS '11',
                                                                                                             D12 AS '12',
                                                                                                             D13 AS '13',
                                                                                                             D14 AS '14',
                                                                                                             D15 AS '15',
                                                                                                             D16 AS '16',
                                                                                                             D17 AS '17',
                                                                                                             D18 AS '18',
                                                                                                             D19 AS '19',
                                                                                                             D20 AS '20',
                                                                                                             D21 AS '21',
                                                                                                             D22 AS '22',
                                                                                                             D23 AS '23',
                                                                                                             D24 AS '24',
                                                                                                             D25 AS '25',
                                                                                                             D26 AS '26',
                                                                                                             D27 AS '27',
                                                                                                             D28 AS '28',
                                                                                                             D29 AS '29',
                                                                                                             D30 AS '30',
                                                                                                             D31 AS '31'))) E
                    WHERE PV_START_CHAR || E.QUARTER >= PV_START
                      AND PV_START_CHAR || E.QUARTER <= PV_END) EE
          ON E.EMPLOYEE_ID = EE.EMPLOYEE_ID
         AND E.WORKINGDAY = EE.WORKINGDAY
       WHERE E.WORKINGDAY >= P_STARTDATE
         AND E.WORKINGDAY <= P_ENDDATE;
  
    DELETE AT_TIME_TIMESHEET_DAILY E
     WHERE E.WORKINGDAY >= P_STARTDATE
       AND E.WORKINGDAY <= P_ENDDATE
       AND E.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_WORKSIGN_DATE_TEMP);
  
    INSERT INTO AT_TIME_TIMESHEET_DAILY
      SELECT ID,
             EMPLOYEE_ID,
             ORG_ID,
             TITLE_ID,
             WORKINGDAY,
             SHIFT_CODE,
             LEAVE_CODE,
             LATE,
             COMEBACKOUT,
             WORKDAY_OT,
             WORKDAY_NIGHT,
             TYPE_DAY,
             CREATED_DATE,
             CREATED_BY,
             CREATED_LOG,
             MODIFIED_DATE,
             MODIFIED_BY,
             MODIFIED_LOG,
             VALIN1,
             VALIN2,
             VALIN3,
             VALIN4,
             DECISION_ID,
             PA_OBJECT_SALARY_ID,
             SHIFT_ID,
             MANUAL_ID,
             LEAVE_ID,
             WORKINGHOUR,
             WORKINGHOUR_SHIFT,
             NUMBER_SWIPE
        FROM AT_TIME_TIMESHEET_DAILY_TEMP E;
  
  END;

  PROCEDURE INSERT_CHOSEN_LOGORG(P_USERNAME   IN NVARCHAR2,
                                 P_ORGID      IN NUMBER,
                                 P_ISDISSOLVE IN NUMBER,
                                 P_ACTION_ID  IN NUMBER) IS
  BEGIN
    INSERT INTO AT_ACTION_ORG_LOG E
      (SELECT SEQ_AT_ACTION_ORG_LOG.NEXTVAL, ORG_ID, NULL, P_ACTION_ID
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(UPPER(P_USERNAME)),
                                    P_ORGID,
                                    NVL(P_ISDISSOLVE, 0))));
  END;
  
  PROCEDURE CAL_TIME_TIMESHEET_MONTHLY(P_USERNAME   VARCHAR2,
                                       P_PERIOD_ID  IN NUMBER,
                                       P_ORG_ID     IN NUMBER,
                                       P_ISDISSOLVE IN NUMBER) IS
    PV_FROMDATE   DATE;
    PV_TODATE     DATE;
    PV_YEAR       NUMBER;
    PV_SQL        CLOB;
    PV_REQUEST_ID NUMBER;
    PV_MONTH      CLOB := '';
  BEGIN
    PV_REQUEST_ID := SEQ_AT_REQUEST.NEXTVAL;


    SELECT P.START_DATE, P.END_DATE, EXTRACT(YEAR FROM P.END_DATE)
      INTO PV_FROMDATE, PV_TODATE, PV_YEAR
      FROM AT_PERIOD P
     WHERE P.ID = P_PERIOD_ID;

    -- Insert org can tinh toan
    INSERT INTO AT_CHOSEN_ORG E
      (SELECT ORG_ID, UPPER(P_USERNAME), PV_REQUEST_ID
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME),
                                    P_ORG_ID,
                                    P_ISDISSOLVE)) O
        WHERE EXISTS (SELECT 1
                 FROM AT_ORG_PERIOD OP
                WHERE OP.PERIOD_ID = P_PERIOD_ID
                  AND OP.ORG_ID = O.ORG_ID
                  AND OP.STATUSCOLEX = 1));

    -- insert emp can tinh toan
    INSERT INTO AT_CHOSEN_EMP
      (EMPLOYEE_ID,
       ITIME_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       STAFF_RANK_LEVEL,
       PA_OBJECT_SALARY_ID,
       USERNAME,
       REQUEST_ID,
       TER_EFFECT_DATE,
       JOIN_DATE,
       JOIN_DATE_STATE,
       EXPIREDATE_ENT)
      (SELECT T.ID,
              T.ITIME_ID,
              W.ORG_ID,
              W.TITLE_ID,
              W.STAFF_RANK_ID,
              W.LEVEL_STAFF,
              T.PA_OBJECT_SALARY_ID,
              UPPER(P_USERNAME),
              PV_REQUEST_ID,
              CASE
                WHEN T.TER_EFFECT_DATE IS NOT NULL THEN
                 T.TER_EFFECT_DATE + 1
                ELSE
                 NULL
              END TER_EFFECT_DATE,
              T.JOIN_DATE,
              T.JOIN_DATE_STATE,
              TO_DATE(TO_CHAR(NVL(EE.EXPIREDATE_ENT,
                                  NVL(E_PARAM.TO_LEAVE_YEAR,
                                      TO_DATE('3103' || PV_YEAR, 'ddmmyyyy'))),
                              'ddmm') || PV_YEAR,
                      'ddmmyyyy')
         FROM HU_EMPLOYEE T
        INNER JOIN (SELECT E.EMPLOYEE_ID,
                          E.TITLE_ID,
                          E.ORG_ID,
                          E.IS_3B,
                          E.STAFF_RANK_ID,
                          S.LEVEL_STAFF,
                          ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                     FROM HU_WORKING E
                     LEFT JOIN HU_STAFF_RANK S
                       ON E.STAFF_RANK_ID = S.ID
                    WHERE E.EFFECT_DATE <= PV_TODATE
                      AND E.STATUS_ID = 447
                      AND E.IS_3B = 0) W
           ON T.ID = W.EMPLOYEE_ID
          AND W.ROW_NUMBER = 1
        INNER JOIN (SELECT ORG_ID FROM AT_CHOSEN_ORG O) O
           ON O.ORG_ID = W.ORG_ID
         LEFT JOIN (SELECT E.EMPLOYEE_ID,
                          MAX(TO_DATE('01' ||
                                      TO_CHAR(E.START_MONTH_EXTEND, '00') ||
                                      E.YEAR_ENTITLEMENT,
                                      'ddmmyyyy')) EXPIREDATE_ENT
                     FROM AT_DECLARE_ENTITLEMENT E
                    WHERE E.START_MONTH_EXTEND IS NOT NULL
                      AND E.START_MONTH_EXTEND > 0
                      AND E.YEAR_ENTITLEMENT IS NOT NULL
                      AND E.YEAR_ENTITLEMENT = PV_YEAR
                      AND E.YEAR_ENTITLEMENT >= 1900
                    GROUP BY E.EMPLOYEE_ID) EE
           ON W.EMPLOYEE_ID = EE.EMPLOYEE_ID
         LEFT JOIN (SELECT *
                     FROM (SELECT E.TO_LEAVE_YEAR
                             FROM AT_LIST_PARAM_SYSTEM E
                            WHERE E.EFFECT_DATE_FROM <= PV_TODATE
                              AND E.TO_LEAVE_YEAR IS NOT NULL
                              AND E.ACTFLG = 'A')
                    WHERE ROWNUM = 1) E_PARAM
           ON 1 = 1
        WHERE (NVL(T.WORK_STATUS, 0) <> 257 OR
              (T.WORK_STATUS = 257 AND T.TER_LAST_DATE >= PV_FROMDATE)));

    INSERT INTO AT_CHOSEN_EMP_CLEAR
      (EMPLOYEE_ID, REQUEST_ID)
      (SELECT EMPLOYEE_ID, PV_REQUEST_ID
         FROM (SELECT A.*,
                      ROW_NUMBER() OVER(PARTITION BY A.EMPLOYEE_ID ORDER BY A.EFFECT_DATE DESC, A.ID DESC) AS ROW_NUMBER
                 FROM HU_WORKING A
                WHERE A.STATUS_ID = 447
                  AND A.EFFECT_DATE <= PV_TODATE
                  AND A.IS_3B = 0) C
        INNER JOIN HU_EMPLOYEE EE
           ON C.EMPLOYEE_ID = EE.ID
          AND C.ROW_NUMBER = 1
        WHERE (NVL(EE.WORK_STATUS, 0) <> 257 OR
              (EE.WORK_STATUS = 257 AND EE.TER_LAST_DATE >= PV_FROMDATE)));

    ---------------------------------------------------------------------------------
    -- XOA BO DU LIEU CU TRONG BANG TAM
    ---------------------------------------------------------------------------------
    DELETE AT_TIME_TIMESHEET_DAILY_TEM T
     WHERE T.WORKINGDAY >= PV_FROMDATE
       AND T.WORKINGDAY <= PV_TODATE
       AND T.EMPLOYEE_ID IN (SELECT EE.EMPLOYEE_ID FROM AT_CHOSEN_EMP EE);

    ---------------------------------------------------------------------------------
    -- INSERT DU LIEU MOI CAN TINH TRONG BANG TAM
    ---------------------------------------------------------------------------------
    INSERT INTO AT_TIME_TIMESHEET_DAILY_TEM
      (EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       WORKINGDAY,
       SHIFT_CODE,
       LEAVE_CODE,
       LATE,
       COMEBACKOUT,
       WORKDAY_OT,
       MANUAL_ID,
       SHIFT_ID,
       VALIN1,
       VALIN2,
       VALIN3,
       VALIN4,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       PA_OBJECT_SALARY_ID)
      SELECT T.EMPLOYEE_ID,
             T.ORG_ID,
             T.TITLE_ID,
             WORKINGDAY,
             SHIFT_CODE,
             LEAVE_CODE,
             LATE,
             COMEBACKOUT,
             WORKDAY_OT,
             MANUAL_ID,
             SHIFT_ID,
             VALIN1,
             VALIN2,
             VALIN3,
             VALIN4,
             CREATED_DATE,
             CREATED_BY,
             CREATED_LOG,
             MODIFIED_DATE,
             MODIFIED_BY,
             MODIFIED_LOG,
             EE.PA_OBJECT_SALARY_ID
        FROM AT_CHOSEN_EMP EE
        LEFT JOIN AT_TIME_TIMESHEET_DAILY T
          ON T.EMPLOYEE_ID = EE.EMPLOYEE_ID
         AND (EE.TER_EFFECT_DATE IS NULL OR
             (EE.TER_EFFECT_DATE IS NOT NULL AND
             T.WORKINGDAY < EE.TER_EFFECT_DATE))
         AND T.WORKINGDAY >= EE.JOIN_DATE
         AND T.WORKINGDAY >= PV_FROMDATE
         AND T.WORKINGDAY <= PV_TODATE;

    -- XOA DU LIEU CU CAN TINH TRONG BANG TONG HOP
    ---------------------------------------------------------------------------------
    DELETE AT_TIME_TIMESHEET_MONTHLY T
     WHERE T.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP O)
       AND T.PERIOD_ID = P_PERIOD_ID;
    ---------------------------------------------------------------------------------
    -- INSERT DU LIEU VAO BANG TONG HOP CONG
    ---------------------------------------------------------------------------------
    INSERT INTO AT_TIME_MONTHLY_TEMP
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       DECISION_ID,
       DECISION_START,
       DECISION_END,
       PA_OBJECT_SALARY_ID,
       PERIOD_ID,
       FROM_DATE,
       END_DATE,
       WORKING_X,--Cong ngay thuong
       WORKING_F, --CD2 Che do tru phep
       WORKING_E, --CD1 Che do nghi cuoi
       WORKING_A,
       WORKING_H,
       WORKING_D,
       WORKING_C, --Cong cong tac
       WORKING_T,
       WORKING_Q,
       WORKING_N, --Cong nghi khong luong
       WORKING_P, --Cong phep
       WORKING_L, --Cong nghi le
       WORKING_R,
       WORKING_S,
       WORKING_B, --Cong nghi bu
       WORKING_K,
       WORKING_J,
       WORKING_TS, --Cong thai san
       WORKING_O, -- Cong Onsite
       WORKING_V,
       WORKING_ADD,
       REQUEST_ID)
      WITH CTE_WORKING AS
       (SELECT T.ORG_ID,
               T.TITLE_ID,
               T.EMPLOYEE_ID,
               T.ID,
               T.START_DATE,
               T.SAL_BASIC,
               T.STAFF_RANK_ID,
               T.COST_SUPPORT,
               T.PERCENT_SALARY,
               NVL(LAG(T.START_DATE - 1)
                   OVER(PARTITION BY T.EMPLOYEE_ID ORDER BY T.START_DATE DESC,
                        T.ID DESC),
                   PV_TODATE) END_DATE
          FROM (SELECT E.*
                  FROM (SELECT W.ORG_ID,
                               W.EMPLOYEE_ID,
                               W.ID,
                               W.TITLE_ID,
                               W.STAFF_RANK_ID,
                               W.EFFECT_DATE START_DATE,
                               NVL(W.SAL_BASIC, 0) * NVL(W.PERCENT_SALARY, 0) / 100 SAL_BASIC,
                               NVL(W.COST_SUPPORT, 0) *
                               NVL(W.PERCENT_SALARY, 0) / 100 COST_SUPPORT,
                               NVL(W.PERCENT_SALARY, 0) PERCENT_SALARY,
                               ROW_NUMBER() OVER(PARTITION BY W.EMPLOYEE_ID ORDER BY W.EFFECT_DATE DESC, W.ID DESC) RN
                          FROM HU_WORKING W
                         WHERE W.STATUS_ID = 447
                           AND W.IS_3B = 0
                           AND W.EFFECT_DATE <= PV_FROMDATE) E
                 WHERE E.RN = 1
                UNION ALL
                SELECT W.ORG_ID,
                       W.EMPLOYEE_ID,
                       W.ID,
                       W.TITLE_ID,
                       W.STAFF_RANK_ID,
                       W.EFFECT_DATE,
                       NVL(W.SAL_BASIC, 0) * NVL(W.PERCENT_SALARY, 0) / 100 SAL_BASIC,
                       NVL(W.COST_SUPPORT, 0) * NVL(W.PERCENT_SALARY, 0) / 100 COST_SUPPORT,
                       NVL(W.PERCENT_SALARY, 0) PERCENT_SALARY,
                       ROW_NUMBER() OVER(PARTITION BY W.EMPLOYEE_ID ORDER BY W.EFFECT_DATE DESC, W.ID DESC) RN
                  FROM HU_WORKING W
                 WHERE W.STATUS_ID = 447
                   AND W.IS_3B = 0
                   AND W.IS_WAGE = -1
                   AND W.EFFECT_DATE > PV_FROMDATE
                   AND W.EFFECT_DATE <= PV_TODATE) T)
      SELECT SEQ_AT_TIME_MONTHLY_TEMP.NEXTVAL,
             T.EMPLOYEE_ID,
             T.ORG_ID,
             T.TITLE_ID,
             T.STAFF_RANK_ID,
             T.DECISION_ID,
             CASE
               WHEN PV_FROMDATE > T.START_DATE THEN
                PV_FROMDATE
               ELSE
                T.START_DATE
             END START_DATE,
             T.END_DATE,
             T.PA_OBJECT_SALARY_ID,
             P_PERIOD_ID,
             PV_FROMDATE,
             PV_TODATE,
             CASE
               WHEN WORKING_X = 0 THEN
                NULL
               ELSE
                WORKING_X
             END WORKING_X,
             CASE
               WHEN WORKING_F = 0 THEN
                NULL
               ELSE
                WORKING_F
             END WORKING_F,
             CASE
               WHEN WORKING_E = 0 THEN
                NULL
               ELSE
                WORKING_E
             END WORKING_E,
             CASE
               WHEN WORKING_A = 0 THEN
                NULL
               ELSE
                WORKING_A
             END WORKING_A,
             CASE
               WHEN WORKING_H = 0 THEN
                NULL
               ELSE
                WORKING_H
             END WORKING_H,
             CASE
               WHEN WORKING_D = 0 THEN
                NULL
               ELSE
                WORKING_D
             END WORKING_D,
             CASE
               WHEN WORKING_C = 0 THEN
                NULL
               ELSE
                WORKING_C
             END WORKING_C,
             CASE
               WHEN WORKING_T = 0 THEN
                NULL
               ELSE
                WORKING_T
             END WORKING_T,
             CASE
               WHEN WORKING_Q = 0 THEN
                NULL
               ELSE
                WORKING_Q
             END WORKING_Q,
             CASE
               WHEN WORKING_N = 0 THEN
                NULL
               ELSE
                WORKING_N
             END WORKING_N,
             CASE
               WHEN WORKING_P = 0 THEN
                NULL
               ELSE
                WORKING_P
             END WORKING_P,
             CASE
               WHEN WORKING_L = 0 THEN
                NULL
               ELSE
                WORKING_L
             END WORKING_L,
             CASE
               WHEN WORKING_R = 0 THEN
                NULL
               ELSE
                WORKING_R
             END WORKING_R,
             CASE
               WHEN WORKING_S = 0 THEN
                NULL
               ELSE
                WORKING_S
             END WORKING_S,
             CASE
               WHEN WORKING_B = 0 THEN
                NULL
               ELSE
                WORKING_B
             END WORKING_B,
             CASE
               WHEN WORKING_K = 0 THEN
                NULL
               ELSE
                WORKING_K
             END WORKING_K,
             CASE
               WHEN WORKING_J = 0 THEN
                NULL
               ELSE
                WORKING_J
             END WORKING_J,
             CASE
               WHEN WORKING_TS = 0 THEN
                NULL
               ELSE
                WORKING_TS
             END WORKING_TS,
             CASE
               WHEN WORKING_O = 0 THEN
                NULL
               ELSE
                WORKING_O
             END WORKING_O,
             CASE
               WHEN WORKING_V = 0 THEN
                NULL
               ELSE
                WORKING_V
             END WORKING_V,
             CASE
               WHEN WORKING_ADD = 0 THEN
                NULL
               ELSE
                WORKING_ADD
             END WORKING_ADD,
             PV_REQUEST_ID
        FROM (SELECT A.EMPLOYEE_ID,
                     EE.ORG_ID,
                     W.TITLE_ID,
                     W.ID DECISION_ID,
                     W.START_DATE,
                     W.END_DATE,
                     W.STAFF_RANK_ID,
                     A.PA_OBJECT_SALARY_ID,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'X' THEN
                            1
                           WHEN (F.CODE = 'X' OR F2.CODE = 'X') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_X,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'CD2' THEN
                            1
                           WHEN (F.CODE = 'CD2' OR F2.CODE = 'CD2') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_F,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'CD1' THEN
                            1
                           WHEN (F.CODE = 'CD1' OR F2.CODE = 'CD1') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_E,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'A' THEN
                            1
                           WHEN (F.CODE = 'A' OR F2.CODE = 'A') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_A,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'H' THEN
                            1
                           WHEN (F.CODE = 'H' OR F2.CODE = 'H') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_H,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'D' THEN
                            1
                           WHEN (F.CODE = 'D' OR F2.CODE = 'D') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_D,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'CT' THEN
                            1
                           WHEN (F.CODE = 'CT' OR F2.CODE = 'CT') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_C,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'T' THEN
                            1
                           WHEN (F.CODE = 'T' OR F2.CODE = 'T') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_T,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'Q' THEN
                            1
                           WHEN (F.CODE = 'Q' OR F2.CODE = 'Q') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_Q,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'N' THEN
                            1
                           WHEN (F.CODE = 'N' OR F2.CODE = 'N') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_N,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'P' THEN
                            1
                           WHEN (F.CODE = 'P' OR F2.CODE = 'P') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_P,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'L' THEN
                            1
                           WHEN (F.CODE = 'L' OR F2.CODE = 'L') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_L,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'R' THEN
                            1
                           WHEN (F.CODE = 'R' OR F2.CODE = 'R') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_R,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'S' THEN
                            1
                           WHEN (F.CODE = 'S' OR F2.CODE = 'S') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_S,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'B' THEN
                            1
                           WHEN (F.CODE = 'B' OR F2.CODE = 'B') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_B,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'K' THEN
                            1
                           WHEN (F.CODE = 'K' OR F2.CODE = 'K') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_K,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'J' THEN
                            1
                           WHEN (F.CODE = 'J' OR F2.CODE = 'J') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_J,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'TS' THEN
                            1
                           WHEN (F.CODE = 'TS' OR F2.CODE = 'TS') AND
                                F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_TS,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'O' THEN
                            1
                           WHEN (F.CODE = 'O' OR F2.CODE = 'O') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_O,
                     SUM(CASE
                           WHEN F.ID = F2.ID AND M.CODE = 'V' THEN
                            1
                           WHEN (F.CODE = 'V' OR F2.CODE = 'V') AND F.ID <> F2.ID THEN
                            .5
                           ELSE
                            0
                         END) WORKING_V,
                     NVL(SUM(CASE
                               WHEN (S.CODE = 'C-1.0.5-8:00-21:00' OR
                                    S.CODE = 'C-1.0.5.8:00-21:00') AND
                                    A.MANUAL_ID = 21 THEN
                                1
                               ELSE
                                0
                             END),
                         0) * .5 + NVL(TRUNC(SUM(CASE
                                                   WHEN S.CODE = 'C-2.1-08:00-21:00' AND A.MANUAL_ID = 21 THEN
                                                    1
                                                   ELSE
                                                    0
                                                 END) / 2),
                                       0) * 1 +
                     NVL(TRUNC(SUM(CASE
                                     WHEN (S.CODE = 'C-2.1.5-06:00-21:00' OR
                                          S.CODE = 'C-2.1.5.8:00-21:00') AND
                                          A.MANUAL_ID = 21 THEN
                                      1
                                     ELSE
                                      0
                                   END) / 2),
                         0) * 1.5 WORKING_ADD
                FROM AT_TIME_TIMESHEET_DAILY_TEM A
               INNER JOIN CTE_WORKING W
                  ON A.EMPLOYEE_ID = W.EMPLOYEE_ID
                 AND W.START_DATE <= A.WORKINGDAY
                 AND W.END_DATE >= A.WORKINGDAY
               INNER JOIN AT_CHOSEN_EMP EE
                  ON W.EMPLOYEE_ID = EE.EMPLOYEE_ID
                LEFT JOIN AT_TIME_MANUAL M
                  ON A.MANUAL_ID = M.ID
                LEFT JOIN AT_FML F
                  ON M.MORNING_ID = F.ID
                LEFT JOIN AT_FML F2
                  ON M.AFTERNOON_ID = F2.ID
                LEFT JOIN AT_SHIFT S
                  ON A.SHIFT_ID = S.ID
               GROUP BY A.EMPLOYEE_ID,
                        W.ID,
                        W.START_DATE,
                        W.END_DATE,
                        EE.ORG_ID,
                        W.TITLE_ID,
                        W.STAFF_RANK_ID,
                        A.PA_OBJECT_SALARY_ID) T;


    ---------------------------------------------------------------------------------
    -- INSERT DU LIEU VAO BANG TONG HOP CONG

    --------------------------------------------------------------------------------------
    -- AP DUNG CONG THUC TINH CHO CAC COT TREN BANG CONG TONG HOP
    --------------------------------------------------------------------------------------
    FOR CUR_ITEM IN (SELECT *
                       FROM AT_TIME_FORMULAR T
                      WHERE T.TYPE = 2
                        AND T.STATUS = 1
                      ORDER BY T.FORMULAR_ID) LOOP

      PV_SQL := 'UPDATE AT_TIME_MONTHLY_TEMP T SET ' ||
                CUR_ITEM.FORMULAR_CODE || '= NVL((' ||
                CUR_ITEM.FORMULAR_VALUE || '),0)';

      EXECUTE IMMEDIATE PV_SQL;

    END LOOP;
    update AT_TIME_MONTHLY_TEMP t set t.working_da=(select ROUND(sum(NVL(ap.hours,0))/8,2) from at_project_assign ap where ap.employee_id=t.employee_id and ap.workingday between t.from_date and t.end_date);
    INSERT INTO AT_TIME_TIMESHEET_MONTHLY
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       DECISION_ID,
       DECISION_START,
       DECISION_END,
       PA_OBJECT_SALARY_ID,
       PERIOD_ID,
       FROM_DATE,
       END_DATE,
       WORKING_X,
       WORKING_F,
       WORKING_E,
       WORKING_A,
       WORKING_H,
       WORKING_D,
       WORKING_C,
       WORKING_T,
       WORKING_Q,
       WORKING_N,
       WORKING_P,
       WORKING_L,
       WORKING_R,
       WORKING_S,
       WORKING_B,
       WORKING_K,
       WORKING_J,
       WORKING_TS,
       WORKING_O,
       WORKING_V,
       WORKING_ADD,
       TOTAL_WORKING_XJ,
       TOTAL_TS_V,
       TOTAL_WORKING,
       WORKING_DA)
      SELECT SEQ_AT_TIME_TIMESHEET_MONTHLY.NEXTVAL,
             EMPLOYEE_ID,
             ORG_ID,
             TITLE_ID,
             STAFF_RANK_ID,
             DECISION_ID,
             DECISION_START,
             DECISION_END,
             PA_OBJECT_SALARY_ID,
             PERIOD_ID,
             FROM_DATE,
             END_DATE,
             WORKING_X,
             WORKING_F,
             WORKING_E,
             WORKING_A,
             WORKING_H,
             WORKING_D,
             WORKING_C,
             WORKING_T,
             WORKING_Q,
             WORKING_N,
             WORKING_P,
             WORKING_L,
             WORKING_R,
             WORKING_S,
             WORKING_B,
             WORKING_K,
             WORKING_J,
             WORKING_TS,
             WORKING_O,
             WORKING_V,
             WORKING_ADD,
             TOTAL_WORKING_XJ,
             TOTAL_TS_V,
             TOTAL_WORKING,
             WORKING_DA
        FROM AT_TIME_MONTHLY_TEMP;

  --Update lại các cột ngày trong bảng Công tổng hợp
  UPDATE AT_TIME_TIMESHEET_MONTHLY WSIGN
       SET WSIGN.NGHI_CO_LUONG = (NVL(WSIGN.WORKING_P,0) + NVL(WSIGN.WORKING_E,0) + NVL(WSIGN.WORKING_F,0) + NVL(WSIGN.WORKING_B,0)),
       WSIGN.NGHI_TRU_PHEP = (NVL(WSIGN.WORKING_P,0) + NVL(WSIGN.WORKING_F,0)),
       WSIGN.NGAY_TINH_LUONG = (NVL(WSIGN.WORKING_X,0)+NVL(WSIGN.WORKING_P,0) + NVL(WSIGN.WORKING_E,0) + NVL(WSIGN.WORKING_F,0) + NVL(WSIGN.WORKING_B,0)),
       WSIGN.TOTAL_WORKING_XJ = (NVL(WSIGN.WORKING_L,0)+NVL(WSIGN.WORKING_O,0)+NVL(WSIGN.WORKING_C,0)+NVL(WSIGN.WORKING_X,0)+NVL(WSIGN.WORKING_P,0)+NVL(WSIGN.WORKING_E,0) + NVL(WSIGN.WORKING_F,0) + NVL(WSIGN.WORKING_B,0)) WHERE WSIGN.PERIOD_ID = P_PERIOD_ID;

  UPDATE AT_TIME_TIMESHEET_MONTHLY WSIGN
       SET WSIGN.WORKING_A = (SELECT CUR_HAVE FROM AT_ENTITLEMENT WHERE PERIOD_ID = P_PERIOD_ID AND EMPLOYEE_ID = WSIGN.EMPLOYEE_ID AND WSIGN.ID IN (SELECT MAX(ID) AS ID FROM AT_TIME_TIMESHEET_MONTHLY GROUP BY PERIOD_ID, EMPLOYEE_ID));
  
   UPDATE AT_TIME_TIMESHEET_MONTHLY WSIGN SET WSIGN.NGHI_CO_LUONG = NULL WHERE WSIGN.NGHI_CO_LUONG = 0;
   UPDATE AT_TIME_TIMESHEET_MONTHLY WSIGN SET WSIGN.NGHI_TRU_PHEP = NULL WHERE WSIGN.NGHI_TRU_PHEP = 0;
   UPDATE AT_TIME_TIMESHEET_MONTHLY WSIGN SET WSIGN.NGAY_TINH_LUONG = NULL WHERE WSIGN.NGAY_TINH_LUONG = 0;
   UPDATE AT_TIME_TIMESHEET_MONTHLY WSIGN SET WSIGN.TOTAL_WORKING_XJ = NULL WHERE WSIGN.TOTAL_WORKING_XJ = 0;
   UPDATE AT_TIME_TIMESHEET_MONTHLY WSIGN SET WSIGN.WORKING_A = NULL WHERE WSIGN.WORKING_A = 0;
   
  
    DELETE AT_TIME_TIMESHEET_DAILY E
     WHERE E.WORKINGDAY >= PV_FROMDATE
       AND E.WORKINGDAY <= PV_TODATE
       AND E.EMPLOYEE_ID NOT IN
           (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP_CLEAR);

    DELETE AT_TIME_TIMESHEET_ORIGIN E
     WHERE E.WORKINGDAY >= PV_FROMDATE
       AND E.WORKINGDAY <= PV_TODATE
       AND E.EMPLOYEE_ID NOT IN
           (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP_CLEAR);

    DELETE AT_TIME_TIMESHEET_MONTHLY E
     WHERE E.PERIOD_ID = P_PERIOD_ID
       AND E.EMPLOYEE_ID NOT IN
           (SELECT EMPLOYEE_ID FROM AT_CHOSEN_EMP_CLEAR);
   INSERT_INS_CHANGE(P_USERNAME, P_ORG_ID, P_PERIOD_ID, P_ISDISSOLVE);
    COMMIT;
    CALL_ENTITLEMENT(P_USERNAME, P_ORG_ID, P_PERIOD_ID, P_ISDISSOLVE);
    COMMIT;
    CALL_ENTITLEMENT_NB(P_USERNAME, P_ORG_ID, P_PERIOD_ID, P_ISDISSOLVE);
    COMMIT;

  END;
  
  PROCEDURE INSERT_INS_CHANGE(P_USERNAME IN VARCHAR2,
                              P_ORG_ID IN NUMBER ,
                              P_PERIOD_ID IN NUMBER,
                              P_ISDISSOLVE IN NUMBER) AS
  PV_FROMDATE   DATE;
  PV_TODATE     DATE;
  PV_YEAR       NUMBER;
  PV_REQUEST_ID NUMBER;                                                            
 BEGIN
   PV_REQUEST_ID := SEQ_AT_REQUEST.NEXTVAL;
   -----------------------------------------------------------------
   -- LAY NGAY BAT DAU KET THUC CUA KY CONG
   -----------------------------------------------------------------
    SELECT P.START_DATE, P.END_DATE, EXTRACT(YEAR FROM P.END_DATE)
      INTO PV_FROMDATE, PV_TODATE, PV_YEAR
      FROM AT_PERIOD P
     WHERE P.ID = P_PERIOD_ID;  
     
    ----------------------------------------------------------------
    -- Insert org can tinh toan
    ----------------------------------------------------------------
    INSERT INTO AT_CHOSEN_ORG E
      (SELECT ORG_ID, UPPER(P_USERNAME), PV_REQUEST_ID
         FROM TABLE(TABLE_ORG_RIGHT(UPPER(P_USERNAME),
                                    P_ORG_ID,
                                    P_ISDISSOLVE)) O
        WHERE EXISTS (SELECT 1
                 FROM AT_ORG_PERIOD OP
                WHERE OP.PERIOD_ID = P_PERIOD_ID
                  AND OP.ORG_ID = O.ORG_ID
                  AND OP.STATUSCOLEX = 1));
    ----------------------------------------------------------------
    -- 1. insert employee can tinh toan
    ----------------------------------------------------------------
    INSERT INTO AT_CHOSEN_EMP
      (EMPLOYEE_ID,
       ITIME_ID,
       ORG_ID,
       TITLE_ID,
       STAFF_RANK_ID,
       STAFF_RANK_LEVEL,
       PA_OBJECT_SALARY_ID,
       USERNAME,
       REQUEST_ID,
       TER_EFFECT_DATE,
       JOIN_DATE,
       JOIN_DATE_STATE)
      (SELECT T.ID,
              T.ITIME_ID,
              W.ORG_ID,
              W.TITLE_ID,
              W.STAFF_RANK_ID,
              W.LEVEL_STAFF,
              T.PA_OBJECT_SALARY_ID,
              UPPER(P_USERNAME),
              PV_REQUEST_ID,
              CASE
                WHEN T.TER_EFFECT_DATE IS NOT NULL THEN
                 T.TER_EFFECT_DATE + 1
                ELSE
                 NULL
              END TER_EFFECT_DATE,
              T.JOIN_DATE,
              T.JOIN_DATE_STATE
         FROM HU_EMPLOYEE T
        INNER JOIN (SELECT E.EMPLOYEE_ID,
                          E.TITLE_ID,
                          E.ORG_ID,
                          E.IS_3B,
                          E.STAFF_RANK_ID,
                          S.LEVEL_STAFF,
                          ROW_NUMBER() OVER(PARTITION BY E.EMPLOYEE_ID ORDER BY E.EFFECT_DATE DESC, E.CREATED_DATE DESC) AS ROW_NUMBER
                     FROM HU_WORKING E
                     LEFT JOIN HU_STAFF_RANK S
                       ON E.STAFF_RANK_ID = S.ID
                    WHERE E.EFFECT_DATE <= PV_TODATE
                      AND E.STATUS_ID = 447
                      AND E.IS_3B = 0) W
           ON T.ID = W.EMPLOYEE_ID
          AND W.ROW_NUMBER = 1
        INNER JOIN (SELECT ORG_ID FROM AT_CHOSEN_ORG O) O
           ON O.ORG_ID = W.ORG_ID
        WHERE (NVL(T.WORK_STATUS, 0) <> 257 OR
              (T.WORK_STATUS = 257 AND T.TER_LAST_DATE >= PV_FROMDATE)));
              
   --------------------------------------------------------------------
   -- 2.XOA NV DUOC TONG HOP TRONG THANG 
   --------------------------------------------------------------------
    DELETE INS_CHANGE C WHERE C.PERIOD_CHANGE = P_PERIOD_ID
    AND C.EMPLOYEE_ID IN (SELECT EE.EMPLOYEE_ID FROM AT_CHOSEN_EMP EE);
    
    --------------------------------------------------------------------------
    -- 3.INSERT BANG TAM NHUNG BAN GHI CO THANG BIEN DONG <= THANG TONG HOP CONG
    --------------------------------------------------------------------------
    INSERT INTO INS_CHANGE_TEMP
      (EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       ORG_ID_INS,
       OLDSALARY,
       NEWSALARY,
       ISBHXH,
       ISBHYT,
       ISBHTN,
       CHANGE_TYPE,
       EFFECTDATE,
       CHANGE_MONTH,
       RETURN_DATEBHXH,
       RETURN_DATEBHYT,
       NOTE,
       CLTFRMMONTH,
       CLTTOMONTH,
       CLTBHXH,
       CLTBHYT,
       CLTBHTN,
       REPFRMMONTH,
       REPTOMONTH,
       REPBHXH,
       REPBHYT,
       REPBHTN,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       TER_PKEY,
       PERIOD_CHANGE)
      SELECT C.EMPLOYEE_ID,
             C.ORG_ID,
             C.TITLE_ID,
             C.ORG_ID_INS,
             C.OLDSALARY,
             C.NEWSALARY,
             C.ISBHXH,
             C.ISBHYT,
             C.ISBHTN,
             C.CHANGE_TYPE,
             C.EFFECTDATE,
             C.CHANGE_MONTH,
             C.RETURN_DATEBHXH,
             C.RETURN_DATEBHYT,
             C.NOTE,
             C.CLTFRMMONTH,
             C.CLTTOMONTH,
             C.CLTBHXH,
             C.CLTBHYT,
             C.CLTBHTN,
             C.REPFRMMONTH,
             C.REPTOMONTH,
             C.REPBHXH,
             C.REPBHYT,
             C.REPBHTN,
             C.CREATED_DATE,
             C.CREATED_BY,
             C.CREATED_LOG,
             C.MODIFIED_DATE,
             C.MODIFIED_BY,
             C.MODIFIED_LOG,
             C.TER_PKEY,
             C.PERIOD_CHANGE
        FROM AT_CHOSEN_EMP EE
       INNER JOIN INS_CHANGE C
          ON C.EMPLOYEE_ID = EE.EMPLOYEE_ID
         AND C.CHANGE_MONTH <= PV_FROMDATE
       INNER JOIN (SELECT MAX(CM.ID) ID, CM.EMPLOYEE_ID
                     FROM INS_CHANGE CM
                    WHERE CM.CHANGE_MONTH < PV_FROMDATE
                    GROUP BY CM.EMPLOYEE_ID) M
          ON C.ID = M.ID;
        
       ------------------------------------------------------------------
       -- 4. INSERT DU LIEU HOP LE TU BANG CONG TONG HOP VAO BANG TAM
       ------------------------------------------------------------------
       
       INSERT INTO AT_INS_TIMESHEET_MONTHLY_TEMP
      (EMPLOYEE_ID,
       PERIOD_ID,
       TOTAL_WORKING_XJ,
       WORKING_TS)
      SELECT T.EMPLOYEE_ID,
             T.PERIOD_ID,
             SUM(T.TOTAL_WORKING_XJ) TOTAL_WORKING_XJ,
             SUM(T.WORKING_TS) WORKING_TS
        FROM AT_CHOSEN_EMP EE
        INNER JOIN AT_TIME_TIMESHEET_MONTHLY T
        ON T.EMPLOYEE_ID = EE.EMPLOYEE_ID 
        AND T.PERIOD_ID = P_PERIOD_ID 
        GROUP BY T.EMPLOYEE_ID,T.PERIOD_ID;   
        
        ---------------------------------------------------------------------------
        -- 5. DAY DU LIEU VAO BANG INS_CHANGE T? SINH BIEN DONG GIAM
        ---------------------------------------------------------------------------
        INSERT INTO INS_CHANGE
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       ORG_ID_INS,
       OLDSALARY,
       NEWSALARY,
       ISBHXH,
       ISBHYT,
       ISBHTN,
       CHANGE_TYPE,
       EFFECTDATE,
       CHANGE_MONTH,
       RETURN_DATEBHXH,
       RETURN_DATEBHYT,
       NOTE,
       CLTFRMMONTH,
       CLTTOMONTH,
       CLTBHXH,
       CLTBHYT,
       CLTBHTN,
       REPFRMMONTH,
       REPTOMONTH,
       REPBHXH,
       REPBHYT,
       REPBHTN,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       TER_PKEY,
       PERIOD_CHANGE)
      SELECT SEQ_INS_CHANGE.NEXTVAL,
             C.EMPLOYEE_ID,
             C.ORG_ID,
             C.TITLE_ID,
             C.ORG_ID_INS,
             C.NEWSALARY OLDSALARY,
             0 NEWSALARY,
             C.ISBHXH,
             C.ISBHYT,
             C.ISBHTN,
             CASE 
               WHEN IT.WORKING_TS >= 12  THEN -- SINH BIEN DONG NGH THAI SAN
                 4
               WHEN IT.TOTAL_WORKING_XJ < 12 THEN -- SINH BIEN DONG NGHI KHONG LUONG
                 5
               END CHANGE_TYPE,
             PV_FROMDATE,
             PV_FROMDATE,
             C.RETURN_DATEBHXH,
             C.RETURN_DATEBHYT,
             TO_CHAR(UNISTR('Bi\1EBFn \0111\1ED9ng t\1EF1 sinh t\1EEB ph\1EA7n t\1ED5ng h\1EE3p c\00F4ng')),
             C.CLTFRMMONTH,
             C.CLTTOMONTH,
             C.CLTBHXH,
             C.CLTBHYT,
             C.CLTBHTN,
             C.REPFRMMONTH,
             C.REPTOMONTH,
             C.REPBHXH,
             C.REPBHYT,
             C.REPBHTN,
             SYSDATE,
             P_USERNAME,
             P_USERNAME,
             SYSDATE,
             P_USERNAME,
             P_USERNAME,
             C.TER_PKEY,
             P_PERIOD_ID
        FROM INS_CHANGE_TEMP C
        INNER JOIN AT_INS_TIMESHEET_MONTHLY_TEMP IT
        ON IT.EMPLOYEE_ID = C.EMPLOYEE_ID 
        WHERE (IT.WORKING_TS >= 12 OR IT.TOTAL_WORKING_XJ < 12) 
        AND C.CHANGE_TYPE NOT IN (4,5);   
        
         ---------------------------------------------------------------------------
        -- 5. DAY DU LIEU VAO BANG INS_CHANGE T? SINH BIEN DONG TANG
        ---------------------------------------------------------------------------
      INSERT INTO INS_CHANGE
      (ID,
       EMPLOYEE_ID,
       ORG_ID,
       TITLE_ID,
       ORG_ID_INS,
       OLDSALARY,
       NEWSALARY,
       ISBHXH,
       ISBHYT,
       ISBHTN,
       CHANGE_TYPE,
       EFFECTDATE,
       CHANGE_MONTH,
       RETURN_DATEBHXH,
       RETURN_DATEBHYT,
       NOTE,
       CLTFRMMONTH,
       CLTTOMONTH,
       CLTBHXH,
       CLTBHYT,
       CLTBHTN,
       REPFRMMONTH,
       REPTOMONTH,
       REPBHXH,
       REPBHYT,
       REPBHTN,
       CREATED_DATE,
       CREATED_BY,
       CREATED_LOG,
       MODIFIED_DATE,
       MODIFIED_BY,
       MODIFIED_LOG,
       TER_PKEY,
       PERIOD_CHANGE)
      SELECT SEQ_INS_CHANGE.NEXTVAL,
             C.EMPLOYEE_ID,
             C.ORG_ID,
             C.TITLE_ID,
             C.ORG_ID_INS,
             0 OLDSALARY,
             (W.SAL_BASIC + NVL(A.AMOUNT,0)) NEWSALARY,
             C.ISBHXH,
             C.ISBHYT,
             C.ISBHTN,
             CASE 
               WHEN C.CHANGE_TYPE = 4  THEN -- SINH BIEN DONG NGH THAI SAN DI LAM TRO LAI
                 64
               WHEN C.CHANGE_TYPE = 5 THEN -- SINH BIEN DONG NGHI KHONG LUONG DI LAM TRO LAI
                 9
               END CHANGE_TYPE,
             PV_FROMDATE,
             PV_FROMDATE,
             C.RETURN_DATEBHXH,
             C.RETURN_DATEBHYT,
             TO_CHAR(UNISTR('Bi\1EBFn \0111\1ED9ng t\1EF1 sinh t\1EEB ph\1EA7n t\1ED5ng h\1EE3p c\00F4ng')),
             C.CLTFRMMONTH,
             C.CLTTOMONTH,
             C.CLTBHXH,
             C.CLTBHYT,
             C.CLTBHTN,
             C.REPFRMMONTH,
             C.REPTOMONTH,
             C.REPBHXH,
             C.REPBHYT,
             C.REPBHTN,
             SYSDATE,
             P_USERNAME,
             P_USERNAME,
             SYSDATE,
             P_USERNAME,
             P_USERNAME,
             C.TER_PKEY,
             P_PERIOD_ID
        FROM INS_CHANGE_TEMP C
        INNER JOIN AT_INS_TIMESHEET_MONTHLY_TEMP IT
         ON IT.EMPLOYEE_ID = C.EMPLOYEE_ID
        LEFT JOIN HU_WORKING_MAX W
         ON C.EMPLOYEE_ID = W.EMPLOYEE_ID
        LEFT JOIN HU_WORKING_ALLOW A 
         ON W.ID = A.HU_WORKING_ID
         AND A.IS_INSURRANCE = -1
        WHERE IT.TOTAL_WORKING_XJ > 12
         AND C.CHANGE_TYPE IN (4,5);    
    END;
 --- QUAN LY NGAY NGHI PHEP
   PROCEDURE MANAGEMENT_TOTAL_ENTITLEMENT(P_EMPLOYEE_ID IN NUMBER,
                              P_DATE_TIME IN DATE,
                              P_OUT OUT CURSOR_TYPE) IS
   PHEP_NGHI_NAM NUMBER;    
   PHEP_NAM NUMBER;                       
 BEGIN
   SELECT SUM(NVL(PR.NVALUE,0)) INTO PHEP_NGHI_NAM
                  FROM AT_PORTAL_REG PR 
                  WHERE PR.ID_EMPLOYEE=P_EMPLOYEE_ID
                        AND TO_CHAR(PR.FROM_DATE, 'yyyy') = TO_CHAR(P_DATE_TIME, 'yyyy')
                        AND PR.STATUS=2
                        AND PR.SVALUE='LEAVE';
    SELECT NVL(SUM(TB.TOTAL), 0) INTO PHEP_NAM
                 FROM (SELECT CASE
                               WHEN M.MORNING_ID = 251 AND M.AFTERNOON_ID = 251 THEN
                                1
                               WHEN M.MORNING_ID = 251 AND M.AFTERNOON_ID <> 251 THEN
                                0.5
                               WHEN M.MORNING_ID <> 251 AND M.AFTERNOON_ID = 251 THEN
                                0.5
                               ELSE
                                0
                             END TOTAL
                        FROM AT_LEAVESHEET L
                        INNER JOIN AT_TIME_MANUAL M
                              ON L.MANUAL_ID = M.ID
                        WHERE L.EMPLOYEE_ID = P_EMPLOYEE_ID
                              AND L.WORKINGDAY NOT IN
                             (SELECT H.WORKINGDAY FROM AT_HOLIDAY H)
                            /*AND MOD(TO_CHAR(L.WORKINGDAY, 'J'), 7) NOT IN (6, 5)*/
                         AND TO_CHAR(L.WORKINGDAY, 'yyyy') = TO_CHAR(P_DATE_TIME, 'yyyy')) TB;
       OPEN P_OUT FOR
            SELECT 
                 EE.ID  AS EMPLOYEE_ID,
                 EE.EMPLOYEE_CODE,
                 EE.FULLNAME_VN,
                 TO_CHAR(EE.JOIN_DATE, 'dd/MM/yyyy') JOIN_DATE,
                 EN.CAL_DATE AS NGAY_TINH_PHEP,
                 EN.EXPIREDATE NGAY_HET_HAN_TRUOC,
                 EN.BALANCE_WORKING_TIME AS PHEP_THAM_NIEN,
                 EN.PREV_HAVE AS PHEP_NAM_TRUOC,
                 EN.TOTAL_HAVE AS PHEP_TRONG_NAM,
                 NVL(PHEP_NGHI_NAM,0) AS PHEP_DA_NGHI,
                 (NVL(EN.TOTAL_HAVE,0) - NVL(PHEP_NGHI_NAM,0)) AS PHEP_CON_LAI
                /* EN.CUR_USED AS PHEP_DA_NGHI,
                 EN.CUR_HAVE AS PHEP_CON_LAI*/
            FROM AT_ENTITLEMENT EN
                 INNER JOIN HU_EMPLOYEE EE ON EN.EMPLOYEE_ID = EE.ID
            WHERE EN.YEAR = TO_CHAR(P_DATE_TIME, 'yyyy')
                 AND EE.ID =P_EMPLOYEE_ID;
 END;  
 -- QUAN LY NGHI BU
   PROCEDURE MANAGEMENT_TOTAL_COMPENSATORY(P_EMPLOYEE_ID IN NUMBER,
                              P_DATE_TIME IN DATE,
                              P_OUT OUT CURSOR_TYPE) IS
   PHEP_NGHI_NAM NUMBER; 
   PHEP_BU NUMBER;    
 
   BEGIN
     SELECT SUM(NVL(PR.NVALUE,0)) INTO PHEP_NGHI_NAM
                  FROM AT_PORTAL_REG PR 
                  WHERE PR.ID_EMPLOYEE=P_EMPLOYEE_ID
                        AND TO_CHAR(PR.FROM_DATE, 'yyyy') = TO_CHAR(P_DATE_TIME, 'yyyy')
                        AND PR.STATUS=2
                        AND PR.SVALUE='LEAVE';
                        
      SELECT NVL(SUM(TB.TOTAL), 0) INTO PHEP_BU
        FROM (SELECT CASE
                       WHEN M.MORNING_ID = 255 AND M.AFTERNOON_ID = 255 THEN
                        1
                       WHEN M.MORNING_ID = 255 AND M.AFTERNOON_ID <> 255 THEN
                        0.5
                       WHEN M.MORNING_ID <> 255 AND M.AFTERNOON_ID = 255 THEN
                        0.5
                       ELSE
                        0
                     END TOTAL
                FROM AT_LEAVESHEET L
               INNER JOIN AT_TIME_MANUAL M
                  ON L.MANUAL_ID = M.ID
               WHERE L.EMPLOYEE_ID = P_EMPLOYEE_ID
                 AND L.WORKINGDAY NOT IN
                     (SELECT H.WORKINGDAY FROM AT_HOLIDAY H)
                    /* AND MOD(TO_CHAR(L.WORKINGDAY, 'J'), 7) NOT IN (6, 5)*/
                 AND TO_CHAR(L.WORKINGDAY, 'yyyy') = TO_CHAR(P_DATE_TIME, 'yyyy')) TB;   
   
       OPEN P_OUT FOR
          SELECT
              EE.ID AS EMPLOYEE_ID,
              EE.EMPLOYEE_CODE,
              EE.FULLNAME_VN,
              TO_CHAR(EE.JOIN_DATE, 'dd/MM/yyyy') JOIN_DATE,
              NB.PREV_HAVE AS NB_NAM_TRUOC,
              NB.TOTAL_HAVE AS TONG_NB,
              NVL(PHEP_NGHI_NAM,0)  AS DA_NB,
              (NVL(NB.TOTAL_HAVE,0) - NVL(PHEP_NGHI_NAM,0)) AS NB_CON_LAI
           /*   NB.CUR_USED AS DA_NB,
              NB.CUR_HAVE AS NB_CON_LAI */
          FROM AT_COMPENSATORY NB
             INNER JOIN HU_EMPLOYEE EE ON NB.EMPLOYEE_ID = EE.ID
          WHERE NB.YEAR = TO_CHAR(P_DATE_TIME, 'yyyy')
              AND EE.ID = P_EMPLOYEE_ID;
   END; 
   -- LICH SU NGHI 
  PROCEDURE MANAGEMENT_HISTORY_LEAVE(P_EMPLOYEE_ID IN NUMBER,
                              P_FROM_DATE IN DATE,
                              P_TO_DATE IN DATE,
                              P_OUT OUT CURSOR_TYPE) IS
      BEGIN
       OPEN P_OUT FOR
          SELECT 
                  E.ID AS EMPLOYEE_ID,
                  E.EMPLOYEE_CODE AS EMPLOYEE_CODE,
                  E.FULLNAME_VN AS EMPLOYEE_NAME,
                  TO_CHAR(PR.REGDATE, 'DD/MM/RRRR') AS REG_DATE,
                  TO_CHAR(PR.FROM_DATE, 'DD/MM/RRRR') AS FROM_DATE,
                  TO_CHAR(PR.TO_DATE, 'DD/MM/RRRR') AS TO_DATE,
                  TO_CHAR(PR.FROM_HOUR, 'DD/MM/RRRR') AS FROM_HOUR,
                  TO_CHAR(PR.TO_HOUR, 'DD/MM/RRRR') AS TO_HOUR,
                  TM.ID AS SIGN_ID,
                  TM.CODE AS SIGN_CODE,
                  TM.CODE ||' - '|| TM.NAME AS SIGN_NAME,
                  TM.NOTE AS NOTE,
                  TO_CHAR(PA.APPROVE_DATE, 'DD/MM/RRRR') AS APPROVE_DATE,
                  PA.APPROVE_STATUS                 
            FROM   AT_PORTAL_REG PR
                   INNER JOIN HU_EMPLOYEE E ON PR.ID_EMPLOYEE=E.ID
                   INNER JOIN AT_TIME_MANUAL TM ON PR.ID_SIGN=TM.ID
                   INNER JOIN AT_PORTAL_APP PA ON PR.ID_REGGROUP=PA.ID_REGGROUP
                   --INNER JOIN AT_FML F ON TM.MORNING_ID=F.ID
            WHERE PR.ID_EMPLOYEE=P_EMPLOYEE_ID
                  AND PR.STATUS=2
                  AND PR.SVALUE='LEAVE'
                  --AND TM.MORNING_ID IN (255,251)
                  AND PR.REGDATE >= P_FROM_DATE 
                  AND PR.REGDATE <=P_TO_DATE
            ORDER BY PR.REGDATE;
   END; 
   
   PROCEDURE GETMACHINES(P_USERNAME IN VARCHAR2,
                              P_ORGID     IN NUMBER,        
                              P_FROM_DATE IN DATE,
                              P_TO_DATE IN DATE,
                              P_OUT OUT CURSOR_TYPE) IS  
   
 BEGIN
       OPEN P_OUT FOR
          SELECT 
                TD.ID,
                E.ID AS EMPLOYEE_ID,
                E.EMPLOYEE_CODE AS EMPLOYEE_CODE,
                E.FULLNAME_VN AS VN_FULLNAME,
                T.NAME_VN AS TITLE_NAME,
                O.NAME_VN AS ORG_NAME,
                O.DESCRIPTION_PATH AS ORG_DESC,
                S.NAME AS STAFF_RANK_NAME,
                O.ID AS ORG_ID,
                TO_CHAR(TD.WORKINGDAY, 'DD/MM/RRRR') AS WORKINGDAY,
                TD.SHIFT_ID AS SHIFT_ID,
                TD.SHIFT_CODE AS SHIFT_CODE,
                TM.CODE AS MANUAL_CODE,
                TD.LATE AS LATE,
                TD.WORKINGHOUR AS WORKINGHOUR,
                TO_CHAR(TD.VALIN1, 'DD/MM/RRRR') AS SHIFTIN,
                TO_CHAR(TD.VALIN2, 'DD/MM/RRRR') AS SHIFTBACKOUT,
                TO_CHAR(TD.VALIN3, 'DD/MM/RRRR') AS SHIFTBACKIN,
                TO_CHAR(TD.VALIN4, 'DD/MM/RRRR') AS SHIFTOUT,
                TD.COMEBACKOUT AS COMEBACKOUT,
                  CASE WHEN FMLM.IS_LEAVE=0
                        THEN ROUND(NVL(TD.WORKINGHOUR_SHIFT,0)/2,1) 
                          ELSE 0 END + CASE WHEN FMLA.IS_LEAVE=0
                        THEN ROUND(NVL(TD.WORKINGHOUR_SHIFT,0)/2,1) 
                          ELSE 0 END SALARIED_HOUR,
                             CASE WHEN FMLM.IS_LEAVE=-1
                        THEN ROUND(NVL(TD.WORKINGHOUR_SHIFT,0)/2,1) 
                          ELSE 0 END + CASE WHEN FMLA.IS_LEAVE=-1
                        THEN ROUND(NVL(TD.WORKINGHOUR_SHIFT,0)/2,1) 
                          ELSE 0 END NOTSALARIED_HOUR
            FROM AT_TIME_TIMESHEET_MACHINET TD
                 LEFT JOIN HU_EMPLOYEE E ON E.ID=TD.EMPLOYEE_ID
                 LEFT JOIN HU_TITLE T ON T.ID=E.TITLE_ID
                 LEFT JOIN HU_ORGANIZATION O ON O.ID=E.ORG_ID
                 LEFT JOIN HU_STAFF_RANK S ON S.ID=E.STAFF_RANK_ID
                 LEFT JOIN AT_TIME_MANUAL TM ON TD.SHIFT_MANUAL_ID=TM.ID
                 LEFT JOIN AT_FML FMLM ON TM.MORNING_ID=FMLM.ID
                 LEFT JOIN AT_FML FMLA ON TM.AFTERNOON_ID=FMLA.ID  
            WHERE 
             td.workingday >= P_FROM_DATE
             and td.workingday <= P_TO_DATE
             AND E.ORG_ID IN (SELECT * FROM TABLE(TABLE_ORG_RIGHT(P_USERNAME, P_ORGID)))
            ORDER BY  E.ID,TD.WORKINGDAY;
   END; 
   
                                                                  
END PKG_ATTENDANCE_BUSINESS;
