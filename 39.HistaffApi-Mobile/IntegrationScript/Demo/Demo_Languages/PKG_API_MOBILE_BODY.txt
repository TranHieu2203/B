CREATE OR REPLACE PACKAGE BODY PKG_API_MOBILE_OM
AS
	
	FUNCTION API_FN_HASH( 
			    p_string varchar2,
			    p_method varchar2 default 'SHA1'
	) return varchar2 is
	    v_method number;
	    v_invalid_identifier exception;
	    pragma exception_init(v_invalid_identifier, -904);
	begin
	    --Intentionally case-sensitive, just like the 12c version.
	    if p_method = 'SHA1' then
	        v_method := dbms_crypto.hash_sh1;
	    --These algorithms are only available in 12c and above. 
	    $IF NOT DBMS_DB_VERSION.VER_LE_11 $THEN
	        elsif p_method = 'SHA256' then
	            v_method := dbms_crypto.hash_sh256;
	        elsif p_method = 'SHA384' then
	            v_method := dbms_crypto.hash_sh384;
	        elsif p_method = 'SHA512' then
	            v_method := dbms_crypto.hash_sh512;
	    $END
	    elsif p_method = 'MD5' then
	        v_method := dbms_crypto.hash_md5;
	    ELSE 
	        raise v_invalid_identifier;
	    end if;

	    return rawToHex(dbms_crypto.hash(utl_raw.cast_to_raw(p_string), v_method));
	end; 


	/*Convert number to date*/
	FUNCTION API_FN_CONVERTNUMBERTODATE
	(
	  P_D IN NUMBER
	)
	RETURN DATE 
	AS
	  V_DIN NUMBER := P_D;
	  V_D   VARCHAR2(30);
	BEGIN
	  IF (V_DIN IS NULL) THEN
	    V_DIN := 0;
	    RETURN NULL;
	  END IF;
	  SELECT TO_CHAR(V_DIN) INTO V_D FROM DUAL;

	  IF (LENGTH(V_D) = 6) THEN
	    V_D := V_D || '01000000';
	  END IF; 

	  IF (LENGTH(V_D) = 8) THEN
	    V_D := V_D || '000000';
	  END IF;

	  RETURN TO_TIMESTAMP(V_D, 'YYYYMMDDHH24MISS');
	END;

	/*tạo access token*/
	/*Error code = */
	PROCEDURE API_User_GenAccessToken
	(
	  p_CompanyCode IN NVARCHAR2,
	  p_UserID IN NUMBER,
	  p_DeviceID IN NVARCHAR2,
	  p_Language IN nvarchar2,
	  p_Token OUT NVARCHAR2,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
	AS
	   v_UserID NUMBER(19,0) := p_UserID;
	   v_CompanyCode NVARCHAR2(30) := p_CompanyCode;
	   v_DeviceID NVARCHAR2(50) := p_DeviceID;
	   v_Language nvarchar2(20):= NVL(p_Language,'vi-VN');
	   v_Today DATE;
	   v_TMP1 NUMBER(19,0);
	   v_TMP2 NVARCHAR2(100);
	   v_TMP NVARCHAR2(100);
	   v_temp NUMBER(1, 0) := 0;
	   v_StoreName NVARCHAR2(200) := 'API_User_GenAccessToken'; 

	BEGIN
	   --/*TODO:SQLDEV*/ SET NOCOUNT, XACT_ABORT ON /*END:SQLDEV*/
	   v_UserID := NVL(v_UserID, 0) ;
	   v_CompanyCode := NVL(v_CompanyCode, ' ') ;
	   v_Today := SYSDATE ;
	   BEGIN
	      BEGIN
	         v_TMP1 := TO_NUMBER(TO_CHAR(v_Today, 'YYYYMMDDHH24MISS'));
	         -- COMPANYCODE.USERID.DEVICEID.TIME.LANGUAGE
	         v_TMP := v_CompanyCode || '.' || TO_NCHAR(v_UserID) || '.' || v_DeviceID || '.' || TO_NCHAR(v_TMP1) || '.' || v_Language ;
	         --v_TMP2 := FN_Md5Encode(v_TMP) ;
	         SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP2 FROM DUAL;
	         p_Token := TO_NCHAR(v_TMP1) || '.' || v_TMP2 ;
	         p_ResponseStatus := 1 ;
	         p_Message := u'Token \0111\00e3 \0111\01b0\1ee3c t\1ea1o' ;

	      END;
	   EXCEPTION
	      WHEN OTHERS THEN
		   BEGIN
		      p_Token := ' ' ;
		      p_ResponseStatus := -99 ;
		      p_Message := u'Ph\00e1t sinh l\1ed7i API nghi\1ec7p v\1ee5' ;
		   END;
	  END;
	--EXCEPTION WHEN OTHERS THEN utils.handleerror(SQLCODE,SQLERRM);
	END;

	/*Kiểm tra thông tin access token (Cần bổ sung check từ DB và hết hạn)*/
	PROCEDURE API_User_CheckAccessToken
	(
	    p_CompanyCode IN NVARCHAR2,
	    p_UserID IN NUMBER,
	    p_DeviceID IN NVARCHAR2,
	    p_Language IN NVARCHAR2,
	    p_Token IN NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := p_UserID;
	    v_Token NVARCHAR2(50) := p_Token;
	    v_Language nvarchar2(20) := NVL(p_language,'vi-VN');
	    v__ERR_INVALID_ACCESSTOKEN NUMBER(10,0) := -102;
	    v__ERR_ACCOUNTTOKEN_TIMEOUT NUMBER(10,0) := -103;
	    v_Today TIMESTAMP;
	    v_TimeoutMinutes NUMBER(10,0);
	    v_TMP1 NUMBER(19,0);
	    v_TMP2 NVARCHAR2(100);
	    v_TMP_HASH nvarchar2(100);
	    v_TMP NVARCHAR2(100);
	    v_Status NUMBER(5,0);
	    v_TokenCountParam NUMERIC(5,0) := 0;
	    v_activeFlag nvarchar2(1) := '';
	BEGIN
	    v_UserID := NVL(v_UserID, 0) ;
	    v_Token := NVL(v_Token, ' ') ;
	    v_Today := SYSDATE ;
	    v_TimeoutMinutes := 525600;/* 525600 = 365 * 24 * 60   TO_NUMBER(FN_GetParamValue('TimeoutMinutes'));*/

	    -- Check Users
	    BEGIN
	        SELECT CASE when ACTFLG = 'A' THEN 1 ELSE 0 end  INTO v_Status 
	        FROM SE_USER WHERE  ID = v_UserID;   
	        EXCEPTION WHEN NO_DATA_FOUND THEN
	        BEGIN
	            p_Message := u'X\00e1c th\1ef1c kh\00f4ng h\1ee3p l\1ec7: d\1eef li\1ec7u ng\01b0\1eddi d\00f9ng kh\00f4ng h\1ee3p l\1ec7' ;
	            p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
	            RETURN;
	        END;
	    END;
	    v_Status := NVL(v_Status, -1);
	    IF ( v_Status < 1 ) THEN    
	        p_Message := u'X\00e1c th\1ef1c kh\00f4ng h\1ee3p l\1ec7: T\00e0i kho\1ea3n \0111\00e3 b\1ecb kh\00f3a' ;
	        p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
	        RETURN;    
	    END IF;
	    -- Check Token Param
	    BEGIN
	        WITH TokenTbl AS (
		        SELECT level AS Iab, regexp_substr(v_Token,'[^.]+', 1, level) AS iValue FROM DUAL
		        CONNECT BY regexp_substr(v_Token, '[^.]+', 1, level) IS NOT NULL)
		        SELECT TMP1, TMP2 INTO v_TMP1, v_TMP2
		        FROM (SELECT TO_NUMBER(iValue) TMP1 FROM TokenTbl WHERE Iab = 1) B, 
		             (SELECT iValue TMP2 FROM TokenTbl WHERE Iab = 2) C;
	        EXCEPTION WHEN NO_DATA_FOUND THEN
	        BEGIN
		        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
		            p_Message := u'Xác thực không hợp lệ: Token không đúng cấu trúc' ;
		       	ELSE 
		       		p_Message := u'Token is not accepted' ;
		       	end if;
	            
	            p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
	            RETURN;
	        END;
	    END;

	    -- Check Param OK
	    v_TMP := p_CompanyCode || '.' || TO_CHAR(v_UserID) || '.' || p_DeviceID || '.' || TO_CHAR(v_TMP1) || '.' || v_Language ;
	    SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP_HASH FROM DUAL;
	    IF ( v_TMP_HASH  <> v_TMP2 ) THEN    
	    	-- Check thêm case api cũ chưa có Language 
	    	v_TMP := p_CompanyCode || '.' || TO_CHAR(v_UserID) || '.' || p_DeviceID || '.' || TO_CHAR(v_TMP1) ;
	    	SELECT API_FN_HASH(v_TMP, 'MD5') INTO v_TMP_HASH FROM DUAL;
	    	IF  ( v_TMP_HASH  <> v_TMP2 ) THEN    
		        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
		            p_Message := u'Xác thực không hợp lệ: giải mã không thành công' ;
		       	ELSE 
		       		p_Message := u'Token is not accepted: decrypt is error' ;
		       	end if;
		        p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
		        RETURN;
	        END IF;
	    END IF;
	    -- Check Token Timeout

	   	IF ( TO_NUMBER(TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')) - v_TMP1  > (v_TimeoutMinutes * 60) ) THEN 
	   		IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	            p_Message := u'Phiên làm việc đã hết hạn' ;
	       	ELSE 
	       		p_Message := u'Your session is timeout' ;
	       	end if;
	         
	        p_ResponseStatus := v__ERR_ACCOUNTTOKEN_TIMEOUT ;
	        RETURN;    
	    END IF;

	    -- Check token hop le
	    -- case này nếu dữ liệu ko có token thì ko logout được -> thống nhất
	    
	    BEGIN
	        v_TokenCountParam := 0;
	        -- Kiểm tra phiên làm việc có thông tin của token và user id không 
	        SELECT count(ID) INTO v_TokenCountParam 
		    FROM SE_UserLogin 
		    WHERE  UPPER(Token) = UPPER(v_Token) 
		    AND USERID  = v_UserID 
		    --AND ACTFLG = 'A'
		    ;
		    SELECT 	ACTFLG INTO v_activeFlag 
		    FROM 	SE_UserLogin 
		    WHERE  	UPPER(Token) = UPPER(v_Token) 
		    AND 	USERID  = v_UserID 
		    --AND ACTFLG = 'A'
		    ;
	        EXCEPTION WHEN NO_DATA_FOUND THEN
	        BEGIN 
	            --p_Message := u'Kh\00f4ng t\1ed3n t\1ea1i phi\00ean l\00e0m vi\1ec7c' ;
	            --p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
	            p_ResponseStatus := 1 ;
	    		p_Message := u'Xác thực thành công';
	            RETURN;
	        END;
	    END;
		IF  v_activeFlag = 'I' OR v_TokenCountParam = 0 THEN
			IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	            p_Message := u'Phiên làm việc đã kết thúc' ;
	       	ELSE 
	       		p_Message := u'Your session is timeout' ;
	       	end if;
            p_ResponseStatus := v__ERR_INVALID_ACCESSTOKEN ;
            RETURN;
		END IF;
		
	    p_ResponseStatus := 1 ;
	    p_Message := u'Xác thực thành công';
	END;

	/*Xử lý đăng nhập và gentoken*/
	PROCEDURE API_User_Login
	(
	    p_UserName IN NVARCHAR2,
	    p_Pwd IN NVARCHAR2,
	    p_DeviceID IN NVARCHAR2, 
	    p_Firebase_Client_Id IN NVARCHAR2,
	    p_Language IN NVARCHAR2,
	    p_CompanyCode OUT NVARCHAR2,
	    p_UserID OUT NUMBER,
	    p_FullName OUT NVARCHAR2,
	    p_Email OUT NVARCHAR2,
	    p_Mobile OUT NVARCHAR2,
	    p_Avatar OUT NVARCHAR2,
	    p_Token OUT NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserName NVARCHAR2(30) := p_UserName;
	    v_Pwd NVARCHAR2(200) := p_Pwd;
	    v_DeviceID NVARCHAR2(50) := p_DeviceID;
	    v_Firebase_Client_Id nvarchar2(200) := NVL(p_Firebase_Client_Id,' ');
	    v_Language nvarchar2(20) := NVL(p_Language,'vi-VN');
	    v_Today DATE;
	    v_TimeOut DATE;
	    v_TimeOutBigint NUMBER(19,0);
	    v_PwdMD5 NVARCHAR2(200);
	    v_PwdCurrMD5 NVARCHAR2(200);
	    v_UserType NUMBER(5,0);
	    v_Status NUMBER(5,0);
	    v_ImageID NUMBER(19,0);
	    v_LastPwdChanged DATE;
	    v_PwdExpireDay Date;
	    v_CompanyID NUMBER(19,0);
	    v_StoreName NVARCHAR2(200) := 'API_User_Login';
	    v_LoginID NUMERIC(19,0);
	    v_LogLoginID NUMERIC(19,0);
	BEGIN
	    v_Today := SYSDATE ; 
	    v_UserName := NVL(v_UserName, ' ') ;
	    v_Pwd := NVL(v_Pwd, '') ;
	    v_DeviceID := NVL(v_DeviceID, ' ') ;
	    p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	    v_PwdMD5 := v_Pwd;--FN_Md5Encode(v_Pwd) ;
	    --SELECT API_FN_HASH(v_Pwd, 'MD5') INTO v_PwdMD5 FROM DUAL;

	    IF ( v_DeviceID = ' ' ) THEN
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	       		p_Message := u'ID thiết bị không hợp lệ' ;
	       	ELSE 
	       		p_Message := u'Device ID is not allowed'; 
	       	end if;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;
	  
	    -- check input firebase client 
	    /*
	    IF  ( v_Firebase_Client_Id = ' ' OR  v_Firebase_Client_Id IS NULL )  THEN
		   
	    	p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        p_Message := u'Thông tin đăng nhập không hợp lệ! firebase ' ;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;
	   */
	    BEGIN 
		    SELECT  ID, 	
		            0 AS ImG, 	
		            0 AS TYPE,
		            t.Password AS Pwd,
		            CASE when t.ACTFLG ='A' THEN 1 ELSE 0 END  ,
		            0 AS COMPANYID, t.CHANGE_PASS_DATE AS LASTPWDCHANGED ,
		            t.EXPIRE_DATE,
		            t.FULLNAME,
		            nvl(t.EMAIL, ' ') ,
		            nvl(t.TELEPHONE, ' ') 
		        INTO p_UserID, v_ImageID, v_UserType, v_PwdCurrMD5, v_Status, v_CompanyID, v_LastPwdChanged, v_PwdExpireDay, p_FullName, p_Email, p_Mobile
		    FROM 	SE_USER t 
		    WHERE 	UPPER(t.username)=UPPER(v_UserName) ;
	       -- AND 	UPPER(t.password) = UPPER(v_PwdMD5);

	        EXCEPTION WHEN NO_DATA_FOUND THEN 
	        BEGIN
	            p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	            v_LastPwdChanged := SYSDATE;
	            v_PwdExpireDay := SYSDATE + 236;
	           	 IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
		       		p_Message := u'Không xác định được người dùng' ;
		       	ELSE 
		       		p_Message := u'Username is not found' ;
		       	end if;
	            
	            p_ResponseStatus := -600 ;
	            RETURN;
	        END;
	    END;
	   
	   BEGIN 
		    SELECT  ID, 	
		            0 AS ImG, 	
		            0 AS TYPE,
		            t.Password AS Pwd,
		            CASE when t.ACTFLG ='A' THEN 1 ELSE 0 END  ,
		            0 AS COMPANYID, t.CHANGE_PASS_DATE AS LASTPWDCHANGED ,
		            t.EXPIRE_DATE,
		            t.FULLNAME,
		            nvl(t.EMAIL, ' ') ,
		            nvl(t.TELEPHONE, ' ') 
		        INTO p_UserID, v_ImageID, v_UserType, v_PwdCurrMD5, v_Status, v_CompanyID, v_LastPwdChanged, v_PwdExpireDay, p_FullName, p_Email, p_Mobile
		    FROM 	SE_USER t 
		    WHERE 	UPPER(t.username)=UPPER(v_UserName) 
	        AND 	UPPER(t.password) = UPPER(v_PwdMD5);

	        EXCEPTION WHEN NO_DATA_FOUND THEN 
	        BEGIN
	            p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	            v_LastPwdChanged := SYSDATE;
	            v_PwdExpireDay := SYSDATE + 236;
	            IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	            	p_Message := u'Mật khẩu không đúng' ;
		       	ELSE 
		       		p_Message := u'Password is incorrect' ;
		       	end if;
	            
	            p_ResponseStatus := -600 ;
	            RETURN;
	        END;
	    END;
	    --v_LastPwdChanged := FN_ConvertDateToNumber(FN_ConvertNumberToDate(v_LastPwdChanged) + v_PwdExpireDay);

	    IF ( v_Status <> 1 ) THEN          
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	            	p_Message := u'Người dùng không đươc phép hoạt động' ;
		       	ELSE 
		       		p_Message := u'User is not allowed' ;
		       	end if;
	        p_ResponseStatus := -600 ;
	        RETURN;    
	    END IF;
	    IF ( v_PwdCurrMD5 <> v_PwdMD5 ) THEN    
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        p_Message := u'Sai mật khẩu' ;
	        p_ResponseStatus := -600 ;
	        RETURN;    
	    END IF;
	    /*
	   	IF ( v_LastPwdChanged < FN_ConvertDateToNumber(v_Today) ) THEN    
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        p_Message := u'RequireChangePassword' ;
	        p_ResponseStatus := -601 ;
	        RETURN;    
	    END IF;    
	   */
	    -- Gen token
	    API_User_GenAccessToken(
	                        p_CompanyCode => p_CompanyCode,
	                        p_UserID => p_UserID,
	                        p_DeviceID => v_DeviceID,
	                        p_Language => p_Language,
	                        p_Token => p_Token,
	                        p_Message => p_Message,
	                        p_ResponseStatus => p_ResponseStatus) ;
	    IF ( p_ResponseStatus < 1 ) THEN    
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	           p_Message := u'Không thiết lập được phiên làm việc' ;
	       	ELSE 
	       		p_Message := u'Your session is not created' ;
	       	end if;
	    	p_ResponseStatus := -600 ;  
	        RETURN;    
	    END IF;

	   --13/01/21: Cập nhật phiên làm việc cũ -> Inactive -> chỉ sử dụng phiên mới
	   --UPDATE SE_USERLOGIN SET ACTFLG  = 'I' WHERE USERID  =  p_UserID;
	   --COMMIT;
	    -- insert session 
        Insert into SE_USERLOGIN(ID,		 USERID, 	TOKEN, 		DEVICE_ID, 	ACTFLG, Firebase_Client_Id )
        SELECT SEQ_SE_USERLOGIN.NEXTVAL, p_UserID, 	p_Token , 	v_DeviceID ,'A', 	p_Firebase_Client_Id 
        FROM DUAL;
	    COMMIT; 
         
	     -- lấy avater
          Select nvl(IMAGE, 'NoImage.jpg') INTO p_Avatar FROM SE_USER u 
         join HU_EMPLOYEE he on u.EMPLOYEE_CODE = he.EMPLOYEE_CODE 
         LEFT JOIN HU_EMPLOYEE_CV  E ON e.EMPLOYEE_ID  = he.id 
         WHERE u.Id = p_UserID
        AND rownum = 1 ;
       
	    p_Message := u'Đăng nhập thành công ' || NVL(p_Firebase_Client_Id,'');
	    p_ResponseStatus := 1 ;    
	   
	    EXCEPTION WHEN OTHERS THEN    
	    BEGIN
	        ROLLBACK;
	        p_UserID := 0; p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ; p_Token := ' ' ; p_CompanyCode := ' ';
	        p_ResponseStatus := -99 ;
	       IF NVL(p_Language,'vi-VN')= 'vi-VN' then  
	           p_Message := u'Lỗi hệ thống API nghiệp vụ' ;
	       	ELSE 
	       		p_Message := u'Internal server is error' ;
	       	end if;
	        
	    END;
	END;

	/*API_User_LoginWToken*/
	PROCEDURE API_User_LoginWToken
	(
	    p_CompanyCode IN NVARCHAR2,
	    p_UserID IN NUMBER,
	    p_DeviceID IN NVARCHAR2,
		p_Language IN nvarchar2,
	    p_Token IN NVARCHAR2,
	    p_UserName OUT NVARCHAR2,
	    p_FullName OUT NVARCHAR2,
	    p_Email OUT NVARCHAR2,
	    p_Mobile OUT NVARCHAR2,
	    p_Avatar OUT NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	) 
	AS
		v_Status NUMBER(5,0);
	BEGIN
	   	API_User_CheckAccessToken(p_CompanyCode => p_CompanyCode,
	                                        p_UserID => p_UserID,
	                                        p_Language => p_Language,
	                                        p_DeviceID => p_DeviceID,
	                                        p_Token => p_Token,
	                                        p_Message => p_Message,
	                                        p_ResponseStatus => p_ResponseStatus) ;

		-- return user info 
		IF ( p_ResponseStatus = 1) THEN 	                                       
		    SELECT  ' ' AS ImG,
            CASE when t.ACTFLG ='A' THEN 1 ELSE 0 END  ,
            t.FULLNAME,t.EMAIL ,t.TELEPHONE , t.USERNAME 
	        INTO 	p_Avatar, v_Status, p_FullName, p_Email, p_Mobile, p_UserName 
		    FROM 	SE_USER t 
		    WHERE 	t.ID = p_UserID ;
            
		   Select nvl(IMAGE, 'NoImage.jpg') INTO p_Avatar 
		   FROM SE_USER u 
            join HU_EMPLOYEE he on u.EMPLOYEE_CODE = he.EMPLOYEE_CODE 
            LEFT JOIN HU_EMPLOYEE_CV  E ON e.EMPLOYEE_ID  = he.id 
            WHERE 	u.ID = p_UserID;

		    IF ( v_Status <> 1 ) THEN          
		        p_FullName := ' ' ; p_Email := ' ' ; p_Mobile := ' ' ; p_Avatar := ' ' ;  p_UserName := '';
		        p_Message := u'Người dùng không đươc phép hoạt động' ;
		        p_ResponseStatus := -600 ;
		        RETURN;    
	    	END IF;
	    END IF;
	END;

	/*Đăng xuất (cần xử lý đánh dấu token hết hạn*/
	PROCEDURE API_User_Logout
	(
	    p_Token IN NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_Token NVARCHAR2(50) := p_Token;
	    v_Today DATE;
	    v_I NUMBER(19,0);
	    v_UserID NUMBER(10,0);
	    v_UserName NVARCHAR2(30);
	    v_StoreName NVARCHAR2(200) := 'API_User_Logout';
	BEGIN
	    v_Today := SYSDATE ;
	    v_Token := NVL(v_Token, ' ') ;
	    BEGIN
		    v_Today := SYSDATE ;

		      --Check token exists
	        SELECT ID, UserID INTO v_I, v_UserID FROM SE_UserLogin WHERE  UPPER(Token) = UPPER(v_Token) AND rownum = 1 ;
	        EXCEPTION WHEN NO_DATA_FOUND THEN 
	        BEGIN
	            v_UserID := -1;
	            v_I := -1;
	        END;
	       --không tồn tại thì mặc định out luôn
	        IF ( v_UserID < 0 ) THEN
	           p_Message := u'Đăng xuất thành công' ;
	    		p_ResponseStatus := 1 ;
	            RETURN;
	        END IF;

	    END;
		   	--Cập nhật trạng thái của token, device_id tương ứng user 
		   	--13/01/21 hiện sẽ cho cơ chế logout sẽ xóa hết phiên làm việc cũ 
	        UPDATE  SE_UserLogin SET ACTFLG = 'I' WHERE USERID  = v_UserID ;--ID = v_I;
		    p_Message := u'Đăng xuất thành công' ;
		    p_ResponseStatus := 1 ;
	    EXCEPTION WHEN OTHERS THEN
	    BEGIN
	    ROLLBACK;
	        p_ResponseStatus := -99 ;
	        p_Message := u'Lỗi hệ thống API nghiệp vụ' ; 
	    END; 
	END;

	-- Kiểm tra permission -> mới chỉ kiểm tra user portal hay không, cần thay đổi cấu trúc để phân hoặc check quyền theo chức năng
	PROCEDURE API_User_CheckPermission
	(
	    p_UserID IN NUMBER,
	    p_Url IN NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	BEGIN
	    SELECT u'Grant!', ID INTO p_Message, p_ResponseStatus 
	    FROM 	SE_USER 
	    WHERE 	UPPER(ID)  = UPPER( p_UserID) 
	   	AND 	IS_PORTAL  = -1;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	    BEGIN
	        p_Message := u'{YouAreNotIsGrantToFunction}!' ;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END;
	END;
/*===============================================================================================*/
	/*GET PROCEDURE*/
	PROCEDURE API_Get_Contract
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_EmployeeID IN NUMBER,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    p_Cur OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
	    v_Page NUMBER(10,0) := NVL(p_Page, -1);
	    v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
	    v_EmpID NUMBER(19,0);
	    v_EmpCode Nvarchar2(50);
	    v_EpmViewID NUMBER(19,0);
	    v_temp NUMBER(19, 0) := 0;
	    v_cursor SYS_REFCURSOR;
	BEGIN
	    p_Rowcount := 0;

	    IF v_UserID = -1 THEN
	        p_Message := u'ID ng\01b0\1eddi d\00f9ng kh\00f4ng \0111\01b0\1ee3c \0111\1ec3 tr\1ed1ng';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
	    SELECT ID,EMPLOYEE_CODE INTO v_temp,v_EmpCode  FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := u'Kh\00f4ng t\00ecm th\1ea5y th\00f4ng tin ng\01b0\1eddi d\00f9ng';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
		IF NVL(v_EmpCode,'') = '' THEN
			p_Message := u'Ng\01b0\1eddi d\00f9ng kh\00f4ng \0111\01b0\1ee3c c\1ea5u h\00ecnh m\00e3 nh\00e2n vi\00ean';
	        p_ResponseStatus := -600;
	        RETURN;
		END IF;

--	    IF v_EmpCode != '' THEN
--	        BEGIN
--	            SELECT ID INTO v_EmpID FROM HU_Employee WHERE EMPLOYEE_CODE = v_EmpCode;
--	        EXCEPTION
--	            WHEN OTHERS THEN 
--	                p_Message := 'EmployeeNotFound';
--	                p_ResponseStatus := -600;
--	                RETURN;
--	        END;
--	
--	        SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
--	        IF v_temp < 1 THEN
--	            p_Message := 'YouNotManagerEmployee';
--	            p_ResponseStatus := -600;
--	            RETURN;
--	        END IF;
--	    END IF;
        SELECT he.ID INTO v_EmpID  FROM HU_Employee he JOIN SE_USER u on he.EMPLOYEE_CODE = u.EMPLOYEE_CODE WHERE u.ID = v_UserID;
	    SELECT COUNT(*) INTO p_Rowcount
	    FROM HU_Contract W
	                LEFT JOIN HU_Contract_Type HT ON W.Contract_Type_ID = HT.ID
	            WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

	    OPEN p_Cur FOR
	    SELECT *
	    FROM
	    (
	        SELECT 	ROWNUM STT, ID, Name, NumberDecide, 
	        		TO_CHAR(SignDate,'YYYY-MM-DD') SignDate, 
	        		TO_CHAR(EffectDate,'YYYY-MM-DD') EffectDate, 
	        		TO_CHAR(ExpireDate,'YYYY-MM-DD') ExpireDate, 
	        		SignName, SignTitleName
	        FROM
	        (
	            SELECT 
	                W.ID ID,
	                '' || HT.NAME || '' Name,
	                W.CONTRACT_NO NumberDecide ,
	                W.Sign_Date  SignDate,
	                W.START_DATE  EffectDate,
	                W.EXPIRE_DATE  ExpireDate,
	                NVL(W.SIGNER_NAME , ' ') SignName,
	                NVL(W.SIGNER_TITLE , ' ') SignTitleName
	            FROM HU_Contract W
	                LEFT JOIN HU_Contract_Type HT ON W.CONTRACT_TYPE_ID = HT.ID
	            WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
	            ORDER BY W.ID DESC
	        ) 
	    )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

	    p_Message := u'Th\00e0nh c\00f4ng';
	    p_ResponseStatus := 1;
	    --DBMS_SQL.RETURN_RESULT(v_cursor);
	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;


	PROCEDURE API_Get_Dashboard
	(
		p_Language IN nvarchar2,
	  p_UserID IN NUMBER,
	  p_Pending OUT NUMBER,
	  p_OtHours OUT NUMBER,
	  p_RegisterHour OUT NUMBER,
      p_TotalPaidLeaveDays OUT NUMBER,
      P_TotalCompensatedLeaveDays OUT NUMBER,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
	AS
	   v_UserID NUMBER(19,0) := NVL(p_UserID, 0);
	   v_EmployeeID NUMBER(19,0);
	   v_temp NUMBER(1, 0) := 0;
       P_YEAR NUMBER;					 
       PHEP_NGHI_NAM NUMBER; 
       PHEP_BU NUMBER; 
	BEGIN
	    p_Pending := 0 ;
	    p_OtHours := 0 ;
	    p_RegisterHour := 0;

	    BEGIN
	        SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
	    EXCEPTION WHEN NO_DATA_FOUND THEN v_EmployeeID := NULL;
	    END;
	    v_EmployeeID := NVL(v_EmployeeID, -1);

	    SELECT COUNT(ID) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := u'Kh\00f4ng t\00ecm th\1ea5y th\00f4ng tin ng\01b0\1eddi d\00f9ng';
	        p_ResponseStatus := -600;
	        RETURN;
	    ELSE
	        BEGIN
	            IF v_EmployeeID < 1 THEN
	                p_Message := 'UserNotConfig';
	                p_ResponseStatus := -600;
	                RETURN;
	            ELSE
	                /*Có vẻ thiếu điều kiện lọc của năm, tháng??*/
	                --SELECT COALESCE(SUM(HOURCOUNT) , 0) INTO p_RegisterHour
                    SELECT count(*) INTO p_RegisterHour
	                FROM AT_PORTAL_REG  
	                WHERE ID_EMPLOYEE  =  v_EmployeeID
	                AND SVALUE = 'LEAVE'
                    and Status = 1 
                    and EXTRACT(year FROM From_date) = (SELECT EXTRACT(year FROM sysdate) FROM DUAL) ;

	                --SELECT COALESCE(SUM(HOURCOUNT) , 0) INTO p_OtHours
	                SELECT NVL(SUM(round(to_number(TO_Hour - From_Hour) * 24)),0) INTO p_OtHours
                    FROM AT_PORTAL_REG
	                WHERE ID_EMPLOYEE  =  v_EmployeeID
					AND SVALUE = 'OVERTIME'
                    and Status = 1
                    and EXTRACT(year FROM From_date) = (SELECT EXTRACT(year FROM sysdate) FROM DUAL);
					--đếm các đký cần phê duyệt nếu user này là quản lý
	                SELECT (
	                    SELECT COUNT(*)
	                    FROM AT_PORTAL_REG apr 
	                    JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP = apr.ID_REGGROUP AND apr.ID  = apa.REGISTER_ID  
	                    --JOIN ( SELECT id FROM HU_EMPLOYEE he  WHERE he.DIRECT_MANAGER = v_EmployeeID) emp_managed ON emp_managed.Id = apr.ID_EMPLOYEE 
	                    WHERE apr.STATUS  = 1 -- chờ phê duyệt 
	                    AND apa.ID_EMPLOYEE  = v_EmployeeID
	                ) INTO p_Pending FROM DUAL;

                    --So ngay phep con lai
     select to_char(sysdate, 'YYYY') INTO P_YEAR from dual;
    BEGIN
      	SELECT SUM(NVL(PR.NVALUE,0)) INTO PHEP_NGHI_NAM
      	FROM 	AT_PORTAL_REG PR 
      	WHERE 	PR.ID_EMPLOYEE=v_EmployeeID
        AND 	TO_CHAR(PR.FROM_DATE, 'yyyy') = P_YEAR
        AND 	PR.STATUS= 2
        AND 	PR.SVALUE='LEAVE';
	 	EXCEPTION WHEN NO_DATA_FOUND THEN PHEP_NGHI_NAM := 0 ;
	END;


	BEGIN
      SELECT NVL(SUM(TB.TOTAL), 0) INTO PHEP_BU
        FROM (SELECT CASE
                       WHEN M.MORNING_ID = 255 AND M.AFTERNOON_ID = 255 THEN
                        1
                       WHEN M.MORNING_ID = 255 AND M.AFTERNOON_ID <> 255 THEN
                        0.5
                       WHEN M.MORNING_ID <> 255 AND M.AFTERNOON_ID = 255 THEN
                        0.5
                       ELSE
                        0
                     END TOTAL
                FROM AT_LEAVESHEET L
               INNER JOIN AT_TIME_MANUAL M
                  ON L.MANUAL_ID = M.ID
               WHERE L.EMPLOYEE_ID = v_EmployeeID
                 AND L.WORKINGDAY NOT IN
                     (SELECT H.WORKINGDAY FROM AT_HOLIDAY H)
                 AND TO_CHAR(L.WORKINGDAY, 'yyyy') = P_YEAR) TB
        ; 
    EXCEPTION WHEN NO_DATA_FOUND THEN PHEP_NGHI_NAM := 0 ;
	END;

	BEGIN
		SELECT (NVL(NB.TOTAL_HAVE,0) -  NVL(PHEP_BU,0)) 
		into 	P_TotalCompensatedLeaveDays
		FROM 	AT_COMPENSATORY NB
		WHERE 	NB.YEAR = P_YEAR
		AND 	NB.EMPLOYEE_ID = v_EmployeeID;
	EXCEPTION WHEN NO_DATA_FOUND THEN P_TotalCompensatedLeaveDays := 0 ;
	END;


    SELECT NVL(SUM(TB.PHEP_CON_LAI), 0) INTO p_TotalPaidLeaveDays
        FROM (
		  SELECT 
                 (NVL(EN.TOTAL_HAVE,0) - NVL(PHEP_NGHI_NAM,0)) AS PHEP_CON_LAI
            FROM AT_ENTITLEMENT EN
                 INNER JOIN HU_EMPLOYEE EE ON EN.EMPLOYEE_ID = EE.ID
            WHERE EN.YEAR = P_YEAR
                 AND EE.ID =v_EmployeeID
		) TB;    


	                p_Message := u'Th\00e0nh c\00f4ng';
	                p_ResponseStatus := 1;
	                RETURN;
	            END IF;
	        END;
	    END IF;
	EXCEPTION 
	    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
	     p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5:'|| SQLERRM;
	     p_ResponseStatus := -600;
	END;


	PROCEDURE API_Get_Employee
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    p_Cur OUT CURSOR_TYPE,
	    p_RowCount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER 
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1) ;
	    v_Page NUMBER(5, 0) := NVL(p_Page, 1) ;
	    v_PageSize NUMBER(5, 0) := NVL(p_PageSize, 10) ;
	    v_EmployeeID NUMBER(19,0);
	    v_temp NUMBER(19,0) := 0;
	    v_cursor SYS_REFCURSOR;
	BEGIN
	    p_RowCount := 0;

	    IF ( v_UserID = -1 ) THEN
	      p_Message := u'ID ng\01b0\1eddi d\00f9ng kh\00f4ng \0111\01b0\1ee3c \0111\1ec3 tr\1ed1ng' ;
	      p_ResponseStatus := -600 ;
	      RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := u'Kh\00f4ng t\00ecm th\1ea5y th\00f4ng tin ng\01b0\1eddi d\00f9ng';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257 )  )
	       AND rownum = 1  ;
	    EXCEPTION
	        WHEN OTHERS THEN 
	            p_Message := u'Ng\01b0\1eddi d\00f9ng kh\00f4ng \0111\01b0\1ee3c c\1ea5u h\00ecnh m\00e3 nh\00e2n vi\00ean';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    SELECT COUNT(*) INTO p_RowCount 
	    FROM HU_Employee E
	        LEFT JOIN HU_Employee_CV CV ON E.ID = CV.EMPLOYEE_ID 
	    WHERE E.DIRECT_MANAGER = v_EmployeeID; 

	    OPEN p_Cur FOR
	        SELECT
	            E.ID ID,
	            CASE WHEN NVL(p_language,'vi-VN')='vi-VN' THEN  E.FULLNAME_VN ELSE E.FULLNAME_EN END  NAME,
	            CV.Image AVATAR
	        FROM HU_Employee E
	            LEFT JOIN HU_Employee_CV CV ON E.ID = CV.EMPLOYEE_ID 
	        WHERE E.DIRECT_MANAGER = v_EmployeeID 
	        AND ROWNUM > (v_Page - 1) * v_PageSize AND ROWNUM > (v_Page * v_PageSize + 1); 


	    p_Message := u'Th\00e0nh c\00f4ng';
	    p_ResponseStatus := 1;
	    --DBMS_SQL.RETURN_RESULT(v_cursor);
	END;


	PROCEDURE API_Get_Family
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_EmployeeID IN NUMBER,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    p_Cur OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
	    v_Page NUMBER(10,0) := NVL(p_Page, -1);
	    v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
	    v_EmpID NUMBER(19,0);
	    v_EpmViewID NUMBER(19,0);
	    v_temp NUMBER(19, 0) := 0;
	BEGIN
	    p_Rowcount := 0;

	    IF v_UserID = -1 THEN
	        p_Message := u'ID ng\01b0\1eddi d\00f9ng kh\00f4ng \0111\01b0\1ee3c \0111\1ec3 tr\1ed1ng';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT ID INTO v_temp FROM SE_USER  WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := u'Kh\00f4ng t\00ecm th\1ea5y th\00f4ng tin ng\01b0\1eddi d\00f9ng';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT he.ID INTO v_EmpID FROM HU_EMPLOYEE he JOIN SE_USER su ON su.EMPLOYEE_CODE = he.EMPLOYEE_CODE WHERE su.ID = v_UserID;
	    EXCEPTION
	        WHEN OTHERS THEN 
	            p_Message := u'Ng\01b0\1eddi d\00f9ng kh\00f4ng \0111\01b0\1ee3c c\1ea5u h\00ecnh m\00e3 nh\00e2n vi\00ean';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    IF p_EmployeeID != -1 THEN
	        BEGIN
	            SELECT ID INTO v_EpmViewID FROM HU_Employee WHERE ID = p_EmployeeID;
	        EXCEPTION
	            WHEN OTHERS THEN 
	                p_Message := u'Kh\00f4ng t\00ecm th\1ea5y th\00f4ng tin nh\00e2n vi\00ean';
	                p_ResponseStatus := -600;
	                RETURN;
	        END;

	       /*
	        SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
	        
	        IF v_temp < 1 THEN
	            p_Message := N'YouNotManagerEmployee';
	            p_ResponseStatus := -600;
	            RETURN;
	        END IF;
	        */
	    END IF;

	    SELECT 	COUNT(*) INTO p_Rowcount 
	    FROM 	HU_Family W
	    LEFT JOIN OT_OTHER_LIST O ON W.RELATION_ID = O.ID
	    WHERE W.EMPLOYEE_ID = CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

	    OPEN p_Cur FOR
	    SELECT *
	    FROM
	    (
	        SELECT 	ROWNUM STT, ID, Name, CardID, IsDeduct, 
	        		Dofb, 
	        		DeductFrom, 
	        		DeductTo, 
	        		DeductReg, 
	        		Remark, Relation, Address
	        FROM
	        (
	            SELECT
	                W.ID ID,
	                W.FULLNAME Name,
	                W.ID_NO CardID,
	                NVL(W.IS_DEDUCT, 0) IsDeduct,
	                TO_CHAR(W.BIRTH_DATE,'YYYY-MM-DD')  DofB,
	                TO_CHAR(W.DEDUCT_FROM,'YYYY-MM-DD')  DeductFrom,
	                TO_CHAR(W.DEDUCT_TO,'YYYY-MM-DD')  DeductTo,
	                TO_CHAR(W.DEDUCT_REG,'YYYY-MM-DD')  DeductReg,
	                NVL(W.REMARK , ' ') Remark,
	                CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NVL('' || O.NAME_VN || '', ' ') ELSE NVL(O.NAME_EN,' ') END  Relation,
	                NVL(W.ADDRESS , ' ') Address
	            FROM HU_Family W
	                     LEFT JOIN OT_OTHER_LIST O ON W.RELATION_ID = O.ID
	            WHERE W.EMPLOYEE_ID = CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
	            ORDER BY W.ID DESC
	        ) 
	    )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

	    p_Message := u'Th\00e0nh c\00f4ng';
	    p_ResponseStatus := 1;
	    --DBMS_SQL.RETURN_RESULT(v_cursor);
	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;


	PROCEDURE API_Get_ListRegisterLeave
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Status IN NVARCHAR2,
	    p_ManagerStatus IN NUMBER,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    p_Cur OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
	    v_Page NUMBER(19, 0) := NVL(p_Page, 1);
	    v_PageSize NUMBER(19,0) := NVL(p_PageSize, 10);
	    v_ManagerStatus NUMBER(19, 0) := NVL(p_ManagerStatus, 0);
	    v_EmployeeID NUMBER(19, 0);
	    v_temp NUMBER(1, 0) := 0;
	BEGIN
	    p_Rowcount := 0;

	    IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_Status = '-1' THEN
	        p_Message := u'Lo\1ea1i \0111\0103ng k\00fd kh\00f4ng \0111\01b0\1ee3c \0111\1ec3 tr\1ed1ng';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;


	    SELECT COUNT(ID) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
	    v_EmployeeID := NVL(v_EmployeeID, -1);
	    IF v_EmployeeID < 1 THEN
	        p_Message := 'UserNotConfig';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT COUNT(*) INTO p_Rowcount
	        FROM AT_PORTAL_REG R --LEFT JOIN AT_Symbol S ON R.ID_SIGN = S.ID
	        WHERE R.ID_EMPLOYEE = v_EmployeeID 
	        AND R.SVALUE IN ('LEAVE')
	        AND R.Status IN (
	                SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                FROM (
	                    SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                    FROM DUAL
	                      CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL));
	    END;

	    BEGIN
	        OPEN p_Cur FOR 
	            SELECT *
	            FROM
	            (
	                SELECT ROWNUM AS STT, ID, NAME, TotalHour, Remark, Status, ManagerID, 
	                TIMECREATE, 
	                LEAVEFROM, 
	                LEAVETO
	                FROM
	                (
	                    SELECT 
	                        R.ID AS ID,
	                        '' || R.SVALUE || '' AS NAME,
	                        NVL(R.HOURCOUNT , 0) AS TotalHour,                                       
	                        NVL(R.NOTE , '') AS Remark,
                            --'nghỉ việc vì việc riêng' as Remark,
	                        R.Status AS Status,
	                        NVL(he.DIRECT_MANAGER , 0) AS ManagerID,
	                        TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')  AS TIMECREATE,
	                        TO_CHAR(R.FROM_DATE,'YYYY-MM-DD')   AS LEAVEFROM,
	                        TO_CHAR(R.TO_DATE,'YYYY-MM-DD')   AS LEAVETO
	                    FROM AT_PORTAL_REG R  --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
	                    JOIN HU_EMPLOYEE he ON he.ID  = R.ID_EMPLOYEE  
	                    WHERE R.ID_EMPLOYEE = v_EmployeeID 
	                    AND R.SVALUE IN ('LEAVE')
	                    AND R.Status IN (
	                        SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                        FROM (
	                            SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                            FROM DUAL
	                              CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
	                    ORDER BY r.CREATED_DATE DESC
	                )
	            ) WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);

	        p_Message := 'IsSuccess';
	        p_ResponseStatus := 1;
	    END;

	    ----DBMS_SQL.RETURN_RESULT(v_cursor);
	EXCEPTION 
	    WHEN OTHERS THEN 
			p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;

	/*API_Get_ListRegisterLeaveManager*/
	PROCEDURE API_Get_ListRegisterLeaveMng
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Status IN NVARCHAR2,
	    p_Type IN NUMBER,
	    p_FromDate IN NVARCHAR2,
	    p_ToDate IN NVARCHAR2,
	    p_KeyEmployee IN NVARCHAR2,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    p_Cur OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID,-1);
	    v_Status NVARCHAR2(20) := NVL(p_Status, '-1');
	    v_Page NUMBER(10,0) := NVL(p_Page, 1) ;
	    v_PageSize NUMBER(2,0) := NVL(p_PageSize, 10);
	    v_Type NUMBER(10,0) := NVL(p_Type, -1);
	    v_KeyEmployee NVARCHAR2(100);
	    v_EmployeeID NUMBER(19,0);
	    v_FD NUMBER(19,0);
	    v_TD NUMBER(19,0);
	    v_StautsID NUMBER(19,0);
	    v_DefaultDate DATE := TO_DATE('1900-01-01', 'YYYY-MM-DD');
	    v_FromDate DATE;
	    v_ToDate DATE;
	    v_temp NUMBER(10, 0) := 0;
	BEGIN
	    p_Rowcount := 0;
	    v_FromDate := TO_DATE( p_FromDate, 'YYYY-MM-DD');
	    v_ToDate := TO_DATE( p_ToDate, 'YYYY-MM-DD'); 
	    v_KeyEmployee := '%' || NVL(p_KeyEmployee, ' ') || '%' ; 
		SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDDHH24MISS')), TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDDHH24MISS')) INTO v_FD,v_TD FROM dual;

	    IF v_Status = '-1' THEN
	        p_Message := 'StatusIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	       	SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	       ;
	    EXCEPTION
	        WHEN OTHERS THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    BEGIN
	        SELECT COUNT(*) INTO p_Rowcount
	        FROM AT_PORTAL_REG R
             JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
             JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID  
            WHERE ap.ID_EMPLOYEE = v_EmployeeID 
            AND r.SVALUE IN ('LEAVE')
            AND ap.APPROVE_STATUS IN (
                SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                FROM (
                    SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                    FROM DUAL
                      CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
            --AND R.SymbolId = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.SymbolId END
            AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR R.ID_EMPLOYEE LIKE v_KeyEmployee )
            AND TO_NUMBER(TO_CHAR(R.FROM_DATE, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
            AND TO_NUMBER(TO_CHAR(R.TO_DATE, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD;


	        OPEN p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT ROWNUM STT, ID, LeaveFrom, LeaveTo, FromHour, ToHour, SymbolName, TotalHour, Remark, Status, EmployeeName, CreateTime, TypeName, Note
	            FROM
	            (
	                SELECT
	                    R.ID ID,
	                    TO_CHAR(R.FROM_DATE, 'YYYY-MM-DD')  LeaveFrom,
	                    TO_CHAR(R.TO_DATE, 'YYYY-MM-DD')  LeaveTo,
	                    R.FROM_HOUR  FromHour,
	                    R.TO_HOUR   ToHour,
	                    '' || R.SVALUE || '' SymbolName,
	                    NVL(R.HOURCOUNT , 0) TotalHour,
	                    NVL(R.Note_AT, ' ') Remark,
	                    R.Status Status,
	                    CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE e.FULLNAME_EN END EmployeeName,
	                    TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   CreateTime,
                        ApiType.Name TypeName,
                        R.Note Note
	                FROM AT_PORTAL_REG R
	                       JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID  
	                       JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
                           LEFT JOIN (SELECT 
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        --AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Id_sign = ApiType.Id
	                WHERE ap.ID_EMPLOYEE = v_EmployeeID 
	                AND r.SVALUE IN ('LEAVE')
	                        AND ap.APPROVE_STATUS  IN (
	                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
	                        --AND R.SymbolId = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.SymbolId END
	                        AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR R.ID_EMPLOYEE LIKE v_KeyEmployee )
	                        AND TO_NUMBER(TO_CHAR(R.FROM_DATE, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
            		AND TO_NUMBER(TO_CHAR(R.TO_DATE, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD
	                    ORDER BY R.ID DESC
	            )
	        ) 
	        WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
	    END;

	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1;

	    --DBMS_SQL.RETURN_RESULT(v_cursor);
	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;	


	/*API_Get_ListRegisterWLEOMng*/
	PROCEDURE API_Get_ListRegisterWLEOMng
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Status IN NVARCHAR2,
	    p_Type IN NUMBER,
	    p_FromDate IN NVARCHAR2,
	    p_ToDate IN NVARCHAR2,
	    p_KeyEmployee IN NVARCHAR2,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    p_Cur OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID,-1);
	    v_Status NVARCHAR2(20) := NVL(p_Status, '-1');
	    v_Page NUMBER(10,0) := NVL(p_Page, 1) ;
	    v_PageSize NUMBER(2,0) := NVL(p_PageSize, 10);
	    v_Type NUMBER(10,0) := NVL(p_Type, -1);
	    v_KeyEmployee NVARCHAR2(100);
	    v_EmployeeID NUMBER(19,0);
	    v_FD NUMBER(19,0);
	    v_TD NUMBER(19,0);
	    v_StautsID NUMBER(19,0);
	    v_DefaultDate DATE := TO_DATE('1900-01-01', 'YYYY-MM-DD');
	    v_FromDate DATE;
	    v_ToDate DATE;
	    v_temp NUMBER(10, 0) := 0;
	BEGIN
	    p_Rowcount := 0;
	    v_FromDate := TO_DATE( p_FromDate, 'YYYY-MM-DD');
	    v_ToDate := TO_DATE( p_ToDate, 'YYYY-MM-DD'); 
	    v_KeyEmployee := '%' || NVL(p_KeyEmployee, ' ') || '%' ; 
		SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDDHH24MISS')), TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDDHH24MISS')) INTO v_FD,v_TD FROM dual;

	    IF v_Status = '-1' THEN
	        p_Message := 'StatusIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	       ;
	    EXCEPTION
	        WHEN OTHERS THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    BEGIN
	        SELECT COUNT(*) INTO p_Rowcount
	        FROM AT_PORTAL_REG R
            JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
            JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP    AND r.ID  = ap.REGISTER_ID  
            WHERE ap.ID_EMPLOYEE = v_EmployeeID 
            AND r.SVALUE IN ('WLEO')
            AND ap.APPROVE_STATUS IN (
                SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                FROM (
                    SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
                    FROM DUAL
                      CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
            --AND R.SymbolId = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.SymbolId END
            AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR R.ID_EMPLOYEE LIKE v_KeyEmployee )
            AND TO_NUMBER(TO_CHAR(R.FROM_DATE, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
            AND TO_NUMBER(TO_CHAR(R.TO_DATE, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD;


	        OPEN p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT ROWNUM STT, ID, LeaveFrom, LeaveTo, FromHour, ToHour, SymbolName, TotalHour, Remark, Status, EmployeeName, CreateTime, Note, TypeName
	            FROM
	            (
	                SELECT
	                    R.ID ID,
	                    TO_CHAR(R.FROM_DATE, 'YYYY-MM-DD')  LeaveFrom,
	                    TO_CHAR(R.TO_DATE, 'YYYY-MM-DD')  LeaveTo,
	                    R.FROM_HOUR  FromHour,
	                    R.TO_HOUR   ToHour,
	                    '' || R.SVALUE || '' SymbolName,
	                    NVL(R.HOURCOUNT , 0) TotalHour,
	                    NVL(R.Note_AT, ' ') Remark,
	                    R.Status Status,
	                    CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE e.FULLNAME_EN END EmployeeName,
	                    TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   CreateTime,
                        NVL(R.Note, ' ') Note,
                        NVL(apiType.NAME, ' ') TypeName 
	                FROM AT_PORTAL_REG R
	                       JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP    AND r.ID  = ap.REGISTER_ID  
	                       JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
                           LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME  
                                    FROM 	AT_TIME_MANUAL atm  
                                    WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.ID_SIGN = apiType.Id
	                WHERE ap.ID_EMPLOYEE = v_EmployeeID 
	                AND r.SVALUE IN ('WLEO')
	                        AND ap.APPROVE_STATUS IN (
	                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
	                        AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR R.ID_EMPLOYEE LIKE v_KeyEmployee )
	                        AND TO_NUMBER(TO_CHAR(R.FROM_DATE, 'YYYYMMDDHH24MISS')) BETWEEN  v_FD AND v_TD
            		AND TO_NUMBER(TO_CHAR(R.TO_DATE, 'YYYYMMDDHH24MISS'))  BETWEEN v_FD AND v_TD
	                    ORDER BY R.ID DESC
	            )
	        ) 
	        WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
	    END;

	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1;

	    --DBMS_SQL.RETURN_RESULT(v_cursor);
	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;


	PROCEDURE API_Get_ListRegisterWLEO
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Status IN NVARCHAR2,
	    p_ManagerStatus IN NUMBER,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    p_Cur OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
	    v_Page NUMBER(19, 0) := NVL(p_Page, 1);
	    v_PageSize NUMBER(19,0) := NVL(p_PageSize, 10);
	    v_ManagerStatus NUMBER(19, 0) := NVL(p_ManagerStatus, 0);
	    v_EmployeeID NUMBER(19, 0);
	    v_temp NUMBER(1, 0) := 0;
	BEGIN
	    p_Rowcount := 0;

	    IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_Status = '-1' THEN
	        p_Message := 'Type Register Is Empty';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;


	    SELECT COUNT(ID) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 ;

	      v_EmployeeID := NVL(v_EmployeeID, -1);
	    IF v_EmployeeID < 1 THEN
	        p_Message := 'UserNotConfig';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT COUNT(*) INTO p_Rowcount
	        FROM AT_PORTAL_REG R --LEFT JOIN AT_Symbol S ON R.ID_SIGN = S.ID
	        WHERE R.ID_EMPLOYEE = v_EmployeeID 
	        AND R.SVALUE IN ('WLEO')
	        AND R.Status IN (
	                SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                FROM (
	                    SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                    FROM DUAL
	                      CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL));
	    END;

	    BEGIN
	        OPEN p_Cur FOR 
	            SELECT *
	            FROM
	            (
	                SELECT ROWNUM AS STT, ID, NAME, TotalHour, Remark, Status, ManagerID, 
	                TIMECREATE, 
	                LEAVEFROM, 
	                LEAVETO
	                FROM
	                (
	                    SELECT 
	                        R.ID AS ID,
	                        '' || R.SVALUE || '' AS NAME,
	                        NVL(R.HOURCOUNT , 0) AS TotalHour,
	                        NVL(R.NOTE , '') AS Remark,
	                        R.Status AS Status,
	                        NVL(he.DIRECT_MANAGER , 0) AS ManagerID,
	                        TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')  AS TIMECREATE,
	                        TO_CHAR(R.FROM_DATE,'YYYY-MM-DD')   AS LEAVEFROM,
	                        TO_CHAR(R.TO_DATE,'YYYY-MM-DD')   AS LEAVETO
	                    FROM AT_PORTAL_REG R  --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
	                    JOIN HU_EMPLOYEE he ON he.ID  = R.ID_EMPLOYEE  
	                    WHERE R.ID_EMPLOYEE = v_EmployeeID 
	                    AND R.SVALUE IN ('WLEO')
	                    AND R.Status IN (
	                        SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                        FROM (
	                            SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                            FROM DUAL
	                              CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
	                    ORDER BY TIMECREATE DESC
	                )
	            ) WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);

	        p_Message := 'IsSuccess';
	        p_ResponseStatus := 1;
	    END;
 
	EXCEPTION 
	    WHEN OTHERS THEN 
			p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;


	/*API_Get_ListRegisterOT*/
	PROCEDURE API_Get_ListRegisterOT
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Status IN NVARCHAR2,
	    p_ManagerStatus IN NUMBER,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    p_Cur OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
	    v_ManagerStatus NUMBER(4,0) := NVL(p_ManagerStatus, -1);
	    v_Page NUMBER(10,0) := NVL(p_Page, 1);
	    v_PageSize NUMBER(10,0) := NVL(p_PageSize, 10);
	    v_EmployeeID NUMBER(19,0);
	    v_StautsID NUMBER(19,0);
	    v_temp NUMBER(1, 0) := 0;
	    v_cursor SYS_REFCURSOR;
	BEGIN
	    p_Rowcount := 0;

	    IF v_Status = '-1' THEN
	        p_Message := u'StatusIsNotNull' ;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;

	    IF v_UserID = -1 THEN
	        p_Message := u'IsUserIDNull' ;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound' ;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;

	    v_temp := 0;
	    SELECT COUNT(*) INTO v_temp FROM HU_EMPLOYEE he JOIN SE_USER su ON su.EMPLOYEE_CODE  = he.EMPLOYEE_CODE WHERE su.ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserNotConfig' ;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;

	    SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1
	      ;

	    SELECT COUNT(*) INTO p_Rowcount 
	    FROM 
	    (
	        SELECT  R.ID ID
	        FROM AT_PORTAL_REG R
            JOIN HU_EMPLOYEE he ON he.id = r.ID_EMPLOYEE 
	        WHERE R.ID_EMPLOYEE = (CASE WHEN v_ManagerStatus = 0 THEN v_EmployeeID ELSE R.ID_EMPLOYEE END)
	        AND R.SVALUE  IN ('OVERTIME')
	                      AND R.Status IN (
	                        SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                        FROM (
	                            SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                            FROM DUAL
	                              CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
	    );

	    OPEN p_Cur FOR
	    SELECT * 
	    FROM
	    (
	        SELECT ROWNUM AS STT, WORKINGDAY, FROMHOUR, TOHOUR, TOTALHOUR, REMARK, IsCompensatory, Status, ManagerID, TIMECREATE
	        FROM
	        (
	            SELECT 
	                R.ID ID,
	              	TO_CHAR(R.REGDATE,'YYYY-MM-DD')  WORKINGDAY,
	                TO_CHAR(R.FROM_HOUR,'YYYY-MM-DD HH24:MI:SS')   FromHour,
	                TO_CHAR(R.TO_HOUR,'YYYY-MM-DD HH24:MI:SS')   ToHour,
	                NVL(R.HOURCOUNT, 0) TOTALHOUR,
	                R.NOTE REMARK,
	                0 IsCompensatory,
	                R.Status Status,
	                NVL(he.DIRECT_MANAGER,0) ManagerID,
	                TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')  TIMECREATE
	            FROM AT_PORTAL_REG R
	            JOIN HU_EMPLOYEE he ON he.id = r.ID_EMPLOYEE 
	            WHERE R.ID_EMPLOYEE = (CASE WHEN v_ManagerStatus = 0 THEN v_EmployeeID ELSE R.ID_EMPLOYEE END)
	             AND R.SVALUE  IN ('OVERTIME')
	                      AND R.Status IN (
	                        SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                        FROM (
	                            SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                            FROM DUAL
	                              CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
	            ORDER BY R.ID DESC
	        ) 
	    ) WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);
	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1;
	    ----DBMS_SQL.RETURN_RESULT(v_cursor);

	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99 ;
	END;


	/*Manager truy vấn lấy danh sách đăng ký làm thêm */
	PROCEDURE API_Get_ListRegisterOTMng
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Status IN NVARCHAR2,
	    p_Type IN NUMBER,
	    p_FromDate IN NVARCHAR2,
	    p_ToDate IN NVARCHAR2,
	    p_KeyEmployee IN NVARCHAR2,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
		p_Cur OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_Status NVARCHAR2(100) := NVL(p_Status, '-1');
	    v_Type NUMBER(19,0) := NVL(p_Type, -1);
	    v_FromDate DATE;
	    v_ToDate DATE;
	    v_KeyEmployee NVARCHAR2(500) := '%' || NVL(p_KeyEmployee, '') || '%';
	    v_Page NUMBER(10,0) := NVL(p_Page, 1);
	    v_PageSize NUMBER(10,0) := NVL(p_PageSize, 10);
	    v_EmployeeID NUMBER(19,0);
	    v_StautsID NUMBER(19,0);
	    v_FD NUMBER(19,0);
	    v_TD NUMBER(19,0);
	    v_DefaultDate DATE := TO_DATE('01/01/1900', 'YYYY-MM-DD');
	    v_temp NUMBER(1, 0) := 0;
	BEGIN
	    p_Rowcount := 0; 
	    v_FromDate := TO_DATE(p_FromDate,  'YYYY-MM-DD');
	    v_ToDate := TO_DATE(p_ToDate,  'YYYY-MM-DD'); 
		SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDDHH24MISS')), TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDDHH24MISS')) INTO v_FD,v_TD FROM dual;


	    IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_Status = '-1' THEN
	        p_Message := 'StatusIsNotNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE su.ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	      ;
	    EXCEPTION
	        WHEN NO_DATA_FOUND THEN 
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	   	-- Đếm số dòng 
	    SELECT COUNT(*) INTO p_Rowcount
	 FROM AT_PORTAL_APP R  
			    JOIN AT_PORTAL_REG apr ON apr.ID_REGGROUP  = R.ID_REGGROUP    AND apr.ID  = r.REGISTER_ID  
			    LEFT JOIN HU_Employee E   ON apr.ID_EMPLOYEE = E.ID 
                Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM 	OT_OTHER_LIST ool 
                                    WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND 	ACTFLG  = 'A') apiType on apr.ID_SIGN = apiType.ID
                WHERE apr.SVALUE  IN ('OVERTIME') 
	            AND R.APPROVE_STATUS  IN (
	                    SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                    FROM (
	                        SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                        FROM DUAL
	                          CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
	                AND R.ID_EMPLOYEE = v_EmployeeID
	                AND ( UPPER(e.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR apr.ID_EMPLOYEE LIKE v_KeyEmployee )
	                AND ( apr.REGDATE BETWEEN v_FromDate AND v_ToDate )
	                ;

	    --DBMS_OUTPUT.PUT_LINE(p_FromDate || ' - ' || v_FD || ' ,' || v_TD);
	    OPEN p_Cur FOR
	    SELECT *
	    FROM
	    (
	        SELECT ROWNUM AS STT, ID, WorkingDay, FromHour, ToHour, TotalHour, Remark, Status, ManagerID, EmployeeName, CREATEDATE,Note, TypeName
	        FROM 
	        (
	            SELECT
	                apr.ID ID, -- tạm thời lấy theo ID đăng ký thống nhất lấy 1 ID đăng ký
	                TO_CHAR( apr.REGDATE,'YYYY-MM-DD') WorkingDay,
	                apr.FROM_HOUR FromHour,
	                apr.TO_HOUR ToHour,
	                apr.HOURCOUNT TotalHour,
	                apr.NOTE Remark,
	                apr.STATUS  Status,
	                R.ID_EMPLOYEE ManagerID,
	                E.FULLNAME_VN EmployeeName,
	                TO_CHAR( apr.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') CREATEDATE,
                    apr.Note Note,
                    apiType.Name TypeName
	            FROM AT_PORTAL_APP R  
			    JOIN AT_PORTAL_REG apr ON apr.ID_REGGROUP  = R.ID_REGGROUP     AND apr.ID  = r.REGISTER_ID  
			    LEFT JOIN HU_Employee E   ON apr.ID_EMPLOYEE = E.ID 
                Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM 	OT_OTHER_LIST ool 
                                    WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND 	ACTFLG  = 'A') apiType on apr.ID_SIGN = apiType.ID
                WHERE apr.SVALUE  IN ('OVERTIME') 
	            AND R.APPROVE_STATUS  IN (
	                    SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                    FROM (
	                        SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                        FROM DUAL
	                          CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL))
	                AND R.ID_EMPLOYEE = v_EmployeeID
	                AND ( UPPER(e.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR apr.ID_EMPLOYEE LIKE v_KeyEmployee )
	                AND ( apr.REGDATE BETWEEN v_FromDate AND v_ToDate )
	        )
	        ORDER BY ID DESC
	    ) WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1;
	    --DBMS_SQL.RETURN_RESULT(v_cursor);
	EXCEPTION
	    WHEN OTHERS THEN
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;




	/*API_Get_Period*/
	PROCEDURE API_Get_Period
    (
		p_Language IN nvarchar2,
        p_Year IN NUMBER,
        p_Page IN NUMBER,
        p_PageSize IN NUMBER,
        p_cur out CURSOR_TYPE,
        p_Rowcount OUT NUMBER,
        p_Message OUT NVARCHAR2,
        p_ResponseStatus OUT NUMBER
    )
    AS
        v_Year NUMBER(4,0) := NVL(p_Year, 0); 
    BEGIN
        p_Rowcount := 0;

        SELECT COUNT(*) INTO p_Rowcount
        FROM AT_Period W
        WHERE  W.Actflg = 'A'
                AND W.Year = (CASE WHEN v_Year = 0 THEN W.Year ELSE v_Year END);

        OPEN p_cur FOR
            SELECT * 
            FROM
            (
                    SELECT 
                        ROWNUM AS STT, ID, Name, Year, 
                        TO_CHAR(StartDate,'YYYY-MM-DD') StartDate, 
                        TO_CHAR(EndDate,'YYYY-MM-DD') EndDate, 
                        TO_CHAR(PayDate,'YYYY-MM-DD HH24:MI:SS') PayDate
                    FROM
                    (
                        SELECT 
                            W.Id AS ID,
                            W.Period_Name AS Name,
                            NVL(W.Year, 1900) AS Year,
                            w.start_date AS StartDate,
                            w.end_date AS EndDate,
                            w.end_date AS PayDate
                        FROM AT_Period W
                        WHERE  W.Actflg = 'A'
                                AND W.Year = (CASE WHEN v_Year = 0 THEN W.Year ELSE v_Year END)
                        ORDER BY W.Id DESC
                    ) 
            ) WHERE STT > (p_Page - 1)* p_PageSize AND STT < (p_Page * p_PageSize + 1);

          p_Message := 'IsSuccess';
          p_ResponseStatus := 1 ;
          --DBMS_SQL.RETURN_RESULT(v_cursor);
    EXCEPTION 
        WHEN OTHERS THEN 
          p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
          p_ResponseStatus := -99 ;        
    END;

   	/*Manager reject record registerleave */
   	PROCEDURE API_CancelRegisterLeave
    (
		p_Language IN nvarchar2,
        p_UserID IN NUMBER,
        p_RegisterID IN NUMBER,
        p_Comment IN NVARCHAR2,
        p_cur out CURSOR_TYPE,
        p_Message OUT NVARCHAR2,
        p_ResponseStatus OUT NUMBER
    )
    AS
        v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
        v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
        v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
        v_EmployeeID NUMBER(19,0);
        v_UserRegisterID NUMBER(19,0);
        v_StatusNow NUMBER(19,0);
        v_ManagerID NUMBER(19,0);
        v_I NUMBER(19,0);
        --v_cursor SYS_REFCURSOR;
        v_temp NUMBER(19, 0) := 0;
       	v_TenNguoiPheDuyet Nvarchar2(100):= '';
        v_NotiContent nvarchar2(200) := '';
       v_id_employee_to_noty number(19,0);
    BEGIN
        p_ResponseStatus := 1;

        IF v_UserID = -1 THEN
            p_Message := 'UserIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        IF v_RegisterID = -1 THEN
            p_Message := 'RegisterIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;


        IF v_Comment = '-1' THEN
            p_Message := 'CommentIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
        IF v_temp < 1 THEN
            p_Message := 'UserIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        BEGIN
            SELECT 	he.ID, he.FULLNAME_VN INTO v_EmployeeID , v_TenNguoiPheDuyet
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
        EXCEPTION
            WHEN OTHERS THEN 
                p_Message := 'UserNotConfig';
                p_ResponseStatus := -600;
                RETURN;
        END;

        SELECT COUNT(*) INTO v_temp FROM AT_REGISTER_PORTAL arp  WHERE Id = v_RegisterID;
        IF v_temp < 1 THEN
            p_Message := 'RegisterIDIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg r JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP = r.ID_REGGROUP   AND r.ID  = apa.REGISTER_ID  
        WHERE apa.ID_EMPLOYEE = v_EmployeeID  AND r.PARENT_ID  =  v_RegisterID AND r.STATUS  IN ( 0,1) ;
        IF v_temp < 1 THEN
            p_Message := 'RegisterIDIsNotFound:' || v_RegisterID;
            p_ResponseStatus := -600;
            RETURN;
        END IF;--infomation approve employee??;

        SELECT r.id_sign, r.status_id  INTO v_UserRegisterID, v_StatusNow
        FROM AT_REGISTER_PORTAL  r
        WHERE Id = v_RegisterID;

       /* -- cần check lại
        SELECT COUNT(*) INTO v_temp FROM HU_Employee  e
        WHERE e.direct_manager = v_EmployeeID
            AND Id = v_UserRegisterID;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependentEmployee';
            p_ResponseStatus := -600;
            RETURN;
        END IF;
		*/

        IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
            BEGIN
                UPDATE at_portal_reg r SET r.status = 3, r.Note_AT = v_Comment
                WHERE PARENT_ID = v_RegisterID;

               	UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 3 ,NOTES= v_Comment, APPROVE_DATE  = SYSDATE  
	            WHERE ID_EMPLOYEE  = v_EmployeeID AND ID_REGGROUP in
	            (select ID_REGGROUP from AT_PORTAL_REG where PARENT_ID = v_RegisterID);

	           	UPDATE AT_REGISTER_PORTAL r SET r.STATUS_ID = 3 
                WHERE ID = v_RegisterID;
	           
                SELECT 	APA.ID_EMPLOYEE , r.Id , 
                		v_TenNguoiPheDuyet || u' \0111\00e3 t\1eeb ch\1ed1i \0111\0103ng k\00fd '|| lower(NVL(ApiType.name,u'ngh\1ec9') )
                			|| 
                			CASE WHEN TO_CHAR(r.FROM_DATE,'dd/MM')=TO_CHAR(r.TO_DATE,'dd/MM') THEN u' ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM')
                				 ELSE u' t\1eeb ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM') || u' \0111\1ebfn ' || TO_CHAR(r.TO_DATE,'dd/MM') 
                			END 
                			|| u' c\1ee7a b\1ea1n.'
                			,r.ID_EMPLOYEE 
                INTO 	v_ManagerID, v_I, v_NotiContent , v_id_employee_to_noty 
                FROM at_portal_reg r 
                JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP  = r.ID_REGGROUP    AND r.ID  = apa.REGISTER_ID  
                LEFT JOIN (
		                    			SELECT  p.ID ID,
				                            	p.NAME Name
				                        FROM AT_TIME_MANUAL p
				                        LEFT JOIN AT_FML F ON F.ID = p.MORNING_ID
				                        LEFT JOIN AT_FML F2 ON F2.ID = p.AFTERNOON_ID
				                        WHERE p.ACTFLG = 'A'
				                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
				                       -- AND (p.MORNING_ID = p.AFTERNOON_ID)
				                        ORDER BY p.NAME DESC
				) ApiType on R.Id_sign = ApiType.Id
                WHERE r.PARENT_ID = v_RegisterID  
                AND apa.ID_EMPLOYEE  = v_EmployeeID
                AND rownum = 1 
                ;

               /*Đẩy lưu notify nguồn từ QL từ chối -> nhân viên */
                API_SaveNotification('REGISTER_LEAVE',v_id_employee_to_noty ,v_ManagerID ,  3, v_I, v_NotiContent , p_Message, p_ResponseStatus);
                COMMIT;
                p_Message := 'IsSuccess';

                OPEN p_cur FOR
                    SELECT
                        1 STT,
                        arp.Id ID,
                        TO_CHAR(arp.from_date , 'YYYY-MM-DD') LeaveFrom,
                        TO_CHAR(arp.to_date, 'YYYY-MM-DD') LeaveTo,
                        arp.from_hour FromHour,
                        arp.to_hour ToHour,
                        '' SymbolName,
                        NVL(TotalHour, 0) TotalHour,
                        NVL(arp.note, ' ') Remark,
                        arp.Status_id Status,
                        EmployeeName,
                      TimeCreate CreateTime,
                       TypeName,
                         arp.Note Note
                
                	FROM 	AT_REGISTER_PORTAL arp 
                	JOIN	
                	(
                			SELECT  DISTINCT 
                					R.PARENT_ID , 
                					NVL(ap.NOTES,' ') AS Remark,
                					ApiType.Name TypeName,
                					TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   TimeCreate,
		                    		CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE e.FULLNAME_EN END EmployeeName,
                					ap.APPROVE_STATUS  AS Status ,
                					NVL(R.HOURCOUNT , 0) TotalHour 
		                	FROM	AT_PORTAL_REG R
		                    JOIN 	AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID 
		                    JOIN 	HU_Employee E   ON R.ID_EMPLOYEE = E.ID
		                    LEFT JOIN (
		                    			SELECT  p.ID ID,
				                            	'[' || p.CODE || '] ' || p.NAME Name
				                        FROM AT_TIME_MANUAL p
				                        LEFT JOIN AT_FML F ON F.ID = p.MORNING_ID
				                        LEFT JOIN AT_FML F2 ON F2.ID = p.AFTERNOON_ID
				                        WHERE p.ACTFLG = 'A'
				                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
				                        --AND (p.MORNING_ID = p.AFTERNOON_ID)
				                        ORDER BY p.NAME DESC
				            ) ApiType on R.Id_sign = ApiType.Id
							LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
							LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
			                WHERE r.SVALUE IN ('LEAVE')
		                    AND R.PARENT_ID  = v_RegisterID
              		) child ON child.PARENT_ID = arp.ID  
        			WHERE 	arp.id = v_RegisterID
					;
               -- DBMS_SQL.RETURN_RESULT(v_CURSOR);
            EXCEPTION
                WHEN OTHERS THEN
                    p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
                    p_ResponseStatus := -99;
                    RETURN;
            END;
        ELSE
            p_Message := 'RegisterIsCancel';
            p_ResponseStatus := -600;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE || ', SQLERRM: ' || SQLERRM);
            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
            p_ResponseStatus := -99;
    END;

    PROCEDURE API_CancelRegisterWLEO
    (
		p_Language IN nvarchar2,
        p_UserID IN NUMBER,
        p_RegisterID IN NUMBER,
        p_Comment IN NVARCHAR2,
        p_cur out CURSOR_TYPE,
        p_Message OUT NVARCHAR2,
        p_ResponseStatus OUT NUMBER
    )
    AS
        v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
        v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
        v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
        v_EmployeeID NUMBER(19,0);
        v_UserRegisterID NUMBER(19,0);
        v_StatusNow NUMBER(19,0);
        v_ManagerID NUMBER(19,0);
        v_I NUMBER(19,0);
        --v_cursor SYS_REFCURSOR;
        v_temp NUMBER(19, 0) := 0;
       	v_NotiContent nvarchar2(200) :='';
        v_TenNguoiPheDuyet nvarchar2(100) := '';
       v_id_employee_to_noty number(19,0);
    BEGIN
        p_ResponseStatus := 1;

        IF v_UserID = -1 THEN
            p_Message := 'UserIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        IF v_RegisterID = -1 THEN
            p_Message := 'RegisterIDIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;


        IF p_Message = '-1' THEN
            p_Message := 'CommentIsNull';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
        IF v_temp < 1 THEN
            p_Message := 'UserIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        BEGIN
            SELECT 	he.ID, he.FULLNAME_VN INTO v_EmployeeID , v_TenNguoiPheDuyet
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
        EXCEPTION
            WHEN OTHERS THEN 
                p_Message := 'UserNotConfig';
                p_ResponseStatus := -600;
                RETURN;
        END;

        SELECT COUNT(*) INTO v_temp FROM AT_REGISTER_PORTAL arp WHERE Id = v_RegisterID;
        IF v_temp < 1 THEN
            p_Message := 'RegisterIDIsNotFound';
            p_ResponseStatus := -600;
            RETURN;
        END IF;

        SELECT COUNT(*) INTO v_temp FROM at_portal_reg r JOIN AT_PORTAL_APP apa ON apa.ID_REGGROUP = r.ID_REGGROUP    AND r.ID  = apa.REGISTER_ID  
        WHERE apa.ID_EMPLOYEE = v_EmployeeID 
       AND r.parent_id = v_RegisterID
        ;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependent:' || v_EmployeeID;
            p_ResponseStatus := -600;
            RETURN;
        END IF;--infomation approve employee??;

        SELECT r.ID_EMPLOYEE , r.status INTO v_UserRegisterID, v_StatusNow
        FROM at_portal_reg r
        WHERE PARENT_ID = v_RegisterID
       AND rownum = 1
        ;

       /* -- cần check lại
        SELECT COUNT(*) INTO v_temp FROM HU_Employee  e
        WHERE e.direct_manager = v_EmployeeID
            AND Id = v_UserRegisterID;
        IF v_temp < 1 THEN
            p_Message := 'ManagerNotDependentEmployee';
            p_ResponseStatus := -600;
            RETURN;
        END IF;
		*/

        IF p_ResponseStatus > 0 AND v_StatusNow <= 1 THEN
            BEGIN
                UPDATE at_portal_reg r SET r.status = 3, r.Note_AT = v_Comment
                WHERE PARENT_ID = v_RegisterID;

               	UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 3 , NOTES = v_Comment
	            WHERE ID_EMPLOYEE  = v_EmployeeID AND ID_REGGROUP in
	            (select ID_REGGROUP from AT_PORTAL_REG where PARENT_ID = v_RegisterID);

	           	UPDATE AT_REGISTER_PORTAL  SET STATUS_ID  = 3
	           	WHERE id = v_RegisterID;
	           
	           -- lấy dữ liệu push notify 
                SELECT 	APA.ID_EMPLOYEE , r.Id , 
                		v_TenNguoiPheDuyet || u' \0111\00e3 t\1eeb ch\1ed1i \0111\0103ng k\00fd '|| lower(NVL(ApiType.name,u'\0111i mu\1ed9n - v\1ec1 s\1edbm') )
                			|| 
                			CASE WHEN TO_CHAR(r.FROM_DATE,'dd/MM')=TO_CHAR(r.TO_DATE,'dd/MM') THEN u' ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM')
                				 ELSE u' t\1eeb ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM') || u' \0111\1ebfn ' || TO_CHAR(r.TO_DATE,'dd/MM') 
                			END 
                			|| u' c\1ee7a b\1ea1n.'
                			,r.ID_EMPLOYEE  
                INTO 	v_ManagerID, v_I, v_NotiContent ,v_id_employee_to_noty 
                FROM 	at_portal_reg r 
                JOIN 	AT_PORTAL_APP apa ON apa.ID_REGGROUP  = r.ID_REGGROUP     AND r.ID  = apa.REGISTER_ID  
                LEFT JOIN (
                                SELECT  ID, atm.CODE , atm.NAME  
                                FROM 	AT_TIME_MANUAL atm  
                                WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' )
					 ) apiType on r.ID_SIGN = apiType.Id
                WHERE 	r.PARENT_ID = v_RegisterID  
                AND 	apa.ID_EMPLOYEE  =  v_EmployeeID
                AND 	rownum = 1
                ;

               /*Đẩy lưu notify*/
                API_SaveNotification('REGISTER_LATEINEARLYOUT',v_id_employee_to_noty,v_ManagerID  ,  3, v_I, v_NotiContent, p_Message, p_ResponseStatus);
                COMMIT;
                p_Message := 'IsSuccess';
				
               	-- trả về client thêm thông tin 
                OPEN p_cur FOR
                SELECT 	ROWNUM AS STT,
                		arp.ID,
                		NVL(arp.SVALUE,'') SymbolName,
                		TO_CHAR(arp.FROM_DATE,'YYYY-MM-DD HH24:MI:SS') AS FROM_DATE,
                		TO_CHAR(arp.TO_DATE,'YYYY-MM-DD HH24:MI:SS') AS TO_DATE,
                		TotalHour,
                		arp.Status_ID Status,
                		EmployeeName,
                		CreateTime,
                		arp.Note,
                		TypeName,
                		NVL(arp.DM_MINUTE,0) DM_MINUTE,
                		NVL(arp.VS_MINUTE,0) VS_MINUTE
                
                FROM  	AT_REGISTER_PORTAL arp 
                JOIN (
                    SELECT DISTINCT 
                        1 STT,
                        R.PARENT_ID ,  
                        '' SymbolName,
                        NVL(R.Hourcount, 0) TotalHour,
                        NVL(R.Note, ' ') Remark,
                        R.Status Status,
                        CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NVL(E.Fullname_Vn,' ') ELSE NVL(E.FULLNAME_EN,' ') end  EmployeeName,
                        TO_CHAR(r.created_date, 'YYYY-MM-DD HH24:MI:SS') CreateTime,
                        NVL(R.Note, ' ') Note,
                        NVL(apiType.NAME, ' ') TypeName 
                    FROM at_portal_reg R 
                     LEFT JOIN HU_Employee E   ON R.Id_Employee = E.Id
                     LEFT JOIN (
                                SELECT  ID, atm.CODE , atm.NAME  
                                FROM 	AT_TIME_MANUAL atm  
                                WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' )
					 ) apiType on r.ID_SIGN = apiType.Id
                    WHERE R.PARENT_ID = v_RegisterID
                ) R    ON R.PARENT_ID  = arp.ID 
                WHERE arp.id = v_RegisterID
                    ;
				p_Message := 'RegisterIsCancel';
                p_ResponseStatus := 1;
               -- DBMS_SQL.RETURN_RESULT(v_CURSOR);
            EXCEPTION
                WHEN OTHERS THEN
                    p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
                    p_ResponseStatus := -99;
                    RETURN;
            END;
        ELSE
            p_Message := 'RegisterIsCancel';
            p_ResponseStatus := -99;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN 
            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
            p_ResponseStatus := -99;
    END;

   	PROCEDURE API_Type_WLEO(
		p_Language IN nvarchar2,
                           P_CUR            OUT CURSOR_TYPE,
                           p_Message        OUT NVARCHAR2,
                           p_ResponseStatus OUT NUMBER) 
    as
    begin
      BEGIN
	    IF NVL(p_Language,'vi-VN') = 'vi-VN' THEN 
	        OPEN P_CUR FOR
	        SELECT  ID, atm.CODE , atm.NAME 
	        FROM 	AT_TIME_MANUAL atm  
	        WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' );
		ELSE 
			OPEN P_CUR FOR
	        SELECT  ID, atm.CODE , 
	        		CASE WHEN CODE = 'RDT' THEN N'Late in'
	        		ELSE N'Early out' 
	        		END  NAME 
	        FROM 	AT_TIME_MANUAL atm  
	        WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' );
		END IF;
        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := 'IsError';
            p_ResponseStatus := 0;
    END;
	EXCEPTION 
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;


   	PROCEDURE API_Type_Leave(
		p_Language IN nvarchar2,
                               P_CUR            OUT CURSOR_TYPE,
                               p_Message        OUT NVARCHAR2,
                               p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR
        SELECT 
            p.ID ID,
            p.CODE CODE,
            p.MORNING_ID MORNING_ID,
            p.AFTERNOON_ID AFTERNOON_ID,
            CASE WHEN NVL(p_Language,'vi-VN')='vi-VN' then 
            	'[' || p.CODE || '] ' || p.NAME 
            ELSE NVL(F.NAME_EN,'') || '/' || NVL(F2.NAME_EN,'')
            END  	MANUALLEAVE
        FROM AT_TIME_MANUAL p
        LEFT JOIN AT_FML F ON F.ID = p.MORNING_ID
        LEFT JOIN AT_FML F2 ON F2.ID = p.AFTERNOON_ID
        WHERE p.ACTFLG = 'A'
        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
        --AND (p.MORNING_ID = p.AFTERNOON_ID)
        ORDER BY p.NAME DESC;

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
            p_ResponseStatus := 0;
    END;
	EXCEPTION 
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;

   	PROCEDURE API_Type_OT(
		p_Language IN nvarchar2,
                               P_CUR            OUT CURSOR_TYPE,
                               p_Message        OUT NVARCHAR2,
                               p_ResponseStatus OUT NUMBER)
    as
    begin
      BEGIN
        OPEN P_CUR FOR

		SELECT  ID, CASE WHEN NVL(p_Language,'vi-VN')='vi-VN' then  NAME_VN  ELSE NAME_EN  END AS NAME
		FROM 	OT_OTHER_LIST ool 
		WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
		AND 	ACTFLG  = 'A' ;

        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
        --DBMS_SQL.RETURN_RESULT(v_CURSOR);
    EXCEPTION
        WHEN OTHERS THEN
            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
            p_ResponseStatus := 0;
    END;
	EXCEPTION 
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
    end;


   	PROCEDURE API_GET_TIMESHEET(
		p_Language IN nvarchar2,p_UserID IN NUMBER,
                                                    p_Period IN NUMBER,
                                                    P_CUR            OUT CURSOR_TYPE,
                                                    p_DayWork OUT NUMBER,
                                                    p_DayNotWork OUT NUMBER,
                                                    p_RowCount OUT NUMBER,
                                                    p_Message OUT NVARCHAR2,
                                                    p_ResponseStatus OUT  NUMBER)as
  v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
    v_Period NUMBER(19, 0) := NVL(p_Period, -1);
    v_EmployeeID NUMBER(19,0);
    v_DayWork NUMBER(19,0) := 0;
    v_DayNotWork NUMBER(10,0) := 0;
    v_STARTDATE date;
    v_temp NUMBER(19, 0) := 0;
  begin
    p_ResponseStatus := 1;
    p_RowCount := 0;

    IF v_UserID  = -1 THEN
        p_Message := 'UserIDIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    IF v_Period = -1 THEN
        p_Message := 'PeriodIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
    IF v_temp < 1 THEN
        p_Message := 'UserIsNotFound';
        p_ResponseStatus := -600;
        RETURN;
    END IF;

   BEGIN
     SELECT Emp.id
       INTO v_EmployeeID
       FROM se_user e
       left join hu_employee emp
         on emp.employee_code = e.employee_code
      WHERE e.id = v_UserID;
   EXCEPTION
     WHEN OTHERS THEN
       p_Message        := 'UserNotConfig';
       p_ResponseStatus := -600;
       RETURN;
   END;

    BEGIN
        SELECT p.start_date INTO v_STARTDATE FROM AT_PERIOD p WHERE Id = p_Period;
    EXCEPTION
        WHEN OTHERS THEN 
            p_Message := u'Kh\00f4ng t\00ecm th\1ea5y k\1ef3 c\00f4ng - l\01b0\01a1ng';
            p_ResponseStatus := -600;
            RETURN;
    END;
    SELECT COUNT(*) INTO p_DayWork
    FROM at_time_timesheet_daily AT
    WHERE SUBSTR(AT.WORKINGDAY, 0, 6) = SUBSTR(v_STARTDATE, 0, 6)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE NOT IN ('OFF');
    SELECT COUNT(*) INTO p_DayNotWork
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE IN ('OFF');

    SELECT COUNT(*) INTO p_RowCount
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID;
    OPEN P_CUR FOR 
        SELECT 
            AT.Id ID, 
            at.workingday DATES,
            CASE to_char(at.workingday,'d') 
                WHEN '1' THEN u'Ch\1ee7 nh\1eadt'
                WHEN '2' THEN u'Th\1ee9 2'
                WHEN '3' THEN u'Th\1ee9 3'
                WHEN '4' THEN u'Th\1ee9 4'
                WHEN '5' THEN u'Th\1ee9 5'
                WHEN '6' THEN u'Th\1ee9 6'
                ELSE u'Th\1ee9 7' END DAY,
            AT.Shift_Code WORKINGCODE
        FROM at_time_timesheet_daily AT
        WHERE --trunc(at.workingday) = trunc(v_STARTDATE)
        	TO_CHAR(AT.WORKINGDAY, 'YYYYMM' )  =   TO_CHAR(v_STARTDATE, 'YYYYMM' )  
        AND AT.Employee_Id = v_EmployeeID;

    p_Message := 'IsSuccess';
    p_ResponseStatus := 1;
   -- DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
        p_ResponseStatus := -99;
  end;


 	PROCEDURE API_GET_TIMESHEET_TOTAL(
		p_Language IN nvarchar2,p_UserID IN NUMBER,
                                                    p_Period IN NUMBER,
                                                    P_CUR            OUT CURSOR_TYPE,
                                                    p_DayWork OUT NUMBER,
                                                    p_DayNotWork OUT NUMBER,
                                                    p_RowCount OUT NUMBER,
                                                    p_Message OUT NVARCHAR2,
                                                    p_ResponseStatus OUT  NUMBER
                                                    )
      as
  	v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
    v_Period NUMBER(19, 0) := NVL(p_Period, -1);
    v_EmployeeID NUMBER(19,0);
    v_DayWork NUMBER(19,0) := 0;
    v_DayNotWork NUMBER(10,0) := 0;
    v_STARTDATE date;
    v_temp NUMBER(19, 0) := 0;
  begin
    p_ResponseStatus := 1;
    p_RowCount := 0;

    IF v_UserID  = -1 THEN
        p_Message := 'UserIDIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    IF v_Period = -1 THEN
        p_Message := 'PeriodIsNUll' ;
        p_ResponseStatus := -600 ;
        RETURN;
    END IF;

    SELECT COUNT(*) INTO v_temp FROM se_user WHERE Id = v_UserID;
    IF v_temp < 1 THEN
        p_Message := 'UserIsNotFound';
        p_ResponseStatus := -600;
        RETURN;
    END IF;

   BEGIN
     SELECT Emp.id
       INTO v_EmployeeID
       FROM se_user e
       left join hu_employee emp
         on emp.employee_code = e.employee_code
      WHERE e.id = v_UserID;
   EXCEPTION
     WHEN OTHERS THEN
       p_Message        := 'UserNotConfig';
       p_ResponseStatus := -600;
       RETURN;
   END;

    BEGIN
        SELECT p.start_date INTO v_STARTDATE FROM AT_PERIOD p WHERE Id = p_Period;
    EXCEPTION
        WHEN OTHERS THEN 
            p_Message := 'PeriodIDNotConfig';
            p_ResponseStatus := -600;
            RETURN;
    END;
    SELECT COUNT(*) INTO p_DayWork
    FROM at_time_timesheet_daily AT
    WHERE SUBSTR(AT.WORKINGDAY, 0, 6) = SUBSTR(v_STARTDATE, 0, 6)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE NOT IN ('OFF');
    SELECT COUNT(*) INTO p_DayNotWork
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID
        AND AT.SHIFT_CODE IN ('OFF');

    SELECT COUNT(*) INTO p_RowCount
    FROM at_time_timesheet_daily AT
    WHERE trunc(at.workingday) = trunc(v_STARTDATE)
        AND AT.Employee_Id = v_EmployeeID;
    OPEN P_CUR FOR 
        SELECT 
           		AT.ID,
           		he.EMPLOYEE_CODE ,
           		CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then he.FULLNAME_VN ELSE he.FULLNAME_EN  END FULLNAME_VN,
           		AT.EMPLOYEE_ID ,
           		CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then ht.NAME_VN ELSE ht.NAME_EN END TITLE_NAME,
           		CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then ho.NAME_VN ELSE ho.NAME_EN END ORG_NAME,
           		ho.ID  ORG_ID,
           		ap.ID  PERIOD_ID ,
           		NVL(ap.PERIOD_STANDARD,0) PERIOD_STANDARD ,
           		hsr.NAME  STAFF_RANK_NAME,
           		NVL(at.WORKING_X,0) WORKING_X ,
                NVL(at.WORKING_F,0) WORKING_F,
                NVL(at.WORKING_E,0) WORKING_E,
                NVL(at.WORKING_A,0) WORKING_A ,
                NVL(at.WORKING_H,0) WORKING_H,
                NVL(at.WORKING_D,0) WORKING_D,
                NVL(at.WORKING_C,0) WORKING_C,
                NVL(at.WORKING_T,0) WORKING_T,
                NVL(at.WORKING_Q,0) WORKING_Q,
                NVL(at.WORKING_N,0) WORKING_N,
                NVL(at.WORKING_P,0) WORKING_P,
                NVL(at.WORKING_L,0) WORKING_L,
                NVL(at.WORKING_R,0) WORKING_R,
                NVL(at.WORKING_S,0) WORKING_S,
                NVL(at.WORKING_B,0) WORKING_B,
                NVL(at.WORKING_K,0) WORKING_K,
                NVL(at.WORKING_J,0) WORKING_J,
                NVL(at.TOTAL_WORKING_XJ,0) TOTAL_WORKING_XJ,
                NVL(at.WORKING_TS,0) WORKING_TS,
                NVL(at.WORKING_O,0) WORKING_O,
                NVL(at.WORKING_V,0) WORKING_V,
                NVL(at.TOTAL_TS_V,0) TOTAL_TS_V,
                NVL(at.TOTAL_WORKING,0) TOTAL_WORKING,
                at.CREATED_BY ,
                at.CREATED_DATE ,
                at.CREATED_LOG,
                at.MODIFIED_BY ,
                at.MODIFIED_DATE ,
                at.MODIFIED_LOG 
        FROM AT_TIME_TIMESHEET_MONTHLY AT
        JOIN HU_EMPLOYEE he ON he.ID  = AT.EMPLOYEE_ID 
        LEFT JOIN HU_TITLE ht  ON ht.id = AT.TITLE_ID 
        LEFT JOIN HU_STAFF_RANK hsr  ON hsr.ID  = AT.STAFF_RANK_ID 
        LEFT JOIN HU_ORGANIZATION ho ON ho.ID  = AT.ORG_ID 
        JOIN AT_PERIOD ap  ON ap.ID  = AT.PERIOD_ID 
        WHERE  AT.PERIOD_ID  =  v_Period 
        AND AT.Employee_Id = v_EmployeeID;

    p_Message := 'IsSuccess';
    p_ResponseStatus := 1;
   -- DBMS_SQL.RETURN_RESULT(v_cursor);
  EXCEPTION
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
        p_ResponseStatus := -99;
  end;



 	PROCEDURE API_GET_Salary(
		p_Language IN nvarchar2,p_UserID         IN NUMBER,
                                                 p_Period         IN NUMBER,
                                                 P_CUR            OUT CURSOR_TYPE,
                                                 p_RowCount       OUT NUMBER,
                                                 p_Message        OUT NVARCHAR2,
                                                 p_ResponseStatus OUT NUMBER) as
    v_UserID     NUMBER(19, 0) := NVL(p_UserID, -1);
    v_Period     NUMBER(19, 0) := NVL(p_Period, -1);
    v_EmployeeID NUMBER(19, 0);
    v_DayWork    NUMBER(19, 0) := 0;
    v_DayNotWork NUMBER(10, 0) := 0;
    v_StartDate  date;
    v_temp       NUMBER(19, 0) := 0;
    v_username nvarchar2(50);
   	SSQL CLOB:= '';
  	SSELECT CLOB:= '';
 	SSELECT_NAME CLOB:='';
  begin
    p_ResponseStatus := 1;
    p_RowCount       := 0;

    IF v_UserID = -1 THEN
      p_Message        := 'UserIDIsNUll';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    IF v_Period = -1 THEN
      p_Message        := 'PeriodIsNUll';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE su.ID = v_UserID;
    IF v_temp < 1 THEN
      p_Message        := 'UserIsNotFound';
      p_ResponseStatus := -600;
      RETURN;
    END IF;

    BEGIN
      SELECT Emp.id,e.USERNAME 
        INTO v_EmployeeID,v_username
        FROM se_user e
        left join hu_employee emp
          on emp.employee_code = e.employee_code
       WHERE e.id = v_UserID
      AND rownum = 1
       ;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'UserNotConfig';
        p_ResponseStatus := -600;
        RETURN;
    END;

    BEGIN
      SELECT p.start_date
        INTO v_StartDate
        FROM AT_PERIOD p
       WHERE Id = p_Period;
    EXCEPTION
      WHEN OTHERS THEN
        p_Message        := 'PeriodIDNotConfig';
        p_ResponseStatus := -600;
        RETURN;
    END;
    SELECT COUNT(w.id)
      INTO p_RowCount
      FROM HU_Working W
      LEFT JOIN ot_other_list DT
        ON W.Decision_Type_Id = DT.Id
    --LEFT JOIN HU_JobPosition T   ON W.PositionID = T.I
      LEFT JOIN HU_Organization O
        ON W.Org_Id = O.Id
     WHERE W.Status_Id = 447
       AND w.employee_id = v_EmployeeID
       AND w.is_wage = -1
       AND w.effect_date = v_StartDate; -- tai sao lay =??
 
       FOR C IN (SELECT DISTINCT T.COL_NAME AS CODE, T.NAME_VN AS NAME FROM PA_LISTSALARIES T
                     INNER JOIN PA_SALARY_TYPE l ON L.ID = T.OBJ_SAL_ID WHERE l.IS_INCENTIVE = 0 AND T.COL_NAME IS NOT null ) LOOP
               if C.CODE = 'CL5' THEN
           SSELECT := SSELECT || ', NVL(' || c.code || ',0) as ' || c.code ||'';
        else 
           SSELECT := SSELECT || ', NVL(ROUND(' || c.code || ',3),0) as ' ||c.code ||''; 
        end if;

           SSELECT_NAME := SSELECT_NAME || ', N'''|| c.NAME ||''' as ' || c.code ||'';
       END LOOP;

    SSQL := 'SELECT e.EMPLOYEE_CODE AS EMPLOYEE_CODE, e.FULLNAME_VN AS FULLNAME_VN
            , o1.name_vn AS ORG_NAME, ti.name_vn AS POS_NAME ' ||
            SSELECT || CHR(10);
    SSQL := SSQL || ' FROM PA_PAYROLLSHEET_SUM A inner join HU_EMPLOYEE e on a.employee_id=e.id inner join at_period p on a.period_id= p.id inner join  hu_organization o1 on e.org_id = o1.id left join HU_TITLE TI
          ON E.TITLE_ID = TI.ID ' ||
            CHR(10) || ' WHERE A.period_id = :P_PERIOD_ID AND A.EMPLOYEE_ID = :P_EMPLOYEE 

						';
    OPEN P_CUR FOR SSQL USING p_Period, v_EmployeeID;
  
    p_Message        := 'IsSuccess';
    p_ResponseStatus := 1;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
      p_Message        := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
      p_ResponseStatus := -99;
  end;	


	PROCEDURE API_AT_SwipeMachine_List(
										p_Language IN nvarchar2,
										p_Rowcount       OUT NUMERIC,
                                        P_CUR            OUT CURSOR_TYPE,
                                        p_Message        OUT nvarchar2,
                                        p_ResponseStatus OUT NUMERIC) as
	 begin
	   OPEN P_CUR FOR
	     SELECT id ID,
	            t.terminal_code TERMINAL_CODE,
	            t.terminal_name TERMINAL_NAME,
	            t.address_place ADDRESS_PLACE,
	            t.terminal_ip TERMINAL_IP,
	            t.port PORT,
	            t.pass PASS,
	            t.note NOTE,
	            t.terminal_status TERMINAL_STATUS,
	            t.modified_date LAST_TIME_UPDATE
	       FROM at_terminals t;
	   --DBMS_SQL.RETURN_RESULT(v_cursor);
	   p_Message        := u'Success';
	   p_ResponseStatus := 1;
	 EXCEPTION
	   WHEN OTHERS THEN
	     p_Rowcount       := 0;
	     p_Message        := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	     p_ResponseStatus := -1;
	 end;                                                


	PROCEDURE API_Get_Profile
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_EmployeeID IN NUMBER,
	    p_FullName OUT NVARCHAR2,
	    p_UserName OUT NVARCHAR2,
	    p_Mobile OUT NVARCHAR2,
	    p_Address OUT NVARCHAR2,
	    p_Email OUT NVARCHAR2,
	    p_Avatar OUT NVARCHAR2,
	    p_DofB OUT NVARCHAR2,
	    p_Nationality OUT NVARCHAR2,
	    p_Nation OUT NVARCHAR2,
	    p_Title OUT NVARCHAR2,
	    p_IDCard OUT NVARCHAR2,
	    p_Gender OUT NVARCHAR2,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
	    v_EmpID NUMBER(19,0);
	    v_ImageID NUMBER(19,0);
	    v_EpmViewID NUMBER(19,0);
	    v_temp NUMBER(1, 0) := 0;
	BEGIN
	    p_FullName := ' ' ;
	    p_UserName := ' ' ;
	    p_Mobile := ' ' ;
	    p_Address := ' ' ;
	    p_Email := ' ' ;
	    p_Avatar := ' ' ;
	    p_DofB := 0 ;
	    p_Nationality := ' ' ;
	    p_Nation := ' ' ;
	    p_Title := ' ' ;
	    p_IDCard := ' ' ;
	    p_Gender := ' ' ;

	    IF ( v_UserID = -1 ) THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;

	    SELECT COUNT(ID) INTO v_temp FROM SE_USER su WHERE  ID = v_UserID AND su.ACTFLG = 'A';
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound' ;
	        p_ResponseStatus := -600 ;
	        RETURN;
	    END IF;

	    SELECT he.ID INTO v_EmpID FROM HU_EMPLOYEE he  JOIN SE_USER su ON su.EMPLOYEE_CODE = he.EMPLOYEE_CODE  
	   WHERE su.ID = v_UserID AND rownum = 1 ORDER BY he.EMPLOYEE_3B_ID  desc;

	    IF v_EmployeeID != -1 THEN
	        SELECT COUNT(ID) INTO v_EpmViewID FROM HU_Employee WHERE ID = v_EmployeeID;
	        IF v_EpmViewID < 1 THEN
	            p_Message := 'EmployeeNotFound';
	            p_ResponseStatus := -600;
	            RETURN;
	        END IF;

	        v_temp := 0;
	        --SELECT COUNT(ID) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID AND ID = v_EmployeeID;
	        --IF v_temp < 1 THEN
	        --    p_Message := 'YouNotManagerEmployee';
	        --    p_ResponseStatus := -600;
	        --    RETURN;
	       -- END IF;
	    END IF;

	    BEGIN
	        v_EmpID := NVL(v_EmpID, -1);
	        v_temp := 0;

	        SELECT COUNT(1) INTO v_temp FROM DUAL
	        WHERE ( NOT EXISTS ( SELECT ID 
	                            FROM HU_Employee 
	                             WHERE  ID = v_EmpID )
	                OR NOT EXISTS ( SELECT  EMPLOYEE_ID
	                     FROM HU_Employee_CV 
	                      WHERE  EMPLOYEE_ID = v_EmpID ) );
	        IF v_temp = 1 THEN
	            p_Message := 'NotFindEmployeeCV';
	            p_ResponseStatus := -600;
	            RETURN;
	        END IF;

	       begin
			        SELECT 
--			            TO_CHAR(NVL(E.BIRTH_DATE ,' ' ) , 'YYYY-MM-DD'),
                        nvl(to_char(E.BIRTH_DATE, 'YYYY-MM-DD'), ' '),
                        nvl(E.IMAGE,'NoImage.jpg') ,
			            E.WORK_EMAIL ,
			            NVL(E.MOBILE_PHONE, ' ') ,
			            E.PER_ADDRESS ,
			            E.ID_NO ,
			            E.PER_ADDRESS ,
			           CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then   C.NAME_VN ELSE C.NAME_EN END ,
                        CASE WHEN E.GENDER = 566 THEN 'F' ELSE 'M' END,
			            --O.CODE ,
			            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then  OL.NAME_VN  ELSE ol.NAME_EN END 
			        INTO 
			            p_DofB,
			            --v_ImageID,
                        P_Avatar,
			            p_Email,
			            p_Mobile,
			            p_Address,
			            p_IDCard,
			            p_Address,
			            p_Nationality,
			            p_Gender,
			            p_Nation -- native 
			        FROM HU_EMPLOYEE he 
			        	LEFT JOIN HU_EMPLOYEE_CV  E ON e.EMPLOYEE_ID  = he.id 
			            LEFT JOIN HU_NATION C   ON E.NATIONALITY = C.ID
			            LEFT JOIN OT_OTHER_LIST O   ON E.GENDER = O.ID		
			            LEFT JOIN OT_OTHER_LIST OL   ON E.NATIVE  = OL.ID
			        WHERE
			            he.ID = CASE WHEN ( v_EmployeeID != -1 ) THEN v_EmployeeID ELSE v_EmpID END
			           AND rownum = 1;
	        		 EXCEPTION
			    	WHEN OTHERS THEN
			        --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
			            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
			            p_ResponseStatus := -600;

	          END ;

	        SELECT 
	           CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then  E.FULLNAME_VN ELSE E.FULLNAME_EN END ,   
	           CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then T.NAME_VN  ELSE T.NAME_EN  END 
	        INTO 
	            p_FullName,  p_Title
	        FROM HU_Employee E
	        LEFT JOIN HU_Title T   ON E.TITLE_ID = T.ID 
	        WHERE  E.ID = CASE WHEN ( v_EmployeeID != -1 ) THEN v_EmployeeID ELSE v_EmpID END
	        AND rownum = 1
	        ;

	        SELECT su.USERNAME INTO p_UserName 
	        FROM SE_USER su WHERE su.ID = v_UserID AND rownum = 1;

	        IF ( v_ImageID = 0 ) THEN
	            v_ImageID := 828432 ;
	        END IF;
 
	        p_Message := 'IsSuccess';
	        p_ResponseStatus := 1;

	       EXCEPTION
	    	WHEN OTHERS THEN
	        --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
	            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	            p_ResponseStatus := -600;
	    END;

	   p_FullName := NVL(p_FullName, ' ') ;
	   p_UserName := NVL(p_UserName, ' ') ;
	   p_Mobile := NVL(p_Mobile, '0987606112 ') ;
	   p_Address := NVL(p_Address, ' ') ;
	   p_Email := NVL(p_Email, ' ') ;
	   p_Avatar := NVL(p_Avatar, ' ') ;
	   p_DofB := NVL(p_DofB, ' ') ;
	   p_Nationality := NVL(p_Nationality, ' ') ;
	   p_Nation := NVL(p_Nation, ' ') ;
	   p_Title := NVL(p_Title, ' ') ;
	   p_IDCard := NVL(p_IDCard, ' ') ;
	   p_Gender := NVL(p_Gender, ' ') ;
	  EXCEPTION
	    WHEN OTHERS THEN
	        --DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
	            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	            p_ResponseStatus := -600;
	END;


	PROCEDURE API_GetNotification
	(
		p_Language IN nvarchar2,
	  p_UserID IN NUMBER,
	  p_Page IN NUMBER,
	  p_PageSize IN NUMBER,
	  p_Cur OUT CURSOR_TYPE,
	  p_Rowcount OUT NUMBER,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
	AS
	   v_UserID NUMBER(19,0) := p_UserID;
	   v_Page NUMBER(10,0) := p_Page;
	   v_PageSize NUMBER(10,0) := p_PageSize;
	   v_temp NUMBER(19, 0) := 0;
	   v_EmployeeID NUMBER(19,0);

	BEGIN
	   v_UserID := NVL(v_UserID, -1) ;
	   v_Page := NVL(v_Page, 1) ;
	   v_PageSize := NVL(v_PageSize, 10) ;
	   p_Rowcount := 0 ;
	   BEGIN
	      SELECT ID INTO v_temp FROM SE_USER su WHERE  su.ID = v_UserID AND ACTFLG = 'A';
	      EXCEPTION WHEN NO_DATA_FOUND THEN v_temp := 0;
	   END;
	   IF v_temp < 1 THEN
	      p_Message := 'UserIsNotFound';
	      p_ResponseStatus := -600 ;
	      RETURN;
	   END IF;
	   BEGIN
	       SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
	       EXCEPTION WHEN NO_DATA_FOUND THEN v_EmployeeID := 0;
	   END;
	   IF ( v_EmployeeID < 1 ) THEN
	      p_Message := 'UserNotConfig';
	      p_ResponseStatus := -600 ;
	      RETURN;
	   END IF;

	   BEGIN
		  WITH screen_list
		  AS  
		  (
		  SELECT 	'DASHBOARD' AS Code, 			'Dashboard' AS Name,
					'REGISTER_LEAVE', 				'RegisterLeave',
					'REGISTER_OT', 					'RegisterOt',
					'APPROVE_LEAVE', 				'ApproveLeave',
					'APPROVE_OT', 					'ApproveOT',
					'STAFF', 						'Staff',
					'TIMESHEETS', 					'TimeSheets',
					'SALARY', 						'Salary',
					'REVIEW', 						'Review',
					'ADD_REGISTER_LEAVE', 			'AddRegisterLeave',
					'ADD_REGISTER_OT', 				'AddRegisterOT',
					'REGISTER_LATEINEARLYOUT', 		'RegisterLateInEarlyOut',
					'APPROVE_LATEINEARLYOUT', 		'ApproveLateInEarlyOut',
					'ADD_REGISTER_LATEINEARLYOUT', 	'AddRegisterLateInEarlyOut',
					'ADVANCED_FILTER_REGISTER', 	'AdvancedFilterRegister',
					'SALARY_WEBVIEW', 				'SalaryWebview',
					'TIME_SHEETS_WEBVIEW', 			'TimeSheetWebview',
					'PHONEBOOK', 					'Phonebook',
					'PHONEBOOK_DETAIL', 			'PhonebookDetail',
					'PHONEBOOK_SEARCH', 			'PhonebookSearch',
					'ORG_LIST', 					'OrgList',
					'NOTIFICATION', 				'Notification',
					'RECORDHR', 					'RecordHr',
					'RECORDHR_DETAIL', 				'RecordHrDetail',
					'PERSONAL_RELATIONS', 			'PersonalRelations',
					'WORKING_BEFORE', 				'WorkingBefore',
					'WORKING_NOW', 					'WorkingNow',
					'CONTRACT', 					'Contract',
					'TRAIN_OUT', 					'TrainOut'
			FROM dual
			)
		   
	      	SELECT COUNT(*) INTO p_Rowcount
	          FROM ( SELECT C.ID
	                 FROM 	SE_NOTIFICATION C 
	                 WHERE  C.TO_EMPLOYEE_ID = v_EmployeeID);
			/*
			 * 			 - STT,  
						 - BODY 
						 - BODY_STYLE 
						 - TIMECREATE 
						 - IS_READED 
						 - URL_IMAGE_URI 
						 - NAV_SCREEN
			 * */

	        OPEN  p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT 	ROWNUM AS STT, 
			            ID, 
			            Message Message_Body, 
			            Message Message_Body_Style,
			            TIME_CREATED, 
			            IS_READ, 
			            URL_IMAGE_URI,
			            TypeNotification, 
			            FROM_EMPLOYEE_ID, 
			            Status, 
			            From_Employee_Name ,
	            		SCREEN_CODE AS NAV_SCREEN -- cần lấy name thì left join screen_list 
	            FROM
	            (
	                SELECT 		C.ID ID  ,
	                            C.Message   ,
	                            nvl(to_char(C.CREATED_DATE, 'YYYY-MM-DD HH24:MI:SS'), ' ') TIME_CREATED ,
	                            'Receive' TypeNotification  ,
	                            H.ID FROM_EMPLOYEE_ID  ,
	                            CASE WHEN c.SEND_STATUS  = '03' THEN 1 ELSE 0 END IS_READ,
	                            C.SEND_Status Status ,
	                            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then H.FULLNAME_VN ELSE H.FULLNAME_EN  END From_Employee_Name  ,
	                             NVL(hec.Image,'NoImage.jpg') URL_IMAGE_URI ,
	                            C.SEND_LOG AS SCREEN_CODE 
                    FROM 		SE_NOTIFICATION C
                    LEFT JOIN 	HU_Employee H   ON H.ID =C.FROM_EMPLOYEE_ID 
                    LEFT JOIN 	HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = h.id 
                    WHERE  		C.TO_EMPLOYEE_ID = v_EmployeeID
                    --AND  		C.CREATED_DATE > (C.CREATED_DATE - 30) 
	                ORDER BY TIME_CREATED DESC
	            )
	        )
	            WHERE
	                STT > (V_PAGE - 1)* V_PAGESIZE AND STT < (V_PAGE * V_PAGESIZE + 1); 
	      p_Message := 'IsSuccess';
	      p_ResponseStatus := 1 ; 
	   END; 
	END;

	/*Lấy thông tin đăng ký nghỉ*/
	PROCEDURE API_Get_RegisterLeaveInfo
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Register OUT NUMBER,
	    p_Used OUT NUMBER,
        p_Reject OUT NUMBER,
	    p_AllRegister OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
	    v_EmployeeID NUMBER(19,0);
	BEGIN
	    p_Register := 0;
	    p_Used := 0;
        p_Reject :=0;
	    p_AllRegister := 0;

	    IF v_UserID = -1 THEN
	        p_Message := 'IncorectUserID';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
	    EXCEPTION WHEN NO_DATA_FOUND THEN v_EmployeeID := -1;
	    END;

	    IF v_EmployeeID = -1 THEN
	        p_Message := 'UserNotConfig';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) AS Register INTO p_Register 
	    FROM 	AT_PORTAL_REG apr 
	    WHERE 	apr.ID_EMPLOYEE = v_EmployeeID 
	    AND 	apr.STATUS IN ( 0,2,3) -- Đăng ký
		AND		apr.SVALUE = 'LEAVE';

	    SELECT COUNT(*) AS Used INTO p_Used
	    FROM 	AT_PORTAL_REG apr  --portal_register_leave 
	    WHERE 	apr.ID_EMPLOYEE = v_EmployeeID 
	    AND 	apr.SVALUE = 'LEAVE'
	    AND 	apr.Status = 1; -- Đã dùng (đã phê duyệt)

        SELECT COUNT(*) AS Reject INTO p_Reject
	    FROM 	AT_PORTAL_REG apr   
	    WHERE 	apr.ID_EMPLOYEE = v_EmployeeID 
	    AND 	apr.SVALUE = 'LEAVE'
	    AND 	apr.Status = -1; -- Từ chối

	    SELECT COUNT(*) AS All_Register INTO p_AllRegister
	    FROM 	AT_PORTAL_REG apr 
	    WHERE apr.ID_EMPLOYEE = v_EmployeeID -- Tất cả
		AND		apr.SVALUE = 'LEAVE';

	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1;

	EXCEPTION
	    WHEN OTHERS THEN 
	            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	            p_ResponseStatus := -600;
	END; 
	/*API_Get_Working*/
	PROCEDURE API_Get_Working
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_EmployeeID IN NUMBER,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    p_CUR OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
	    v_Page NUMBER(10,0) := NVL(p_Page, -1);
	    v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1); 
	    v_EmpID NUMBER(19,0);
	    v_EpmViewID NUMBER(19,0);
	    v_temp NUMBER(19, 0) := 0;
	BEGIN
	    p_Rowcount := 0;

	    IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;


	    SELECT ID INTO v_temp FROM SE_User WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT he.ID INTO v_EmpID FROM SE_USER su JOIN HU_EMPLOYEE he  ON he.EMPLOYEE_CODE  = su.EMPLOYEE_CODE WHERE su.ID = v_UserID;
	    EXCEPTION
	        WHEN OTHERS THEN 
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    IF v_EmployeeID != -1 THEN
	        BEGIN
	            SELECT ID INTO v_EpmViewID FROM HU_Employee WHERE ID = p_EmployeeID;
	        EXCEPTION
	            WHEN OTHERS THEN 
	                p_Message := 'EmployeeNotFound';
	                p_ResponseStatus := -600;
	                RETURN;
	        END; 
	    END IF;

	    SELECT COUNT(*) INTO p_Rowcount
	    FROM HU_WORKING W
	    WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

	    OPEN p_CUR FOR
	    SELECT *
	    FROM
	    (
	        SELECT ROWNUM STT, ID, DecisionTypeName, Title, 
	         TO_CHAR(SignDate, 'YYYY-MM-DD')	SignDate, 
	         TO_CHAR(EffectDate,'YYYY-MM-DD') EffectDate, 
	           TO_CHAR( ExpireDate,'YYYY-MM-DD') ExpireDate, SignName, SignTitleName, CompanyName
	        FROM
	        (
	            SELECT 
	                W.ID ID,
	                CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then '' || DT.NAME_VN || '' ELSE DT.NAME_EN  END DecisionTypeName,
	                CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then '' || T.NAME_VN || '' ELSE T.NAME_EN  END   Title,
	                W.SIGN_DATE SignDate,
	                W.EFFECT_DATE  EffectDate,
	                W.EXPIRE_DATE  ExpireDate,
	                NVL(W.SIGN_NAME , ' ') SignName,
	                NVL(W.SIGN_TITLE , ' ') SignTitleName, 
	                CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NVL(O.NAME_VN , ' ') ELSE NVL(O.NAME_EN,' ') END  CompanyName
	            FROM HU_Working W
	                LEFT JOIN HU_Title T ON W.TITLE_ID = T.ID
	                LEFT JOIN OT_OTHER_LIST DT   ON W.DECISION_TYPE_ID  = DT.ID
	                LEFT JOIN HU_Organization O   ON W.ORG_ID = O.ID
	            WHERE W.EMPLOYEE_ID = CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
	            ORDER BY W.ID DESC
	        ) 
	    )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1; 
	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;


	PROCEDURE API_Get_WorkingOld
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_EmployeeID IN NUMBER,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
		p_CUR OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS 
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
	    v_Page NUMBER(10,0) := NVL(p_Page, 1);
	    v_PageSize NUMBER(10,0) := NVL(p_PageSize, 10);
	    v_EmpID NUMBER(19,0);
	    v_EpmViewID NUMBER(19,0);
	    v_temp NUMBER(1, 0) := 0;
	    v_cursor SYS_REFCURSOR;
	BEGIN
	    p_Rowcount := 0;

	    IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(1) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT he.ID INTO v_EmpID FROM SE_USER su JOIN HU_EMPLOYEE he ON he.EMPLOYEE_CODE  = su.EMPLOYEE_CODE WHERE su.ID = v_UserID;
	    EXCEPTION
	        WHEN OTHERS THEN 
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    IF p_EmployeeID != -1 THEN
	        BEGIN
	            SELECT ID INTO v_EpmViewID FROM HU_Employee WHERE ID = p_EmployeeID;
	        EXCEPTION
	            WHEN OTHERS THEN 
	                p_Message := 'EmployeeNotFound';
	                p_ResponseStatus := -600;
	                RETURN;
	        END; 
	    END IF;

	    SELECT COUNT(*) INTO p_Rowcount
	    FROM HU_WORKING_BEFORE W JOIN HU_EMPLOYEE he ON he.ID  = w.EMPLOYEE_ID 
	    WHERE  he.ID =  CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

	    OPEN p_CUR FOR
	    SELECT *
	    FROM
	    (
	        SELECT ROWNUM STT, ID, Name, Telephone, Address, 
	        	TO_CHAR(JoinDate,'YYYY-MM-DD') JoinDate, 
	        	TO_CHAR(EndDate,'YYYY-MM-DD') EndDate, 
	        	Salary, TitleName, TerReason
	        FROM
	        (
	            SELECT 
	                W.ID ID,
	                W.COMPANY_NAME Name,
                    W.TELEPHONE Telephone,
	                W.COMPANY_ADDRESS Address,
	                W.JOIN_DATE JoinDate,
	                W.END_DATE  EndDate,
	                NVL(W.SALARY , 0) Salary,
	                NVL(W.TITLE_NAME , ' ') TitleName,
	                NVL(W.TER_REASON , ' ') TerReason
	            FROM HU_WORKING_BEFORE  W JOIN HU_EMPLOYEE he ON he.ID  = W.EMPLOYEE_ID 
	            WHERE  he.ID =  CASE WHEN p_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
	            ORDER BY W.ID DESC
	        ) 
	    )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1;
	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END; 
	/*END GET PROCEDURE*/
	/*=================================================================================================================*/ 
	PROCEDURE API_LOGGER_ERROR(p_ErrorCode      IN NVARCHAR2,
                                                 P_ErrorTitle     IN NVARCHAR2,
                                                 P_ErrorDetail    IN NVARCHAR2,
                                                 p_UserInfo       IN NVARCHAR2,
                                                 p_UserID         IN NUMBER,
                                                 p_Message        OUT NVARCHAR2,
                                                 p_ResponseStatus OUT NUMBER) AS
	  v_ErrorCode   NVARCHAR2(10) := NVL(p_ErrorCode, -1);
	  v_ErrorTitle  NVARCHAR2(50) := NVL(P_ErrorTitle, '-1');
	  v_ErrorDetail NVARCHAR2(1500) := NVL(P_ErrorDetail, '-1');
	  v_UserInfo    NVARCHAR2(500) := NVL(p_UserInfo, '-1');
	  v_UserID      NUMBER(19, 0) := NVL(p_UserID, -1);
	BEGIN
	  IF v_ErrorCode = -1 THEN
	    p_Message        := 'ErrorCodeIsNull';
	    p_ResponseStatus := -600;
	    RETURN;
	  END IF;

	  IF v_ErrorTitle = '-1' THEN
	    p_Message        := 'ErrorTitleIsNull';
	    p_ResponseStatus := -600;
	    RETURN;
	  END IF;

	  IF v_ErrorDetail = '-1' THEN
	    p_Message        := 'ErrorDetailIsNull';
	    p_ResponseStatus := -600;
	    RETURN;
	  END IF;

	  IF v_UserInfo = '-1' THEN
	    p_Message        := 'UserInfoIsNull';
	    p_ResponseStatus := -600;
	    RETURN;
	  END IF;

	  IF v_UserID = -1 THEN
	    p_Message        := 'UserIDIsNull';
	    p_ResponseStatus := -600;
	    RETURN;
	  END IF;

	  BEGIN
	    INSERT INTO LOGGER_ERROR_MOBILE
	      (I, C, N, DETAIL, USER_ID, USER_INFO)
	    SELECT 
	       NVL((SELECT max(I) FROM LOGGER_ERROR_MOBILE),0) + 1 ,
	       v_ErrorCode,
	       v_ErrorTitle,
	       v_ErrorDetail,
	       v_UserID,
	       v_UserInfo
	    FROM dual ;
	    COMMIT; 
	    p_Message        := 'IsSuccess';
	    p_ResponseStatus := 1;
	    RETURN;
	  EXCEPTION
	    WHEN OTHERS THEN
	      p_Message        := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	      p_ResponseStatus := -99;
	      ROLLBACK;
	      RETURN;
	  END; 
	EXCEPTION
	  WHEN OTHERS THEN
	    p_Message        := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	    p_ResponseStatus := -99;
	END;

	/* Save notification - cần test và view lại mục đích */
	PROCEDURE API_SaveNotification
	(
	  p_ScreenCode IN nvarchar2,
	  p_ViewerUserID IN NUMBER,
	  p_ActorUserID IN NUMBER,
	  p_EntityTypeID IN NUMBER,
	  p_EntityID IN NUMBER,
	  p_MessageNotification IN NVARCHAR2,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
	AS
	   v_DateNow DATE := SYSDATE;
	   v_ID NUMBER(19,0);
	BEGIN
	    BEGIN 
	       	 INSERT INTO SE_NOTIFICATION(ID, 
	                                    SVALUE, 
	                                    NVALUE, 
	                                    MESSAGE, 
	                                    SENT_DATE, 
	                                    CREATED_DATE, 
	                                    FROM_EMPLOYEE_ID, 
	                                    TO_EMPLOYEE_ID,
	                                    SEND_STATUS,
	                                    SEND_LOG 
	                                    ) 
	        SELECT 
	        		NVL((SELECT max(id) FROM SE_NOTIFICATION),0)+1  ID, 
	                p_EntityTypeID P_SVALUE,
	                p_EntityID P_NVALUE,
	                p_MessageNotification,
	                SYSDATE,
	                SYSDATE,
	                p_ActorUserID P_FROM_EMPLOYEE_ID,
	                p_ViewerUserID P_TO_EMPLOYEE_ID,
	                '00' P_SEND_STATUS ,
	                p_ScreenCode
	        FROM dual; 
	        p_Message := 'IsSuccess';
	        p_ResponseStatus := 1;
	    EXCEPTION
	        WHEN OTHERS THEN 
	            ROLLBACK;
	            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	            p_ResponseStatus := -99;
	            RETURN;
	    END;
	END;	

	/* Save notification - cần test và view lại mục đích */
	PROCEDURE API_SeenNotificationStatus
	(
	  p_UserID IN nvarchar2,
	  p_StringIds IN nvarchar2,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
	AS
	   v_DateNow DATE := SYSDATE;
	   v_ID nvarchar2(200) := NVL(p_StringIds,'');
	BEGIN
	    BEGIN 
		    if( v_ID <> '-1') THEN 
		    begin
			    UPDATE 	SE_NOTIFICATION 
			    SET	  	SEND_STATUS = '03' -- trạng thái đã xem
			    		-- read time
			    WHERE 	id IN (
			    		SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
		                            FROM (
		                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_ID, '[^,]+', 1, LEVEL) AS IVALUE
		                                FROM DUAL
		                                  CONNECT BY REGEXP_SUBSTR(v_ID, '[^,]+', 1, LEVEL) IS NOT NULL)
			    ); 
			   	COMMIT;
		    END;
		    ELSE
		    BEGIN 
			    -- cập nhật đã xem tất cả
			    UPDATE 	SE_NOTIFICATION 
			    SET	  	SEND_STATUS = '03' -- trạng thái đã xem
			    WHERE 	TO_EMPLOYEE_ID IN (SELECT he.ID FROM HU_EMPLOYEE he JOIN SE_USER su ON su.EMPLOYEE_CODE = he.EMPLOYEE_CODE WHERE su.ID = p_UserID )
			    ;
			 END;
		  END IF;
	        p_Message := 'IsSuccess';
	        p_ResponseStatus := 1;
	    EXCEPTION
	        WHEN OTHERS THEN 
	            ROLLBACK;
	            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	            p_ResponseStatus := -99;
	            RETURN;
	    END; 
	END;	 
	/*Cập nhật đã gửi notify theo list id*/
	PROCEDURE API_UpdateSentNotification
	(
		p_StringIds IN nvarchar2,
		p_Status IN nvarchar2,
		p_Message OUT nvarchar2,
	  	p_ResponseStatus OUT NUMBER
	)
	AS
		v_DateNow DATE := SYSDATE;
	   	v_ID nvarchar2(200) := NVL(p_StringIds,'0');
	   	v_Status nvarchar2(10):= nvl(p_Status,'02'); -- 00 chưa gửi, 01 gửi lỗi, 02 gửi thành công, 03 đã xem
	
	BEGIN 
	    UPDATE 	SE_NOTIFICATION 
	    SET	  	SEND_STATUS = v_Status,
	    		SEND_NUMBER  = NVL(SEND_NUMBER,0) + 1,
	    		SENT_DATE = v_DateNow 
	    WHERE 	id IN (
	    		SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
                            FROM (
                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_ID, '[^,]+', 1, LEVEL) AS IVALUE
                                FROM DUAL
                                  CONNECT BY REGEXP_SUBSTR(v_ID, '[^,]+', 1, LEVEL) IS NOT NULL)
	    ); 
	   COMMIT;
        p_Message := 'IsSuccess';
        p_ResponseStatus := 1;
    EXCEPTION
        WHEN OTHERS THEN 
            ROLLBACK;
            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
            p_ResponseStatus := -99;
            RETURN;
    END; 	
	
	/*Lấy ds message cho api push noti*/
	PROCEDURE API_GetWaitNotification 
	(
		p_Language IN nvarchar2,
		p_InputRegisterID IN NUMBER,
		p_InputRegisterType IN NVARCHAR2,
		p_UserID IN NUMBER, -- action từ user gửi -> cần xử lý lấy ds message của bên nhận
		p_Status IN NVARCHAR2,
		p_Page IN NUMBER,
		p_PageSize IN NUMBER,
		p_DeviceIds OUT NVARCHAR2,
		p_Cur OUT CURSOR_TYPE,
		p_Rowcount OUT NUMBER,
		p_Message OUT NVARCHAR2,
		p_ResponseStatus OUT NUMBER
	)
	AS
	   	v_UserID NUMBER(19,0) := p_UserID;
	   	v_Page NUMBER(10,0) := p_Page;
	   	v_PageSize NUMBER(10,0) := p_PageSize;
	   	v_temp NUMBER(19, 0) := 0;
	   	v_EmployeeID NUMBER(19,0); -- mã nhân viên người gửi 
	   	v_Status nvarchar2(20) := NVL(p_Status,'0');	
		v_InputRegisterID NUMBER(20,0) := NVL(p_InputRegisterID,0);
		v_InputRegisterType NVARCHAR2(20) := NVL(p_InputRegisterType,' ');
		v_CountExists NUMBER(10,0) := 0;
	 	v_NotiContent nvarchar2(200) := '';
	BEGIN
	   v_UserID := NVL(v_UserID, -1) ;
	   v_Page := NVL(v_Page, 1) ;
	   v_PageSize := NVL(v_PageSize, 10) ;
	   p_Rowcount := 0 ;
	   BEGIN
	      SELECT ID INTO v_temp FROM SE_USER su WHERE  su.ID = v_UserID AND ACTFLG = 'A';
	      EXCEPTION WHEN NO_DATA_FOUND THEN v_temp := 0;
	   END;
	   IF v_temp < 1 THEN
	      p_Message := 'UserIsNotFound';
	      p_ResponseStatus := -600 ;
	      RETURN;
	   END IF;
	   
	  BEGIN
	       SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
	       EXCEPTION WHEN NO_DATA_FOUND THEN v_EmployeeID := 0;
	   END;
	   IF ( v_EmployeeID < 1 ) THEN
	      p_Message := 'UserNotConfig';
	      p_ResponseStatus := -600 ;
	      RETURN;
	   END IF;

	  -- v_InputRegisterID = ID đăng ký bảng AT_PORTAL_REG 
	  -- insert noti nếu chưa có
	  SELECT count(id) INTO v_CountExists  FROM SE_NOTIFICATION sn WHERE sn.NVALUE = v_InputRegisterID AND sn.FROM_EMPLOYEE_ID = v_EmployeeID AND SVALUE = 1; 
	  IF v_CountExists = 0  THEN 
	  		-- case theo v_InputRegisterType
			INSERT INTO SE_NOTIFICATION(ID, 
	                                    SVALUE, 
	                                    NVALUE, 
	                                    MESSAGE, 
	                                    SENT_DATE, 
	                                    CREATED_DATE, 
	                                    FROM_EMPLOYEE_ID, 
	                                    TO_EMPLOYEE_ID,
	                                    SEND_STATUS,
	                                    SEND_LOG) 
	        SELECT 
	        		NVL((SELECT max(id) FROM SE_NOTIFICATION),0)+1  ID, 
	                1 P_SVALUE, -- type id từ đăng ký
	                v_InputRegisterID P_NVALUE,
	                CASE 	WHEN SVALUE = 'WLEO' THEN he.FULLNAME_VN || u' \0111\00e3 \0111\0103ng k\00fd ' || lower(NVL(wleoType.Name,u'\0111i mu\1ed9n-v\1ec1 s\1edbm')) || CASE WHEN to_char(r.FROM_DATE,'dd/MM')=to_char(r.to_date,'dd/MM') THEN u' ng\00e0y ' || to_char(r.from_date,'dd/MM')   ELSE u' t\1eeb ng\00e0y ' || to_char(r.FROM_DATE,'dd/MM') || u' \0111\1ebfn ' || to_char(r.to_date,'dd/MM') END  
	                		WHEN SVALUE = 'OVERTIME' THEN he.FULLNAME_VN ||u' \0111\00e3 \0111\0103ng k\00fd l\00e0m th\00eam'  							|| CASE WHEN to_char(r.FROM_DATE,'dd/MM')=to_char(r.to_date,'dd/MM') THEN u' ng\00e0y ' || to_char(r.from_date,'dd/MM')   ELSE u' t\1eeb ng\00e0y ' || to_char(r.FROM_DATE,'dd/MM') || u' \0111\1ebfn ' || to_char(r.to_date,'dd/MM') END  
	                		WHEN SVALUE = 'LEAVE' THEN he.FULLNAME_VN ||u' \0111\00e3 \0111\0103ng k\00fd ' || lower(NVL(leaveType.Name,u'ngh\1ec9')) 			|| CASE WHEN to_char(r.FROM_DATE,'dd/MM')=to_char(r.to_date,'dd/MM') THEN u' ng\00e0y ' || to_char(r.from_date,'dd/MM')   ELSE u' t\1eeb ng\00e0y ' || to_char(r.FROM_DATE,'dd/MM') || u' \0111\1ebfn ' || to_char(r.to_date,'dd/MM') END  
	                		ELSE u''
	               	END
	                ,
	                SYSDATE,
	                SYSDATE,
	                r.ID_EMPLOYEE  ,
	                apr.ID_EMPLOYEE  P_TO_EMPLOYEE_ID,
	                '00' P_SEND_STATUS ,
	                CASE 	WHEN SVALUE = 'WLEO' 		THEN 'APPROVE_LATEINEARLYOUT'
	                		WHEN SVALUE = 'OVERTIME' 	THEN  'APPROVE_OT' 
	                		WHEN SVALUE = 'LEAVE' 		THEN 'APPROVE_LEAVE'
	                		ELSE ''
	               	END
	        FROM 	AT_PORTAL_APP apr
	        JOIN 	AT_PORTAL_REG r ON r.ID  = apr.REGISTER_ID  
	        JOIN 	HU_EMPLOYEE he  ON he.id = r.ID_EMPLOYEE 
	        Left join (SELECT  ID,  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then  ol.NAME_VN ELSE ol.NAME_EN end  AS NAME
		                                    FROM 	OT_OTHER_LIST ol 
		                                    WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
		                                    AND 	ACTFLG  = 'A'
				) otType on R.ID_SIGN = otType.ID
			LEFT JOIN (
		                    			SELECT  p.ID ID,
				                            	CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then p.NAME ELSE NVL(F.NAME_EN,'')||'/'|| NVL(F2.NAME_EN,'') END  Name
				                        FROM AT_TIME_MANUAL p
				                        LEFT JOIN AT_FML F ON F.ID = p.MORNING_ID
				                        LEFT JOIN AT_FML F2 ON F2.ID = p.AFTERNOON_ID
				                        WHERE p.ACTFLG = 'A'
				                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
				                        --AND (p.MORNING_ID = p.AFTERNOON_ID)
				                        ORDER BY p.NAME DESC
				) leaveType on R.Id_sign = leaveType.Id
			LEFT JOIN (
                                SELECT  ID, atm.CODE , 
                                		CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then atm.NAME  
                                			ELSE  CASE WHEN atm.CODE='RDT' THEN N'Late in' ELSE N'Early out' END 
                                		END NAME 
                                FROM 	AT_TIME_MANUAL atm  
                                WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' )
				) wleoType on r.ID_SIGN = wleoType.Id
	        WHERE 	REGISTER_ID = v_InputRegisterID
	        AND 	apr.APPROVE_STATUS  = 1 
	        ;
	        COMMIT; 
	  END IF;
	  
	   
	   BEGIN
		   --ds màn hình điều hướng
		  WITH screen_list
		  AS  
		  (
			  SELECT 	'DASHBOARD' AS Code, 			'Dashboard' AS Name,
						'REGISTER_LEAVE', 				'RegisterLeave',
						'REGISTER_OT', 					'RegisterOt',
						'APPROVE_LEAVE', 				'ApproveLeave',
						'APPROVE_OT', 					'ApproveOT',
						'STAFF', 						'Staff',
						'TIMESHEETS', 					'TimeSheets',
						'SALARY', 						'Salary',
						'REVIEW', 						'Review',
						'ADD_REGISTER_LEAVE', 			'AddRegisterLeave',
						'ADD_REGISTER_OT', 				'AddRegisterOT',
						'REGISTER_LATEINEARLYOUT', 		'RegisterLateInEarlyOut',
						'APPROVE_LATEINEARLYOUT', 		'ApproveLateInEarlyOut',
						'ADD_REGISTER_LATEINEARLYOUT', 	'AddRegisterLateInEarlyOut',
						'ADVANCED_FILTER_REGISTER', 	'AdvancedFilterRegister',
						'SALARY_WEBVIEW', 				'SalaryWebview',
						'TIME_SHEETS_WEBVIEW', 			'TimeSheetWebview',
						'PHONEBOOK', 					'Phonebook',
						'PHONEBOOK_DETAIL', 			'PhonebookDetail',
						'PHONEBOOK_SEARCH', 			'PhonebookSearch',
						'ORG_LIST', 					'OrgList',
						'NOTIFICATION', 				'Notification',
						'RECORDHR', 					'RecordHr',
						'RECORDHR_DETAIL', 				'RecordHrDetail',
						'PERSONAL_RELATIONS', 			'PersonalRelations',
						'WORKING_BEFORE', 				'WorkingBefore',
						'WORKING_NOW', 					'WorkingNow',
						'CONTRACT', 					'Contract',
						'TRAIN_OUT', 					'TrainOut'
				FROM dual
			)
		   
	      	SELECT COUNT(*) INTO p_Rowcount
	          FROM ( SELECT sn.ID
	                 FROM 	SE_NOTIFICATION sn
	                 JOIN 	HU_EMPLOYEE he2 ON he2.id = sn.TO_EMPLOYEE_ID 
	  				 JOIN 	SE_USER userReceive ON userReceive.EMPLOYEE_CODE  = he2.EMPLOYEE_CODE  
		  			 WHERE 	sn.FROM_EMPLOYEE_ID  = 	v_EmployeeID 
		  			 AND 	sn.SEND_STATUS  = v_Status 
	                 ); 
			p_Rowcount:= NVL(p_Rowcount,0) ;
			
	        OPEN  p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT 	ROWNUM AS STT,  
			            ID, 
			            NVL(Message,'') Message_Title,
			            NVL(Message,'') || u' t\1eeb ' || From_Employee_Name  Message_Body, 
			            NVL(Message,'') Message_Body_Style,
			            TIME_CREATED, 
			            IS_READ, 
			            URL_IMAGE_URI,
			            TypeNotification, 
			            FROM_EMPLOYEE_ID, 
			            Status, 
			            From_Employee_Name ,
	            		SCREEN_CODE AS NAV_SCREEN -- cần lấy name thì left join screen_list 
	            		,Device_Ids
	            FROM
	            (
	                SELECT 		C.ID ID  ,
	                            C.Message   ,
	                            nvl(to_char(C.CREATED_DATE, 'YYYY-MM-DD HH24:MI:SS'), ' ') TIME_CREATED ,
	                            'Receive' TypeNotification  ,
	                            he.ID FROM_EMPLOYEE_ID  ,
	                            CASE WHEN c.SEND_STATUS  = '03' THEN 1 ELSE 0 END IS_READ,
	                            C.SEND_Status Status ,
	                            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then he.FULLNAME_VN ELSE he.FULLNAME_EN END From_Employee_Name  ,
	                             NVL(hec2.Image,'NoImage.jpg') URL_IMAGE_URI ,
	                            C.SEND_LOG AS SCREEN_CODE ,
	                            logon.Device_Ids 
                    FROM 		SE_NOTIFICATION C
	                JOIN 		HU_EMPLOYEE he2 ON he2.id = C.TO_EMPLOYEE_ID 
	  				JOIN 		SE_USER userReceive ON userReceive.EMPLOYEE_CODE  = he2.EMPLOYEE_CODE  
	  				LEFT JOIN 	HU_EMPLOYEE_CV hec2 ON hec2.EMPLOYEE_ID  = he2.ID 
	  				JOIN 		HU_EMPLOYEE he ON he.id = c.FROM_EMPLOYEE_ID 
	  				LEFT JOIN 	(
	  							SELECT 	LISTAGG(CAST (su.firebase_client_id AS varchar2(200)),',') WITHIN GROUP(ORDER BY su.id )  Device_Ids,
	  									su.USERID 
	  							FROM 	SE_USERLOGIN su 
	  							WHERE 	su.ACTFLG  = 'A'
	  							GROUP BY USERID,firebase_client_id 
	  				) logon ON  logon.USERID = userReceive.ID 
		  			WHERE 		C.FROM_EMPLOYEE_ID  = 	v_EmployeeID 
		  			AND 		C.SEND_STATUS  = v_Status  
		  			AND 		(v_InputRegisterID = C.NVALUE OR v_InputRegisterID = 0 )
	                ORDER BY TIME_CREATED DESC
	            )
	        )
	            WHERE --STT <= 2 ;
	                STT > (V_PAGE - 1)* V_PAGESIZE AND STT < (V_PAGE * V_PAGESIZE + 1); 
	      p_Message := 'IsSuccess';
	      p_ResponseStatus := 1 ; 
	   END; 
    EXCEPTION
	        WHEN OTHERS THEN 
	            ROLLBACK;
	            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	            p_ResponseStatus := -99;
	            RETURN;
	END;
 
 	/*Phê duyệt đăng ký OT - check sơ lược và lấy thông tin sẵn sàng cho phê duyệt*/
	PROCEDURE API_APPROVEREGISTEROT
	( 
		p_Language IN nvarchar2,
	  p_UserID IN NUMBER,
	  p_RegisterID IN NUMBER,
	  p_Comment IN NVARCHAR2,
	  P_CUR       OUT CURSOR_TYPE,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
	AS
	   v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	   v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
	   v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
	   v_EmployeeID NUMBER(19,0);
	   v_UserRegisterID NUMBER(19,0);
	   v_StatusNow NUMBER(19,0);
	   v_ManagerID NUMBER(19,0);
	   v_I NUMBER(19,0);
	    v_cursor SYS_REFCURSOR;
	   v_temp NUMBER(19, 0) := 0;
	   v_NotiContent nvarchar2(200) := '';
	BEGIN
	    p_ResponseStatus := 1;

	    IF v_UserID = -1 THEN
	        p_Message := 'UserIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_RegisterID = -1 THEN
	        p_Message := 'RegisterIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_Comment = '-1' THEN
	        p_Message := 'CommentIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER U
	    left join HU_EMPLOYEE HU on u.EMPLOYEE_CODE= hu.employee_code
	    WHERE U.id = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserNotConfig';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM AT_REGISTER_PORTAL arp WHERE ID = v_RegisterID;
	    IF v_temp < 1 THEN
	        p_Message := 'RegisterIDIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	    ;

	    SELECT re.ID_EMPLOYEE, re.STATUS  INTO v_UserRegisterID, v_StatusNow
	    FROM 	AT_PORTAL_REG re --ON re.PARENT_ID  = arp.ID 
	    left join AT_PORTAL_APP ap on ap.id_reggroup= re.ID_REGGROUP   AND re.ID  = ap.REGISTER_ID  
	    WHERE re.PARENT_ID = v_RegisterID 
	   	AND	 AP.ID_EMPLOYEE = v_EmployeeID
	    AND  rownum = 1 
	   	 ;
	    
	   	SELECT COUNT(*) INTO v_temp 
	   	FROM 	AT_PORTAL_REG R
	    left join AT_PORTAL_APP AP on AP.ID_REGGROUP= R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID  
	    WHERE 	AP.ID_EMPLOYEE = v_EmployeeID 
	    AND 	r.PARENT_ID  = v_RegisterID
	    ;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependent';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
	
	   	-- check lại với trường hợp nhiều cấp phê duyệt
	    SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmployeeID 
	    AND ID = v_UserRegisterID;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependentEmployee';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_StatusNow <= 1   THEN
	        BEGIN 
	            SELECT 	apa.ID_EMPLOYEE, apa.ID 
	            		,he.FULLNAME_VN  || u' \0111\00e3 ph\00ea duy\1ec7t \0111\0103ng k\00fd l\00e0m th\00eam' -- || NVL(ApiType.name ,'làm thêm')
			            	|| 
                			CASE WHEN TO_CHAR(r.FROM_DATE,'dd/MM')=TO_CHAR(r.TO_DATE,'dd/MM') THEN u' ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM')
                				 ELSE u' t\1eeb ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM') || u' \0111\1ebfn ' || TO_CHAR(r.TO_DATE,'dd/MM') 
                			END 
                			|| u' c\1ee7a b\1ea1n.'
	            INTO 	v_ManagerID, v_I , v_NotiContent
	            FROM 	AT_PORTAL_APP apa  
	            JOIN 	AT_PORTAL_REG r ON r.ID  = apa.REGISTER_ID  AND PARENT_ID  = v_RegisterID 
	            LEFT JOIN HU_EMPLOYEE he  ON he.id = apa.ID_EMPLOYEE  
	            Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM 	OT_OTHER_LIST ool 
                                    WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND 	ACTFLG  = 'A') apiType on R.ID_SIGN = apiType.ID
	            WHERE 	r.PARENT_ID = v_RegisterID
	            AND 	apa.ID_EMPLOYEE = v_employeeID 
	            AND 	rownum = 1 
	             ;
	            p_Message := 'IsSuccess';

	            API_SaveNotification('APPROVE_OT',v_UserRegisterID,v_ManagerID, 4, v_I, v_NotiContent, p_Message, p_ResponseStatus);
	            COMMIT;

	           	IF p_ResponseStatus = -99 THEN
	           		p_Message := 'IsSuccess|NotifyException';
	           	END IF;

	            OPEN  P_CUR FOR
	                SELECT DISTINCT 
	                    ARP.ID ID,
	                    arp.ID_REGGROUP  , 
	                    v_Comment AS Remark, 
                        apiType.Name TypeName,
                        arp.STATUS_ID  status ,
                        LISTID
	                FROM AT_REGISTER_PORTAL arp 
	                JOIN	(
	                		SELECT 	R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE,R.CREATED_DATE ,R.HOURCOUNT,
	                				LISTAGG( R.ID ,',') WITHIN GROUP (ORDER BY ID) AS LISTID  
	                		FROM 	AT_PORTAL_REG R
	                		WHERE 	PARENT_ID  = v_RegisterID 
	                		GROUP BY R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE  ,R.CREATED_DATE ,R.HOURCOUNT
	                )R ON R.PARENT_ID  = arp.ID 
	                     LEFT JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
                         Left join (SELECT  ID,  NAME_VN  AS NAME
                                    FROM 	OT_OTHER_LIST ool 
                                    WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND 	ACTFLG  = 'A') apiType on R.ID_SIGN = apiType.ID
	                WHERE R.PARENT_ID = v_RegisterID
	                AND arp.STATUS_ID  = 1 
	                ;
				p_Message := 'RegisterIdIsReady';
	        	p_ResponseStatus := 1;	
	          -- DBMS_SQL.RETURN_RESULT(v_CURSOR);
	        EXCEPTION
	            WHEN OTHERS THEN 
	                ROLLBACK;
	        END;
	    ELSE
	    	  OPEN  P_CUR FOR
	                SELECT DISTINCT 
		                    ARP.ID ID,
		                    arp.ID_REGGROUP    , 
		                    v_Comment AS Remark ,
	                        arp.STATUS_ID  status ,
	                        LISTID
	                FROM AT_REGISTER_PORTAL arp 
	                JOIN	(
	                		SELECT 	R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE,R.CREATED_DATE ,R.HOURCOUNT,
	                				LISTAGG( R.ID ,',') WITHIN GROUP (ORDER BY ID) AS LISTID  
	                		FROM 	AT_PORTAL_REG R
	                		WHERE 	PARENT_ID  = v_RegisterID 
	                		GROUP BY R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE  ,R.CREATED_DATE ,R.HOURCOUNT
	                )R ON R.PARENT_ID  = arp.ID 
                    LEFT JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
                    Left join (SELECT  ID,  NAME_VN  AS NAME
                                FROM 	OT_OTHER_LIST ool 
                                WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                AND 	ACTFLG  = 'A'
					) apiType on R.ID_SIGN = apiType.ID
	                WHERE arp.ID = v_RegisterID
	               
	                ;
			 p_Message := 'RegisterIdIsApproved';
	         p_ResponseStatus := -99;	
	    END IF;
	EXCEPTION
	    WHEN OTHERS THEN 
	        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;

	/*Từ chối đăng ký OT từ quản lý*/
	PROCEDURE API_CancelRegisterOT
	(
		p_Language IN nvarchar2,
	  p_UserID IN NUMBER,
	  p_RegisterID IN NUMBER,
	  p_Comment IN NVARCHAR2,
	  P_CUR       OUT CURSOR_TYPE,
	  p_Message OUT NVARCHAR2,
	  p_ResponseStatus OUT NUMBER
	)
	AS
	   v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	   v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
	   v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
	   v_EmployeeID NUMBER(19,0);
	   v_UserRegisterID NUMBER(19,0);
	   v_StatusNow NUMBER(19,0);
	   v_ManagerID NUMBER(19,0);
	   v_I NUMBER(19,0);
	   v_temp NUMBER(19, 0) := 0;
	  v_TenNguoiPheDuyet nvarchar2(100):= '';
	 v_NotiContent nvarchar2(200):= '';
	 v_id_employee_to_noty number(19,0);
	
	BEGIN
	    p_ResponseStatus := 1;

	    IF v_UserID = -1 THEN
	        p_Message := 'UserIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_RegisterID = -1 THEN
	        p_Message := 'RegisterIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_Comment = '-1' THEN
	        p_Message := 'CommentIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER U
	    left join HU_EMPLOYEE HU on u.EMPLOYEE_CODE= hu.employee_code
	    WHERE U.id = v_UserID 
	       AND 		(( hu.WORK_STATUS  = 257  AND SYSDATE  < hu.TER_EFFECT_DATE )  OR (hu.WORK_STATUS <> 257)  )
	    AND rownum = 1
	    ;

	    IF v_temp < 1 THEN
	        p_Message := 'UserNotConfig';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	   SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_REG WHERE PARENT_ID = v_RegisterID;
	    IF v_temp < 1 THEN
	        p_Message := 'RegisterIDIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	   SELECT 	he.ID, he.FULLNAME_VN INTO v_EmployeeID ,v_TenNguoiPheDuyet
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	    ;

	    SELECT r.ID_EMPLOYEE, Status INTO v_UserRegisterID, v_StatusNow
	    FROM AT_PORTAL_REG r
	    left join AT_PORTAL_APP ap on ap.id_reggroup= r.ID_REGGROUP AND r.ID  = ap.REGISTER_ID 
	    WHERE r.PARENT_ID = v_RegisterID
	    AND ap.ID_EMPLOYEE  = v_EmployeeID
	    AND ROWnum = 1 
	    ;

	    SELECT 	COUNT(*) INTO v_temp 
	    FROM 	AT_PORTAL_REG R
	    left join AT_PORTAL_APP AP on AP.ID_REGGROUP= R.ID_REGGROUP  AND r.ID  = ap.REGISTER_ID 
	    WHERE AP.ID_EMPLOYEE = v_EmployeeID
	   	AND 	r.PARENT_ID  = v_RegisterID 
	    ;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependent';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

		/* Cần check lại -> quản lý đã được gán theo quy trình phê duyệt
	   SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmployeeID 
	    AND ID = v_UserRegisterID;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependentEmployee';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
	    */

	    IF v_StatusNow <= 1 THEN
	        BEGIN
	            UPDATE AT_PORTAL_APP SET APPROVE_STATUS = 3 , NOTES = v_Comment, APPROVE_DATE  = SYSDATE 
	            WHERE ID_EMPLOYEE  = v_EmployeeID AND ID_REGGROUP in
	            (select ID_REGGROUP from AT_PORTAL_REG where PARENT_ID = v_RegisterID);

	            update AT_PORTAL_REG set  status = 3 
	            WHERE PARENT_ID = v_RegisterID;
	           
	           UPDATE AT_REGISTER_PORTAL 
	           SET 	status_id = 3
	           WHERE id = v_RegisterID;

	            SELECT 	ap.ID_EMPLOYEE , r.Id , 
                		v_TenNguoiPheDuyet || u' \0111\00e3 t\1eeb ch\1ed1i \0111\0103ng k\00fd l\00e0m th\00eam'--|| NVL(ApiType.name,u'l\00e0m th\00eam') 
                			|| 
                			CASE WHEN TO_CHAR(r.FROM_DATE,'dd/MM')=TO_CHAR(r.TO_DATE,'dd/MM') THEN u' ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM')
                				 ELSE u' t\1eeb ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM') || u' \0111\1ebfn ' || TO_CHAR(r.TO_DATE,'dd/MM') 
                			END 
                			|| u' c\1ee7a b\1ea1n.'
                			,r.ID_EMPLOYEE 
                INTO 	v_ManagerID, v_I, v_NotiContent , v_id_employee_to_noty 
	           FROM AT_PORTAL_REG r
	            left join AT_PORTAL_APP ap on ap.ID_reggroup= r.id_reggroup  AND r.ID  = ap.REGISTER_ID 
	            Left join (SELECT  ID,  NAME_VN  AS NAME
		                                    FROM 	OT_OTHER_LIST ool 
		                                    WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
		                                    AND 	ACTFLG  = 'A') apiType on R.ID_SIGN = apiType.ID
	            WHERE r.PARENT_ID = v_RegisterID
	           AND  ap.ID_EMPLOYEE  = v_EmployeeID
	           AND rownum = 1 
	            ;
	            API_SaveNotification('REGISTER_OT', v_id_employee_to_noty ,v_ManagerID, 4, v_I, v_NotiContent, p_Message, p_ResponseStatus);
	            COMMIT;

	           	OPEN p_cur FOR
                    SELECT
                        1 STT,
                        arp.Id ID,
                        arp.from_hour FromHour,
                        arp.to_hour ToHour,
                        R.* 
                    FROM AT_REGISTER_PORTAL arp 
                    JOIN (
		                    SELECT  R.Parent_id,
		                    		TO_CHAR(r.from_date , 'YYYY-MM-DD') LeaveFrom,
			                        TO_CHAR(r.to_date, 'YYYY-MM-DD') LeaveTo,
			                        '' SymbolName,
			                        NVL(R.Hourcount, 0) TotalHour,
			                        NVL(R.Note_AT, ' ') Remark,
			                        R.Status Status,
			                        CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.Fullname_Vn ELSE E.FULLNAME_EN END EmployeeName,
			                         TO_CHAR(r.created_date, 'YYYY-MM-DD HH24:MI:SS') CreateTime,
			                         R.Note Note,
			                         apiType.Name TypeName
		                    FROM at_portal_reg R
		                         --LEFT JOIN AT_Symbol S   ON R.SymbolId = S.I
		                         LEFT JOIN HU_Employee E   ON R.Id_Employee = E.Id
		                         Left join (SELECT  ID, CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then  NAME_VN ELSE NAME_EN END   AS NAME
		                                    FROM 	OT_OTHER_LIST ool 
		                                    WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
		                                    AND 	ACTFLG  = 'A') apiType on R.ID_SIGN = apiType.ID
		                    WHERE R.PARENT_ID = v_RegisterID
                   ) R ON R.PARENT_ID  = arp.id 
                   WHERE arp.id = v_RegisterID
                   ;
                    p_Message := 'RegisterIsCancelNow';
	        		p_ResponseStatus := 1;
	       
	        END;
	    ELSE
	         p_Message := 'RegisterIsCancel';
	        p_ResponseStatus := -99;
	    END IF;

	EXCEPTION
	    WHEN OTHERS THEN 
	        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;

	/*Lấy thông tin thống kê đăng ký OT*/
	PROCEDURE API_Get_RegisterOtInfo
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Register OUT NUMBER,
	    p_Used OUT NUMBER,
        p_Reject OUT NUMBER,
	    p_AllRegister OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
	    v_EmployeeID NUMBER(19,0);
	BEGIN
	    p_Register := 0;
	    p_Used := 0;
	    p_Reject := 0;
	    p_AllRegister := 0;

	    IF v_UserID = -1 THEN
	        p_Message := 'IncorectUserID';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	        ;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	        p_Message := 'UserNotConfig';
	        p_ResponseStatus := -600;
	        RETURN;
	    END;

	    SELECT COUNT(*) AS Register INTO p_Register 
	    FROM AT_PORTAL_REG
	    WHERE 	ID_EMPLOYEE = v_EmployeeID 
	    AND 	SVALUE  = 'OVERTIME'
	    AND 	Status IN (0, 2,3); -- Đăng ký

	    SELECT COUNT(*) AS Used INTO p_Used
	    FROM AT_PORTAL_REG 
	    WHERE ID_EMPLOYEE = v_EmployeeID
	    AND 	SVALUE  = 'OVERTIME' AND Status = 1; -- Đã dùng (đã phê duyệt)

        SELECT COUNT(*) AS Reject INTO p_Reject
	    FROM AT_PORTAL_REG 
	    WHERE ID_EMPLOYEE = v_EmployeeID
	    AND 	SVALUE  = 'OVERTIME' AND Status = -1; -- Đã dùng (đã phê duyệt)

	    SELECT COUNT(*) AS All_Register INTO p_AllRegister
	    FROM AT_PORTAL_REG 
	    WHERE ID_EMPLOYEE = v_EmployeeID
	    AND 	SVALUE  = 'OVERTIME'; -- Tất cả

	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1;

	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
	            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	            p_ResponseStatus := -600;
	END;

	/*Lấy thông tin thống kê ĐMVS*/
	PROCEDURE API_Get_RegisterWLEOInfo
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_Register OUT NUMBER,
	    p_Used OUT NUMBER,
        p_Reject OUT NUMBER,
	    p_AllRegister OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19, 0) := NVL(p_UserID, -1);
	    v_EmployeeID NUMBER(19,0);
	BEGIN
	    p_Register := 0;
	    p_Used := 0;
        p_Reject :=0;
	    p_AllRegister := 0;

	    IF v_UserID = -1 THEN
	        p_Message := 'IncorectUserID';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	        ;
	    EXCEPTION WHEN NO_DATA_FOUND THEN 
	        p_Message := 'UserNotConfig';
	        p_ResponseStatus := -600;
	        RETURN;
	    END;

	    SELECT 	COUNT(*) AS Register INTO p_Register 
	    FROM 	AT_PORTAL_REG
	    WHERE 	ID_EMPLOYEE = v_EmployeeID 
	    AND 	SVALUE  = 'WLEO'
	    AND 	Status IN (0, 2,3); -- Đăng ký

	    SELECT 	COUNT(*) AS Used INTO p_Used
	    FROM 	AT_PORTAL_REG 
	    WHERE 	ID_EMPLOYEE = v_EmployeeID
	    AND 	SVALUE  = 'WLEO' AND Status = 1; -- Đã dùng (đã phê duyệt)

        SELECT 	COUNT(*) AS Reject INTO p_Reject
	    FROM 	AT_PORTAL_REG 
	    WHERE 	ID_EMPLOYEE = v_EmployeeID
	    AND 	SVALUE  = 'WLEO' AND Status = -1; -- Đã dùng (đã phê duyệt)

	    SELECT 	COUNT(*) AS All_Register INTO p_AllRegister
	    FROM 	AT_PORTAL_REG 
	    WHERE 	ID_EMPLOYEE = v_EmployeeID
	    AND 	SVALUE  = 'WLEO'; -- Tất cả

	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1;

	EXCEPTION
	    WHEN OTHERS THEN
	        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' ||SQLERRM);
	            p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	            p_ResponseStatus := -600;
	END;

	/*Lấy thông tin đào tạo ngoài*/
	PROCEDURE API_Get_TrainOut
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_EmployeeID IN NUMBER,
	    p_Page IN NUMBER,
	    p_PageSize IN NUMBER,
	    P_CUR       OUT CURSOR_TYPE,
	    p_Rowcount OUT NUMBER,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_EmployeeID NUMBER(19,0) := NVL(p_EmployeeID, -1);
	    v_Page NUMBER(10,0) := NVL(p_Page, -1);
	    v_PageSize NUMBER(10,0) := NVL(p_PageSize, -1);
	    v_EmpID NUMBER(19,0);
	    v_EpmViewID NUMBER(19,0);
	    v_temp NUMBER(19, 0) := 0;
	    v_cursor SYS_REFCURSOR;
	BEGIN
	    p_Rowcount := 0;

	    IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	--    IF v_EmployeeID = -1 THEN
	--        p_Message := 'IsEmployeeIDNull';
	--        p_ResponseStatus := -600;
	--        RETURN;
	--    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT E.id INTO v_EmpID FROM SE_USER U
	        left join HU_EMPLOYEE e on e.employee_code= u.employee_code
	        WHERE U.id = v_UserID;
	    EXCEPTION
	        WHEN OTHERS THEN 
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    IF v_EmployeeID != -1 THEN
	        BEGIN
	            SELECT ID INTO v_EmpID FROM HU_Employee WHERE ID = p_EmployeeID;
	        EXCEPTION
	            WHEN OTHERS THEN 
	                p_Message := 'EmployeeNotFound';
	                p_ResponseStatus := -600;
	                RETURN;
	        END;

	        SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmpID 
	        AND ID = v_EmployeeID;
	        IF v_temp < 1 THEN
	            p_Message := 'YouNotManagerEmployee';
	            p_ResponseStatus := -600;
	            RETURN;
	        END IF;
	    END IF;

	    SELECT COUNT(*) INTO p_Rowcount
	    FROM HU_PRO_TRAIN_OUT_COMPANY W
	    WHERE  W.EMPLOYEE_ID =  CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END;

	    OPEN P_CUR FOR
	    SELECT *
	    FROM
	    (
	        SELECT 	ROWNUM STT, ID, FromMonth, ToMonth, Year, SchoolName, SpecializedTrain, Certificate, Result, 
	        		TO_CHAR(EffectiveDateFrom, 'YYYY-MM-DD') EffectiveDateFrom, 
	        		TO_CHAR(EffectiveDateTo, 'YYYY-MM-DD') EffectiveDateTo
	        FROM
	        (            
	                SELECT 
	                W.ID ID,
	                EFFECTIVE_DATE_FROM FromMonth,
	                EFFECTIVE_DATE_TO ToMonth,
	                W.YEAR_GRA Year,
	                W.NAME_SHOOLS SchoolName,
	                W.SPECIALIZED_TRAIN SpecializedTrain,
	                W.Certificate Certificate,
                    W.RESULT_TRAIN Result,
	                FROM_DATE EffectiveDateFrom,
	                TO_DATE EffectiveDateTo
	            FROM HU_PRO_TRAIN_OUT_COMPANY W
	            WHERE  W.EMPLOYEE_ID =  CASE WHEN v_EmployeeID != -1 THEN p_EmployeeID ELSE v_EmpID END
	            ORDER BY W.ID DESC
	        ) 
	    )WHERE STT > (v_Page - 1)* v_PageSize AND STT < (v_Page * v_PageSize + 1);

	    p_Message := 'IsSuccess';
	    p_ResponseStatus := 1;

	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;


	/*Trả về danh sách ID, thông tin cần cho phê duyệt WCF*/
	PROCEDURE API_ApproveRegisterLeave
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_RegisterID IN NUMBER, -- ID của bảng AT_REGISTER_PORTAL 
	    p_Comment IN NVARCHAR2,
	    p_Cur OUT CURSOR_TYPE,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
	    v_Comment NVARCHAR2(500) := NVL(p_Comment, '');
	    v_EmployeeID NUMBER(19,0);
	    v_UserRegisterID NUMBER(19,0);
	    v_StatusNow NUMBER(19,0);
	    v_ManagerID NUMBER(19,0);
	    v_I NUMBER(19,0);
	    v_temp NUMBER(19,0) := 0;
	    v_TenNguoiPheDuyet nvarchar2(100):='';
	    v_NotiContent nvarchar2(200) := '';
	BEGIN
	    p_ResponseStatus := 1;

	    IF v_UserID = -1 THEN
	        p_Message := 'UserIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_RegisterID = -1 THEN
	        p_Message := 'RegisterIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
		--check user tồn tại
	    SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'serIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	       SELECT 	he.ID, he.FULLNAME_VN INTO v_EmployeeID , v_TenNguoiPheDuyet 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
	    EXCEPTION
	        WHEN NO_DATA_FOUND THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    BEGIN
	        SELECT 	DISTINCT R.ID_EMPLOYEE , Status_ID INTO v_UserRegisterID, v_StatusNow 
	       	FROM 	AT_REGISTER_PORTAL arp 
	       	JOIN 	AT_PORTAL_REG R ON R.PARENT_ID  = arp.ID  
	        WHERE 	arp.ID = v_RegisterID;
	    EXCEPTION
	        WHEN OTHERS THEN 
	            p_Message := 'RegisterIDIsNotFound';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_APP apa WHERE ID_EMPLOYEE = v_EmployeeID;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependent';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	   	--Phần này có thể sai với các trường hợp phê duyệt thay thế, ng phê duyệt ko phải quản lý trực tiếp
	   	/*
	    SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmployeeID AND ID = v_UserRegisterID;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependentEmployee';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
			*/
	   	-- lấy danh sách ID của bảng AT_PORTAL_REG cần phê duyệt theo ID bảng AT_REGISTER_PORTAL 
	    IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
	        BEGIN

	            SELECT 	apa.ID_EMPLOYEE, apa.ID 
	            		,he.FULLNAME_VN  || u' \0111\00e3 ph\00ea duy\1ec7t \0111\0103ng k\00fd ' || NVL(ApiType.name ,u'ngh\1ec9')
			            	|| 
                			CASE WHEN TO_CHAR(r.FROM_DATE,'dd/MM')=TO_CHAR(r.TO_DATE,'dd/MM') THEN u' ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM')
                				 ELSE u' t\1eeb ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM') || u' \0111\1ebfn ' || TO_CHAR(r.TO_DATE,'dd/MM') 
                			END 
                			|| u' c\1ee7a b\1ea1n.'
	            INTO 	v_ManagerID, v_I , v_NotiContent
	            FROM 	AT_PORTAL_APP apa  
	            JOIN 	AT_PORTAL_REG r ON r.ID  = apa.REGISTER_ID  AND PARENT_ID  = v_RegisterID 
	            LEFT JOIN HU_EMPLOYEE he  ON he.id = apa.ID_EMPLOYEE  
	            LEFT JOIN (
							SELECT 
							    p.ID ID,
							    p.NAME Name
							FROM AT_TIME_MANUAL p
							LEFT JOIN AT_FML F ON F.ID = p.MORNING_ID
							LEFT JOIN AT_FML F2 ON F2.ID = p.AFTERNOON_ID
							WHERE p.ACTFLG = 'A'
							AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
							--AND (p.MORNING_ID = p.AFTERNOON_ID)
							ORDER BY p.NAME DESC
				) ApiType on R.Id_sign = ApiType.Id
	           	WHERE 	apa.ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_REGISTER_PORTAL apr2 WHERE id = v_RegisterID)
	            AND 	apa.ID_EMPLOYEE  = v_EmployeeID
	            AND 	rownum = 1 
	            ORDER BY approve_date DESC 
	            ; -- user có quyền duyệt

	            API_SaveNotification('REGISTER_LEAVE',v_UserRegisterID,v_ManagerID, 3, v_I, v_NotiContent , p_Message, p_ResponseStatus);
	            COMMIT;

	            OPEN p_Cur FOR 
	            	SELECT
		                    ROWNUM STT,
		                    arp.ID ID,  
		                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD' )  LeaveFrom,
		                    TO_CHAR(arp.TO_DATE , 'YYYY-MM-DD' ) LeaveTo,
		                    arp.FROM_HOUR FromHour,
		                    arp.TO_HOUR ToHour,
		                    '{' || S.NAME || '}' SymbolName,
		                    NVL(R.HOURCOUNT , 0) TotalHour , 
		                    v_Comment AS Remark ,
		                    arp.Status_iD  Status,
		                    CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE E.FULLNAME_EN  END EmployeeName,
		                    TO_CHAR(R.CREATED_DATE , 'YYYY-MM-DD HH24:MI:SS' ) CreateTime,
		                    arp.ID_REGGROUP ID_REGGROUP,
	                        ApiType.Name TypeName,
	                        arp.Note AS Note,
	                        R.LISTID 
	                FROM 	AT_REGISTER_PORTAL arp 
	                JOIN	(
	                		SELECT 	R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE,R.CREATED_DATE ,R.HOURCOUNT,
	                				LISTAGG( R.ID ,',') WITHIN GROUP (ORDER BY ID) AS LISTID  
	                		FROM 	AT_PORTAL_REG R
	                		WHERE 	PARENT_ID  = v_RegisterID 
	                		GROUP BY R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE  ,R.CREATED_DATE ,R.HOURCOUNT
	                )R ON R.PARENT_ID  = arp.ID 
					LEFT JOIN AT_TIME_MANUAL S   ON R.ID_SIGN = S.ID
					LEFT JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
					LEFT JOIN (
							SELECT 
							    p.ID ID,
							    '[' || p.CODE || '] ' || p.NAME Name
							FROM AT_TIME_MANUAL p
							LEFT JOIN AT_FML F ON F.ID = p.MORNING_ID
							LEFT JOIN AT_FML F2 ON F2.ID = p.AFTERNOON_ID
							WHERE p.ACTFLG = 'A'
							AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
							--AND (p.MORNING_ID = p.AFTERNOON_ID)
							ORDER BY p.NAME DESC
					) ApiType on R.Id_sign = ApiType.Id
	                WHERE arp.ID = v_RegisterID
	                AND 	arp.STATUS_ID  = 1 
				;
	        EXCEPTION
	            WHEN OTHERS THEN 
	                ROLLBACK;
	                p_Message := 'DatabaseError';
	                p_ResponseStatus := -99;
	                RETURN;
	        END;
	    ELSE
	    	 OPEN p_Cur FOR
	                SELECT
	                    	ROWNUM STT,
		                    arp.ID ID,  
		                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD' )  LeaveFrom,
		                    TO_CHAR(arp.TO_DATE , 'YYYY-MM-DD' ) LeaveTo,
		                    arp.FROM_HOUR FromHour,
		                    arp.TO_HOUR ToHour,
		                    '{' || S.NAME || '}' SymbolName,
		                    NVL(R.HOURCOUNT , 0) TotalHour , 
		                    v_Comment AS Remark ,
		                    arp.Status_iD  Status,
		                    CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE E.FULLNAME_EN END EmployeeName,
		                    TO_CHAR(R.CREATED_DATE , 'YYYY-MM-DD HH24:MI:SS' ) CreateTime,
		                    arp.ID_REGGROUP ID_REGGROUP,
	                        ApiType.Name TypeName,
	                        arp.Note AS Note,
	                        R.LISTID 
	                FROM AT_REGISTER_PORTAL arp 
	                JOIN	(
	                		SELECT 	R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE,R.CREATED_DATE ,R.HOURCOUNT,
	                				LISTAGG( R.ID ,',') WITHIN GROUP (ORDER BY ID) AS LISTID  
	                		FROM 	AT_PORTAL_REG R
	                		WHERE 	PARENT_ID  = v_RegisterID 
	                		AND 	R.STATUS = 1 
	                		GROUP BY R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE  ,R.CREATED_DATE ,R.HOURCOUNT
	                )R ON R.PARENT_ID  = arp.ID 
	                     LEFT JOIN AT_TIME_MANUAL S   ON R.ID_SIGN = S.ID
	                     LEFT JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
                         LEFT JOIN (SELECT 
                            p.ID ID,
                            '[' || p.CODE || '] ' || p.NAME Name
                        FROM AT_TIME_MANUAL p
                        LEFT JOIN AT_FML F
                            ON F.ID = p.MORNING_ID
                        LEFT JOIN AT_FML F2
                            ON F2.ID = p.AFTERNOON_ID
                        WHERE p.ACTFLG = 'A'
                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
                        --AND (p.MORNING_ID = p.AFTERNOON_ID)
                        ORDER BY p.NAME DESC) ApiType on R.Id_sign = ApiType.Id
	                WHERE arp.ID = v_RegisterID
	                AND 	arp.STATUS_ID  = 1 
	                ;
			
	    	 p_Message := 'RegisterIdIsApproved';
	         p_ResponseStatus := -600;	
	    END IF;

	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;

	/*Check và lấy thông tin phê duyệt ĐMVS*/
	PROCEDURE API_ApproveRegisterWLEO
	(
		p_Language IN nvarchar2,
	    p_UserID IN NUMBER,
	    p_RegisterID IN NUMBER,
	    p_Comment IN NVARCHAR2,
	    p_Cur OUT CURSOR_TYPE,
	    p_Message OUT NVARCHAR2,
	    p_ResponseStatus OUT NUMBER
	)
	AS
	    v_UserID NUMBER(19,0) := NVL(p_UserID, -1);
	    v_RegisterID NUMBER(19,0) := NVL(p_RegisterID, -1);
	    v_Comment NVARCHAR2(500) := NVL(p_Comment, '-1');
	    v_EmployeeID NUMBER(19,0);
	    v_UserRegisterID NUMBER(19,0);
	    v_StatusNow NUMBER(19,0);
	    v_ManagerID NUMBER(19,0);
	    v_I NUMBER(19,0);
	    v_temp NUMBER(19,0) := 0;
	    v_NotiContent nvarchar2(200) := '';
	BEGIN
	    p_ResponseStatus := 1;

	    IF v_UserID = -1 THEN
	        p_Message := 'UserIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_RegisterID = -1 THEN
	        p_Message := 'RegisterIDIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF v_Comment = '-1' THEN
	        p_Message := 'CommentIsNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM SE_USER su WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    BEGIN
	        SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1  ;
	    EXCEPTION
	        WHEN NO_DATA_FOUND THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    BEGIN
	        SELECT ID_EMPLOYEE , Status_ID INTO v_UserRegisterID, v_StatusNow FROM AT_PORTAL_REG R  JOIN AT_REGISTER_PORTAL apr ON R.PARENT_ID  = apr.id 
	       WHERE apr.ID = v_RegisterID AND rownum = 1 ;
	    EXCEPTION
	        WHEN OTHERS THEN 
	            p_Message := 'RegisterIDIsNotFound';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;

	    SELECT COUNT(*) INTO v_temp FROM AT_PORTAL_APP apa WHERE ID_EMPLOYEE = v_EmployeeID;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependent';
	        p_ResponseStatus := v_EmployeeID;---600;
	        RETURN;
	    END IF;

	    SELECT COUNT(*) INTO v_temp FROM HU_Employee WHERE DIRECT_MANAGER = v_EmployeeID AND ID = v_UserRegisterID;
	    IF v_temp < 1 THEN
	        p_Message := 'ManagerNotDependentEmployee';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

	    IF p_ResponseStatus > 0 AND v_StatusNow = 1 THEN
	        BEGIN 
	            SELECT 	apa.ID_EMPLOYEE, apa.ID 
	            		,he.FULLNAME_VN  || u' \0111\00e3 ph\00ea duy\1ec7t \0111\0103ng k\00fd ' || NVL(ApiType.name,u'\0111i mu\1ed9n-v\1ec1 s\1edbm') 
			            	|| 
                			CASE WHEN TO_CHAR(r.FROM_DATE,'dd/MM')=TO_CHAR(r.TO_DATE,'dd/MM') THEN u' ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM')
                				 ELSE u' t\1eeb ng\00e0y ' || TO_CHAR(r.FROM_DATE,'dd/MM') || u' \0111\1ebfn ' || TO_CHAR(r.TO_DATE,'dd/MM') 
                			END  
                			|| u' c\1ee7a b\1ea1n.'
	            INTO 	v_ManagerID, v_I , v_NotiContent
	            FROM 	AT_PORTAL_APP apa  
	            JOIN 	AT_PORTAL_REG r ON r.ID  = apa.REGISTER_ID  AND PARENT_ID  = v_RegisterID 
	            LEFT JOIN HU_EMPLOYEE he  ON he.id = apa.ID_EMPLOYEE  
	            LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME  
                                    FROM 	AT_TIME_MANUAL atm  
                                    WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.ID_SIGN = apiType.Id
	           	WHERE 	apa.ID_REGGROUP IN (SELECT ID_REGGROUP FROM AT_PORTAL_REG apr2 WHERE apr2.PARENT_ID = v_RegisterID)
	            AND 	apa.ID_EMPLOYEE  = v_EmployeeID -- user có quyền duyệt
				AND 	rownum = 1
				ORDER BY apa.ID  DESC 
	            ;
	            COMMIT;

	            API_SaveNotification('REGISTER_LATEINEARLYOUT',v_UserRegisterID,v_ManagerID , 3, v_I, v_NotiContent, p_Message, p_ResponseStatus);

	           	IF p_ResponseStatus = -99 THEN
	           		p_Message := 'IsSuccess|NotifyException';
	           	END IF;

	            OPEN p_Cur FOR
	            SELECT  1 STT,
	                    arp.ID ID,
	                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD' )  LeaveFrom,
	                    TO_CHAR(arp.TO_DATE , 'YYYY-MM-DD' ) LeaveTo,
	                    TO_CHAR(arp.FROM_HOUR,'YYYY-MM-DD HH24:MI:SS') FromHour,
	                    TO_CHAR(arp.TO_HOUR,'YYYY-MM-DD HH24:MI:SS') ToHour,
	                    NVL(arp.SVALUE,'')  SymbolName,
	                    NVL(R.HOURCOUNT,0) TotalHour , 
	                    v_Comment AS Remark ,
	                    arp.STATUS_ID Status,
	                    e.FULLNAME_VN  EmployeeName,
	                    TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') CreateTime,
                        arp.ID_REGGROUP,
                        arp.Note Note,
                        NVL(apiType.Name,'') TypeName,
                        NVL(arp.DM_MINUTE,0) DM_MINUTE ,
                        NVL(arp.VS_MINUTE,0) VS_MINUTE,
                        LISTID 
                FROM	AT_REGISTER_PORTAL arp 
            	JOIN	(
	                		SELECT 	R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE,R.CREATED_DATE ,R.HOURCOUNT,
	                				LISTAGG( R.ID ,',') WITHIN GROUP (ORDER BY ID) AS LISTID  
	                		FROM 	AT_PORTAL_REG R
	                		WHERE 	PARENT_ID  = v_RegisterID 
	                		AND 	R.STATUS = 1 
	                		GROUP BY R.PARENT_ID,R.ID_SIGN,R.ID_EMPLOYEE  ,R.CREATED_DATE ,R.HOURCOUNT
	                )R ON R.PARENT_ID  = arp.ID 
	                     --LEFT JOIN AT_TIME_MANUAL S   ON R.ID_SIGN = S.ID
	                     LEFT JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
                         LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME  
                                    FROM 	AT_TIME_MANUAL atm  
                                    WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.ID_SIGN = apiType.Id
	                WHERE R.PARENT_ID = v_RegisterID
				AND arp.id = v_RegisterID
			;
	            --DBMS_SQL.RETURN_RESULT(v_CURSOR);
	        EXCEPTION
	            WHEN OTHERS THEN 
	                ROLLBACK;
	                p_Message := 'DatabaseErrorExc';
	                p_ResponseStatus := -99;
	                RETURN;
	        END;
	       	p_Message := 'ListRegisterIdIsReady';
	        p_ResponseStatus := 1;
	    ELSE
	    	 
	    	 p_Message := 'RegisterIdIsApproved';
	         p_ResponseStatus := -600;	
	    END IF;

	EXCEPTION
	    WHEN OTHERS THEN 
	        p_Message := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;

	PROCEDURE API_GET_LIST_ORG(
		p_Language IN nvarchar2,
			P_KEYWORD IN NVARCHAR2,
			P_ORG_ID_ROOT OUT NUMBER,
			P_CUR OUT CURSOR_TYPE, P_MESSAGE OUT NVARCHAR2, P_RESPONSESTATUS OUT NUMBER
			) AS
			v_KEYWORD NVARCHAR2(100) := (NVL(P_KEYWORD, ' '));
    BEGIN

       P_RESPONSESTATUS:= 1;
       P_MESSAGE := 'IsSuccess'; 

      	-- Lấy ORG ID root
      	SELECT 	ID  INTO P_ORG_ID_ROOT
      	FROM 	HU_ORGANIZATION 
        WHERE 	ACTFLG = 'A'
        AND		NVL(PARENT_ID, 0 ) = 0 
        ;
		IF NVL(p_Language,'vi-VN') = 'vi-VN' THEN 
	        OPEN P_CUR FOR  
	        	SELECT *
	        	FROM (
	            SELECT 
	                t.ID,
	                t.CODE,
	                NVL(t.NAME_VN,'') NAME_VN,
	                NVL(t.PARENT_ID,0) AS PARENT_ID
	
	            FROM HU_ORGANIZATION t
	             JOIN ( 
	            	SELECT 	0 AS id , u'' NAME_VN 
	            	FROM 	dual 
	            	UNION all 
	            	SELECT 	id , REPLACE(Name_vn ,'"','') Name_vn
	            	FROM 	HU_ORGANIZATION 
	            	WHERE 	ACTFLG = 'A' 
	            ) org2 ON org2.id = NVL(t.PARENT_ID,0)
	            WHERE t.ACTFLG  = 'A'
	           )  t  
	            START WITH NVL(t.PARENT_ID,0) = 0
	            CONNECT BY PRIOR t.ID = PARENT_ID AND t.NAME_VN LIKE '%' || v_KEYWORD  || '%';
		ELSE 
			OPEN P_CUR FOR  
	        	SELECT *
	        	FROM (
	            SELECT 
	                t.ID,
	                t.CODE,
	                NVL(t.NAME_EN ,'') NAME_VN,
	                NVL(t.PARENT_ID,0) AS PARENT_ID
	
	            FROM HU_ORGANIZATION t
	             JOIN ( 
	            	SELECT 	0 AS id , u'' NAME_VN 
	            	FROM 	dual 
	            	UNION all 
	            	SELECT 	id , REPLACE(NAME_EN ,'"','') Name_vn
	            	FROM 	HU_ORGANIZATION 
	            	WHERE 	ACTFLG = 'A' 
	            ) org2 ON org2.id = NVL(t.PARENT_ID,0)
	            WHERE t.ACTFLG  = 'A'
	           )  t  
	            START WITH NVL(t.PARENT_ID,0) = 0
	            CONNECT BY PRIOR t.ID = PARENT_ID AND t.NAME_VN LIKE '%' || v_KEYWORD  || '%';
		END IF;
	    EXCEPTION WHEN OTHERS THEN
	    BEGIN
	       P_RESPONSESTATUS:= -600;
	       P_MESSAGE := u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	    END;
    END;

   PROCEDURE API_GET_LIST_POSITION(
		p_Language IN nvarchar2,
   										P_KEYWORD IN NVARCHAR2, 
                                        P_LANG IN NVARCHAR2, 
                                        P_ORG_ID IN NUMBER, 
                                        P_PAGE IN NUMBER,
                                        P_PAGE_SIZE IN NUMBER,
                                        P_ROWCOUNT OUT NUMBER, 
                                        P_CUR  OUT CURSOR_TYPE, 
                                        P_MESSAGE OUT NVARCHAR2, 
                                        P_RESPONSESTATUS OUT NUMBER
   )
   AS
   		--v_UserName
   		P_TODAY DATE := TRUNC(SYSDATE);
        v_Text NVARCHAR2(100) := ' '; 
        v_KEYWORD NVARCHAR2(100) := UPPER(NVL(P_KEYWORD, v_Text));
        V_PAGE NUMBER(10) := NVL(P_PAGE, 1);
        V_PAGE_SIZE NUMBER(10) := NVL(P_PAGE_SIZE, 20);
        v_OrgTempId NUMBER(19,0) := NVL(P_ORG_ID, -1);
        v_RootParentId NUMBER(19,0):= NVL(P_ORG_ID, 0);
   begin
   /*
    SELECT STT, ID, CODE, Concurrent, Employee_Code, Employee_ID, 
                    Employee_Right, Fullname_Vn, Hiring_Status, INTERIM_CODE, 
                    Is_owner, JOB_CODE, JOB_POSITION_NAME, mobile_phone, ORG_CODE, ORG_ID, description_path,ORG_NAME
*/
        SELECT 	ID  INTO v_RootParentId
      	FROM 	HU_ORGANIZATION 
        WHERE 	ACTFLG = 'A'
        AND		NVL(PARENT_ID, 0 ) = 0 
        ;
	   if v_OrgTempId=-1 or v_OrgTempId = v_RootParentId then
   OPEN P_CUR
	   FOR 

	   SELECT 	*
	   FROM (
	   SELECT  	ROWNUM AS STT,
				nvl(ht.ID, 0),
				nvl(ht.CODE, ' ') ,
				'' AS Concurrent,
				nvl(he.EMPLOYEE_CODE, ' '),
				nvl(he.ID, 0) AS EMPLOYEE_ID,
				-1 AS Employee_Right,
				CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then he.FULLNAME_VN ELSE he.FULLNAME_EN  END FULLNAME_VN,
				'' AS Hiring_Status,
				'' AS INTERIM_CODE,
				0 AS Is_owner,
				'' AS JOB_CODE,
				CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NVL(ht.NAME_VN,'') ELSE ht.NAME_EN  END AS JOB_POSITION_NAME,
				NVL(hec.HOME_PHONE,'') HOME_PHONE ,
				NVL(hec.MOBILE_PHONE,'') MOBILE_PHONE  ,
				NVL(ho.CODE,'')  AS ORG_CODE,
				NVL(ho.ID,-1)  AS ORG_ID ,
				ho.DESCRIPTION_PATH ,
				CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then  NVL(ho.NAME_VN,'') ELSE NVL(ho.NAME_EN,'') end AS ORG_NAME

	FROM 		HU_EMPLOYEE he 
	LEFT JOIN 	HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID 
	LEFT JOIN 	HU_ORGANIZATION ho ON ho.id = he.ORG_ID 
	LEFT JOIN 	HU_TITLE ht ON ht.id = he.TITLE_ID 
	LEFT JOIN 	OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
	LEFT JOIN 	OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
	--LEFT JOIN 	SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName 
	LEFT JOIN 	HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id 
	WHERE   
				UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.MOBILE_PHONE) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.WORK_EMAIL) LIKE '%' || v_KEYWORD || '%'
                ORDER BY NLSSORT(he.Fullname_Vn, 'nls_sort = Vietnamese' ) 
    )  
	WHERE STT > ((V_PAGE - 1)* V_PAGE_SIZE) AND STT < (V_PAGE * V_PAGE_SIZE + 1)
	;

	SELECT COUNT(*) INTO P_ROWCOUNT
	FROM 		HU_EMPLOYEE he 
	LEFT JOIN 	HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID 
	LEFT JOIN 	HU_ORGANIZATION ho ON ho.id = he.ORG_ID 
	LEFT JOIN 	HU_TITLE ht ON ht.id = he.TITLE_ID 
	LEFT JOIN 	OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
	LEFT JOIN 	OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
	--LEFT JOIN 	SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName 
	LEFT JOIN 	HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id 
	WHERE 
				UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.MOBILE_PHONE) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.WORK_EMAIL) LIKE '%' || v_KEYWORD || '%'

 	;
else 
  OPEN P_CUR
	   FOR 

 SELECT 	*
	   FROM (
	   SELECT  	ROWNUM AS STT,
				nvl(ht.ID, 0),
				nvl(ht.CODE, ' ') ,
				NULL AS Concurrent,
				nvl(he.EMPLOYEE_CODE, ' '),
				nvl(he.ID, 0) AS EMPLOYEE_ID,
				-1 AS Employee_Right,
				CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then he.FULLNAME_VN ELSE he.FULLNAME_EN END AS FULLNAME_VN,
				NULL AS Hiring_Status,
				NULL AS INTERIM_CODE,
				NULL AS Is_owner,
				NULL AS JOB_CODE,
				CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then ht.NAME_VN ELSE ht.NAME_EN END AS JOB_POSITION_NAME,
				hec.HOME_PHONE ,
				hec.MOBILE_PHONE ,
				ho.CODE  AS ORG_CODE,
				ho.ID  AS ORG_ID ,
				ho.DESCRIPTION_PATH ,
				CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then  ho.NAME_VN ELSE ho.NAME_EN end AS ORG_NAME

	FROM 		HU_EMPLOYEE he 
	LEFT JOIN 	HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID 
	LEFT JOIN 	HU_ORGANIZATION ho ON ho.id = he.ORG_ID 
	LEFT JOIN 	HU_TITLE ht ON ht.id = he.TITLE_ID 
	LEFT JOIN 	OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
	LEFT JOIN 	OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
	--LEFT JOIN 	SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName 
	LEFT JOIN 	HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id 
	WHERE   
				UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.MOBILE_PHONE) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.WORK_EMAIL) LIKE '%' || v_KEYWORD || '%'
            START WITH ho.PARENT_ID = P_ORG_ID --NVL(PARENT_ID,0) = 0
            CONNECT BY PRIOR ho.ID = ho.PARENT_ID
            ORDER BY NLSSORT(he.Fullname_Vn, 'nls_sort = Vietnamese')
    )  
	WHERE STT > ((V_PAGE - 1)* V_PAGE_SIZE) AND STT < (V_PAGE * V_PAGE_SIZE + 1)
	;

	SELECT COUNT(*) INTO P_ROWCOUNT
	FROM 		HU_EMPLOYEE he 
	LEFT JOIN 	HU_EMPLOYEE_CV hec ON hec.EMPLOYEE_ID  = he.ID 
	LEFT JOIN 	HU_ORGANIZATION ho ON ho.id = he.ORG_ID 
	LEFT JOIN 	HU_TITLE ht ON ht.id = he.TITLE_ID 
	LEFT JOIN 	OT_OTHER_LIST ool ON ool.id = hec.GENDER  AND ool.TYPE_ID  = 34
	LEFT JOIN 	OT_OTHER_LIST ool2 ON ool2.id = he.WORK_STATUS  AND ool2.TYPE_ID  = 59
	--LEFT JOIN 	SE_CHOSEN_ORG sco ON sco.ORG_ID  = he.ORG_ID AND sco.USERNAME = v_UserName 
	LEFT JOIN 	HU_TERMINATE ht2 ON ht2.EMPLOYEE_ID  = he.id 
	WHERE 
				UPPER(he.employee_code) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.NAME_VN) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(ht.Name_En) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(he.fullname_vn) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.MOBILE_PHONE) LIKE '%' || v_KEYWORD || '%' OR
			    UPPER(hec.WORK_EMAIL) LIKE '%' || v_KEYWORD || '%'
    START WITH ho.PARENT_ID = P_ORG_ID --NVL(PARENT_ID,0) = 0
            CONNECT BY PRIOR ho.ID = ho.PARENT_ID

 	;
    end if;
	P_MESSAGE := 'IsSucess'; 
    P_RESPONSESTATUS := 1;



   END;

	/*Lấy thông tin nhân viên*/
  	PROCEDURE API_GET_EMPLOYEE_INFO(
		p_Language IN nvarchar2,P_EMPLOYEE_ID IN NUMBER,
                                        P_CUR OUT CURSOR_TYPE,
                                        P_MESSAGE OUT NVARCHAR2,
                                        P_RESPONSESTATUS OUT NUMBER)
    AS
        V_EMPLOYEE_ID NUMBER(10) := NVL(P_EMPLOYEE_ID, 0);
    BEGIN
        --SP_API_GET_MESSAGE('SUCCESSS', P_RESPONSESTATUS, P_MESSAGE);
        P_MESSAGE := 'IsSucess'; 
    	P_RESPONSESTATUS := 1;

        IF V_EMPLOYEE_ID = 0 THEN
            P_RESPONSESTATUS := 400;
            P_MESSAGE := 'EmployeeID is required.';
            RETURN;
        END IF;

        OPEN P_CUR FOR
        SELECT 
            e.ID,
            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then e.FULLNAME_VN ELSE e.FULLNAME_EN END FULLNAME_VN,
            case when cv.Image is null then 'NoImage.jpg' else (cast(cv.IMAGE as varchar2(255))) end as PATH, 
            se.USERNAME USERNAME, 
            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then j.NAME_VN ELSE j.NAME_EN END JOB_POSITION_NAME,
            CASE WHEN cv.GENDER = 566 THEN 'F' ELSE 'M' END GENDER,
            cv.MOBILE_PHONE MOBILE_PHONE,
            cv.HOME_PHONE MOBILE_PHONE2,
            TO_CHAR(cv.BIRTH_DATE,'YYYY-MM-DD') BIRTH_DATE,
            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then na.NAME_VN ELSE na.NAME_EN END NATIONALITY_NAME,
            cv.PER_ADDRESS PER_ADDRESS,
            cv.ID_NO ID_NO,
            cv.PER_EMAIL PER_EMAIL
        FROM HU_EMPLOYEE e 
        LEFT JOIN SE_USER se
            ON e.EMPLOYEE_CODE = se.EMPLOYEE_CODE
            LEFT JOIN HU_TITLE j
            ON e.TITLE_ID = j.ID
            LEFT JOIN HU_EMPLOYEE_CV cv
            ON e.ID = cv.EMPLOYEE_ID
            LEFT JOIN HU_NATION na 
            ON cv.NATIONALITY = na.ID
        WHERE e.ID = V_EMPLOYEE_ID 
        AND rownum = 1
        ORDER BY e.EMPLOYEE_3B_ID  DESC ;

    EXCEPTION WHEN OTHERS THEN
        BEGIN
            --SP_API_GET_MESSAGE('ERROR', P_RESPONSESTATUS, P_MESSAGE);
             P_MESSAGE :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
			P_RESPONSESTATUS := -600;

        END;
    END;

 

PROCEDURE API_GET_USER_INFO(
		p_Language IN nvarchar2,P_USER_ID IN NUMBER,
                                        P_CUR OUT CURSOR_TYPE,
                                        P_MESSAGE OUT NVARCHAR2,
                                        P_RESPONSESTATUS OUT NUMBER)
    AS
        V_USER_ID NUMBER(10) := NVL(P_USER_ID, 0);
    BEGIN 
        P_MESSAGE := 'IsSucess'; 
    	P_RESPONSESTATUS := 1;

        IF V_USER_ID = 0 THEN
            P_RESPONSESTATUS := 400;
            P_MESSAGE := 'EmployeeID is required.';
            RETURN;
        END IF;

        OPEN P_CUR FOR
        SELECT 
	            e.ID,
	            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then e.FULLNAME_VN ELSE e.FULLNAME_EN END FULLNAME_VN,
	            case when cv.Image is null then '/services/EmployeeImage/NoImage.jpg' else ('/services/EmployeeImage/' || cast(cv.IMAGE as varchar2(255))) end as PATH, 
	            se.USERNAME USERNAME, 
	            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then j.NAME_VN ELSE j.NAME_EN END JOB_POSITION_NAME,
	            CASE WHEN cv.GENDER = 566 THEN 'F' ELSE 'M' END GENDER,
	            cv.MOBILE_PHONE MOBILE_PHONE,
	            cv.HOME_PHONE MOBILE_PHONE2,
	            TO_CHAR(cv.BIRTH_DATE,'YYYY-MM-DD') BIRTH_DATE,
	            CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then na.NAME_VN ELSE na.NAME_EN END NATIONALITY_NAME,
	            cv.PER_ADDRESS PER_ADDRESS,
	            cv.ID_NO ID_NO,
	            NVL(cv.PER_EMAIL,cv.WORK_EMAIL ) PER_EMAIL
        FROM HU_EMPLOYEE e 
        INNER JOIN SE_USER se ON e.EMPLOYEE_CODE = se.EMPLOYEE_CODE
        LEFT JOIN HU_TITLE j ON e.TITLE_ID = j.ID
        LEFT JOIN HU_EMPLOYEE_CV cv ON e.ID = cv.EMPLOYEE_ID
        LEFT JOIN HU_NATION na  ON cv.NATIONALITY = na.ID
        WHERE se.ID = V_USER_ID 
        AND rownum = 1
        ORDER BY e.EMPLOYEE_3B_ID  DESC ;

    EXCEPTION WHEN OTHERS THEN
        BEGIN 
             P_MESSAGE :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
			P_RESPONSESTATUS := -600;

        END;
    END;

   -- Search đăng ký nghỉ theo advande 
    PROCEDURE API_SearchRegisterLeave
				(
		p_Language IN nvarchar2,
				    p_UserID IN NUMBER,
				    p_FromDate IN NVARCHAR2,
				    p_ToDate IN NVARCHAR2,
				    p_Status IN NVARCHAR2,
				    p_Page IN NUMBER,
				    p_PageSize IN NUMBER,
				    p_Cur OUT CURSOR_TYPE,
				    p_InitCount OUT NUMBER,
				    p_PendingCount OUT NUMBER,
				    p_ApprovedCount OUT NUMBER,
				    p_RejectedCount OUT NUMBER,
				    p_Rowcount OUT NUMBER,
				    p_Message OUT NVARCHAR2,
				    p_ResponseStatus OUT NUMBER
				)
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_Page NUMBER(10,0) := NVL(p_Page, 1);
        v_PageSize NUMBER(2,0)  := NVL(p_PageSize, 10);
        v_Status NVARCHAR2(20) := NVL(p_Status, '-2');
	    v_EmployeeID NUMBER(19,0);
	    v_FD NUMBER(19,0) :=0;
	    v_TD NUMBER(19,0) :=0;
	    v_DefaultDate DATE := TO_DATE('1900-01-01', 'YYYY-MM-DD');
	    v_FromDate DATE;
	    v_ToDate DATE;
        v_FromDateInput NVARCHAR2(20) := NVL(p_FromDate,'-1');
        v_ToDateInput NVARCHAR2(20) := NVL(p_ToDate,'-1');
	    v_temp NUMBER(10, 0) := 0;
    BEGIN
        p_Rowcount := 0;
        IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
        BEGIN
	       	SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       	WHERE 	su.ID = v_UserID 
	       	AND 	(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       	AND 	rownum = 1 
	       ;
	    EXCEPTION
	        WHEN OTHERS THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;
	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

        IF v_FromDateInput != '-1' THEN	
        	begin
            v_FromDate := TO_DATE( p_FromDate, 'YYYY-MM-DD');
             SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDD')) INTO v_FD FROM dual;
            EXCEPTION 
            WHEN OTHERS THEN
             	p_Message := 'v_FromDate fail'|| p_FromDate;
	            p_ResponseStatus := -601;
	            RETURN;
            END ;
        end if;
         IF v_ToDateInput != '-1' then
            v_ToDate := TO_DATE( p_ToDate, 'YYYY-MM-DD');
             SELECT TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDD')) INTO v_TD FROM dual;
        end if;
       
       	--Count tong so dong tra ve (total -> phan trang)
        BEGIN
	        SELECT 	COUNT(*)
	        INTO 	p_Rowcount
	        FROM  	AT_REGISTER_PORTAL arp 
	                JOIN
	                (		SELECT  ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS 
	                		FROM 	AT_PORTAL_REG 
	                		WHERE   ID_EMPLOYEE = v_EmployeeID 
	                		GROUP BY ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS 
	                )R ON R.ID_REGGROUP = arp.ID_REGGROUP  
                   JOIN 	HU_Employee E   ON R.ID_EMPLOYEE = E.ID 
                   left join HU_Employee manE on E.DIRECT_MANAGER = manE.Id
                   LEFT JOIN (SELECT 
                            p.ID ID,
	                            '[' || p.CODE || '] ' || p.NAME Name
	                        FROM AT_TIME_MANUAL p
	                        LEFT JOIN AT_FML F
	                            ON F.ID = p.MORNING_ID
	                        LEFT JOIN AT_FML F2
	                            ON F2.ID = p.AFTERNOON_ID
	                        WHERE p.ACTFLG = 'A'
	                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
	                        --AND (p.MORNING_ID = p.AFTERNOON_ID)
	                        ORDER BY p.NAME DESC 
	                ) ApiType on arp.Id_sign = ApiType.Id
	                LEFT JOIN hu_title htMng ON htMng.id = manE.TITLE_ID 
	                LEFT JOIN HU_ORGANIZATION ho ON ho.id = manE.ORG_ID 
	                WHERE R.ID_EMPLOYEE = v_EmployeeID 
	                AND r.SVALUE IN ('LEAVE')
                    AND 
                    (case when v_Status IN ('-2','-1') then 1
                          when v_Status NOT IN ('-2','-1') and 
                     R.STATUS  IN (
	                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
                    ) =1
                    AND ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD =0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    And ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                              
			;
                         
			-- đếm tổng theo nhân viên: cần thêm mặc định thời gian giới hạn
			SELECT 	 sum(CASE WHEN R.STATUS = 0 THEN 1 ELSE 0 END ) 
	        		,sum(CASE WHEN R.STATUS = 1 THEN 1 ELSE 0 END )
	        		,sum(CASE WHEN R.STATUS = 2 THEN 1 ELSE 0 END )
	        		,sum(CASE WHEN R.STATUS = 3 THEN 1 ELSE 0 END )
	        INTO 	 p_InitCount
	        		,p_PendingCount
	        		,p_ApprovedCount
	        		,p_RejectedCount 
	        FROM 	AT_REGISTER_PORTAL arp 
	                JOIN
	                (		SELECT  ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS 
	                		FROM 	AT_PORTAL_REG 
	                		WHERE   ID_EMPLOYEE = v_EmployeeID 
	                		GROUP BY ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS 
	                )R ON R.ID_REGGROUP = arp.ID_REGGROUP  
            JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID 
            WHERE R.ID_EMPLOYEE = v_EmployeeID 
            AND r.SVALUE IN ('LEAVE')
            AND ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    And ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1 ;
            
			-- set lai neu null                         
			SELECT 	    NVL(p_InitCount,0)
	        		,NVL(p_PendingCount,0)
	        		,NVL(p_ApprovedCount,0)
	        		,NVL(p_RejectedCount ,0)
	        INTO 	p_InitCount
	        		,p_PendingCount
	        		,p_ApprovedCount
	        		,p_RejectedCount 
	        FROM dual;
			
	       	-- ds tra ve
            OPEN p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT 	ROWNUM STT, ID, LeaveFrom, LeaveTo, FromHour, ToHour, SymbolName, 
	            		TotalHour, Remark, Status, EmployeeName, TimeCreate,ManagerName, TypeName, Note
	            FROM
	            (
	                SELECT 
		                    arp.ID ID,
		                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD')  LeaveFrom,
		                    TO_CHAR(arp.TO_DATE, 'YYYY-MM-DD')  LeaveTo,
		                    arp.FROM_HOUR  FromHour,
		                    arp.TO_HOUR   ToHour,
		                    '' || arp.SVALUE || '' SymbolName,
		                    NVL(R.HOURCOUNT , 0) TotalHour,
		                    NVL(R.Remark, ' ') Remark,
		                    arp.STATUS_ID  Status,
		                    CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE E.FULLNAME_EN END EmployeeName,
		                    TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   TimeCreate,
	                        CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then manE.FULLNAME_VN ELSE manE.FULLNAME_EN END ManagerName,
	                         ApiType.Name TypeName,
	                        NVL(arp.NOTE , ' ') Note
	                FROM  	AT_REGISTER_PORTAL arp 
	                JOIN
	                (		SELECT  R.ID_REGGROUP, R.ID_EMPLOYEE,R.HOURCOUNT,R.CREATED_DATE ,R.SVALUE , R.STATUS , MAX(cast(NOTE_AT AS nvarchar2(200))) NOTE_AT , max(apa.NOTES) Remark                		
	                		FROM 	AT_PORTAL_REG R
	                		LEFT JOIN AT_PORTAL_APP apa ON apa.REGISTER_ID  = R.ID AND APPROVE_STATUS NOT IN (0,1)
	                		WHERE   R.ID_EMPLOYEE = v_EmployeeID 
	                		GROUP BY R.ID_REGGROUP, R.ID_EMPLOYEE,R.HOURCOUNT,R.CREATED_DATE ,R.SVALUE , R.STATUS
	                )R ON R.ID_REGGROUP = arp.ID_REGGROUP  
                   JOIN 	HU_Employee E   ON R.ID_EMPLOYEE = E.ID 
                   left join HU_Employee manE on E.DIRECT_MANAGER = manE.Id
                   LEFT JOIN (SELECT 
                            p.ID ID,
	                            '[' || p.CODE || '] ' || p.NAME Name
	                        FROM AT_TIME_MANUAL p
	                        LEFT JOIN AT_FML F
	                            ON F.ID = p.MORNING_ID
	                        LEFT JOIN AT_FML F2
	                            ON F2.ID = p.AFTERNOON_ID
	                        WHERE p.ACTFLG = 'A'
	                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
	                        --AND (p.MORNING_ID = p.AFTERNOON_ID)
	                        ORDER BY p.NAME DESC 
	                ) ApiType on arp.Id_sign = ApiType.Id
	                LEFT JOIN hu_title htMng ON htMng.id = manE.TITLE_ID 
	                LEFT JOIN HU_ORGANIZATION ho ON ho.id = manE.ORG_ID 
	                WHERE R.ID_EMPLOYEE = v_EmployeeID 
	                AND r.SVALUE IN ('LEAVE')
                    AND 
                    (case when v_Status IN ('-2','-1') then 1
                          when v_Status NOT IN ('-2','-1') and 
                     R.STATUS  IN (
	                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
                    ) =1
                    AND ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    And ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    
	                ORDER BY arp.ID DESC
	            )
	        ) 
	        WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
	    END;

     p_Message := 'IsSuccess';
     p_ResponseStatus := 1;
    EXCEPTION
      WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
END;

/*Search đăng ký làm thêm*/
PROCEDURE API_SearchRegisterOT
				(
		p_Language IN nvarchar2,
				    p_UserID IN NUMBER,
				    p_FromDate IN NVARCHAR2,
				    p_ToDate IN NVARCHAR2,
				    p_Status IN NVARCHAR2,
				    p_Page IN NUMBER,
				    p_PageSize IN NUMBER,
				    p_Cur OUT CURSOR_TYPE,
				    p_InitCount OUT NUMBER,
				    p_PendingCount OUT NUMBER,
				    p_ApprovedCount OUT NUMBER,
				    p_RejectedCount OUT NUMBER,
				    p_Rowcount OUT NUMBER,
				    p_Message OUT NVARCHAR2,
				    p_ResponseStatus OUT NUMBER
				)
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_Page NUMBER(10,0) := NVL(p_Page, 1);
        v_PageSize NUMBER(2,0)  := NVL(p_PageSize, 10);
        v_Status NVARCHAR2(20) := NVL(p_Status, '-2');
	    v_EmployeeID NUMBER(19,0);
	    v_FD NUMBER(19,0) :=0;
	    v_TD NUMBER(19,0) :=0;
	    v_DefaultDate DATE := TO_DATE('1900-01-01', 'YYYY-MM-DD');
	    v_FromDate DATE;
	    v_ToDate DATE;
        v_FromDateInput NVARCHAR2(20) := NVL(p_FromDate,'-1');
        v_ToDateInput NVARCHAR2(20) := NVL(p_ToDate,'-1');
	    v_temp NUMBER(10, 0) := 0;
    BEGIN
        p_Rowcount := 0;
        IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
        BEGIN
	       	SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	       ;
	    EXCEPTION
	        WHEN OTHERS THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;
	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

        IF v_FromDateInput != '-1' then
            v_FromDate := TO_DATE( p_FromDate, 'YYYY-MM-DD');
             SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDD')) INTO v_FD FROM dual;
        end if;
         IF v_ToDateInput != '-1' then
            v_ToDate := TO_DATE( p_ToDate, 'YYYY-MM-DD');
             SELECT TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDD')) INTO v_TD FROM dual;
        end if;
        BEGIN
	        SELECT COUNT(*) INTO p_Rowcount
	        FROM AT_REGISTER_PORTAL arp 
	                JOIN
	                (		SELECT  ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS 
	                		FROM 	AT_PORTAL_REG 
	                		WHERE   ID_EMPLOYEE = v_EmployeeID 
	                		GROUP BY ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS 
	                )R ON R.ID_REGGROUP = arp.ID_REGGROUP  
             JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID   
            WHERE R.ID_EMPLOYEE = v_EmployeeID 
            AND r.SVALUE IN ('OVERTIME')
            AND 
                    (case when v_Status IN ('-2','-1') then 1
                          when v_Status NOT IN ('-2','-1')  and 
                     R.STATUS  IN (
	                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
                    ) =1
                    AND ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    And ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1;
           
            -- đếm tổng theo nhân viên: cần thêm mặc định thời gian giới hạn
			SELECT 	 sum(CASE WHEN R.STATUS = 0 THEN 1 ELSE 0 END ) 
	        		,sum(CASE WHEN R.STATUS = 1 THEN 1 ELSE 0 END )
	        		,sum(CASE WHEN R.STATUS = 2 THEN 1 ELSE 0 END )
	        		,sum(CASE WHEN R.STATUS = 3 THEN 1 ELSE 0 END )
	        INTO 	 p_InitCount
	        		,p_PendingCount
	        		,p_ApprovedCount
	        		,p_RejectedCount 
	        FROM 	AT_REGISTER_PORTAL arp 
	                JOIN
	                (		SELECT  ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS 
	                		FROM 	AT_PORTAL_REG 
	                		WHERE   ID_EMPLOYEE = v_EmployeeID 
	                		GROUP BY ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS 
	                )R ON R.ID_REGGROUP = arp.ID_REGGROUP  
            JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID 
            WHERE R.ID_EMPLOYEE = v_EmployeeID 
            AND r.SVALUE IN ('OVERTIME')
            AND ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    And ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1 ;
            
			SELECT 	    NVL(p_InitCount,0)
	        		,NVL(p_PendingCount,0)
	        		,NVL(p_ApprovedCount,0)
	        		,NVL(p_RejectedCount ,0)
	        INTO 	p_InitCount
	        		,p_PendingCount
	        		,p_ApprovedCount
	        		,p_RejectedCount 
	        FROM dual;
                                      
                         
            OPEN p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT 	ROWNUM STT, 
		                ID,
		                LeaveFrom,
		                LeaveTo,
		                FromHour,
		                ToHour,
		                SymbolName,
		                NVL(TotalHour,0) TotalHour,
		                Remark,
		                Status,
		                EmployeeName,
		                TimeCreate,
		                ManagerName, 
		                Note,
		                TypeName
	            FROM
	            (
	                SELECT
	                    arp.ID ID,
	                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD')  LeaveFrom,
	                    TO_CHAR(arp.TO_DATE, 'YYYY-MM-DD')  LeaveTo,
	                    TO_CHAR(R.FROM_HOUR, 'YYYY-MM-DD HH24:MI:SS')  FromHour,
	                    TO_CHAR(R.TO_HOUR, 'YYYY-MM-DD HH24:MI:SS')   ToHour,
	                    '' || arp.SVALUE || '' SymbolName,
	                    round(to_number(R.TO_Hour - R.From_Hour) * 24,1) TotalHour,
	                    NVL(R.Remark, ' ') Remark,
	                    arp.Status_id Status,
	                    CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE E.FULLNAME_EN END EmployeeName,
	                    TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   TimeCreate,
                        CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then manE.FULLNAME_VN ELSE manE.FULLNAME_EN END ManagerName,
                        arp.Note Note,
                        apiType.Name TypeName
	                FROM AT_REGISTER_PORTAL arp 
	                JOIN
	                (		SELECT  R.ID_REGGROUP, R.ID_EMPLOYEE,R.HOURCOUNT,R.CREATED_DATE ,R.SVALUE , R.STATUS ,R.ID_SIGN ,MAX(R.FROM_HOUR)FROM_HOUR,MAX(R.TO_HOUR) TO_HOUR, max(apa.NOTES) Remark 
	                		FROM 	AT_PORTAL_REG R
	                		LEFT JOIN AT_PORTAL_APP apa  ON apa.REGISTER_ID  = R.ID AND apa.APPROVE_STATUS NOT IN (0,1)
	                		WHERE   R.ID_EMPLOYEE = v_EmployeeID 
	                		GROUP BY R.ID_REGGROUP, R.ID_EMPLOYEE,R.HOURCOUNT,R.CREATED_DATE ,R.SVALUE , R.STATUS ,R.ID_SIGN 
	                )R ON R.ID_REGGROUP = arp.ID_REGGROUP  
	                       JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
                           Left join (SELECT  ID, CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then  NAME_VN ELSE NAME_EN end AS NAME
                                    FROM 	OT_OTHER_LIST ool 
                                    WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                                    AND 	ACTFLG  = 'A') apiType on R.ID_SIGN = apiType.ID
                          
                           left join HU_Employee manE on manE.ID = E.DIRECT_MANAGER  
	                WHERE R.ID_EMPLOYEE = v_EmployeeID 
	                AND r.SVALUE IN ('OVERTIME')
                    AND 
                    (case when v_Status IN ('-2','-1') then 1
                          when v_Status NOT IN ('-2','-1')  and 
                     R.STATUS  IN (
	                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
                    ) =1
                    AND ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    And ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1 
                          
	                ORDER BY arp.ID DESC
	            )
	        ) 
	        WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
	    END;

     p_Message := 'IsSuccess';
     p_ResponseStatus := 1;
    EXCEPTION
      WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
END;

/*Search đăng ký ĐMVS trả về cho user đăng ký */
PROCEDURE API_SearchRegisterWLEO
				(
		p_Language IN nvarchar2,
				    p_UserID IN NUMBER,
				    p_FromDate IN NVARCHAR2,
				    p_ToDate IN NVARCHAR2,
				    p_Status IN NVARCHAR2,
				    p_Page IN NUMBER,
				    p_PageSize IN NUMBER,
				    p_Cur OUT CURSOR_TYPE,
				    p_InitCount OUT NUMBER,
				    p_PendingCount OUT NUMBER,
				    p_ApprovedCount OUT NUMBER,
				    p_RejectedCount OUT NUMBER,
				    p_Rowcount OUT NUMBER,
				    p_Message OUT NVARCHAR2,
				    p_ResponseStatus OUT NUMBER
				)
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_Page NUMBER(10,0) := NVL(p_Page, 1);
        v_PageSize NUMBER(2,0)  := NVL(p_PageSize, 10);
        v_Status NVARCHAR2(20) := NVL(p_Status, '-2');
	    v_EmployeeID NUMBER(19,0);
	    v_FD NUMBER(19,0) :=0;
	    v_TD NUMBER(19,0) :=0;
	    v_DefaultDate DATE := TO_DATE('1900-01-01', 'YYYY-MM-DD');
	    v_FromDate DATE;
	    v_ToDate DATE;
        v_FromDateInput NVARCHAR2(20) := NVL(p_FromDate,'-1');
        v_ToDateInput NVARCHAR2(20) := NVL(p_ToDate,'-1');
	    v_temp NUMBER(10, 0) := 0;
    BEGIN
        p_Rowcount := 0;
        IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
        BEGIN
	       	SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	       ;
	    EXCEPTION
	        WHEN OTHERS THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;
	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

        IF v_FromDateInput != '-1' then
            v_FromDate := TO_DATE( p_FromDate, 'YYYY-MM-DD');
             SELECT TO_NUMBER(TO_CHAR(v_FromDate, 'YYYYMMDD')) INTO v_FD FROM dual;
        end if;
         IF v_ToDateInput != '-1' then
            v_ToDate := TO_DATE( p_ToDate, 'YYYY-MM-DD');
             SELECT TO_NUMBER(TO_CHAR(v_ToDate, 'YYYYMMDD')) INTO v_TD FROM dual;
        end if;
        BEGIN
	        SELECT COUNT(*) INTO p_Rowcount
	        FROM AT_REGISTER_PORTAL arp 
	                JOIN
	                (		SELECT  ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS ,ID_SIGN 
	                		FROM 	AT_PORTAL_REG 
	                		WHERE   ID_EMPLOYEE = v_EmployeeID 
	                		GROUP BY ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS ,ID_SIGN 
	                )R ON R.ID_REGGROUP = arp.ID_REGGROUP  
             JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID   
            WHERE R.ID_EMPLOYEE = v_EmployeeID 
            AND r.SVALUE IN ('WLEO')
            AND 
                    (case when v_Status IN('-2','-1') then 1
                          when v_Status NOT IN('-2','-1')  and 
                     R.STATUS  IN (
	                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
                    ) =1
                    AND ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    And ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1;

			
            -- đếm tổng theo nhân viên: cần thêm mặc định thời gian giới hạn
			SELECT 	 sum(CASE WHEN R.STATUS = 0 THEN 1 ELSE 0 END ) 
	        		,sum(CASE WHEN R.STATUS = 1 THEN 1 ELSE 0 END )
	        		,sum(CASE WHEN R.STATUS = 2 THEN 1 ELSE 0 END )
	        		,sum(CASE WHEN R.STATUS = 3 THEN 1 ELSE 0 END )
	        INTO 	 p_InitCount
	        		,p_PendingCount
	        		,p_ApprovedCount
	        		,p_RejectedCount 
	        FROM 	AT_REGISTER_PORTAL arp 
	                JOIN
	                (		SELECT  ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS ,ID_SIGN 
	                		FROM 	AT_PORTAL_REG 
	                		WHERE   ID_EMPLOYEE = v_EmployeeID 
	                		GROUP BY ID_REGGROUP, ID_EMPLOYEE,HOURCOUNT,CREATED_DATE ,SVALUE , STATUS ,ID_SIGN 
	                )R ON R.ID_REGGROUP = arp.ID_REGGROUP  
            JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID 
            WHERE R.ID_EMPLOYEE = v_EmployeeID 
            AND r.SVALUE IN ('WLEO')
            AND ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    And ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1 ;
            
			SELECT 	    NVL(p_InitCount,0)
	        		,NVL(p_PendingCount,0)
	        		,NVL(p_ApprovedCount,0)
	        		,NVL(p_RejectedCount ,0)
	        INTO 	p_InitCount
	        		,p_PendingCount
	        		,p_ApprovedCount
	        		,p_RejectedCount 
	        FROM dual;
                                                     
                         
            OPEN p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT ROWNUM STT, 
                ID,
                LeaveFrom,
                LeaveTo,
                FromHour,
                ToHour,
                SymbolName,
                TotalHour,
                Remark,
                Status,
                EmployeeName,
                TimeCreate,
                ManagerName,
                Note,
                TypeName,
                DM_MINUTE,
                VS_MINUTE
                FROM
	            (
	                SELECT  
	                    arp.ID ID,
	                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD')  LeaveFrom,
	                    TO_CHAR(arp.TO_DATE, 'YYYY-MM-DD')  LeaveTo,
	                    NVL(R.FROM_HOUR, arp.FROM_HOUR ) FromHour,
	                    NVL(R.TO_HOUR, arp.TO_HOUR )  ToHour,
	                    '' || R.SVALUE || '' SymbolName,
	                    NVL(R.HOURCOUNT , 0) TotalHour,
	                    NVL(R.Remark, ' ') Remark,
	                    R.Status Status,
	                    CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE E.FULLNAME_EN  END EmployeeName,
	                    TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   TimeCreate,
                        CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then manE.FULLNAME_VN ELSE manE.FULLNAME_EN END ManagerName,
                        NVL(arp.Note, ' ') Note,
                        NVL(apiType.NAME, ' ') TypeName ,
                        arp.DM_MINUTE ,
                        arp.VS_MINUTE  
	                FROM AT_REGISTER_PORTAL arp 
	                JOIN
	                (		SELECT  R.PARENT_ID , R.ID_EMPLOYEE,R.HOURCOUNT,R.CREATED_DATE ,R.SVALUE , R.STATUS ,R.ID_SIGN ,MAX(FROM_HOUR)FROM_HOUR,MAX(TO_HOUR)TO_HOUR, max(apa.NOTES) Remark 
	                		FROM 	AT_PORTAL_REG R 
	                		LEFT JOIN AT_PORTAL_APP apa ON APA.REGISTER_ID  = R.ID  AND apa.APPROVE_STATUS NOT IN (0,1) 
	                		WHERE   R.ID_EMPLOYEE = v_EmployeeID 
	                		AND 	R.SVALUE IN ('WLEO')
	                		GROUP BY R.PARENT_ID, R.ID_EMPLOYEE,R.HOURCOUNT,R.CREATED_DATE ,R.SVALUE , R.STATUS ,R.ID_SIGN 
	                )R ON R.PARENT_ID = arp.ID   
	                       JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID 
                           left join HU_Employee manE on E.DIRECT_MANAGER = manE.Id
                           LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME  
                                    FROM 	AT_TIME_MANUAL atm  
                                    WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' ))
                                    apiType on r.ID_SIGN = apiType.Id
	                WHERE R.ID_EMPLOYEE = v_EmployeeID 
	                AND r.SVALUE IN ('WLEO')
                    AND 
                    (case when v_Status IN('-2','-1') then 1
                          when v_Status NOT IN('-2','-1')  and 
                     R.STATUS  IN (
	                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
                    ) =1
                    AND ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.FROM_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1
                    And ( case when v_FD = 0 and v_TD = 0 then 1
                          when v_FD >0 and v_TD = 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))>= v_FD then 1
                          when v_FD >0 and v_TD > 0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD')) BETWEEN  v_FD AND v_TD then 1
                          when v_FD = 0 and v_TD >0 and TO_NUMBER(TO_CHAR(arp.TO_DATE, 'YYYYMMDD'))<= v_TD then 1
                          else 0 end ) =1 
	                    ORDER BY arp.ID DESC
	            )
	        ) 
	        WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
	    END;

     p_Message := 'IsSuccess';
     p_ResponseStatus := 1;
    EXCEPTION
      WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
END;

/*Search phê duyệt nghỉ trả về cho người duyệt*/
PROCEDURE API_SearchApprovedLeave
				(
		p_Language IN nvarchar2,
				    p_UserID IN NUMBER,
				    p_KeyEmployee IN NVARCHAR2,
				    p_FromDate IN NVARCHAR2,
				    p_ToDate IN NVARCHAR2,
				    p_Status IN NVARCHAR2,
	    			p_Type IN NUMBER,
				    p_Page IN NUMBER,
				    p_PageSize IN NUMBER,
				    p_Cur OUT CURSOR_TYPE,
				    p_PendingCount OUT NUMBER,
				    p_ApprovedCount OUT NUMBER,
				    p_RejectedCount OUT NUMBER,
				    p_Rowcount OUT NUMBER,
				    p_Message OUT NVARCHAR2,
				    p_ResponseStatus OUT NUMBER
				) 
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_Page NUMBER(10,0) := NVL(p_Page, 1);
        v_PageSize NUMBER(2,0)  := NVL(p_PageSize, 10);
        v_Status NVARCHAR2(20) := NVL(p_Status, '-2');
        v_KeyEmployee NVARCHAR2(100) := NVL(p_KeyEmployee,'');
	    v_EmployeeID NUMBER(19,0);
        v_FromDateInput NVARCHAR2(20) := NVL(p_FromDate,'-1');
        v_ToDateInput NVARCHAR2(20) := NVL(p_ToDate,'-1');
	    v_temp NUMBER(10, 0) := 0;
	    v_Type NUMBER(10,0) := NVL(p_Type, -1);
    BEGIN
        p_Rowcount := 0;
        
        IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
        BEGIN
	       	SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	       ;
	    EXCEPTION
	        WHEN OTHERS THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;
	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

        BEGIN
	        SELECT 	COUNT(*) 
    		INTO 	p_Rowcount
    		FROM (
    				SELECT  DISTINCT arp.ID 
			        FROM 	AT_REGISTER_PORTAL arp 
			        JOIN	AT_PORTAL_REG R ON R.ID_REGGROUP  = arp.ID_REGGROUP 
		            JOIN 	AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP    AND r.ID  = ap.REGISTER_ID 
		            JOIN 	HU_Employee E   ON R.ID_EMPLOYEE = E.ID
					LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
					LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
					LEFT JOIN (
		                    			SELECT 
				                            p.ID ID,
				                            '[' || p.CODE || '] ' || p.NAME Name
				                        FROM AT_TIME_MANUAL p
				                        LEFT JOIN AT_FML F
				                            ON F.ID = p.MORNING_ID
				                        LEFT JOIN AT_FML F2
				                            ON F2.ID = p.AFTERNOON_ID
				                        WHERE p.ACTFLG = 'A'
				                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
				                        --AND (p.MORNING_ID = p.AFTERNOON_ID)
				                        ORDER BY p.NAME DESC
				      ) ApiType on R.Id_sign = ApiType.Id
				                        
		            WHERE ap.ID_EMPLOYEE = v_EmployeeID 
		            AND r.SVALUE IN ('LEAVE')
		            AND 
		                    (case when v_Status IN ('-2','-1') then 1
		                          when v_Status NOT IN ('-2','-1') and 
		                     ap.APPROVE_STATUS  IN (
			                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
			                            FROM (
			                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
			                                FROM DUAL
			                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
		                    ) =1 
		            AND (
							(r.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  r.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (r.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND r.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
					AND (
							(arp.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  arp.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (arp.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND arp.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
		            AND R.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.ID_SIGN END    
		            
		            --Lọc theo keyword v_KeyEmployee
		          	AND (
		                  		E.FULLNAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%' 	-- họ tên
		                  	OR  ApiType.Name  	LIKE u'%'|| v_KeyEmployee ||'%'		-- loại nghỉ
		                  	OR  ht.NAME_VN 		LIKE u'%'|| v_KeyEmployee ||'%'		-- job position
		                  	OR  ho.NAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%'		-- đơn vị
		                  	OR  r.NOTE  		LIKE u'%'|| v_KeyEmployee ||'%'		-- lý do
		                  )
            )
            ;
			
            -- thống kê thêm
            SELECT 	 SUM(CASE WHEN APPROVE_STATUS = 1 THEN 1 ELSE 0 end)
	        		,SUM(CASE WHEN APPROVE_STATUS = 2 THEN 1 ELSE 0 end)
	        		,SUM(CASE WHEN APPROVE_STATUS = 3 THEN 1 ELSE 0 end)
    		INTO 	 p_PendingCount 
				    ,p_ApprovedCount
				    ,p_RejectedCount 
	        FROM (	
	        		SELECT 	DISTINCT arp.ID, ap.APPROVE_STATUS 
	        		FROM 	AT_REGISTER_PORTAL arp 
	        		JOIN 	AT_PORTAL_REG R ON R.PARENT_ID  = arp.ID 
		             JOIN 	HU_Employee E   ON R.ID_EMPLOYEE = E.ID
		             JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID 
		             LEFT JOIN (
		                    			SELECT  p.ID ID, '[' || p.CODE || '] ' || p.NAME Name
				                        FROM AT_TIME_MANUAL p
				                        LEFT JOIN AT_FML F ON F.ID = p.MORNING_ID
				                        LEFT JOIN AT_FML F2 ON F2.ID = p.AFTERNOON_ID
				                        WHERE p.ACTFLG = 'A'
				                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
				                        --AND (p.MORNING_ID = p.AFTERNOON_ID)
				                        ORDER BY p.NAME DESC
				                        ) ApiType on R.Id_sign = ApiType.Id
					LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
					LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
		            WHERE ap.ID_EMPLOYEE = v_EmployeeID 
		            AND r.SVALUE IN ('LEAVE') 
		            AND (
							(r.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  r.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (r.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND r.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
					AND (
							(arp.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  arp.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (arp.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND arp.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
		           	AND R.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.ID_SIGN END    
		            --Lọc theo keyword v_KeyEmployee
		            -- thêm nếu BA yêu cầu các số thống kê cần trả theo filter
		          	AND (
		                  		E.FULLNAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%' 	-- họ tên
		                  	OR  ApiType.Name  	LIKE u'%'|| v_KeyEmployee ||'%'		-- loại nghỉ
		                  	OR  ht.NAME_VN 		LIKE u'%'|| v_KeyEmployee ||'%'		-- job position
		                  	OR  ho.NAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%'		-- đơn vị
		                  	OR  r.NOTE  		LIKE u'%'|| v_KeyEmployee ||'%'		-- lý do
		                  )   
            ) 
            ;
            
			SELECT 	
	        		 NVL(p_PendingCount,0)
	        		,NVL(p_ApprovedCount,0)
	        		,NVL(p_RejectedCount ,0)
	        INTO 	 p_PendingCount
	        		,p_ApprovedCount
	        		,p_RejectedCount 
	        FROM dual;                         
                         
                         
	        OPEN p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT ROWNUM STT, ID, LeaveFrom, LeaveTo, FromHour, ToHour, SymbolName, TotalHour, Remark, Status, EmployeeName, TimeCreate,
                         TypeName,
                         Note,
                         ID_REGROUP
	            FROM
	            (
		                SELECT
			                    arp.ID ID,
			                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD')  LeaveFrom,
			                    TO_CHAR(arp.TO_DATE, 'YYYY-MM-DD')  LeaveTo,
			                    arp.FROM_HOUR  FromHour,
			                    arp.TO_HOUR   ToHour,
			                    '' || arp.SVALUE || '' SymbolName,
			                    child.TotalHour,
			                    NVL(child.Remark, ' ') Remark,
			                    child.Status Status,
			                    child.EmployeeName,
			                    child.TimeCreate,
		                        child.TypeName,
		                        arp.Note Note,
		                        cast(arp.ID_REGGROUP AS varchar2(100)) ID_REGROUP 
	                	FROM 	AT_REGISTER_PORTAL arp 
	                	JOIN	
	                	(
	                			SELECT  DISTINCT 
	                					R.PARENT_ID , 
	                					NVL(ap.NOTES,' ') AS Remark,
	                					ApiType.Name TypeName,
	                					TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   TimeCreate,
			                    		CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE E.FULLNAME_EN END EmployeeName,
	                					ap.APPROVE_STATUS  AS Status ,
	                					NVL(R.HOURCOUNT , 0) TotalHour 
			                	FROM	AT_PORTAL_REG R
			                    JOIN 	AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID 
			                    JOIN 	HU_Employee E   ON R.ID_EMPLOYEE = E.ID
			                    LEFT JOIN (
			                    			SELECT  p.ID ID,
					                            	'[' || p.CODE || '] ' || p.NAME Name
					                        FROM AT_TIME_MANUAL p
					                        LEFT JOIN AT_FML F ON F.ID = p.MORNING_ID
					                        LEFT JOIN AT_FML F2 ON F2.ID = p.AFTERNOON_ID
					                        WHERE p.ACTFLG = 'A'
					                        AND (F.IS_LEAVE = -1 Or F2.IS_LEAVE = -1)
					                        --AND (p.MORNING_ID = p.AFTERNOON_ID)
					                        ORDER BY p.NAME DESC
					            ) ApiType on R.Id_sign = ApiType.Id
								LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
								LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
				                WHERE ap.ID_EMPLOYEE = v_EmployeeID 
				                AND r.SVALUE IN ('LEAVE')
			                    AND 
			                    (case when v_Status IN ('-2','-1') then 1
			                          when v_Status NOT IN ('-2','-1')  and 
			                     ap.APPROVE_STATUS  IN (
				                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
				                            FROM (
				                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
				                                FROM DUAL
				                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
			                        ) =1
				                AND (
	            						(r.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  r.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
	            					OR  (r.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND r.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
	            					)
				                AND R.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.ID_SIGN END
				                --AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR E.EMPLOYEE_CODE LIKE v_KeyEmployee )
				                --Lọc theo keyword v_KeyEmployee
			                  	AND (
			                  		E.FULLNAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%' 	-- họ tên
			                  	OR  ApiType.Name  	LIKE u'%'|| v_KeyEmployee ||'%'		-- loại nghỉ
			                  	OR  ht.NAME_VN 		LIKE u'%'|| v_KeyEmployee ||'%'		-- job position
			                  	OR  ho.NAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%'		-- đơn vị
			                  	OR  r.NOTE  		LIKE u'%'|| v_KeyEmployee ||'%'		-- lý do
			                  	OR  v_KeyEmployee   = ''
			                  	)
                  		) child ON child.PARENT_ID = arp.ID  
            			WHERE 	/*(
            						(arp.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  arp.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
            					OR  (arp.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND arp.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
            					)
		            	
		                AND */ arp.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE arp.ID_SIGN END
                ORDER BY arp.ID DESC
	            )
	        ) 
	        WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
	    END;

     p_Message := 'IsSuccess';
     p_ResponseStatus := 1;
    EXCEPTION
      WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
END;

/*Search đăng ký ĐMVS - trả về cho người duyệt*/
PROCEDURE API_SearchApprovedWLEO
				(
		p_Language IN nvarchar2,
				    p_UserID IN NUMBER,
				    p_KeyEmployee IN NVARCHAR2,
				    p_FromDate IN NVARCHAR2,
				    p_ToDate IN NVARCHAR2,
				    p_Status IN NVARCHAR2,
	    			p_Type IN NUMBER,
				    p_Page IN NUMBER,
				    p_PageSize IN NUMBER,
				    p_Cur OUT CURSOR_TYPE,
				    p_PendingCount OUT NUMBER,
				    p_ApprovedCount OUT NUMBER,
				    p_RejectedCount OUT NUMBER,
				    p_Rowcount OUT NUMBER,
				    p_Message OUT NVARCHAR2,
				    p_ResponseStatus OUT NUMBER
				)
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_Page NUMBER(10,0) := NVL(p_Page, 1);
        v_PageSize NUMBER(2,0)  := NVL(p_PageSize, 10);
        v_Status NVARCHAR2(20) := NVL(p_Status, '-2');
        v_KeyEmployee NVARCHAR2(100);
	    v_EmployeeID NUMBER(19,0);
        v_FromDateInput NVARCHAR2(20) := NVL(p_FromDate,'-1');
        v_ToDateInput NVARCHAR2(20) := NVL(p_ToDate,'-1');
	    v_temp NUMBER(10, 0) := 0;
	    v_Type NUMBER(10,0) := NVL(p_Type, -1);
    BEGIN
        p_Rowcount := 0;
        v_KeyEmployee := NVL(p_KeyEmployee, ' ');
        if v_KeyEmployee <> ' ' then
            v_KeyEmployee := '%' || p_KeyEmployee || '%' ;
	    end if;

        IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
        BEGIN
	       	SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	       ;
	    EXCEPTION
	        WHEN OTHERS THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;
	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

        BEGIN
	        SELECT 	COUNT(*) 
	        INTO 	p_Rowcount
	        FROM (
    				SELECT  DISTINCT arp.ID 
			        FROM 	AT_REGISTER_PORTAL arp 
			        JOIN	AT_PORTAL_REG R ON R.ID_REGGROUP  = arp.ID_REGGROUP 
		            JOIN 	AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP    AND r.ID  = ap.REGISTER_ID 
		            JOIN 	HU_Employee E   ON R.ID_EMPLOYEE = E.ID
					LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
					LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
					LEFT JOIN (
                                    SELECT  ID, atm.CODE , atm.NAME  
                                    FROM 	AT_TIME_MANUAL atm  
                                    WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' )
            		) apiType on r.ID_SIGN = apiType.Id            
		            WHERE ap.ID_EMPLOYEE = v_EmployeeID 
		            AND r.SVALUE IN ('WLEO')
		            AND  	(case when v_Status IN ('-2','-1') then 1
		                          when v_Status NOT IN ('-2','-1') 
		                          and  ap.APPROVE_STATUS  IN (
			                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
			                            FROM (
			                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
			                                FROM DUAL
			                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
		                    ) =1 
		            AND (
							(r.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  r.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (r.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND r.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
					AND (
							(arp.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  arp.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (arp.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND arp.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
		            AND R.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.ID_SIGN END    
		            --Lọc theo keyword v_KeyEmployee
		          	AND (
		                  		E.FULLNAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%' 	-- họ tên
		                  	OR  ApiType.Name  	LIKE u'%'|| v_KeyEmployee ||'%'		-- loại nghỉ
		                  	OR  ht.NAME_VN 		LIKE u'%'|| v_KeyEmployee ||'%'		-- job position
		                  	OR  ho.NAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%'		-- đơn vị
		                  	OR  r.NOTE  		LIKE u'%'|| v_KeyEmployee ||'%'		-- lý do
					)
            )
            ;
	        
            -- thống kê thêm
            SELECT 	
	        		 SUM(CASE WHEN APPROVE_STATUS = 1 THEN 1 ELSE 0 end)
	        		,SUM(CASE WHEN APPROVE_STATUS = 2 THEN 1 ELSE 0 end)
	        		,SUM(CASE WHEN APPROVE_STATUS = 3 THEN 1 ELSE 0 end)
    		INTO 	 p_PendingCount 
				    ,p_ApprovedCount
				    ,p_RejectedCount 
	        FROM (	
	        		SELECT 	DISTINCT arp.ID, ap.APPROVE_STATUS 
	        		FROM 	AT_REGISTER_PORTAL arp 
	        		JOIN 	AT_PORTAL_REG R ON R.PARENT_ID  = arp.ID 
		            JOIN 	HU_Employee E   ON R.ID_EMPLOYEE = E.ID
		            JOIN 	AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID 
		            LEFT JOIN (
                			SELECT  ID, atm.CODE , atm.NAME  
                            FROM 	AT_TIME_MANUAL atm  
                            WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' )
		            ) ApiType on R.Id_sign = ApiType.Id
					LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
					LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
		            WHERE ap.ID_EMPLOYEE = v_EmployeeID 
		            AND r.SVALUE IN ('WLEO') 
		            AND (
							(r.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  r.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (r.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND r.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
					AND (
							(arp.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  arp.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (arp.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND arp.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
		           	AND R.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.ID_SIGN END    
		            --Lọc theo keyword v_KeyEmployee
		            -- thêm nếu BA yêu cầu các số thống kê cần trả theo filter
		          	AND (
		                  		E.FULLNAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%' 	-- họ tên
		                  	OR  ApiType.Name  	LIKE u'%'|| v_KeyEmployee ||'%'		-- loại nghỉ
		                  	OR  ht.NAME_VN 		LIKE u'%'|| v_KeyEmployee ||'%'		-- job position
		                  	OR  ho.NAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%'		-- đơn vị
		                  	OR  r.NOTE  		LIKE u'%'|| v_KeyEmployee ||'%'		-- lý do
		          	)   
            ) 
            ;
			
			SELECT 	
	        		 NVL(p_PendingCount,0)
	        		,NVL(p_ApprovedCount,0)
	        		,NVL(p_RejectedCount ,0)
	        INTO 	 p_PendingCount
	        		,p_ApprovedCount
	        		,p_RejectedCount 
	        FROM 	dual;                         
               
	        OPEN p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT 	ROWNUM STT,
		                ID, 
		                LeaveFrom,
		                LeaveTo,
		                FromHour,
		                ToHour, 
		                SymbolName,
		                TotalHour,
		                Remark, 
		                Status, 
		                EmployeeName,
		                TimeCreate,
		                Note,
		                TypeName,
		                ID_REGROUP,
		                DM_MINUTE ,
		                VS_MINUTE 
	            FROM
	            (
	                SELECT
			                    arp.ID ID,
			                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD')  LeaveFrom,
			                    TO_CHAR(arp.TO_DATE, 'YYYY-MM-DD')  LeaveTo,
			                    arp.FROM_HOUR  FromHour,
			                    arp.TO_HOUR   ToHour,
			                    '' || arp.SVALUE || '' SymbolName,
			                    child.TotalHour,
			                    NVL(child.Remark, ' ') Remark,
			                    child.Status Status,
			                    child.EmployeeName,
			                    child.TimeCreate,
		                        child.TypeName,
		                        arp.Note Note,
		                        cast(arp.ID_REGGROUP AS varchar2(100)) ID_REGROUP ,
		                        NVL(arp.DM_MINUTE,0)DM_MINUTE,
		                        NVL(arp.VS_MINUTE,0) VS_MINUTE
	                	FROM 	AT_REGISTER_PORTAL arp 
	                	JOIN	
	                	(
	                			SELECT   
	                					R.PARENT_ID , 
	                					NVL(ap.NOTES ,'')  AS Remark,
	                					LISTAGG(cast( ApiType.Name AS varchar2(200)),', ') WITHIN GROUP(ORDER BY ApiType.Id) AS  TypeName,
	                					TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   TimeCreate,
			                    		CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE E.FULLNAME_EN END EmployeeName,
	                					ap.APPROVE_STATUS  AS Status ,
	                					NVL(R.HOURCOUNT , 0) TotalHour 
			                	FROM	AT_PORTAL_REG R
			                    JOIN 	AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID 
			                    JOIN 	HU_Employee E   ON R.ID_EMPLOYEE = E.ID
			                    LEFT JOIN (
			                    		SELECT  ID, atm.CODE , atm.NAME  
	                                    FROM 	AT_TIME_MANUAL atm  
	                                    WHERE 	ACTFLG  = 'A' AND (CODE = 'RDT' OR CODE = 'RVS' )
					            ) ApiType on R.Id_sign = ApiType.Id
								LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
								LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
				                WHERE 	ap.ID_EMPLOYEE = v_EmployeeID 
				                AND 	r.SVALUE IN ('WLEO')
			                    AND 
			                    (case when v_Status IN ('-2','-1') then 1
			                          when v_Status NOT IN ('-2','-1')  and 
			                     ap.APPROVE_STATUS  IN (
				                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
				                            FROM (
				                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
				                                FROM DUAL
				                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
			                        ) =1
				                AND (
										(r.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  r.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
									OR  (r.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND r.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
									) 
				                AND R.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.ID_SIGN END
				                --AND ( UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR E.EMPLOYEE_CODE LIKE v_KeyEmployee )
				                --Lọc theo keyword v_KeyEmployee
			                  	AND (
			                  		E.FULLNAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%' 	-- họ tên
			                  	OR  ApiType.Name  	LIKE u'%'|| v_KeyEmployee ||'%'		-- loại nghỉ
			                  	OR  ht.NAME_VN 		LIKE u'%'|| v_KeyEmployee ||'%'		-- job position
			                  	OR  ho.NAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%'		-- đơn vị
			                  	OR  r.NOTE  		LIKE u'%'|| v_KeyEmployee ||'%'		-- lý do
			                  	OR  v_KeyEmployee   = ''
			                  	)
			                  	GROUP BY 
			                  			R.PARENT_ID , 
	                					R.NOTE , 
	                					NVL(ap.NOTES ,''),
	                					TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS'),
			                    		E.FULLNAME_VN ,
	                					ap.APPROVE_STATUS,
	                					NVL(R.HOURCOUNT , 0) 
                  		) child ON child.PARENT_ID = arp.ID  
            			WHERE 	(arp.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') )
		            	AND (arp.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
		                --AND arp.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE arp.ID_SIGN END
               			ORDER BY arp.ID DESC
	            )
	        ) 
	        WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
	    END;

     p_Message := 'IsSuccess';
     p_ResponseStatus := 1;
    EXCEPTION
      WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
END;

/*Search đăng ký làm thêm - trả về cho người phê duyệt*/
PROCEDURE API_SearchApprovedOT
				(
		p_Language IN nvarchar2,
				    p_UserID IN NUMBER,
				    p_KeyEmployee IN NVARCHAR2,
				    p_FromDate IN NVARCHAR2,
				    p_ToDate IN NVARCHAR2,
				    p_Status IN NVARCHAR2,
				    p_Type IN NUMBER,
				    p_Page IN NUMBER,
				    p_PageSize IN NUMBER,
				    p_Cur OUT CURSOR_TYPE,
				    p_PendingCount OUT NUMBER,
				    p_ApprovedCount OUT NUMBER,
				    p_RejectedCount OUT NUMBER,
				    p_Rowcount OUT NUMBER,
				    p_Message OUT NVARCHAR2,
				    p_ResponseStatus OUT NUMBER
				)
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_Page NUMBER(10,0) := NVL(p_Page, 1);
        v_PageSize NUMBER(2,0)  := NVL(p_PageSize, 10);
        v_Status NVARCHAR2(20) := NVL(p_Status, '-2');
        v_KeyEmployee NVARCHAR2(100);
	    v_EmployeeID NUMBER(19,0);
        v_FromDateInput NVARCHAR2(20) := NVL(p_FromDate,'2020-01-01');
        v_ToDateInput NVARCHAR2(20) := NVL(p_ToDate,'3000-01-01');
	    v_temp NUMBER(10, 0) := 0;
	    v_Type NUMBER(10,0) := NVL(p_Type, -1);
    BEGIN
        p_Rowcount := 0;
	     v_KeyEmployee := NVL(p_KeyEmployee, ' ');
        if v_KeyEmployee <> ' ' then
            v_KeyEmployee := '%' || p_KeyEmployee || '%' ;
	    end if;

        IF v_UserID = -1 THEN
	        p_Message := 'IsUserIDNull';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;
        BEGIN
	       	SELECT 	he.ID INTO v_EmployeeID 
	       	FROM 	HU_EMPLOYEE he 
	       	JOIN 	SE_USER su ON su.EMPLOYEE_CODE  =he.EMPLOYEE_CODE  
	       WHERE 	su.ID = v_UserID 
	       AND 		(( he.WORK_STATUS  = 257  AND SYSDATE  < he.TER_EFFECT_DATE )  OR (he.WORK_STATUS <> 257)  )
	       AND rownum = 1 
	       ;
	    EXCEPTION
	        WHEN OTHERS THEN
	            p_Message := 'UserNotConfig';
	            p_ResponseStatus := -600;
	            RETURN;
	    END;
	    SELECT COUNT(*) INTO v_temp FROM SE_USER WHERE ID = v_UserID;
	    IF v_temp < 1 THEN
	        p_Message := 'UserIsNotFound';
	        p_ResponseStatus := -600;
	        RETURN;
	    END IF;

        BEGIN
	        SELECT 	COUNT(*) 
	        INTO 	p_Rowcount
			FROM (
					SELECT DISTINCT r.PARENT_ID 
					
			        FROM AT_PORTAL_REG R
		            JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
		            JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID 
		            Left join (SELECT  ID,  NAME_VN  AS NAME
                            FROM 	OT_OTHER_LIST ool 
                            WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                            AND 	ACTFLG  = 'A'
                   ) apiType on R.ID_SIGN = apiType.ID
					LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
					LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
		            WHERE ap.ID_EMPLOYEE = v_EmployeeID 
		            AND r.SVALUE IN ('OVERTIME')
		            AND 
		                    (case when v_Status IN ('-2','-1') then 1
		                          when v_Status NOT IN ('-2','-1') and 
		                     ap.APPROVE_STATUS  IN (
			                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
			                            FROM (
			                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
			                                FROM DUAL
			                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
		                    ) =1
		            
	                AND (
							(r.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  r.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (r.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND r.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						) 
		            AND (case when v_KeyEmployee = ' ' then 1
		            when v_KeyEmployee <> ' ' and UPPER(E.FULLNAME_VN) LIKE UPPER(v_KeyEmployee) OR E.EMPLOYEE_CODE LIKE v_KeyEmployee then 1 else 0 end ) =1 
		     		AND R.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.ID_SIGN END     
		            --Lọc theo keyword v_KeyEmployee
		          	AND (
		                  		E.FULLNAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%' 	-- họ tên
		                  	OR  ApiType.Name  	LIKE u'%'|| v_KeyEmployee ||'%'		-- loại nghỉ
		                  	OR  ht.NAME_VN 		LIKE u'%'|| v_KeyEmployee ||'%'		-- job position
		                  	OR  ho.NAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%'		-- đơn vị
		                  	OR  r.NOTE  		LIKE u'%'|| v_KeyEmployee ||'%'		-- lý do
		            )
            )
            ;
			
            -- thống kê thêm
            SELECT 	
	        		 SUM(CASE WHEN APPROVE_STATUS = 1 THEN 1 ELSE 0 end)
	        		,SUM(CASE WHEN APPROVE_STATUS = 2 THEN 1 ELSE 0 end)
	        		,SUM(CASE WHEN APPROVE_STATUS = 3 THEN 1 ELSE 0 end)
    		INTO 	 p_PendingCount 
				    ,p_ApprovedCount
				    ,p_RejectedCount 
	        FROM (
				    SELECT DISTINCT R.PARENT_ID , ap.APPROVE_STATUS 
					FROM AT_PORTAL_REG R
		            JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID
		            JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID 
		            Left join (SELECT  ID,  NAME_VN  AS NAME
                            FROM 	OT_OTHER_LIST ool 
                            WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
                            AND 	ACTFLG  = 'A'
                   ) apiType on R.ID_SIGN = apiType.ID 
					LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
					LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
		            WHERE ap.ID_EMPLOYEE = v_EmployeeID 
		            AND r.SVALUE IN ('OVERTIME') 
		            AND (
							(r.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  r.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (r.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND r.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						) 
		           	AND R.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.ID_SIGN END    
		            --Lọc theo keyword v_KeyEmployee
		            -- thêm nếu BA yêu cầu các số thống kê cần trả theo filter
		          	AND (
		                  		E.FULLNAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%' 	-- họ tên
		                  	OR  ApiType.Name  	LIKE u'%'|| v_KeyEmployee ||'%'		-- loại nghỉ
		                  	OR  ht.NAME_VN 		LIKE u'%'|| v_KeyEmployee ||'%'		-- job position
		                  	OR  ho.NAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%'		-- đơn vị
		                  	OR  r.NOTE  		LIKE u'%'|| v_KeyEmployee ||'%'		-- lý do
		                  )   
           )  
            ;
            
			SELECT 	
	        		 NVL(p_PendingCount,0)
	        		,NVL(p_ApprovedCount,0)
	        		,NVL(p_RejectedCount ,0)
	        INTO 	 p_PendingCount
	        		,p_ApprovedCount
	        		,p_RejectedCount 
	        FROM dual;  


	        OPEN p_Cur FOR
	        SELECT *
	        FROM
	        (
	            SELECT ROWNUM STT,
		                ID,
		                LeaveFrom,
		                LeaveTo,
		                FromHour, 
		                ToHour, 
		                SymbolName, 
		                NVL(TotalHour,0) TotalHour,
		                Remark,
		                Status,
		                EmployeeName,
		                TimeCreate,
		                Note,
		                TypeName,
		                ID_REGROUP 
	            FROM
	            (
	                SELECT 	DISTINCT 
	                		arp.ID ,
		                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD')  LeaveFrom,
		                    TO_CHAR(arp.TO_DATE, 'YYYY-MM-DD')  LeaveTo,
		                    TO_CHAR(max(R.FROM_HOUR), 'YYYY-MM-DD HH24:MI:SS')  FromHour,
		                    TO_CHAR(max(R.TO_HOUR), 'YYYY-MM-DD HH24:MI:SS')   ToHour,
		                    '' || arp.SVALUE || '' SymbolName,
		                    round(to_number(r.TO_Hour - r.From_Hour) * 24,1) TotalHour,
		                    NVL(ap.NOTES ,' ')  Remark,
		                    arp.Status_ID  Status,
		                    CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE E.FULLNAME_EN END EmployeeName,
		                    TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   TimeCreate,
	                        NVL(arp.NOTE , ' ')  Note,
	                        apiType.Name TypeName ,
	                        cast( arp.ID_REGGROUP AS varchar2(100)) ID_REGROUP  
	                FROM AT_REGISTER_PORTAL arp 
	                JOIN AT_PORTAL_REG R ON R.PARENT_ID  = arp.ID  
                    JOIN AT_PORTAL_APP ap ON ap.ID_REGGROUP  = R.ID_REGGROUP   AND r.ID  = ap.REGISTER_ID 
                    JOIN HU_Employee E   ON R.ID_EMPLOYEE = E.ID 
					LEFT JOIN HU_TITLE ht  ON ht.ID  = e.TITLE_ID 
					LEFT JOIN HU_ORGANIZATION ho  ON ho.ID  = e.ORG_ID 
                    Left join (	SELECT  ID,  CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NAME_VN ELSE NAME_EN end  AS NAME
	                            FROM 	OT_OTHER_LIST ool 
	                            WHERE 	TYPE_ID IN (SELECT id FROM OT_OTHER_LIST_TYPE WHERE code = 'HS_OT')
	                            AND 	ACTFLG  = 'A'
                    ) apiType on R.ID_SIGN = apiType.ID
	                WHERE ap.ID_EMPLOYEE = v_EmployeeID 
	                AND r.SVALUE IN ('OVERTIME')
	                AND 
                    (case when v_Status IN ('-2','-1') then 1
		                  when v_Status NOT IN ('-2','-1') and 
                     ap.APPROVE_STATUS  IN (
	                            SELECT DISTINCT TO_NUMBER(IVALUE) VALUE
	                            FROM (
	                                SELECT LEVEL AS IAB, REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) AS IVALUE
	                                FROM DUAL
	                                  CONNECT BY REGEXP_SUBSTR(v_Status, '[^,]+', 1, LEVEL) IS NOT NULL)) then 1 else 0 end
                        ) =1
                
	                AND (
							(r.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  r.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (r.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND r.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
					AND (
							(arp.FROM_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND  arp.FROM_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD'))
						OR  (arp.TO_DATE >=  TO_DATE(v_FromDateInput,'YYYY-MM-DD') AND arp.TO_DATE <=  TO_DATE(v_ToDateInput,'YYYY-MM-DD') )
						)
	           		AND R.ID_SIGN = CASE WHEN ( v_Type != -1 ) THEN v_Type ELSE R.ID_SIGN END    
	            	AND (
			                  		E.FULLNAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%' 	-- họ tên
			                  	OR  ApiType.Name  	LIKE u'%'|| v_KeyEmployee ||'%'		-- loại nghỉ
			                  	OR  ht.NAME_VN 		LIKE u'%'|| v_KeyEmployee ||'%'		-- job position
			                  	OR  ho.NAME_VN  	LIKE u'%'|| v_KeyEmployee ||'%'		-- đơn vị
			                  	OR  r.NOTE  		LIKE u'%'|| v_KeyEmployee ||'%'		-- lý do
			        )   
					GROUP BY 
							arp.ID ,
		                    TO_CHAR(arp.FROM_DATE, 'YYYY-MM-DD')  ,
		                    TO_CHAR(arp.TO_DATE, 'YYYY-MM-DD')  , 
		                    '' || arp.SVALUE || '' ,
		                    round(to_number(r.TO_Hour - r.From_Hour) * 24,1) ,
		                    NVL(ap.NOTES ,' ')  ,
		                    arp.Status_ID  ,
		                   CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then E.FULLNAME_VN ELSE E.FULLNAME_EN END ,
		                    TO_CHAR(R.CREATED_DATE,'YYYY-MM-DD HH24:MI:SS')   ,
	                        NVL(arp.NOTE , ' ')  ,
	                        apiType.Name  ,
	                        cast( arp.ID_REGGROUP AS varchar2(100))
	                ORDER BY arp.ID  DESC
	            ) a
	        ) a
	        WHERE STT > ((v_PAGE - 1)* v_PAGESIZE) AND STT < (v_PAGE * v_PAGESIZE + 1);
	    END;

     p_Message := 'IsSuccess';
     p_ResponseStatus := 1;
    EXCEPTION
      WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
END;
 
-- Lấy ds cho phép chấm GPS 
PROCEDURE API_GetAllowGPSLocation
				(
		p_Language IN nvarchar2,
				    p_UserID IN NUMBER,
				    p_WorkDay IN nvarchar2,
				    p_Shift_Info OUT NVARCHAR2,
				    p_Cur OUT CURSOR_TYPE, 
				    p_Message OUT NVARCHAR2,
				    p_ResponseStatus OUT NUMBER
				)
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_WorkDay nvarchar2(20) := p_WorkDay;
        v_WorkDayDate DATE ;
        v_EmpId number(19,0);
    BEGIN
	    
	    -- Chuyển đổi thời gian
	    BEGIN
		    SELECT TO_DATE(v_WorkDay,'YYYY-MM-DD') INTO v_WorkDayDate FROM dual;
		EXCEPTION WHEN OTHERS THEN
			p_Message := 'WorkDay format is not in YYYY-MM-DD';
			p_ResponseStatus := -600;
			RETURN;
		END;
	    -- Lấy ID nhân viên
	    BEGIN
		    SELECT  ID 
		    INTO 	v_EmpId 
		    FROM 	HU_EMPLOYEE he 
		    WHERE 	he.EMPLOYEE_CODE  IN (SELECT EMPLOYEE_CODE FROM se_user WHERE id = v_UserId)
		    AND 	rownum = 1
		    ORDER BY id DESC ;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			p_Message := 'Employee is not found';
			p_ResponseStatus := -600;
			RETURN;
		END;
	    
		-- lấy thông tin ca 
		BEGIN
		    SELECT  as2.CODE || u' - ' || CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then as2.NAME_VN  ELSE as2.NAME_EN END 
		    INTO 	p_Shift_Info 
		    FROM 	AT_WORKSIGN aw 
		    LEFT JOIN
		    		AT_SHIFT as2 ON as2.id = aw.SHIFT_ID
		    WHERE 	aw.EMPLOYEE_ID  = v_EmpId 
		   	AND 	TO_CHAR(aw.WORKINGDAY ,'YYYY-MM-DD' )= p_WorkDay
		    ORDER BY aw.id DESC ;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			p_Message := 'Shift and work sign are not found ' || p_WorkDay || '+' || to_char(v_EmpId);
			p_ResponseStatus := -600;
			RETURN;
		END;

		--p_Rowcount:= 0;
		-- trả về giá trị 
		OPEN p_Cur FOR 
		select 	code,
				CASE WHEN NVL(p_Language,'vi-VN')= 'vi-VN' then NAME_VN ELSE NAME_EN END   AS Name, 
				ATTRIBUTE1  AS Longitude,
				ATTRIBUTE2  AS Latitude,
				ATTRIBUTE3  AS Radius
		from 	ot_other_list 
		where 	type_id in (select id from ot_other_list_type where code = 'GPS_LOCATION')
		;
	 	p_Message := u'Success';
	 	p_ResponseStatus := 1;
	 EXCEPTION
      WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;


	
-- Cập nhật thời gian chấm công vào bảng  AT_SWIPE_DATA
PROCEDURE API_TimeCheckIn
				(
		p_Language IN nvarchar2,
				    p_UserID IN NUMBER,
				    p_WorkDay nvarchar2,
				    p_LocationCode IN nvarchar2,
				    p_Longitude IN NVARCHAR2,
				    p_Latitude IN NVARCHAR2,
				    p_Message OUT NVARCHAR2,
				    p_ResponseStatus OUT NUMBER
				)
    AS
        v_UserId NUMBER(19,0) := NVL(p_UserId, -1);
        v_UserName nvarchar2(50) ;
        v_EmpId number(19,0);
        v_location_id number(19,0);
        v_WorkDayDate nvarchar2(20);  
        v_iTimeID number(19,0);
    BEGIN
	    
	    -- Chuyển đổi thời gian
	    BEGIN
		    SELECT TO_DATE(p_WorkDay,'YYYY-MM-DD') INTO v_WorkDayDate FROM dual;
		EXCEPTION WHEN OTHERS THEN
			p_Message := 'WorkDay format is not in YYYY-MM-DD';
			p_ResponseStatus := -600;
			RETURN;
		END;
	    -- Lấy ID nhân viên
	    BEGIN
		    SELECT  ID , he.ITIME_ID 
		    INTO 	v_EmpId , v_iTimeID 
		    FROM 	HU_EMPLOYEE he 
		    WHERE 	he.EMPLOYEE_CODE  IN (SELECT EMPLOYEE_CODE FROM se_user WHERE id = v_UserId)
		    AND 	rownum = 1
		    ORDER BY id DESC ;
		   
		    SELECT 	userName
		    INTO 	v_UserName
		    FROM 	se_user 
		    WHERE 	id = v_UserId 
		    ;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			p_Message := 'Employee is not found';
			p_ResponseStatus := -600;
			RETURN;
		END;
	    
		-- lấy thông tin id location hệ thống
		BEGIN
		    SELECT  ool.id 
		    INTO 	v_location_id 
		    FROM 	OT_OTHER_LIST ool 
		    WHERE 	CODE = p_LocationCode
		   	AND 	rownum = 1;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			p_Message := 'Location code is not found';
			p_ResponseStatus := -600;
			RETURN;
		END;
	
		-- Check backend phạm vi được phép sử dụng
		
		-- Lưu dữ liệu bảng chấm công
		-- =====================================================
		INSERT INTO AT_SWIPE_DATA
		(ID, ITIME_ID, VALTIME, TERMINAL_ID, CREATED_DATE, CREATED_BY, CREATED_LOG, MODIFIED_DATE, MODIFIED_BY, MODIFIED_LOG, ORG_ID, WORKINGDAY) 
		SELECT 
				NVL((SELECT max(id) FROM AT_SWIPE_DATA),0) +1, 
				he.ITIME_ID , 
				SYSDATE, v_location_id, SYSDATE, v_UserName , '(' || p_Latitude  || ',' || p_Longitude || ')', NULL, NULL, NULL, 
				NULL, SYSDATE 
		FROM 	HU_EMPLOYEE he 
		WHERE  	he.id = v_EmpId 
		;
		-- insert data inout
		
			PKG_ATTENDANCE_BUSINESS.UPDATE_DATAINOUT(
								 P_ITIMEID => v_iTimeID ,
	                             P_USERNAME => v_UserName,
	                             P_FROMDATE => SYSDATE,
	                             P_ENDDATE => SYSDATE); 
		
	 	p_Message := u'Success';
	 	p_ResponseStatus := 1;
	 EXCEPTION  WHEN OTHERS THEN 
	        p_Message :=  u'L\1ed7i h\1ec7 th\1ed1ng API nghi\1ec7p v\1ee5';
	        p_ResponseStatus := -99;
	END;


	


END PKG_API_MOBILE_OM_DEV;
